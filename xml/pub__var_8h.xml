<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="pub__var_8h" kind="file" language="C++">
    <compoundname>pub_var.h</compoundname>
    <includes refid="def_8h" local="yes">scip/def.h</includes>
    <includes refid="type__retcode_8h" local="yes">scip/type_retcode.h</includes>
    <includes refid="type__misc_8h" local="yes">scip/type_misc.h</includes>
    <includes refid="type__history_8h" local="yes">scip/type_history.h</includes>
    <includes refid="type__var_8h" local="yes">scip/type_var.h</includes>
    <includes refid="type__implics_8h" local="yes">scip/type_implics.h</includes>
    <includes refid="type__cons_8h" local="yes">scip/type_cons.h</includes>
    <includedby refid="scip_8h" local="yes">scip.h</includedby>
    <incdepgraph>
      <node id="15200">
        <label>stdarg.h</label>
      </node>
      <node id="15197">
        <label>assert.h</label>
      </node>
      <node id="15196">
        <label>float.h</label>
      </node>
      <node id="15206">
        <label>scip/type_cons.h</label>
        <link refid="type__cons_8h"/>
        <childnode refid="15191" relation="include">
        </childnode>
        <childnode refid="15198" relation="include">
        </childnode>
        <childnode refid="15207" relation="include">
        </childnode>
        <childnode refid="15204" relation="include">
        </childnode>
        <childnode refid="15208" relation="include">
        </childnode>
        <childnode refid="15209" relation="include">
        </childnode>
        <childnode refid="15210" relation="include">
        </childnode>
        <childnode refid="15211" relation="include">
        </childnode>
      </node>
      <node id="15205">
        <label>scip/type_implics.h</label>
        <link refid="type__implics_8h"/>
      </node>
      <node id="15193">
        <label>stdint.h</label>
      </node>
      <node id="15207">
        <label>scip/type_result.h</label>
        <link refid="type__result_8h"/>
      </node>
      <node id="15210">
        <label>scip/type_timing.h</label>
        <link refid="type__timing_8h"/>
        <childnode refid="15191" relation="include">
        </childnode>
        <childnode refid="15207" relation="include">
        </childnode>
        <childnode refid="15209" relation="include">
        </childnode>
      </node>
      <node id="15209">
        <label>scip/type_scip.h</label>
        <link refid="type__scip_8h"/>
      </node>
      <node id="15191">
        <label>scip/def.h</label>
        <link refid="def_8h"/>
        <childnode refid="15192" relation="include">
        </childnode>
        <childnode refid="15193" relation="include">
        </childnode>
        <childnode refid="15194" relation="include">
        </childnode>
        <childnode refid="15195" relation="include">
        </childnode>
        <childnode refid="15196" relation="include">
        </childnode>
        <childnode refid="15197" relation="include">
        </childnode>
        <childnode refid="15198" relation="include">
        </childnode>
        <childnode refid="15199" relation="include">
        </childnode>
      </node>
      <node id="15203">
        <label>scip/type_history.h</label>
        <link refid="type__history_8h"/>
      </node>
      <node id="15195">
        <label>limits.h</label>
      </node>
      <node id="15211">
        <label>scip/type_heur.h</label>
        <link refid="type__heur_8h"/>
        <childnode refid="15191" relation="include">
        </childnode>
        <childnode refid="15209" relation="include">
        </childnode>
        <childnode refid="15207" relation="include">
        </childnode>
        <childnode refid="15210" relation="include">
        </childnode>
      </node>
      <node id="15208">
        <label>scip/type_sol.h</label>
        <link refid="type__sol_8h"/>
      </node>
      <node id="15202">
        <label>scip/type_misc.h</label>
        <link refid="type__misc_8h"/>
        <childnode refid="15191" relation="include">
        </childnode>
      </node>
      <node id="15194">
        <label>math.h</label>
      </node>
      <node id="15198">
        <label>scip/type_retcode.h</label>
        <link refid="type__retcode_8h"/>
      </node>
      <node id="15199">
        <label>scip/pub_message.h</label>
        <link refid="pub__message_8h"/>
        <childnode refid="15200" relation="include">
        </childnode>
        <childnode refid="15191" relation="include">
        </childnode>
        <childnode refid="15201" relation="include">
        </childnode>
      </node>
      <node id="15201">
        <label>scip/type_message.h</label>
        <link refid="type__message_8h"/>
        <childnode refid="15192" relation="include">
        </childnode>
      </node>
      <node id="15192">
        <label>stdio.h</label>
      </node>
      <node id="15190">
        <label>pub_var.h</label>
        <link refid="pub_var.h"/>
        <childnode refid="15191" relation="include">
        </childnode>
        <childnode refid="15198" relation="include">
        </childnode>
        <childnode refid="15202" relation="include">
        </childnode>
        <childnode refid="15203" relation="include">
        </childnode>
        <childnode refid="15204" relation="include">
        </childnode>
        <childnode refid="15205" relation="include">
        </childnode>
        <childnode refid="15206" relation="include">
        </childnode>
      </node>
      <node id="15204">
        <label>scip/type_var.h</label>
        <link refid="type__var_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="15300">
        <label>heur_zeroobj.h</label>
        <link refid="heur__zeroobj_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15345">
        <label>reader_pip.h</label>
        <link refid="reader__pip_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15260">
        <label>heur_clique.h</label>
        <link refid="heur__clique_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15312">
        <label>presol_domcol.h</label>
        <link refid="presol__domcol_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15289">
        <label>heur_shiftandpropagate.h</label>
        <link refid="heur__shiftandpropagate_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15360">
        <label>sepa_intobj.h</label>
        <link refid="sepa__intobj_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15227">
        <label>compr_largestrepr.h</label>
        <link refid="compr__largestrepr_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15253">
        <label>cons_varbound.h</label>
        <link refid="cons__varbound_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15217">
        <label>branch_distribution.h</label>
        <link refid="branch__distribution_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15229">
        <label>cons_abspower.h</label>
        <link refid="cons__abspower_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15290">
        <label>heur_shifting.h</label>
        <link refid="heur__shifting_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15254">
        <label>cons_xor.h</label>
        <link refid="cons__xor_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15248">
        <label>cons_setppc.h</label>
        <link refid="cons__setppc_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15364">
        <label>sepa_strongcg.h</label>
        <link refid="sepa__strongcg_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15299">
        <label>heur_veclendiving.h</label>
        <link refid="heur__veclendiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15358">
        <label>sepa_gomory.h</label>
        <link refid="sepa__gomory_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15324">
        <label>prop_genvbounds.h</label>
        <link refid="prop__genvbounds_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15239">
        <label>cons_knapsack.h</label>
        <link refid="cons__knapsack_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15265">
        <label>heur_dualval.h</label>
        <link refid="heur__dualval_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15269">
        <label>heur_guideddiving.h</label>
        <link refid="heur__guideddiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15307">
        <label>nodesel_restartdfs.h</label>
        <link refid="nodesel__restartdfs_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15283">
        <label>heur_randrounding.h</label>
        <link refid="heur__randrounding_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15347">
        <label>reader_rlp.h</label>
        <link refid="reader__rlp_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15317">
        <label>presol_implics.h</label>
        <link refid="presol__implics_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15282">
        <label>heur_pscostdiving.h</label>
        <link refid="heur__pscostdiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15240">
        <label>cons_linear.h</label>
        <link refid="cons__linear_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15285">
        <label>heur_reoptsols.h</label>
        <link refid="heur__reoptsols_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15313">
        <label>presol_dualagg.h</label>
        <link refid="presol__dualagg_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15325">
        <label>prop_obbt.h</label>
        <link refid="prop__obbt_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15355">
        <label>sepa_disjunctive.h</label>
        <link refid="sepa__disjunctive_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15293">
        <label>heur_trivial.h</label>
        <link refid="heur__trivial_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15246">
        <label>cons_pseudoboolean.h</label>
        <link refid="cons__pseudoboolean_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15316">
        <label>presol_implfree.h</label>
        <link refid="presol__implfree_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15296">
        <label>heur_twoopt.h</label>
        <link refid="heur__twoopt_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15343">
        <label>reader_osil.h</label>
        <link refid="reader__osil_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15297">
        <label>heur_undercover.h</label>
        <link refid="heur__undercover_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15241">
        <label>cons_linking.h</label>
        <link refid="cons__linking_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15365">
        <label>sepa_zerohalf.h</label>
        <link refid="sepa__zerohalf_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15359">
        <label>sepa_impliedbounds.h</label>
        <link refid="sepa__impliedbounds_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15274">
        <label>heur_localbranching.h</label>
        <link refid="heur__localbranching_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15357">
        <label>sepa_flowcover.h</label>
        <link refid="sepa__flowcover_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15275">
        <label>heur_mutation.h</label>
        <link refid="heur__mutation_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15233">
        <label>cons_conjunction.h</label>
        <link refid="cons__conjunction_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15338">
        <label>reader_fzn.h</label>
        <link refid="reader__fzn_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15294">
        <label>heur_trivialnegation.h</label>
        <link refid="heur__trivialnegation_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15305">
        <label>nodesel_estimate.h</label>
        <link refid="nodesel__estimate_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15352">
        <label>sepa_clique.h</label>
        <link refid="sepa__clique_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15356">
        <label>sepa_eccuts.h</label>
        <link refid="sepa__eccuts_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15318">
        <label>presol_inttobinary.h</label>
        <link refid="presol__inttobinary_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15262">
        <label>heur_crossover.h</label>
        <link refid="heur__crossover_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15280">
        <label>heur_oneopt.h</label>
        <link refid="heur__oneopt_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15333">
        <label>reader_ccg.h</label>
        <link refid="reader__ccg_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15298">
        <label>heur_vbounds.h</label>
        <link refid="heur__vbounds_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15363">
        <label>sepa_rapidlearning.h</label>
        <link refid="sepa__rapidlearning_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15292">
        <label>heur_subnlp.h</label>
        <link refid="heur__subnlp_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15332">
        <label>reader_bnd.h</label>
        <link refid="reader__bnd_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15311">
        <label>presol_convertinttobin.h</label>
        <link refid="presol__convertinttobin_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15256">
        <label>disp_default.h</label>
        <link refid="disp__default_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15322">
        <label>presol_tworowbnd.h</label>
        <link refid="presol__tworowbnd_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15231">
        <label>cons_bivariate.h</label>
        <link refid="cons__bivariate_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15349">
        <label>reader_wbo.h</label>
        <link refid="reader__wbo_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15263">
        <label>heur_dins.h</label>
        <link refid="heur__dins_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15234">
        <label>cons_countsols.h</label>
        <link refid="cons__countsols_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15306">
        <label>nodesel_hybridestim.h</label>
        <link refid="nodesel__hybridestim_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15251">
        <label>cons_sos2.h</label>
        <link refid="cons__sos2_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15344">
        <label>reader_pbm.h</label>
        <link refid="reader__pbm_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15278">
        <label>heur_octane.h</label>
        <link refid="heur__octane_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15219">
        <label>branch_inference.h</label>
        <link refid="branch__inference_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15225">
        <label>branch_random.h</label>
        <link refid="branch__random_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15301">
        <label>heur_zirounding.h</label>
        <link refid="heur__zirounding_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15326">
        <label>prop_probing.h</label>
        <link refid="prop__probing_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15252">
        <label>cons_superindicator.h</label>
        <link refid="cons__superindicator_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15346">
        <label>reader_ppm.h</label>
        <link refid="reader__ppm_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15341">
        <label>reader_mps.h</label>
        <link refid="reader__mps_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15354">
        <label>sepa_cmir.h</label>
        <link refid="sepa__cmir_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15334">
        <label>reader_cip.h</label>
        <link refid="reader__cip_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15215">
        <label>scipdefplugins.h</label>
        <link refid="scipdefplugins_8h"/>
      </node>
      <node id="15281">
        <label>heur_proximity.h</label>
        <link refid="heur__proximity_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15226">
        <label>branch_relpscost.h</label>
        <link refid="branch__relpscost_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15295">
        <label>heur_trysol.h</label>
        <link refid="heur__trysol_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15287">
        <label>heur_rootsoldiving.h</label>
        <link refid="heur__rootsoldiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15223">
        <label>branch_nodereopt.h</label>
        <link refid="branch__nodereopt_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15362">
        <label>sepa_oddcycle.h</label>
        <link refid="sepa__oddcycle_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15243">
        <label>cons_nonlinear.h</label>
        <link refid="cons__nonlinear_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15224">
        <label>branch_pscost.h</label>
        <link refid="branch__pscost_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15302">
        <label>nodesel_bfs.h</label>
        <link refid="nodesel__bfs_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15222">
        <label>branch_multaggr.h</label>
        <link refid="branch__multaggr_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15238">
        <label>cons_integral.h</label>
        <link refid="cons__integral_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15330">
        <label>prop_vbounds.h</label>
        <link refid="prop__vbounds_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15331">
        <label>pub_dive.h</label>
        <link refid="pub__dive_8h"/>
      </node>
      <node id="15267">
        <label>heur_fixandinfer.h</label>
        <link refid="heur__fixandinfer_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15230">
        <label>cons_and.h</label>
        <link refid="cons__and_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15214">
        <label>branch_allfullstrong.h</label>
        <link refid="branch__allfullstrong_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15308">
        <label>nodesel_uct.h</label>
        <link refid="nodesel__uct_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15286">
        <label>heur_rins.h</label>
        <link refid="heur__rins_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15272">
        <label>heur_intshifting.h</label>
        <link refid="heur__intshifting_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15228">
        <label>compr_weakcompr.h</label>
        <link refid="compr__weakcompr_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15220">
        <label>branch_leastinf.h</label>
        <link refid="branch__leastinf_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15250">
        <label>cons_sos1.h</label>
        <link refid="cons__sos1_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15304">
        <label>nodesel_dfs.h</label>
        <link refid="nodesel__dfs_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15261">
        <label>heur_coefdiving.h</label>
        <link refid="heur__coefdiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15303">
        <label>nodesel_breadthfirst.h</label>
        <link refid="nodesel__breadthfirst_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15327">
        <label>prop_pseudoobj.h</label>
        <link refid="prop__pseudoobj_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15213">
        <label>scip.h</label>
        <link refid="scip_8h"/>
        <childnode refid="15214" relation="include">
        </childnode>
        <childnode refid="15216" relation="include">
        </childnode>
        <childnode refid="15217" relation="include">
        </childnode>
        <childnode refid="15218" relation="include">
        </childnode>
        <childnode refid="15219" relation="include">
        </childnode>
        <childnode refid="15220" relation="include">
        </childnode>
        <childnode refid="15221" relation="include">
        </childnode>
        <childnode refid="15222" relation="include">
        </childnode>
        <childnode refid="15223" relation="include">
        </childnode>
        <childnode refid="15224" relation="include">
        </childnode>
        <childnode refid="15225" relation="include">
        </childnode>
        <childnode refid="15226" relation="include">
        </childnode>
        <childnode refid="15227" relation="include">
        </childnode>
        <childnode refid="15228" relation="include">
        </childnode>
        <childnode refid="15229" relation="include">
        </childnode>
        <childnode refid="15230" relation="include">
        </childnode>
        <childnode refid="15231" relation="include">
        </childnode>
        <childnode refid="15232" relation="include">
        </childnode>
        <childnode refid="15233" relation="include">
        </childnode>
        <childnode refid="15234" relation="include">
        </childnode>
        <childnode refid="15235" relation="include">
        </childnode>
        <childnode refid="15236" relation="include">
        </childnode>
        <childnode refid="15237" relation="include">
        </childnode>
        <childnode refid="15238" relation="include">
        </childnode>
        <childnode refid="15239" relation="include">
        </childnode>
        <childnode refid="15240" relation="include">
        </childnode>
        <childnode refid="15241" relation="include">
        </childnode>
        <childnode refid="15242" relation="include">
        </childnode>
        <childnode refid="15243" relation="include">
        </childnode>
        <childnode refid="15244" relation="include">
        </childnode>
        <childnode refid="15245" relation="include">
        </childnode>
        <childnode refid="15246" relation="include">
        </childnode>
        <childnode refid="15247" relation="include">
        </childnode>
        <childnode refid="15248" relation="include">
        </childnode>
        <childnode refid="15249" relation="include">
        </childnode>
        <childnode refid="15250" relation="include">
        </childnode>
        <childnode refid="15251" relation="include">
        </childnode>
        <childnode refid="15252" relation="include">
        </childnode>
        <childnode refid="15253" relation="include">
        </childnode>
        <childnode refid="15254" relation="include">
        </childnode>
        <childnode refid="15255" relation="include">
        </childnode>
        <childnode refid="15256" relation="include">
        </childnode>
        <childnode refid="15257" relation="include">
        </childnode>
        <childnode refid="15258" relation="include">
        </childnode>
        <childnode refid="15259" relation="include">
        </childnode>
        <childnode refid="15260" relation="include">
        </childnode>
        <childnode refid="15261" relation="include">
        </childnode>
        <childnode refid="15262" relation="include">
        </childnode>
        <childnode refid="15263" relation="include">
        </childnode>
        <childnode refid="15264" relation="include">
        </childnode>
        <childnode refid="15265" relation="include">
        </childnode>
        <childnode refid="15266" relation="include">
        </childnode>
        <childnode refid="15267" relation="include">
        </childnode>
        <childnode refid="15268" relation="include">
        </childnode>
        <childnode refid="15269" relation="include">
        </childnode>
        <childnode refid="15270" relation="include">
        </childnode>
        <childnode refid="15271" relation="include">
        </childnode>
        <childnode refid="15272" relation="include">
        </childnode>
        <childnode refid="15273" relation="include">
        </childnode>
        <childnode refid="15274" relation="include">
        </childnode>
        <childnode refid="15275" relation="include">
        </childnode>
        <childnode refid="15276" relation="include">
        </childnode>
        <childnode refid="15277" relation="include">
        </childnode>
        <childnode refid="15278" relation="include">
        </childnode>
        <childnode refid="15279" relation="include">
        </childnode>
        <childnode refid="15280" relation="include">
        </childnode>
        <childnode refid="15281" relation="include">
        </childnode>
        <childnode refid="15282" relation="include">
        </childnode>
        <childnode refid="15283" relation="include">
        </childnode>
        <childnode refid="15284" relation="include">
        </childnode>
        <childnode refid="15285" relation="include">
        </childnode>
        <childnode refid="15286" relation="include">
        </childnode>
        <childnode refid="15287" relation="include">
        </childnode>
        <childnode refid="15288" relation="include">
        </childnode>
        <childnode refid="15289" relation="include">
        </childnode>
        <childnode refid="15290" relation="include">
        </childnode>
        <childnode refid="15291" relation="include">
        </childnode>
        <childnode refid="15292" relation="include">
        </childnode>
        <childnode refid="15293" relation="include">
        </childnode>
        <childnode refid="15294" relation="include">
        </childnode>
        <childnode refid="15295" relation="include">
        </childnode>
        <childnode refid="15296" relation="include">
        </childnode>
        <childnode refid="15297" relation="include">
        </childnode>
        <childnode refid="15298" relation="include">
        </childnode>
        <childnode refid="15299" relation="include">
        </childnode>
        <childnode refid="15300" relation="include">
        </childnode>
        <childnode refid="15301" relation="include">
        </childnode>
        <childnode refid="15302" relation="include">
        </childnode>
        <childnode refid="15303" relation="include">
        </childnode>
        <childnode refid="15304" relation="include">
        </childnode>
        <childnode refid="15305" relation="include">
        </childnode>
        <childnode refid="15306" relation="include">
        </childnode>
        <childnode refid="15307" relation="include">
        </childnode>
        <childnode refid="15308" relation="include">
        </childnode>
        <childnode refid="15309" relation="include">
        </childnode>
        <childnode refid="15310" relation="include">
        </childnode>
        <childnode refid="15311" relation="include">
        </childnode>
        <childnode refid="15312" relation="include">
        </childnode>
        <childnode refid="15313" relation="include">
        </childnode>
        <childnode refid="15314" relation="include">
        </childnode>
        <childnode refid="15315" relation="include">
        </childnode>
        <childnode refid="15316" relation="include">
        </childnode>
        <childnode refid="15317" relation="include">
        </childnode>
        <childnode refid="15318" relation="include">
        </childnode>
        <childnode refid="15319" relation="include">
        </childnode>
        <childnode refid="15320" relation="include">
        </childnode>
        <childnode refid="15321" relation="include">
        </childnode>
        <childnode refid="15322" relation="include">
        </childnode>
        <childnode refid="15323" relation="include">
        </childnode>
        <childnode refid="15324" relation="include">
        </childnode>
        <childnode refid="15325" relation="include">
        </childnode>
        <childnode refid="15326" relation="include">
        </childnode>
        <childnode refid="15327" relation="include">
        </childnode>
        <childnode refid="15328" relation="include">
        </childnode>
        <childnode refid="15329" relation="include">
        </childnode>
        <childnode refid="15330" relation="include">
        </childnode>
        <childnode refid="15331" relation="include">
        </childnode>
        <childnode refid="15332" relation="include">
        </childnode>
        <childnode refid="15333" relation="include">
        </childnode>
        <childnode refid="15334" relation="include">
        </childnode>
        <childnode refid="15335" relation="include">
        </childnode>
        <childnode refid="15336" relation="include">
        </childnode>
        <childnode refid="15337" relation="include">
        </childnode>
        <childnode refid="15338" relation="include">
        </childnode>
        <childnode refid="15339" relation="include">
        </childnode>
        <childnode refid="15340" relation="include">
        </childnode>
        <childnode refid="15341" relation="include">
        </childnode>
        <childnode refid="15342" relation="include">
        </childnode>
        <childnode refid="15343" relation="include">
        </childnode>
        <childnode refid="15344" relation="include">
        </childnode>
        <childnode refid="15345" relation="include">
        </childnode>
        <childnode refid="15346" relation="include">
        </childnode>
        <childnode refid="15347" relation="include">
        </childnode>
        <childnode refid="15348" relation="include">
        </childnode>
        <childnode refid="15349" relation="include">
        </childnode>
        <childnode refid="15350" relation="include">
        </childnode>
        <childnode refid="15215" relation="include">
        </childnode>
        <childnode refid="15351" relation="include">
        </childnode>
        <childnode refid="15352" relation="include">
        </childnode>
        <childnode refid="15353" relation="include">
        </childnode>
        <childnode refid="15354" relation="include">
        </childnode>
        <childnode refid="15355" relation="include">
        </childnode>
        <childnode refid="15356" relation="include">
        </childnode>
        <childnode refid="15357" relation="include">
        </childnode>
        <childnode refid="15358" relation="include">
        </childnode>
        <childnode refid="15359" relation="include">
        </childnode>
        <childnode refid="15360" relation="include">
        </childnode>
        <childnode refid="15361" relation="include">
        </childnode>
        <childnode refid="15362" relation="include">
        </childnode>
        <childnode refid="15363" relation="include">
        </childnode>
        <childnode refid="15364" relation="include">
        </childnode>
        <childnode refid="15365" relation="include">
        </childnode>
      </node>
      <node id="15351">
        <label>sepa_cgmip.h</label>
        <link refid="sepa__cgmip_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15342">
        <label>reader_opb.h</label>
        <link refid="reader__opb_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15336">
        <label>reader_diff.h</label>
        <link refid="reader__diff_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15276">
        <label>heur_nlpdiving.h</label>
        <link refid="heur__nlpdiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15218">
        <label>branch_fullstrong.h</label>
        <link refid="branch__fullstrong_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15339">
        <label>reader_gms.h</label>
        <link refid="reader__gms_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15315">
        <label>presol_gateextraction.h</label>
        <link refid="presol__gateextraction_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15249">
        <label>cons_soc.h</label>
        <link refid="cons__soc_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15353">
        <label>sepa_closecuts.h</label>
        <link refid="sepa__closecuts_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15310">
        <label>presol_components.h</label>
        <link refid="presol__components_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15242">
        <label>cons_logicor.h</label>
        <link refid="cons__logicor_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15337">
        <label>reader_fix.h</label>
        <link refid="reader__fix_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15221">
        <label>branch_mostinf.h</label>
        <link refid="branch__mostinf_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15247">
        <label>cons_quadratic.h</label>
        <link refid="cons__quadratic_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15268">
        <label>heur_fracdiving.h</label>
        <link refid="heur__fracdiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15335">
        <label>reader_cnf.h</label>
        <link refid="reader__cnf_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15314">
        <label>presol_dualinfer.h</label>
        <link refid="presol__dualinfer_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15255">
        <label>dialog_default.h</label>
        <link refid="dialog__default_8h"/>
      </node>
      <node id="15284">
        <label>heur_rens.h</label>
        <link refid="heur__rens_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15321">
        <label>presol_trivial.h</label>
        <link refid="presol__trivial_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15319">
        <label>presol_redvub.h</label>
        <link refid="presol__redvub_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15291">
        <label>heur_simplerounding.h</label>
        <link refid="heur__simplerounding_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15259">
        <label>heur_bound.h</label>
        <link refid="heur__bound_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15320">
        <label>presol_stuffing.h</label>
        <link refid="presol__stuffing_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15258">
        <label>heur_actconsdiving.h</label>
        <link refid="heur__actconsdiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15350">
        <label>reader_zpl.h</label>
        <link refid="reader__zpl_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15237">
        <label>cons_indicator.h</label>
        <link refid="cons__indicator_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15236">
        <label>cons_disjunction.h</label>
        <link refid="cons__disjunction_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15277">
        <label>heur_objpscostdiving.h</label>
        <link refid="heur__objpscostdiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15323">
        <label>prop_dualfix.h</label>
        <link refid="prop__dualfix_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15340">
        <label>reader_lp.h</label>
        <link refid="reader__lp_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15271">
        <label>heur_intdiving.h</label>
        <link refid="heur__intdiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15235">
        <label>cons_cumulative.h</label>
        <link refid="cons__cumulative_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15273">
        <label>heur_linesearchdiving.h</label>
        <link refid="heur__linesearchdiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15264">
        <label>heur_distributiondiving.h</label>
        <link refid="heur__distributiondiving_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15361">
        <label>sepa_mcf.h</label>
        <link refid="sepa__mcf_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15212">
        <label>pub_var.h</label>
        <link refid="pub_var.h"/>
        <childnode refid="15213" relation="include">
        </childnode>
      </node>
      <node id="15309">
        <label>presol_boundshift.h</label>
        <link refid="presol__boundshift_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15329">
        <label>prop_rootredcost.h</label>
        <link refid="prop__rootredcost_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15244">
        <label>cons_or.h</label>
        <link refid="cons__or_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15266">
        <label>heur_feaspump.h</label>
        <link refid="heur__feaspump_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15245">
        <label>cons_orbitope.h</label>
        <link refid="cons__orbitope_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15328">
        <label>prop_redcost.h</label>
        <link refid="prop__redcost_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15216">
        <label>branch_cloud.h</label>
        <link refid="branch__cloud_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15232">
        <label>cons_bounddisjunction.h</label>
        <link refid="cons__bounddisjunction_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15279">
        <label>heur_ofins.h</label>
        <link refid="heur__ofins_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15288">
        <label>heur_rounding.h</label>
        <link refid="heur__rounding_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15257">
        <label>event_softtimelimit.h</label>
        <link refid="event__softtimelimit_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15270">
        <label>heur_indicator.h</label>
        <link refid="heur__indicator_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
      <node id="15348">
        <label>reader_sol.h</label>
        <link refid="reader__sol_8h"/>
        <childnode refid="15215" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="pub__var_8h_1a355a3dfa07ca22bf7ad42b48d58d7ca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetNLocksDown</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNLocksDown</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of locks for rounding down </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ac32a4ea0812029dc023a53ec7d97c5f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetNLocksUp</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNLocksUp</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of locks for rounding up </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a46f0170550cf27e9b83157fc53a97e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarMayRoundDown</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarMayRoundDown</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>is it possible, to round variable down and stay feasible? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a12db6e7bd03ee2c1caabed271da34f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarMayRoundUp</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarMayRoundUp</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>is it possible, to round variable up and stay feasible? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a03148e0bd74ef6c65206020c8664d02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarCompareActiveAndNegated</definition>
        <argsstring>(SCIP_VAR *var1, SCIP_VAR *var2)</argsstring>
        <name>SCIPvarCompareActiveAndNegated</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var1</declname>
          <briefdescription><para>first problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var2</declname>
          <briefdescription><para>second problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compares the index of two variables, only active or negated variables are allowed, if a variable is negated then the index of the corresponding active variable is taken, returns -1 if first is smaller than, and +1 if first is greater than second variable index; returns 0 if both indices are equal, which means both variables are equal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a49cc8459c943c961c4b190f668ed3e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SCIP_DECL_SORTPTRCOMP</definition>
        <argsstring>(SCIPvarCompActiveAndNegated)</argsstring>
        <name>SCIP_DECL_SORTPTRCOMP</name>
        <param>
          <type>SCIPvarCompActiveAndNegated</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>comparison method for sorting active and negated variables by non-decreasing index, active and negated variables are handled as the same variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1abc50899938ebb76b389c0e54a5a5ec87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarCompare</definition>
        <argsstring>(SCIP_VAR *var1, SCIP_VAR *var2)</argsstring>
        <name>SCIPvarCompare</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var1</declname>
          <briefdescription><para>first problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var2</declname>
          <briefdescription><para>second problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compares the index of two variables, returns -1 if first is smaller than, and +1 if first is greater than second variable index; returns 0 if both indices are equal, which means both variables are equal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1afa888382dd2ea3da4c74a39770ec4a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SCIP_DECL_SORTPTRCOMP</definition>
        <argsstring>(SCIPvarComp)</argsstring>
        <name>SCIP_DECL_SORTPTRCOMP</name>
        <param>
          <type>SCIPvarComp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>comparison method for sorting variables by non-decreasing index </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1acc76c443b0261325685a3e3f459db4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SCIP_DECL_SORTPTRCOMP</definition>
        <argsstring>(SCIPvarCompObj)</argsstring>
        <name>SCIP_DECL_SORTPTRCOMP</name>
        <param>
          <type>SCIPvarCompObj</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>comparison method for sorting variables by non-decreasing objective coefficient </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a3d8785085e66bdf69c0052d62bcdf6b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SCIP_DECL_HASHGETKEY</definition>
        <argsstring>(SCIPvarGetHashkey)</argsstring>
        <name>SCIP_DECL_HASHGETKEY</name>
        <param>
          <type>SCIPvarGetHashkey</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>hash key retrieval function for variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a9e97a5bfa3f3893dfaa77abea445e2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SCIP_DECL_HASHKEYEQ</definition>
        <argsstring>(SCIPvarIsHashkeyEq)</argsstring>
        <name>SCIP_DECL_HASHKEYEQ</name>
        <param>
          <type>SCIPvarIsHashkeyEq</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff the indices of both variables are equal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ab89262d32e8c5cb1d5676bb77ca92993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SCIP_DECL_HASHKEYVAL</definition>
        <argsstring>(SCIPvarGetHashkeyVal)</argsstring>
        <name>SCIP_DECL_HASHKEYVAL</name>
        <param>
          <type>SCIPvarGetHashkeyVal</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the hash value of the key </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a16c63cffbe431b454462bbe80acb8fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPvarsGetProbvar</definition>
        <argsstring>(SCIP_VAR **vars, int nvars)</argsstring>
        <name>SCIPvarsGetProbvar</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
          <declname>vars</declname>
          <briefdescription><para>array of problem variables </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nvars</declname>
          <briefdescription><para>number of variables </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets corresponding active, fixed, or multi-aggregated problem variables of given variables, <simplesect kind="note"><para>the content of the given array will/might change </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a4ee10c1d3097424d9e551fef0d6f0565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
        <definition>SCIP_VAR* SCIPvarGetProbvar</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetProbvar</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets corresponding active, fixed, or multi-aggregated problem variable of a variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aedec63daf6f203fdddb5bd5d41456871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPvarsGetProbvarBinary</definition>
        <argsstring>(SCIP_VAR ***vars, SCIP_Bool **negatedarr, int nvars)</argsstring>
        <name>SCIPvarsGetProbvarBinary</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> ***</type>
          <declname>vars</declname>
          <briefdescription><para>pointer to binary problem variables </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> **</type>
          <declname>negatedarr</declname>
          <briefdescription><para>pointer to corresponding array to update the negation status </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nvars</declname>
          <briefdescription><para>number of variables and values in vars and negated array </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets corresponding active, fixed, or multi-aggregated problem variables of binary variables and updates the given negation status of each variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1abf8fe9adb50e1c593d64f2cadf5ddca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPvarGetProbvarBinary</definition>
        <argsstring>(SCIP_VAR **var, SCIP_Bool *negated)</argsstring>
        <name>SCIPvarGetProbvarBinary</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
          <declname>var</declname>
          <briefdescription><para>pointer to binary problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>negated</declname>
          <briefdescription><para>pointer to update the negation status </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets corresponding active, fixed, or multi-aggregated problem variable of a binary variable and updates the given negation status </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a0abc3cafafc55449b21eb621a215acc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPvarGetProbvarBound</definition>
        <argsstring>(SCIP_VAR **var, SCIP_Real *bound, SCIP_BOUNDTYPE *boundtype)</argsstring>
        <name>SCIPvarGetProbvarBound</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
          <declname>var</declname>
          <briefdescription><para>pointer to problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>bound</declname>
          <briefdescription><para>pointer to bound value to transform </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref> *</type>
          <declname>boundtype</declname>
          <briefdescription><para>pointer to type of bound: lower or upper bound </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>transforms given variable, boundtype and bound to the corresponding active, fixed, or multi-aggregated variable values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aa8b9c60842872deec6b33242bbe569ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPvarGetProbvarHole</definition>
        <argsstring>(SCIP_VAR **var, SCIP_Real *left, SCIP_Real *right)</argsstring>
        <name>SCIPvarGetProbvarHole</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
          <declname>var</declname>
          <briefdescription><para>pointer to problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>left</declname>
          <briefdescription><para>pointer to left bound of open interval in hole to transform </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>right</declname>
          <briefdescription><para>pointer to right bound of open interval in hole to transform </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>transforms given variable and domain hole to the corresponding active, fixed, or multi-aggregated variable values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a0726ded27e5e512f12927a1ddd5248be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPvarGetOrigvarSum</definition>
        <argsstring>(SCIP_VAR **var, SCIP_Real *scalar, SCIP_Real *constant)</argsstring>
        <name>SCIPvarGetOrigvarSum</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
          <declname>var</declname>
          <briefdescription><para>pointer to problem variable x in sum a*x + c </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>scalar</declname>
          <briefdescription><para>pointer to scalar a in sum a*x + c </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>constant</declname>
          <briefdescription><para>pointer to constant c in sum a*x + c </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retransforms given variable, scalar and constant to the corresponding original variable, scalar and constant, if possible; if the retransformation is impossible, NULL is returned as variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a8702e6be6a710d89f823a8cdafd2034b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsTransformedOrigvar</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsTransformedOrigvar</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the given variable is the direct counterpart of an original problem variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aa4a03580e1ab8cef6c5c22871a39fc03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a1e6171040084cc1f39f88e386238ee10" kindref="member">SCIP_Longint</ref></type>
        <definition>SCIP_Longint SCIPvarGetNBranchings</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BRANCHDIR dir)</argsstring>
        <name>SCIPvarGetNBranchings</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref></type>
          <declname>dir</declname>
          <briefdescription><para>branching direction (downwards, or upwards) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of times, a bound of the variable was changed in given direction due to branching </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ac0a855279533227b587af5675ae78bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a1e6171040084cc1f39f88e386238ee10" kindref="member">SCIP_Longint</ref></type>
        <definition>SCIP_Longint SCIPvarGetNBranchingsCurrentRun</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BRANCHDIR dir)</argsstring>
        <name>SCIPvarGetNBranchingsCurrentRun</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref></type>
          <declname>dir</declname>
          <briefdescription><para>branching direction (downwards, or upwards) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of times, a bound of the variable was changed in given direction due to branching in the current run </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a2fc9c113a2f80508f835539d2b13672d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetInferenceSum</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BRANCHDIR dir)</argsstring>
        <name>SCIPvarGetInferenceSum</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref></type>
          <declname>dir</declname>
          <briefdescription><para>branching direction (downwards, or upwards) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of inferences branching on this variable in given direction triggered </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ad5a0482bdb76b5d5813039f8879f7168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetInferenceSumCurrentRun</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BRANCHDIR dir)</argsstring>
        <name>SCIPvarGetInferenceSumCurrentRun</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref></type>
          <declname>dir</declname>
          <briefdescription><para>branching direction (downwards, or upwards) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of inferences branching on this variable in given direction triggered in the current run </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1af596106c799c3a5c243ba7443ba64132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetCutoffSum</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BRANCHDIR dir)</argsstring>
        <name>SCIPvarGetCutoffSum</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref></type>
          <declname>dir</declname>
          <briefdescription><para>branching direction (downwards, or upwards) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of cutoffs branching on this variable in given direction produced </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1abdf3ce5ee3dfa8783fdfa526b77ef696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetCutoffSumCurrentRun</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BRANCHDIR dir)</argsstring>
        <name>SCIPvarGetCutoffSumCurrentRun</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref></type>
          <declname>dir</declname>
          <briefdescription><para>branching direction (downwards, or upwards) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of cutoffs branching on this variable in given direction produced in the current run </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a21f8069353c0f04a021a3fbfd5ff1245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetAvgBranchdepth</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BRANCHDIR dir)</argsstring>
        <name>SCIPvarGetAvgBranchdepth</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref></type>
          <declname>dir</declname>
          <briefdescription><para>branching direction (downwards, or upwards) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the average depth of bound changes in given direction due to branching on the variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a12b1e37f97c94207823cc37113aac868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetAvgBranchdepthCurrentRun</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BRANCHDIR dir)</argsstring>
        <name>SCIPvarGetAvgBranchdepthCurrentRun</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref></type>
          <declname>dir</declname>
          <briefdescription><para>branching direction (downwards, or upwards) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the average depth of bound changes in given direction due to branching on the variable in the current run </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a295800404f206ef23b87f915c7d7418e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarHasImplic</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool varfixing, SCIP_VAR *implvar, SCIP_BOUNDTYPE impltype)</argsstring>
        <name>SCIPvarHasImplic</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable x </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>varfixing</declname>
          <briefdescription><para>FALSE if y should be searched in implications for x == 0, TRUE for x == 1 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>implvar</declname>
          <briefdescription><para>variable y to search for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref></type>
          <declname>impltype</declname>
          <briefdescription><para>type of implication y &lt;=/&gt;= b to search for </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether there is an implication x == varfixing -&gt; y &lt;= b or y &gt;= b in the implication graph; implications that are represented as cliques in the clique table are not regarded (use <ref refid="pub__var_8h_1ad5b82eaf0cf1d6e161e76adc2ec74083" kindref="member">SCIPvarsHaveCommonClique()</ref>); both variables must be active, variable x must be binary </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a7121d080a6259c0ae87b72d94d73c71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarHasBinaryImplic</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool varfixing, SCIP_VAR *implvar, SCIP_Bool implvarfixing)</argsstring>
        <name>SCIPvarHasBinaryImplic</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable x </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>varfixing</declname>
          <briefdescription><para>FALSE if y should be searched in implications for x == 0, TRUE for x == 1 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>implvar</declname>
          <briefdescription><para>variable y to search for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>implvarfixing</declname>
          <briefdescription><para>value of the implied variable to search for </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether there is an implication x == varfixing -&gt; y == implvarfixing in the implication graph; implications that are represented as cliques in the clique table are not regarded (use <ref refid="pub__var_8h_1ad5b82eaf0cf1d6e161e76adc2ec74083" kindref="member">SCIPvarsHaveCommonClique()</ref>); both variables must be active binary variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ad5b82eaf0cf1d6e161e76adc2ec74083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarsHaveCommonClique</definition>
        <argsstring>(SCIP_VAR *var1, SCIP_Bool value1, SCIP_VAR *var2, SCIP_Bool value2, SCIP_Bool regardimplics)</argsstring>
        <name>SCIPvarsHaveCommonClique</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var1</declname>
          <briefdescription><para>first variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>value1</declname>
          <briefdescription><para>value of first variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var2</declname>
          <briefdescription><para>second variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>value2</declname>
          <briefdescription><para>value of second variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>regardimplics</declname>
          <briefdescription><para>should the implication graph also be searched for a clique? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether there is a clique that contains both given variable/value pairs; the variables must be active binary variables; if regardimplics is FALSE, only the cliques in the clique table are looked at; if regardimplics is TRUE, both the cliques and the implications of the implication graph are regarded </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a3519b0d1c75e3bf1c39981b9433b9a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPvarGetAggregatedObj</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Real *aggrobj)</argsstring>
        <name>SCIPvarGetAggregatedObj</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>aggrobj</declname>
          <briefdescription><para>pointer to store the aggregated objective value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets corresponding objective value of active, fixed, or multi-aggregated problem variable of given variable e.g. obj(x) = 1 this method returns for ~x the value -1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a51fe507baf4f1e5913d041f9972db982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPvarSetInitial</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool initial)</argsstring>
        <name>SCIPvarSetInitial</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>initial</declname>
          <briefdescription><para>initial flag </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the initial flag of a variable; only possible for original or loose variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a983a092ddf919b49f235d5e7342f71ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPvarSetRemovable</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool removable)</argsstring>
        <name>SCIPvarSetRemovable</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>removable</declname>
          <briefdescription><para>removable flag </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the removable flag of a variable; only possible for original or loose variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ab08e0f2c3971fe89bc2959a6fb196383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SCIPvarGetName</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetName</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the name of the variable</para><para><simplesect kind="note"><para>to change the name of a variable, use <ref refid="scip_8h_1a310301c7473d55771c9f260757f04948" kindref="member">SCIPchgVarName()</ref> from <ref refid="scip_8h" kindref="compound">scip.h</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a5f2054889ea8e4e002e59e570c10e8bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetNUses</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNUses</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of times, the variable is currently captured </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a68189ccd1f497e166986ed5ed94f7bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a008eb4c31318a2b51893dcbefbe41eda" kindref="member">SCIP_VARDATA</ref> *</type>
        <definition>SCIP_VARDATA* SCIPvarGetData</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetData</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the user data of the variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a8f17b03288d34f2fac86f1f7dd22ed7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPvarSetData</definition>
        <argsstring>(SCIP_VAR *var, SCIP_VARDATA *vardata)</argsstring>
        <name>SCIPvarSetData</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a008eb4c31318a2b51893dcbefbe41eda" kindref="member">SCIP_VARDATA</ref> *</type>
          <declname>vardata</declname>
          <briefdescription><para>user variable data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the user data for the variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a041c7d9d30c1766187f66240e2ed99d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPvarSetDelorigData</definition>
        <argsstring>(SCIP_VAR *var, SCIP_DECL_VARDELORIG((*vardelorig)))</argsstring>
        <name>SCIPvarSetDelorigData</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a3d664f7cbdddc8194d98744eeecdbe6a" kindref="member">SCIP_DECL_VARDELORIG</ref>((*vardelorig))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets method to free user data for the original variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a1fba1af0993948f359f7ea98bc9e1587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPvarSetTransData</definition>
        <argsstring>(SCIP_VAR *var, SCIP_DECL_VARTRANS((*vartrans)))</argsstring>
        <name>SCIPvarSetTransData</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a5ea850f9a54e01f3c090dd2457de9e02" kindref="member">SCIP_DECL_VARTRANS</ref>((*vartrans))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets method to transform user data of the variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a3afd6b21bc53e155dbe673b368381854" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPvarSetDeltransData</definition>
        <argsstring>(SCIP_VAR *var, SCIP_DECL_VARDELTRANS((*vardeltrans)))</argsstring>
        <name>SCIPvarSetDeltransData</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a9edde06f9dc9ccc02788855773e840f5" kindref="member">SCIP_DECL_VARDELTRANS</ref>((*vardeltrans))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets method to free transformed user data for the variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aec4f545344f36cc0bfbcebbc98464493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPvarSetCopyData</definition>
        <argsstring>(SCIP_VAR *var, SCIP_DECL_VARCOPY((*varcopy)))</argsstring>
        <name>SCIPvarSetCopyData</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a9dbea961f48f9b0e51b1e745500f5502" kindref="member">SCIP_DECL_VARCOPY</ref>((*varcopy))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets method to copy this variable into sub-SCIPs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a2babbbbd0d346e6af3e4128770e0a0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1aca7d8ff33dfcda928d28e7e40320b4dc" kindref="member">SCIP_VARSTATUS</ref></type>
        <definition>SCIP_VARSTATUS SCIPvarGetStatus</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetStatus</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets status of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aae5d06a0eb52d5627a555e81f0e99a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsOriginal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsOriginal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the variable belongs to the original problem </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a3e41017f1a3955ebacb61b0f7927642a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsTransformed</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsTransformed</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the variable belongs to the transformed problem </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a9de9946c754b88110b45997762bc9910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsNegated</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsNegated</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the variable was created by negation of a different variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a4e486bdb8625d736a0962923ff1a4e80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1ac1df37286b62364af9d5fbf11aa79ff4" kindref="member">SCIP_VARTYPE</ref></type>
        <definition>SCIP_VARTYPE SCIPvarGetType</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetType</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets type of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a1bd0696bf88d004255be462f22c9d612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsBinary</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsBinary</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE if the variable is of binary type; this is the case if: (1) variable type is binary (2) variable type is integer or implicit integer and (i) the lazy lower bound or the global lower bound is greater or equal to zero (ii) the lazy upper bound or the global upper bound is less tor equal to one </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a86b37a794f4d1ad3889b8d405032e08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsIntegral</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsIntegral</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether variable is of integral type (binary, integer, or implicit integer) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a0173c404b0c42640d2bd5b0659861f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsInitial</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsInitial</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether variable&apos;s column should be present in the initial root LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a9afb8b03bd046d26c5612c42e29431dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsRemovable</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsRemovable</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether variable&apos;s column is removable from the LP (due to aging or cleanup) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a0d41609825264dd6dbf30e8dc89b2693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsDeleted</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsDeleted</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the variable was deleted from the problem </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a3f47c9e7e057200e54e1b5858f5ca428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPvarMarkDeletable</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarMarkDeletable</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>marks the variable to be deletable, i.e., it may be deleted completely from the problem; method can only be called before the variable is added to the problem by <ref refid="scip_8h_1a1274092a607fc948803c8731f3dc26b4" kindref="member">SCIPaddVar()</ref> or <ref refid="scip_8h_1a2a4364fac6acb390e82d163d78dd939b" kindref="member">SCIPaddPricedVar()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ab303f2053d2fcdadf30de3af2df17140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPvarMarkNotDeletable</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarMarkNotDeletable</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>marks the variable to be not deletable from the problem </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a8451cabc6004d2e476f8ab3883d7e795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsDeletable</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsDeletable</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether variable is allowed to be deleted completely from the problem </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a1afd61922a1042e1b8515a91bc2c49cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsActive</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsActive</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether variable is an active (neither fixed nor aggregated) variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a5864aa0e6ff4dfa4fed18e178b644cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetIndex</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetIndex</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets unique index of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a661c5d1f7f4e09471f8d2898b5bda91c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetProbindex</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetProbindex</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets position of variable in problem, or -1 if variable is not active </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ad3fb7925b32ab4d248131bb7eed9143d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
        <definition>SCIP_VAR* SCIPvarGetTransVar</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetTransVar</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets transformed variable of ORIGINAL variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a75111eed912d3f76ec076b787f7a0b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
        <definition>SCIP_COL* SCIPvarGetCol</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetCol</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets column of COLUMN variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1af80ac08c4a0f337d152898e5c7eb6b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarIsInLP</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarIsInLP</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the variable is a COLUMN variable that is member of the current LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a77868654522f38513a64b92fbdf0bdb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
        <definition>SCIP_VAR* SCIPvarGetAggrVar</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetAggrVar</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets aggregation variable y of an aggregated variable x = a*y + c </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a49c6d314048eaeefc7970953e97fa817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetAggrScalar</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetAggrScalar</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets aggregation scalar a of an aggregated variable x = a*y + c </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a2fd91a7378eed18a8d10c031a23cfed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetAggrConstant</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetAggrConstant</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets aggregation constant c of an aggregated variable x = a*y + c </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a97a86ea0ff5d4e7280eeaaad0a4b90f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetMultaggrNVars</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetMultaggrNVars</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number n of aggregation variables of a multi aggregated variable x = a0*y0 + ... + a(n-1)*y(n-1) + c </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a0b04d71e1c33d5609de000604d505d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
        <definition>SCIP_VAR** SCIPvarGetMultaggrVars</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetMultaggrVars</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets vector of aggregation variables y of a multi aggregated variable x = a0*y0 + ... + a(n-1)*y(n-1) + c </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ab939a181ca5289fa27acb17309dd5895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPvarGetMultaggrScalars</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetMultaggrScalars</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets vector of aggregation scalars a of a multi aggregated variable x = a0*y0 + ... + a(n-1)*y(n-1) + c </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a137fb47be6bb6e08d2ee32b507f57cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetMultaggrConstant</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetMultaggrConstant</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets aggregation constant c of a multi aggregated variable x = a0*y0 + ... + a(n-1)*y(n-1) + c </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a49dc5b4648f8796de7af0d8841182175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
        <definition>SCIP_VAR* SCIPvarGetNegatedVar</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNegatedVar</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>negated problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the negation of the given variable; may return NULL, if no negation is existing yet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a0711d01bc5b33614363d50cf82adc88c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
        <definition>SCIP_VAR* SCIPvarGetNegationVar</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNegationVar</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>negated problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the negation variable x of a negated variable x&apos; = offset - x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a0df9d4352f047fdcdbbe2862fb99a66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetNegationConstant</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNegationConstant</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>negated problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the negation offset of a negated variable x&apos; = offset - x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a491a828fd85a9bd3e055ce67831e612c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetObj</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetObj</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets objective function value of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1af5124b6cfa735a8b5fd498311a3fb902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetUnchangedObj</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetUnchangedObj</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the unchanged objective function value of variable (ignoring temproray changes performed in probing mode) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a3b8cdee5573f5b8fe8c6587ad1ea4364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetLbOriginal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetLbOriginal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>original problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets original lower bound of original problem variable (i.e. the bound set in problem creation) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a6bcf8502fb2e6b103277cef8aa1f1316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetUbOriginal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetUbOriginal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>original problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets original upper bound of original problem variable (i.e. the bound set in problem creation) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="571" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1acbea52862bae4d3f281f5b3f6a3e02e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref> *</type>
        <definition>SCIP_HOLELIST* SCIPvarGetHolelistOriginal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetHolelistOriginal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the original hole list of an original variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ab0eaccfc16b577470ba4526bb7173911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetLbGlobal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetLbGlobal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets global lower bound of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="583" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a50c332fe6b9e89e78588b5fa8e9a02f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetUbGlobal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetUbGlobal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets global upper bound of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a8d715a4ea83fa790661f96742f1dc45c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref> *</type>
        <definition>SCIP_HOLELIST* SCIPvarGetHolelistGlobal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetHolelistGlobal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the global hole list of an active variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a228ddd7dd3218968c7fd6f8280768d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetBestBoundGlobal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetBestBoundGlobal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets best global bound of variable with respect to the objective function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a6d7f89b524443fc2a40d4e023eaf32e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetWorstBoundGlobal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetWorstBoundGlobal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets worst global bound of variable with respect to the objective function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="607" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a9dc3107400e7a0a52f9c5a84ad1e6106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetLbLocal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetLbLocal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets current lower bound of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="613" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a35584d0cef32cfbfc7d40148ffd71beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetUbLocal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetUbLocal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets current upper bound of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="619" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a8790408c0041e1c7a1f59d2b3275f4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref> *</type>
        <definition>SCIP_HOLELIST* SCIPvarGetHolelistLocal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetHolelistLocal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the current hole list of an active variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a7b399e7a1ec64c86e7abaecfdab956a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetBestBoundLocal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetBestBoundLocal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets best local bound of variable with respect to the objective function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="631" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a5f10adc9bd65d618ad0b9d69e34504eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetWorstBoundLocal</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetWorstBoundLocal</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets worst local bound of variable with respect to the objective function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="637" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a149e2effcd312cb91185644c0b7c4a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref></type>
        <definition>SCIP_BOUNDTYPE SCIPvarGetBestBoundType</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetBestBoundType</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets type (lower or upper) of best bound of variable with respect to the objective function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ad06ecd2db32c5a221906e42631531074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref></type>
        <definition>SCIP_BOUNDTYPE SCIPvarGetWorstBoundType</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetWorstBoundType</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets type (lower or upper) of worst bound of variable with respect to the objective function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1af6e8ecba7fae29086d3bf013c94ea066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetLbLazy</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetLbLazy</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets lazy lower bound of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a87929eb208b171d78f0c8893af8bba19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetUbLazy</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetUbLazy</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets lazy upper bound of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="661" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a7ea7752a0ae8a7dd70543c3a3769c5d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetBranchFactor</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetBranchFactor</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the branch factor of the variable; this value can be used in the branching methods to scale the score values of the variables; higher factor leads to a higher probability that this variable is chosen for branching </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aacf94c529766169739e6ac18a204cbb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetBranchPriority</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetBranchPriority</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the branch priority of the variable; variables with higher priority should always be preferred to variables with lower priority </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a8c411c36f82de1f5085e82b0fc9051c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref></type>
        <definition>SCIP_BRANCHDIR SCIPvarGetBranchDirection</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetBranchDirection</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the preferred branch direction of the variable (downwards, upwards, or auto) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="683" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a0a73ce48405736fc83c2bfa29c7eab79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetNVlbs</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNVlbs</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of variable lower bounds x &gt;= b_i*z_i + d_i of given variable x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aab6ae97670db43871d13d5471f95c97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
        <definition>SCIP_VAR** SCIPvarGetVlbVars</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetVlbVars</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with bounding variables z_i in variable lower bounds x &gt;= b_i*z_i + d_i of given variable x; the variable bounds are sorted by increasing variable index of the bounding variable z_i (see <ref refid="pub__var_8h_1a5864aa0e6ff4dfa4fed18e178b644cbd" kindref="member">SCIPvarGetIndex()</ref>) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a37ac3fd8724ad7b089b5710e371804dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPvarGetVlbCoefs</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetVlbCoefs</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with bounding coefficients b_i in variable lower bounds x &gt;= b_i*z_i + d_i of given variable x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="703" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a1f8a4e93e49112dc2338dedad0b7ad88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPvarGetVlbConstants</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetVlbConstants</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with bounding constants d_i in variable lower bounds x &gt;= b_i*z_i + d_i of given variable x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a7c2ce9b2f433602d5d5a0329567ce42d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetNVubs</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNVubs</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of variable upper bounds x &lt;= b_i*z_i + d_i of given variable x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="715" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a82b950f4963b7bb16502c952d2e8592e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
        <definition>SCIP_VAR** SCIPvarGetVubVars</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetVubVars</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with bounding variables z_i in variable upper bounds x &lt;= b_i*z_i + d_i of given variable x; the variable bounds are sorted by increasing variable index of the bounding variable z_i (see <ref refid="pub__var_8h_1a5864aa0e6ff4dfa4fed18e178b644cbd" kindref="member">SCIPvarGetIndex()</ref>) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="723" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a57b6a5636331bde0eb90ea22cee594c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPvarGetVubCoefs</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetVubCoefs</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with bounding coefficients b_i in variable upper bounds x &lt;= b_i*z_i + d_i of given variable x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="729" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a1cd1b24b22cee3cc7514ab351e5c2851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPvarGetVubConstants</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetVubConstants</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with bounding constants d_i in variable upper bounds x &lt;= b_i*z_i + d_i of given variable x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="735" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a2a55382fbfa13f5a3f5640b83543d3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetNImpls</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool varfixing)</argsstring>
        <name>SCIPvarGetNImpls</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>active problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>varfixing</declname>
          <briefdescription><para>FALSE for implications for x == 0, TRUE for x == 1 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of implications y &lt;= b or y &gt;= b for x == 0 or x == 1 of given active problem variable x, there are no implications for nonbinary variable x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1af6d18a4b726482e883a11e8df5ec6569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
        <definition>SCIP_VAR** SCIPvarGetImplVars</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool varfixing)</argsstring>
        <name>SCIPvarGetImplVars</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>active problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>varfixing</declname>
          <briefdescription><para>FALSE for implications for x == 0, TRUE for x == 1 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with implication variables y of implications y &lt;= b or y &gt;= b for x == 0 or x == 1 of given active problem variable x, there are no implications for nonbinary variable x; the implications are sorted such that implications with binary implied variables precede the ones with non-binary implied variables, and as a second criteria, the implied variables are sorted by increasing variable index (see <ref refid="pub__var_8h_1a5864aa0e6ff4dfa4fed18e178b644cbd" kindref="member">SCIPvarGetIndex()</ref>) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="755" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a3a8afc0a15ca5a8f9dc0765d56b4f63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref> *</type>
        <definition>SCIP_BOUNDTYPE* SCIPvarGetImplTypes</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool varfixing)</argsstring>
        <name>SCIPvarGetImplTypes</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>active problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>varfixing</declname>
          <briefdescription><para>FALSE for implications for x == 0, TRUE for x == 1 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with implication types of implications y &lt;= b or y &gt;= b for x == 0 or x == 1 of given active problem variable x (SCIP_BOUNDTYPE_UPPER if y &lt;= b, SCIP_BOUNDTYPE_LOWER if y &gt;= b), there are no implications for nonbinary variable x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="765" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a85753dff191242f295d147f4e32ae3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPvarGetImplBounds</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool varfixing)</argsstring>
        <name>SCIPvarGetImplBounds</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>active problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>varfixing</declname>
          <briefdescription><para>FALSE for implications for x == 0, TRUE for x == 1 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with implication bounds b of implications y &lt;= b or y &gt;= b for x == 0 or x == 1 of given active problem variable x, there are no implications for nonbinary variable x </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="774" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a0f7453e57ae73a9a86ebb0efc3edefb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* SCIPvarGetImplIds</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool varfixing)</argsstring>
        <name>SCIPvarGetImplIds</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>active problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>varfixing</declname>
          <briefdescription><para>FALSE for implications for x == 0, TRUE for x == 1 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets array with unique ids of implications y &lt;= b or y &gt;= b for x == 0 or x == 1 of given active problem variable x, there are no implications for nonbinary variable x. If an implication is a shortcut, i.e., it was added as part of the transitive closure of another implication, its id is negative, otherwise it is nonnegative. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="785" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a9beee972309b5f9f4ba145a14dc78431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetNCliques</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool varfixing)</argsstring>
        <name>SCIPvarGetNCliques</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>active problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>varfixing</declname>
          <briefdescription><para>FALSE for cliques containing x == 0, TRUE for x == 1 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of cliques, the active variable is contained in </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="792" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aef0cdf6c72c435b4046ca3d02c15074c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__implics_8h_1a8996d60cfd393cc8ab252b68365109d2" kindref="member">SCIP_CLIQUE</ref> **</type>
        <definition>SCIP_CLIQUE** SCIPvarGetCliques</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool varfixing)</argsstring>
        <name>SCIPvarGetCliques</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>active problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>varfixing</declname>
          <briefdescription><para>FALSE for cliques containing x == 0, TRUE for x == 1 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array of cliques, the active variable is contained in </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="799" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a90ddaecb3d677f1204549292a6db9019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetLPSol</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetLPSol</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets primal LP solution value of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="806" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ac97f55d178e9dcf573aca8c03937bb64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetNLPSol</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNLPSol</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets primal NLP solution value of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="812" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a3683bd42f195469cc73ecbae92227062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
        <definition>SCIP_BDCHGINFO* SCIPvarGetBdchgInfoLb</definition>
        <argsstring>(SCIP_VAR *var, int pos)</argsstring>
        <name>SCIPvarGetBdchgInfoLb</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
          <briefdescription><para>requested position </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return lower bound change info at requested position </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="818" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ae2931a8d8ac10291f3993de7ae6eed01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetNBdchgInfosLb</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNBdchgInfosLb</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the number of lower bound change info array </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="825" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a329f268bdfe510f7ffb059953b6469c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
        <definition>SCIP_BDCHGINFO* SCIPvarGetBdchgInfoUb</definition>
        <argsstring>(SCIP_VAR *var, int pos)</argsstring>
        <name>SCIPvarGetBdchgInfoUb</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
          <briefdescription><para>requested position </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return upper bound change info at requested position </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="831" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1acb2b85af48e09485b9d1662886ae694b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetNBdchgInfosUb</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNBdchgInfosUb</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the number upper bound change info array </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="838" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aa4e0c485178931982457ca53bf426b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__history_8h_1aa9e4de315317e7dc12676583027d48d9" kindref="member">SCIP_VALUEHISTORY</ref> *</type>
        <definition>SCIP_VALUEHISTORY* SCIPvarGetValuehistory</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetValuehistory</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the value based history for the variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="844" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a01f6981cd14ef86e8eb83b57cd31fcc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetLPSol_rec</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetLPSol_rec</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets primal LP solution value of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="948" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a5b8ff3b528f6b014ed788d3f05db9748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetNLPSol_rec</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetNLPSol_rec</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets primal NLP solution value of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="954" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a88890ba4946444cc1a6e009b5c295d7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetPseudoSol</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetPseudoSol</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets pseudo solution value of variable at current node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="960" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a16d1467c170150942eab2743452f2d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetSol</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Bool getlpval)</argsstring>
        <name>SCIPvarGetSol</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>getlpval</declname>
          <briefdescription><para>should the LP solution value be returned? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets current LP or pseudo solution value of variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="966" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a78ea1976be7ce9909629c135864325b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetRootSol</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetRootSol</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the solution of the variable in the last root node&apos;s relaxation, if the root relaxation is not yet completely solved, zero is returned </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="975" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a39198bdc56cb11a4b75545e28d640a5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetBestRootSol</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetBestRootSol</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the best solution (w.r.t. root reduced cost propagation) of the variable in the root node&apos;s relaxation, if the root relaxation is not yet completely solved, zero is returned </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="983" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ab31bcc0f7311d4984fc069a508cb37aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetBestRootRedcost</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetBestRootRedcost</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the best reduced costs (w.r.t. root reduced cost propagation) of the variable in the root node&apos;s relaxation, if the root relaxation is not yet completely solved, or the variable was no column of the root LP, SCIP_INVALID is returned </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="992" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1abf43616778226fd887163d422c988998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetBestRootLPObjval</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetBestRootLPObjval</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the best objective value (w.r.t. root reduced cost propagation) of the root LP which belongs the root reduced cost which is accessible via SCIPvarGetRootRedcost() or the variable was no column of the root LP, SCIP_INVALID is returned </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1001" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a52a18b104d50dc9bfedfc22065732775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPvarSetBestRootSol</definition>
        <argsstring>(SCIP_VAR *var, SCIP_Real rootsol, SCIP_Real rootredcost, SCIP_Real rootlpobjval)</argsstring>
        <name>SCIPvarSetBestRootSol</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>rootsol</declname>
          <briefdescription><para>root solution value </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>rootredcost</declname>
          <briefdescription><para>root reduced cost </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>rootlpobjval</declname>
          <briefdescription><para>objective value of the root LP </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the given solution as the best root solution w.r.t. root reduced cost propagation in the variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1007" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a8345c51f4b6cd8a520c0cc8457059971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetAvgSol</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetAvgSol</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns a weighted average solution value of the variable in all feasible primal solutions found so far </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1016" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ad641d1c38d10aac2c0a9287a501f196d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
        <definition>SCIP_BDCHGINFO* SCIPvarGetLbchgInfo</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BDCHGIDX *bdchgidx, SCIP_Bool after)</argsstring>
        <name>SCIPvarGetLbchgInfo</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>active problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx</declname>
          <briefdescription><para>bound change index representing time on path to current node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>after</declname>
          <briefdescription><para>should the bound change with given index be included? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the bound change information for the last lower bound change on given active problem variable before or after the bound change with the given index was applied; returns NULL, if no change to the lower bound was applied up to this point of time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1025" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aed405d2ff5f67560b010aaaead0a1d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
        <definition>SCIP_BDCHGINFO* SCIPvarGetUbchgInfo</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BDCHGIDX *bdchgidx, SCIP_Bool after)</argsstring>
        <name>SCIPvarGetUbchgInfo</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>active problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx</declname>
          <briefdescription><para>bound change index representing time on path to current node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>after</declname>
          <briefdescription><para>should the bound change with given index be included? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the bound change information for the last upper bound change on given active problem variable before or after the bound change with the given index was applied; returns NULL, if no change to the upper bound was applied up to this point of time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1036" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a141e5c841d104d519cdae2edd7289b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
        <definition>SCIP_BDCHGINFO* SCIPvarGetBdchgInfo</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BOUNDTYPE boundtype, SCIP_BDCHGIDX *bdchgidx, SCIP_Bool after)</argsstring>
        <name>SCIPvarGetBdchgInfo</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>active problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref></type>
          <declname>boundtype</declname>
          <briefdescription><para>type of bound: lower or upper bound </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx</declname>
          <briefdescription><para>bound change index representing time on path to current node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>after</declname>
          <briefdescription><para>should the bound change with given index be included? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the bound change information for the last lower or upper bound change on given active problem variable before or after the bound change with the given index was applied; returns NULL, if no change to the lower/upper bound was applied up to this point of time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1047" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1abf655bf729d472d207ea61c628aca7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetLbAtIndex</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BDCHGIDX *bdchgidx, SCIP_Bool after)</argsstring>
        <name>SCIPvarGetLbAtIndex</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx</declname>
          <briefdescription><para>bound change index representing time on path to current node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>after</declname>
          <briefdescription><para>should the bound change with given index be included? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns lower bound of variable directly before or after the bound change given by the bound change index was applied </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1058" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ae0e30a0524730fb4a4d176fb607bc4e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetUbAtIndex</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BDCHGIDX *bdchgidx, SCIP_Bool after)</argsstring>
        <name>SCIPvarGetUbAtIndex</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx</declname>
          <briefdescription><para>bound change index representing time on path to current node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>after</declname>
          <briefdescription><para>should the bound change with given index be included? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns upper bound of variable directly before or after the bound change given by the bound change index was applied </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1068" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ad7f8ef0420a54e35e73fdfaae5440212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPvarGetBdAtIndex</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BOUNDTYPE boundtype, SCIP_BDCHGIDX *bdchgidx, SCIP_Bool after)</argsstring>
        <name>SCIPvarGetBdAtIndex</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref></type>
          <declname>boundtype</declname>
          <briefdescription><para>type of bound: lower or upper bound </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx</declname>
          <briefdescription><para>bound change index representing time on path to current node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>after</declname>
          <briefdescription><para>should the bound change with given index be included? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns lower or upper bound of variable directly before or after the bound change given by the bound change index was applied </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1078" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a11fcda08c9b188b28299a70128b1296a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarWasFixedAtIndex</definition>
        <argsstring>(SCIP_VAR *var, SCIP_BDCHGIDX *bdchgidx, SCIP_Bool after)</argsstring>
        <name>SCIPvarWasFixedAtIndex</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx</declname>
          <briefdescription><para>bound change index representing time on path to current node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>after</declname>
          <briefdescription><para>should the bound change with given index be included? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the binary variable was fixed at the time given by the bound change index </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1087" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a4f5a75f2914757afc03aa63ac0092560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
        <definition>SCIP_BDCHGIDX* SCIPvarGetLastBdchgIndex</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetLastBdchgIndex</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the last bound change index, at which the bounds of the given variable were tightened </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1095" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ae2d1a700f5c4ae28643b1aea1c73cf99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPvarGetLastBdchgDepth</definition>
        <argsstring>(SCIP_VAR *var)</argsstring>
        <name>SCIPvarGetLastBdchgDepth</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var</declname>
          <briefdescription><para>problem variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the last depth level, at which the bounds of the given variable were tightened; returns -2, if the variable&apos;s bounds are still the global bounds returns -1, if the variable was fixed in presolving </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a24708a25840970228de5ea4692dfe402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPvarWasFixedEarlier</definition>
        <argsstring>(SCIP_VAR *var1, SCIP_VAR *var2)</argsstring>
        <name>SCIPvarWasFixedEarlier</name>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var1</declname>
          <briefdescription><para>first binary variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>var2</declname>
          <briefdescription><para>second binary variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the first binary variable was fixed earlier than the second one; returns FALSE, if the first variable is not fixed, and returns TRUE, if the first variable is fixed, but the second one is not fixed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a23fca46cd3ad5f688e54137d20532ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPbdchgidxIsEarlier</definition>
        <argsstring>(SCIP_BDCHGIDX *bdchgidx1, SCIP_BDCHGIDX *bdchgidx2)</argsstring>
        <name>SCIPbdchgidxIsEarlier</name>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx1</declname>
          <briefdescription><para>first bound change index, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx2</declname>
          <briefdescription><para>second bound change index, or NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether first bound change index belongs to an earlier applied bound change than second one; if a bound change index is NULL, the bound change index represents the current time, i.e. the time after the last bound change was applied to the current node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ad62af5c2177603dedeb37df179cdcb9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPbdchgidxIsEarlierNonNull</definition>
        <argsstring>(SCIP_BDCHGIDX *bdchgidx1, SCIP_BDCHGIDX *bdchgidx2)</argsstring>
        <name>SCIPbdchgidxIsEarlierNonNull</name>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx1</declname>
          <briefdescription><para>first bound change index </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
          <declname>bdchgidx2</declname>
          <briefdescription><para>second bound change index </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether first bound change index belongs to an earlier applied bound change than second one </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a85bb9ba16f601027148f1843b5a4bac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPbdchginfoGetOldbound</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetOldbound</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns old bound that was overwritten for given bound change information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ada932ca4a3bf05573daa045bfb9c1257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPbdchginfoGetNewbound</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetNewbound</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns new bound installed for given bound change information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a50ff311153ede62964d80f2ec7f00b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
        <definition>SCIP_VAR* SCIPbdchginfoGetVar</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetVar</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns variable that belongs to the given bound change information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a9c84faa2a937a5c0a46d69a6ab53ea64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a108f6095e2a5da5783ca8b4bb3556f97" kindref="member">SCIP_BOUNDCHGTYPE</ref></type>
        <definition>SCIP_BOUNDCHGTYPE SCIPbdchginfoGetChgtype</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetChgtype</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the bound change information belongs to a branching decision or a deduction </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1acd2c02df2b42e3849815f265e885f771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref></type>
        <definition>SCIP_BOUNDTYPE SCIPbdchginfoGetBoundtype</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetBoundtype</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the bound change information belongs to a lower or upper bound change </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a56b4b92b797d7c538dd5e0a50905d153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPbdchginfoGetDepth</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetDepth</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns depth level of given bound change information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a5d0d79dd71f0de8411869e5c05955e9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPbdchginfoGetPos</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetPos</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns bound change position in its depth level of given bound change information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1ac0a634d34a9056376e5e66f5ab05c88d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref> *</type>
        <definition>SCIP_BDCHGIDX* SCIPbdchginfoGetIdx</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetIdx</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns bound change index of given bound change information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aa70881f86d34ceacc6c7cb0dec27cf4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
        <definition>SCIP_VAR* SCIPbdchginfoGetInferVar</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetInferVar</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns inference variable of given bound change information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a42471a8c41fbeb8031cabc30af23939b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> *</type>
        <definition>SCIP_CONS* SCIPbdchginfoGetInferCons</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetInferCons</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns inference constraint of given bound change information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aa441836fba901cf2d613c83960e0ac33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__prop_8h_1a6c7b32d7079dbd6e409f1c17bc3c3527" kindref="member">SCIP_PROP</ref> *</type>
        <definition>SCIP_PROP* SCIPbdchginfoGetInferProp</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetInferProp</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns inference propagator of given bound change information, or NULL if no propagator was responsible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a577b8b938b9d3b83718075937e918182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPbdchginfoGetInferInfo</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetInferInfo</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns inference user information of given bound change information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a8e3bbbf054ad4411747810e33ce67ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref></type>
        <definition>SCIP_BOUNDTYPE SCIPbdchginfoGetInferBoundtype</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoGetInferBoundtype</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns inference bound of inference variable of given bound change information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a11bd726658bec8608823d6fdef1b17d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPbdchginfoIsRedundant</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoIsRedundant</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the bound change information belongs to a redundant bound change </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aa33dae554e0a5b4c6fda2ec2eb599205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPbdchginfoHasInferenceReason</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo)</argsstring>
        <name>SCIPbdchginfoHasInferenceReason</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo</declname>
          <briefdescription><para>bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the bound change has an inference reason (constraint or propagator), that can be resolved </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a97188a791a257a985ebd8bc0984dbdc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPbdchginfoIsTighter</definition>
        <argsstring>(SCIP_BDCHGINFO *bdchginfo1, SCIP_BDCHGINFO *bdchginfo2)</argsstring>
        <name>SCIPbdchginfoIsTighter</name>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo1</declname>
          <briefdescription><para>first bound change information </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref> *</type>
          <declname>bdchginfo2</declname>
          <briefdescription><para>second bound change information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>for two bound change informations belonging to the same variable and bound, returns whether the first bound change has a tighter new bound as the second bound change </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a45940d56c97637152f81b1828f362439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPboundchgGetNewbound</definition>
        <argsstring>(SCIP_BOUNDCHG *boundchg)</argsstring>
        <name>SCIPboundchgGetNewbound</name>
        <param>
          <type><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref> *</type>
          <declname>boundchg</declname>
          <briefdescription><para>bound change data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the new value of the bound in the bound change data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a40ae6ae67312bcf6235f609ad30847fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
        <definition>SCIP_VAR* SCIPboundchgGetVar</definition>
        <argsstring>(SCIP_BOUNDCHG *boundchg)</argsstring>
        <name>SCIPboundchgGetVar</name>
        <param>
          <type><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref> *</type>
          <declname>boundchg</declname>
          <briefdescription><para>bound change data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the variable of the bound change in the bound change data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a2f815d272056ccfbc864672df7bbc9b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a108f6095e2a5da5783ca8b4bb3556f97" kindref="member">SCIP_BOUNDCHGTYPE</ref></type>
        <definition>SCIP_BOUNDCHGTYPE SCIPboundchgGetBoundchgtype</definition>
        <argsstring>(SCIP_BOUNDCHG *boundchg)</argsstring>
        <name>SCIPboundchgGetBoundchgtype</name>
        <param>
          <type><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref> *</type>
          <declname>boundchg</declname>
          <briefdescription><para>bound change data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the bound change type of the bound change in the bound change data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a1d6e9a36ddd5bd60a945d7806e22cc8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref></type>
        <definition>SCIP_BOUNDTYPE SCIPboundchgGetBoundtype</definition>
        <argsstring>(SCIP_BOUNDCHG *boundchg)</argsstring>
        <name>SCIPboundchgGetBoundtype</name>
        <param>
          <type><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref> *</type>
          <declname>boundchg</declname>
          <briefdescription><para>bound change data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the bound type of the bound change in the bound change data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aa3df503f6a6399f1b751347779c90ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPboundchgIsRedundant</definition>
        <argsstring>(SCIP_BOUNDCHG *boundchg)</argsstring>
        <name>SCIPboundchgIsRedundant</name>
        <param>
          <type><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref> *</type>
          <declname>boundchg</declname>
          <briefdescription><para>bound change data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the bound change is redundant due to a more global bound that is at least as strong </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a65b0301c0a177928352957762f37bc50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPdomchgGetNBoundchgs</definition>
        <argsstring>(SCIP_DOMCHG *domchg)</argsstring>
        <name>SCIPdomchgGetNBoundchgs</name>
        <param>
          <type><ref refid="type__var_8h_1a440799a07900a7d887c657d5b00d224d" kindref="member">SCIP_DOMCHG</ref> *</type>
          <declname>domchg</declname>
          <briefdescription><para>domain change data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of bound changes in the domain change data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a8fffc109eb5d72cec634a371695094b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref> *</type>
        <definition>SCIP_BOUNDCHG* SCIPdomchgGetBoundchg</definition>
        <argsstring>(SCIP_DOMCHG *domchg, int pos)</argsstring>
        <name>SCIPdomchgGetBoundchg</name>
        <param>
          <type><ref refid="type__var_8h_1a440799a07900a7d887c657d5b00d224d" kindref="member">SCIP_DOMCHG</ref> *</type>
          <declname>domchg</declname>
          <briefdescription><para>domain change data </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
          <briefdescription><para>position of the bound change in the domain change data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns a particular bound change in the domain change data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1aaab9f8d881dca504cbd3c008912f3195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPholelistGetLeft</definition>
        <argsstring>(SCIP_HOLELIST *holelist)</argsstring>
        <name>SCIPholelistGetLeft</name>
        <param>
          <type><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref> *</type>
          <declname>holelist</declname>
          <briefdescription><para>hole list pointer to hole of interest </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns left bound of open interval in hole </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a1f99ffa81e4e86f22cbff0024f4e88c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPholelistGetRight</definition>
        <argsstring>(SCIP_HOLELIST *holelist)</argsstring>
        <name>SCIPholelistGetRight</name>
        <param>
          <type><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref> *</type>
          <declname>holelist</declname>
          <briefdescription><para>hole list pointer to hole of interest </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns right bound of open interval in hole </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__var_8h_1a5a3fb872fab6cbc4c65cf6647e6c91d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref> *</type>
        <definition>SCIP_HOLELIST* SCIPholelistGetNext</definition>
        <argsstring>(SCIP_HOLELIST *holelist)</argsstring>
        <name>SCIPholelistGetNext</name>
        <param>
          <type><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref> *</type>
          <declname>holelist</declname>
          <briefdescription><para>hole list pointer to hole of interest </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns next hole in list or NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h" line="1291" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>public methods for problem variables </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Tobias Achterberg </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>program<sp/>and<sp/>library<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIP<sp/>---<sp/>Solving<sp/>Constraint<sp/>Integer<sp/>Programs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2002-2015<sp/>Konrad-Zuse-Zentrum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fuer<sp/>Informationstechnik<sp/>Berlin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>SCIP<sp/>is<sp/>distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>along<sp/>with<sp/>SCIP;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/>If<sp/>not<sp/>email<sp/>to<sp/>scip@zib.de.<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">/**@file<sp/><sp/><sp/>pub_var.h</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>PUBLICMETHODS</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/>public<sp/>methods<sp/>for<sp/>problem<sp/>variables</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@author<sp/>Tobias<sp/>Achterberg</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SCIP_PUB_VAR_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SCIP_PUB_VAR_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="def_8h" kindref="compound">scip/def.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__retcode_8h" kindref="compound">scip/type_retcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__misc_8h" kindref="compound">scip/type_misc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__history_8h" kindref="compound">scip/type_history.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__var_8h" kindref="compound">scip/type_var.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__implics_8h" kindref="compound">scip/type_implics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__cons_8h" kindref="compound">scip/type_cons.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;scip/struct_var.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;scip/implics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;scip/history.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>methods<sp/>for<sp/>variables<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>locks<sp/>for<sp/>rounding<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a355a3dfa07ca22bf7ad42b48d58d7ca4" kindref="member">SCIPvarGetNLocksDown</ref>(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>locks<sp/>for<sp/>rounding<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1ac32a4ea0812029dc023a53ec7d97c5f9" kindref="member">SCIPvarGetNLocksUp</ref>(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">/**<sp/>is<sp/>it<sp/>possible,<sp/>to<sp/>round<sp/>variable<sp/>down<sp/>and<sp/>stay<sp/>feasible?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a46f0170550cf27e9b83157fc53a97e11" kindref="member">SCIPvarMayRoundDown</ref>(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**<sp/>is<sp/>it<sp/>possible,<sp/>to<sp/>round<sp/>variable<sp/>up<sp/>and<sp/>stay<sp/>feasible?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a12db6e7bd03ee2c1caabed271da34f2b" kindref="member">SCIPvarMayRoundUp</ref>(</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">/**<sp/>compares<sp/>the<sp/>index<sp/>of<sp/>two<sp/>variables,<sp/>only<sp/>active<sp/>or<sp/>negated<sp/>variables<sp/>are<sp/>allowed,<sp/>if<sp/>a<sp/>variable</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>negated<sp/>then<sp/>the<sp/>index<sp/>of<sp/>the<sp/>corresponding<sp/>active<sp/>variable<sp/>is<sp/>taken,<sp/>returns<sp/>-1<sp/>if<sp/>first<sp/>is</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>smaller<sp/>than,<sp/>and<sp/>+1<sp/>if<sp/>first<sp/>is<sp/>greater<sp/>than<sp/>second<sp/>variable<sp/>index;<sp/>returns<sp/>0<sp/>if<sp/>both<sp/>indices</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>equal,<sp/>which<sp/>means<sp/>both<sp/>variables<sp/>are<sp/>equal</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a03148e0bd74ef6c65206020c8664d02a" kindref="member">SCIPvarCompareActiveAndNegated</ref>(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">/**<sp/>comparison<sp/>method<sp/>for<sp/>sorting<sp/>active<sp/>and<sp/>negated<sp/>variables<sp/>by<sp/>non-decreasing<sp/>index,<sp/>active<sp/>and<sp/>negated<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>variables<sp/>are<sp/>handled<sp/>as<sp/>the<sp/>same<sp/>variables</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="pub__var_8h_1a49cc8459c943c961c4b190f668ed3e0b" kindref="member">SCIP_DECL_SORTPTRCOMP</ref>(SCIPvarCompActiveAndNegated);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**<sp/>compares<sp/>the<sp/>index<sp/>of<sp/>two<sp/>variables,<sp/>returns<sp/>-1<sp/>if<sp/>first<sp/>is<sp/>smaller<sp/>than,<sp/>and<sp/>+1<sp/>if<sp/>first<sp/>is<sp/>greater<sp/>than<sp/>second</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>variable<sp/>index;<sp/>returns<sp/>0<sp/>if<sp/>both<sp/>indices<sp/>are<sp/>equal,<sp/>which<sp/>means<sp/>both<sp/>variables<sp/>are<sp/>equal</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1abc50899938ebb76b389c0e54a5a5ec87" kindref="member">SCIPvarCompare</ref>(</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment">/**<sp/>comparison<sp/>method<sp/>for<sp/>sorting<sp/>variables<sp/>by<sp/>non-decreasing<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="pub__var_8h_1a49cc8459c943c961c4b190f668ed3e0b" kindref="member">SCIP_DECL_SORTPTRCOMP</ref>(SCIPvarComp);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">/**<sp/>comparison<sp/>method<sp/>for<sp/>sorting<sp/>variables<sp/>by<sp/>non-decreasing<sp/>objective<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><ref refid="pub__var_8h_1a49cc8459c943c961c4b190f668ed3e0b" kindref="member">SCIP_DECL_SORTPTRCOMP</ref>(SCIPvarCompObj);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment">/**<sp/>hash<sp/>key<sp/>retrieval<sp/>function<sp/>for<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="pub__var_8h_1a3d8785085e66bdf69c0052d62bcdf6b0" kindref="member">SCIP_DECL_HASHGETKEY</ref>(SCIPvarGetHashkey);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>the<sp/>indices<sp/>of<sp/>both<sp/>variables<sp/>are<sp/>equal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="pub__var_8h_1a9e97a5bfa3f3893dfaa77abea445e2c1" kindref="member">SCIP_DECL_HASHKEYEQ</ref>(SCIPvarIsHashkeyEq);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>hash<sp/>value<sp/>of<sp/>the<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><ref refid="pub__var_8h_1ab89262d32e8c5cb1d5676bb77ca92993" kindref="member">SCIP_DECL_HASHKEYVAL</ref>(SCIPvarGetHashkeyVal);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment">/**<sp/>gets<sp/>corresponding<sp/>active,<sp/>fixed,<sp/>or<sp/>multi-aggregated<sp/>problem<sp/>variables<sp/>of<sp/>given<sp/>variables,</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>the<sp/>content<sp/>of<sp/>the<sp/>given<sp/>array<sp/>will/might<sp/>change</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a16c63cffbe431b454462bbe80acb8fc5" kindref="member">SCIPvarsGetProbvar</ref>(</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>of<sp/>problem<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvars<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment">/**<sp/>gets<sp/>corresponding<sp/>active,<sp/>fixed,<sp/>or<sp/>multi-aggregated<sp/>problem<sp/>variable<sp/>of<sp/>a<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><ref refid="pub__var_8h_1a4ee10c1d3097424d9e551fef0d6f0565" kindref="member">SCIPvarGetProbvar</ref>(</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**<sp/>gets<sp/>corresponding<sp/>active,<sp/>fixed,<sp/>or<sp/>multi-aggregated<sp/>problem<sp/>variables<sp/>of<sp/>binary<sp/>variables<sp/>and</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>updates<sp/>the<sp/>given<sp/>negation<sp/>status<sp/>of<sp/>each<sp/>variable</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__var_8h_1aedec63daf6f203fdddb5bd5d41456871" kindref="member">SCIPvarsGetProbvarBinary</ref>(</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>***<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>binary<sp/>problem<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>negatedarr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>corresponding<sp/>array<sp/>to<sp/>update<sp/>the<sp/>negation<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvars<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>variables<sp/>and<sp/>values<sp/>in<sp/>vars<sp/>and<sp/>negated<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">/**<sp/>gets<sp/>corresponding<sp/>active,<sp/>fixed,<sp/>or<sp/>multi-aggregated<sp/>problem<sp/>variable<sp/>of<sp/>a<sp/>binary<sp/>variable<sp/>and</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/>updates<sp/>the<sp/>given<sp/>negation<sp/>status</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__var_8h_1abf8fe9adb50e1c593d64f2cadf5ddca6" kindref="member">SCIPvarGetProbvarBinary</ref>(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>binary<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>negated<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>update<sp/>the<sp/>negation<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment">/**<sp/>transforms<sp/>given<sp/>variable,<sp/>boundtype<sp/>and<sp/>bound<sp/>to<sp/>the<sp/>corresponding<sp/>active,<sp/>fixed,<sp/>or<sp/>multi-aggregated<sp/>variable</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>values</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__var_8h_1a0abc3cafafc55449b21eb621a215acc7" kindref="member">SCIPvarGetProbvarBound</ref>(</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bound,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>bound<sp/>value<sp/>to<sp/>transform<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundtype<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>type<sp/>of<sp/>bound:<sp/>lower<sp/>or<sp/>upper<sp/>bound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment">/**<sp/>transforms<sp/>given<sp/>variable<sp/>and<sp/>domain<sp/>hole<sp/>to<sp/>the<sp/>corresponding<sp/>active,<sp/>fixed,<sp/>or<sp/>multi-aggregated<sp/>variable</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>values</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__var_8h_1aa8b9c60842872deec6b33242bbe569ed" kindref="member">SCIPvarGetProbvarHole</ref>(</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>left<sp/>bound<sp/>of<sp/>open<sp/>interval<sp/>in<sp/>hole<sp/>to<sp/>transform<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>right<sp/>bound<sp/>of<sp/>open<sp/>interval<sp/>in<sp/>hole<sp/>to<sp/>transform<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment">/**<sp/>retransforms<sp/>given<sp/>variable,<sp/>scalar<sp/>and<sp/>constant<sp/>to<sp/>the<sp/>corresponding<sp/>original<sp/>variable,<sp/>scalar</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>constant,<sp/>if<sp/>possible;<sp/>if<sp/>the<sp/>retransformation<sp/>is<sp/>impossible,<sp/>NULL<sp/>is<sp/>returned<sp/>as<sp/>variable</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__var_8h_1a0726ded27e5e512f12927a1ddd5248be" kindref="member">SCIPvarGetOrigvarSum</ref>(</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>problem<sp/>variable<sp/>x<sp/>in<sp/>sum<sp/>a*x<sp/>+<sp/>c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalar,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>scalar<sp/>a<sp/>in<sp/>sum<sp/>a*x<sp/>+<sp/>c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>constant<sp/>c<sp/>in<sp/>sum<sp/>a*x<sp/>+<sp/>c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>given<sp/>variable<sp/>is<sp/>the<sp/>direct<sp/>counterpart<sp/>of<sp/>an<sp/>original<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a8702e6be6a710d89f823a8cdafd2034b" kindref="member">SCIPvarIsTransformedOrigvar</ref>(</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>times,<sp/>a<sp/>bound<sp/>of<sp/>the<sp/>variable<sp/>was<sp/>changed<sp/>in<sp/>given<sp/>direction<sp/>due<sp/>to<sp/>branching<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><ref refid="def_8h_1a1e6171040084cc1f39f88e386238ee10" kindref="member">SCIP_Longint</ref><sp/><ref refid="pub__var_8h_1aa4a03580e1ab8cef6c5c22871a39fc03" kindref="member">SCIPvarGetNBranchings</ref>(</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>branching<sp/>direction<sp/>(downwards,<sp/>or<sp/>upwards)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="198"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>times,<sp/>a<sp/>bound<sp/>of<sp/>the<sp/>variable<sp/>was<sp/>changed<sp/>in<sp/>given<sp/>direction<sp/>due<sp/>to<sp/>branching</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>the<sp/>current<sp/>run</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><ref refid="def_8h_1a1e6171040084cc1f39f88e386238ee10" kindref="member">SCIP_Longint</ref><sp/><ref refid="pub__var_8h_1ac0a855279533227b587af5675ae78bad" kindref="member">SCIPvarGetNBranchingsCurrentRun</ref>(</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>branching<sp/>direction<sp/>(downwards,<sp/>or<sp/>upwards)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>inferences<sp/>branching<sp/>on<sp/>this<sp/>variable<sp/>in<sp/>given<sp/>direction<sp/>triggered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a2fc9c113a2f80508f835539d2b13672d" kindref="member">SCIPvarGetInferenceSum</ref>(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>branching<sp/>direction<sp/>(downwards,<sp/>or<sp/>upwards)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>inferences<sp/>branching<sp/>on<sp/>this<sp/>variable<sp/>in<sp/>given<sp/>direction<sp/>triggered</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>the<sp/>current<sp/>run</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1ad5a0482bdb76b5d5813039f8879f7168" kindref="member">SCIPvarGetInferenceSumCurrentRun</ref>(</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>branching<sp/>direction<sp/>(downwards,<sp/>or<sp/>upwards)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>cutoffs<sp/>branching<sp/>on<sp/>this<sp/>variable<sp/>in<sp/>given<sp/>direction<sp/>produced<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1af596106c799c3a5c243ba7443ba64132" kindref="member">SCIPvarGetCutoffSum</ref>(</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>branching<sp/>direction<sp/>(downwards,<sp/>or<sp/>upwards)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="230"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>cutoffs<sp/>branching<sp/>on<sp/>this<sp/>variable<sp/>in<sp/>given<sp/>direction<sp/>produced<sp/>in<sp/>the<sp/>current<sp/>run<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1abdf3ce5ee3dfa8783fdfa526b77ef696" kindref="member">SCIPvarGetCutoffSumCurrentRun</ref>(</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>branching<sp/>direction<sp/>(downwards,<sp/>or<sp/>upwards)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="237"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>average<sp/>depth<sp/>of<sp/>bound<sp/>changes<sp/>in<sp/>given<sp/>direction<sp/>due<sp/>to<sp/>branching<sp/>on<sp/>the<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a21f8069353c0f04a021a3fbfd5ff1245" kindref="member">SCIPvarGetAvgBranchdepth</ref>(</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>branching<sp/>direction<sp/>(downwards,<sp/>or<sp/>upwards)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>average<sp/>depth<sp/>of<sp/>bound<sp/>changes<sp/>in<sp/>given<sp/>direction<sp/>due<sp/>to<sp/>branching<sp/>on<sp/>the<sp/>variable</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>the<sp/>current<sp/>run</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a12b1e37f97c94207823cc37113aac868" kindref="member">SCIPvarGetAvgBranchdepthCurrentRun</ref>(</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>branching<sp/>direction<sp/>(downwards,<sp/>or<sp/>upwards)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>there<sp/>is<sp/>an<sp/>implication<sp/>x<sp/>==<sp/>varfixing<sp/>-&gt;<sp/>y<sp/>&lt;=<sp/>b<sp/>or<sp/>y<sp/>&gt;=<sp/>b<sp/>in<sp/>the<sp/>implication<sp/>graph;</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/>implications<sp/>that<sp/>are<sp/>represented<sp/>as<sp/>cliques<sp/>in<sp/>the<sp/>clique<sp/>table<sp/>are<sp/>not<sp/>regarded<sp/>(use<sp/>SCIPvarsHaveCommonClique());</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/><sp/>both<sp/>variables<sp/>must<sp/>be<sp/>active,<sp/>variable<sp/>x<sp/>must<sp/>be<sp/>binary</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a295800404f206ef23b87f915c7d7418e" kindref="member">SCIPvarHasImplic</ref>(</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varfixing,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>FALSE<sp/>if<sp/>y<sp/>should<sp/>be<sp/>searched<sp/>in<sp/>implications<sp/>for<sp/>x<sp/>==<sp/>0,<sp/>TRUE<sp/>for<sp/>x<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>implvar,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>variable<sp/>y<sp/>to<sp/>search<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impltype<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>type<sp/>of<sp/>implication<sp/>y<sp/>&lt;=/&gt;=<sp/>b<sp/>to<sp/>search<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="265"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>there<sp/>is<sp/>an<sp/>implication<sp/>x<sp/>==<sp/>varfixing<sp/>-&gt;<sp/>y<sp/>==<sp/>implvarfixing<sp/>in<sp/>the<sp/>implication<sp/>graph;</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/>implications<sp/>that<sp/>are<sp/>represented<sp/>as<sp/>cliques<sp/>in<sp/>the<sp/>clique<sp/>table<sp/>are<sp/>not<sp/>regarded<sp/>(use<sp/>SCIPvarsHaveCommonClique());</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>both<sp/>variables<sp/>must<sp/>be<sp/>active<sp/>binary<sp/>variables</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a7121d080a6259c0ae87b72d94d73c71f" kindref="member">SCIPvarHasBinaryImplic</ref>(</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varfixing,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>FALSE<sp/>if<sp/>y<sp/>should<sp/>be<sp/>searched<sp/>in<sp/>implications<sp/>for<sp/>x<sp/>==<sp/>0,<sp/>TRUE<sp/>for<sp/>x<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>implvar,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>variable<sp/>y<sp/>to<sp/>search<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>implvarfixing<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>of<sp/>the<sp/>implied<sp/>variable<sp/>to<sp/>search<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>there<sp/>is<sp/>a<sp/>clique<sp/>that<sp/>contains<sp/>both<sp/>given<sp/>variable/value<sp/>pairs;</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>variables<sp/>must<sp/>be<sp/>active<sp/>binary<sp/>variables;</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>regardimplics<sp/>is<sp/>FALSE,<sp/>only<sp/>the<sp/>cliques<sp/>in<sp/>the<sp/>clique<sp/>table<sp/>are<sp/>looked<sp/>at;</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>regardimplics<sp/>is<sp/>TRUE,<sp/>both<sp/>the<sp/>cliques<sp/>and<sp/>the<sp/>implications<sp/>of<sp/>the<sp/>implication<sp/>graph<sp/>are<sp/>regarded</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1ad5b82eaf0cf1d6e161e76adc2ec74083" kindref="member">SCIPvarsHaveCommonClique</ref>(</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>of<sp/>first<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>of<sp/>second<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regardimplics<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>implication<sp/>graph<sp/>also<sp/>be<sp/>searched<sp/>for<sp/>a<sp/>clique?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="291"><highlight class="comment">/**<sp/>gets<sp/>corresponding<sp/>objective<sp/>value<sp/>of<sp/>active,<sp/>fixed,<sp/>or<sp/>multi-aggregated<sp/>problem<sp/>variable<sp/>of<sp/>given<sp/>variable</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/><sp/>e.g.<sp/>obj(x)<sp/>=<sp/>1<sp/>this<sp/>method<sp/>returns<sp/>for<sp/>~x<sp/>the<sp/>value<sp/>-1</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__var_8h_1a3519b0d1c75e3bf1c39981b9433b9a31" kindref="member">SCIPvarGetAggregatedObj</ref>(</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aggrobj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>aggregated<sp/>objective<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="300"><highlight class="comment">/**<sp/>sets<sp/>the<sp/>initial<sp/>flag<sp/>of<sp/>a<sp/>variable;<sp/>only<sp/>possible<sp/>for<sp/>original<sp/>or<sp/>loose<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__var_8h_1a51fe507baf4f1e5913d041f9972db982" kindref="member">SCIPvarSetInitial</ref>(</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>initial<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment">/**<sp/>sets<sp/>the<sp/>removable<sp/>flag<sp/>of<sp/>a<sp/>variable;<sp/>only<sp/>possible<sp/>for<sp/>original<sp/>or<sp/>loose<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__var_8h_1a983a092ddf919b49f235d5e7342f71ac" kindref="member">SCIPvarSetRemovable</ref>(</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>removable<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="314"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>name<sp/>of<sp/>the<sp/>variable</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>to<sp/>change<sp/>the<sp/>name<sp/>of<sp/>a<sp/>variable,<sp/>use<sp/>SCIPchgVarName()<sp/>from<sp/>scip.h</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="pub__var_8h_1ab08e0f2c3971fe89bc2959a6fb196383" kindref="member">SCIPvarGetName</ref>(</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>times,<sp/>the<sp/>variable<sp/>is<sp/>currently<sp/>captured<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a5f2054889ea8e4e002e59e570c10e8bd" kindref="member">SCIPvarGetNUses</ref>(</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="329"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>user<sp/>data<sp/>of<sp/>the<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><ref refid="type__var_8h_1a008eb4c31318a2b51893dcbefbe41eda" kindref="member">SCIP_VARDATA</ref>*<sp/><ref refid="pub__var_8h_1a68189ccd1f497e166986ed5ed94f7bcb" kindref="member">SCIPvarGetData</ref>(</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="335"><highlight class="comment">/**<sp/>sets<sp/>the<sp/>user<sp/>data<sp/>for<sp/>the<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a8f17b03288d34f2fac86f1f7dd22ed7e" kindref="member">SCIPvarSetData</ref>(</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a008eb4c31318a2b51893dcbefbe41eda" kindref="member">SCIP_VARDATA</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vardata<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>user<sp/>variable<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="342"><highlight class="comment">/**<sp/>sets<sp/>method<sp/>to<sp/>free<sp/>user<sp/>data<sp/>for<sp/>the<sp/>original<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a041c7d9d30c1766187f66240e2ed99d6" kindref="member">SCIPvarSetDelorigData</ref>(</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a3d664f7cbdddc8194d98744eeecdbe6a" kindref="member">SCIP_DECL_VARDELORIG</ref><sp/><sp/>((*vardelorig))<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>frees<sp/>user<sp/>data<sp/>of<sp/>original<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="349"><highlight class="comment">/**<sp/>sets<sp/>method<sp/>to<sp/>transform<sp/>user<sp/>data<sp/>of<sp/>the<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a1fba1af0993948f359f7ea98bc9e1587" kindref="member">SCIPvarSetTransData</ref>(</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a5ea850f9a54e01f3c090dd2457de9e02" kindref="member">SCIP_DECL_VARTRANS</ref><sp/><sp/><sp/><sp/>((*vartrans))<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>creates<sp/>transformed<sp/>user<sp/>data<sp/>by<sp/>transforming<sp/>original<sp/>user<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="356"><highlight class="comment">/**<sp/>sets<sp/>method<sp/>to<sp/>free<sp/>transformed<sp/>user<sp/>data<sp/>for<sp/>the<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a3afd6b21bc53e155dbe673b368381854" kindref="member">SCIPvarSetDeltransData</ref>(</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a9edde06f9dc9ccc02788855773e840f5" kindref="member">SCIP_DECL_VARDELTRANS</ref><sp/>((*vardeltrans))<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>frees<sp/>user<sp/>data<sp/>of<sp/>transformed<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="363"><highlight class="comment">/**<sp/>sets<sp/>method<sp/>to<sp/>copy<sp/>this<sp/>variable<sp/>into<sp/>sub-SCIPs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1aec4f545344f36cc0bfbcebbc98464493" kindref="member">SCIPvarSetCopyData</ref>(</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a9dbea961f48f9b0e51b1e745500f5502" kindref="member">SCIP_DECL_VARCOPY</ref><sp/><sp/><sp/><sp/><sp/>((*varcopy))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>copy<sp/>method<sp/>of<sp/>the<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="370"><highlight class="comment">/**<sp/>gets<sp/>status<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><ref refid="type__var_8h_1aca7d8ff33dfcda928d28e7e40320b4dc" kindref="member">SCIP_VARSTATUS</ref><sp/><ref refid="pub__var_8h_1a2babbbbd0d346e6af3e4128770e0a0bd" kindref="member">SCIPvarGetStatus</ref>(</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="376"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>variable<sp/>belongs<sp/>to<sp/>the<sp/>original<sp/>problem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1aae5d06a0eb52d5627a555e81f0e99a02" kindref="member">SCIPvarIsOriginal</ref>(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="382"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>variable<sp/>belongs<sp/>to<sp/>the<sp/>transformed<sp/>problem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a3e41017f1a3955ebacb61b0f7927642a" kindref="member">SCIPvarIsTransformed</ref>(</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="388"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>variable<sp/>was<sp/>created<sp/>by<sp/>negation<sp/>of<sp/>a<sp/>different<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a9de9946c754b88110b45997762bc9910" kindref="member">SCIPvarIsNegated</ref>(</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="394"><highlight class="comment">/**<sp/>gets<sp/>type<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><ref refid="type__var_8h_1ac1df37286b62364af9d5fbf11aa79ff4" kindref="member">SCIP_VARTYPE</ref><sp/><ref refid="pub__var_8h_1a4e486bdb8625d736a0962923ff1a4e80" kindref="member">SCIPvarGetType</ref>(</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="400"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>if<sp/>the<sp/>variable<sp/>is<sp/>of<sp/>binary<sp/>type;<sp/>this<sp/>is<sp/>the<sp/>case<sp/>if:</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/><sp/>(1)<sp/>variable<sp/>type<sp/>is<sp/>binary</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/><sp/>(2)<sp/>variable<sp/>type<sp/>is<sp/>integer<sp/>or<sp/>implicit<sp/>integer<sp/>and<sp/></highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>(i)<sp/><sp/>the<sp/>lazy<sp/>lower<sp/>bound<sp/>or<sp/>the<sp/>global<sp/>lower<sp/>bound<sp/>is<sp/>greater<sp/>or<sp/>equal<sp/>to<sp/>zero</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>(ii)<sp/>the<sp/>lazy<sp/>upper<sp/>bound<sp/>or<sp/>the<sp/>global<sp/>upper<sp/>bound<sp/>is<sp/>less<sp/>tor<sp/>equal<sp/>to<sp/>one<sp/></highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a1bd0696bf88d004255be462f22c9d612" kindref="member">SCIPvarIsBinary</ref>(</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>variable<sp/>is<sp/>of<sp/>integral<sp/>type<sp/>(binary,<sp/>integer,<sp/>or<sp/>implicit<sp/>integer)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a86b37a794f4d1ad3889b8d405032e08d" kindref="member">SCIPvarIsIntegral</ref>(</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>variable&apos;s<sp/>column<sp/>should<sp/>be<sp/>present<sp/>in<sp/>the<sp/>initial<sp/>root<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a0173c404b0c42640d2bd5b0659861f38" kindref="member">SCIPvarIsInitial</ref>(</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="423"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>variable&apos;s<sp/>column<sp/>is<sp/>removable<sp/>from<sp/>the<sp/>LP<sp/>(due<sp/>to<sp/>aging<sp/>or<sp/>cleanup)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a9afb8b03bd046d26c5612c42e29431dd" kindref="member">SCIPvarIsRemovable</ref>(</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="429"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>variable<sp/>was<sp/>deleted<sp/>from<sp/>the<sp/>problem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a0d41609825264dd6dbf30e8dc89b2693" kindref="member">SCIPvarIsDeleted</ref>(</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="435"><highlight class="comment">/**<sp/>marks<sp/>the<sp/>variable<sp/>to<sp/>be<sp/>deletable,<sp/>i.e.,<sp/>it<sp/>may<sp/>be<sp/>deleted<sp/>completely<sp/>from<sp/>the<sp/>problem;</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/><sp/>method<sp/>can<sp/>only<sp/>be<sp/>called<sp/>before<sp/>the<sp/>variable<sp/>is<sp/>added<sp/>to<sp/>the<sp/>problem<sp/>by<sp/>SCIPaddVar()<sp/>or<sp/>SCIPaddPricedVar()</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a3f47c9e7e057200e54e1b5858f5ca428" kindref="member">SCIPvarMarkDeletable</ref>(</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="443"><highlight class="comment">/**<sp/>marks<sp/>the<sp/>variable<sp/>to<sp/>be<sp/>not<sp/>deletable<sp/>from<sp/>the<sp/>problem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1ab303f2053d2fcdadf30de3af2df17140" kindref="member">SCIPvarMarkNotDeletable</ref>(</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="449"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>variable<sp/>is<sp/>allowed<sp/>to<sp/>be<sp/>deleted<sp/>completely<sp/>from<sp/>the<sp/>problem<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a8451cabc6004d2e476f8ab3883d7e795" kindref="member">SCIPvarIsDeletable</ref>(</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="455"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>variable<sp/>is<sp/>an<sp/>active<sp/>(neither<sp/>fixed<sp/>nor<sp/>aggregated)<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a1afd61922a1042e1b8515a91bc2c49cc" kindref="member">SCIPvarIsActive</ref>(</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="461"><highlight class="comment">/**<sp/>gets<sp/>unique<sp/>index<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a5864aa0e6ff4dfa4fed18e178b644cbd" kindref="member">SCIPvarGetIndex</ref>(</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="467"><highlight class="comment">/**<sp/>gets<sp/>position<sp/>of<sp/>variable<sp/>in<sp/>problem,<sp/>or<sp/>-1<sp/>if<sp/>variable<sp/>is<sp/>not<sp/>active<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a661c5d1f7f4e09471f8d2898b5bda91c" kindref="member">SCIPvarGetProbindex</ref>(</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="473"><highlight class="comment">/**<sp/>gets<sp/>transformed<sp/>variable<sp/>of<sp/>ORIGINAL<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><ref refid="pub__var_8h_1ad3fb7925b32ab4d248131bb7eed9143d" kindref="member">SCIPvarGetTransVar</ref>(</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="479"><highlight class="comment">/**<sp/>gets<sp/>column<sp/>of<sp/>COLUMN<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><ref refid="pub__var_8h_1a75111eed912d3f76ec076b787f7a0b12" kindref="member">SCIPvarGetCol</ref>(</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="485"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>a<sp/>COLUMN<sp/>variable<sp/>that<sp/>is<sp/>member<sp/>of<sp/>the<sp/>current<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1af80ac08c4a0f337d152898e5c7eb6b20" kindref="member">SCIPvarIsInLP</ref>(</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="491"><highlight class="comment">/**<sp/>gets<sp/>aggregation<sp/>variable<sp/>y<sp/>of<sp/>an<sp/>aggregated<sp/>variable<sp/>x<sp/>=<sp/>a*y<sp/>+<sp/>c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><ref refid="pub__var_8h_1a77868654522f38513a64b92fbdf0bdb7" kindref="member">SCIPvarGetAggrVar</ref>(</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="497"><highlight class="comment">/**<sp/>gets<sp/>aggregation<sp/>scalar<sp/>a<sp/>of<sp/>an<sp/>aggregated<sp/>variable<sp/>x<sp/>=<sp/>a*y<sp/>+<sp/>c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a49c6d314048eaeefc7970953e97fa817" kindref="member">SCIPvarGetAggrScalar</ref>(</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="503"><highlight class="comment">/**<sp/>gets<sp/>aggregation<sp/>constant<sp/>c<sp/>of<sp/>an<sp/>aggregated<sp/>variable<sp/>x<sp/>=<sp/>a*y<sp/>+<sp/>c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a2fd91a7378eed18a8d10c031a23cfed3" kindref="member">SCIPvarGetAggrConstant</ref>(</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="509"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>n<sp/>of<sp/>aggregation<sp/>variables<sp/>of<sp/>a<sp/>multi<sp/>aggregated<sp/>variable<sp/>x<sp/>=<sp/>a0*y0<sp/>+<sp/>...<sp/>+<sp/>a(n-1)*y(n-1)<sp/>+<sp/>c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a97a86ea0ff5d4e7280eeaaad0a4b90f1" kindref="member">SCIPvarGetMultaggrNVars</ref>(</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="515"><highlight class="comment">/**<sp/>gets<sp/>vector<sp/>of<sp/>aggregation<sp/>variables<sp/>y<sp/>of<sp/>a<sp/>multi<sp/>aggregated<sp/>variable<sp/>x<sp/>=<sp/>a0*y0<sp/>+<sp/>...<sp/>+<sp/>a(n-1)*y(n-1)<sp/>+<sp/>c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><ref refid="pub__var_8h_1a0b04d71e1c33d5609de000604d505d45" kindref="member">SCIPvarGetMultaggrVars</ref>(</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="521"><highlight class="comment">/**<sp/>gets<sp/>vector<sp/>of<sp/>aggregation<sp/>scalars<sp/>a<sp/>of<sp/>a<sp/>multi<sp/>aggregated<sp/>variable<sp/>x<sp/>=<sp/>a0*y0<sp/>+<sp/>...<sp/>+<sp/>a(n-1)*y(n-1)<sp/>+<sp/>c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__var_8h_1ab939a181ca5289fa27acb17309dd5895" kindref="member">SCIPvarGetMultaggrScalars</ref>(</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="527"><highlight class="comment">/**<sp/>gets<sp/>aggregation<sp/>constant<sp/>c<sp/>of<sp/>a<sp/>multi<sp/>aggregated<sp/>variable<sp/>x<sp/>=<sp/>a0*y0<sp/>+<sp/>...<sp/>+<sp/>a(n-1)*y(n-1)<sp/>+<sp/>c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a137fb47be6bb6e08d2ee32b507f57cf2" kindref="member">SCIPvarGetMultaggrConstant</ref>(</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="533"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>negation<sp/>of<sp/>the<sp/>given<sp/>variable;<sp/>may<sp/>return<sp/>NULL,<sp/>if<sp/>no<sp/>negation<sp/>is<sp/>existing<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><ref refid="pub__var_8h_1a49dc5b4648f8796de7af0d8841182175" kindref="member">SCIPvarGetNegatedVar</ref>(</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>negated<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="539"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>negation<sp/>variable<sp/>x<sp/>of<sp/>a<sp/>negated<sp/>variable<sp/>x&apos;<sp/>=<sp/>offset<sp/>-<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><ref refid="pub__var_8h_1a0711d01bc5b33614363d50cf82adc88c" kindref="member">SCIPvarGetNegationVar</ref>(</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>negated<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="545"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>negation<sp/>offset<sp/>of<sp/>a<sp/>negated<sp/>variable<sp/>x&apos;<sp/>=<sp/>offset<sp/>-<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a0df9d4352f047fdcdbbe2862fb99a66c" kindref="member">SCIPvarGetNegationConstant</ref>(</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>negated<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="551"><highlight class="comment">/**<sp/>gets<sp/>objective<sp/>function<sp/>value<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a491a828fd85a9bd3e055ce67831e612c" kindref="member">SCIPvarGetObj</ref>(</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="557"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>unchanged<sp/>objective<sp/>function<sp/>value<sp/>of<sp/>variable<sp/>(ignoring<sp/>temproray<sp/>changes<sp/>performed<sp/>in<sp/>probing<sp/>mode)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1af5124b6cfa735a8b5fd498311a3fb902" kindref="member">SCIPvarGetUnchangedObj</ref>(</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="563"><highlight class="comment">/**<sp/>gets<sp/>original<sp/>lower<sp/>bound<sp/>of<sp/>original<sp/>problem<sp/>variable<sp/>(i.e.<sp/>the<sp/>bound<sp/>set<sp/>in<sp/>problem<sp/>creation)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a3b8cdee5573f5b8fe8c6587ad1ea4364" kindref="member">SCIPvarGetLbOriginal</ref>(</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>original<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="569"><highlight class="comment">/**<sp/>gets<sp/>original<sp/>upper<sp/>bound<sp/>of<sp/>original<sp/>problem<sp/>variable<sp/>(i.e.<sp/>the<sp/>bound<sp/>set<sp/>in<sp/>problem<sp/>creation)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a6bcf8502fb2e6b103277cef8aa1f1316" kindref="member">SCIPvarGetUbOriginal</ref>(</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>original<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="575"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>original<sp/>hole<sp/>list<sp/>of<sp/>an<sp/>original<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref>*<sp/><ref refid="pub__var_8h_1acbea52862bae4d3f281f5b3f6a3e02e3" kindref="member">SCIPvarGetHolelistOriginal</ref>(</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="581"><highlight class="comment">/**<sp/>gets<sp/>global<sp/>lower<sp/>bound<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1ab0eaccfc16b577470ba4526bb7173911" kindref="member">SCIPvarGetLbGlobal</ref>(</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="587"><highlight class="comment">/**<sp/>gets<sp/>global<sp/>upper<sp/>bound<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a50c332fe6b9e89e78588b5fa8e9a02f8" kindref="member">SCIPvarGetUbGlobal</ref>(</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="593"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>global<sp/>hole<sp/>list<sp/>of<sp/>an<sp/>active<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref>*<sp/><ref refid="pub__var_8h_1a8d715a4ea83fa790661f96742f1dc45c" kindref="member">SCIPvarGetHolelistGlobal</ref>(</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="599"><highlight class="comment">/**<sp/>gets<sp/>best<sp/>global<sp/>bound<sp/>of<sp/>variable<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>objective<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a228ddd7dd3218968c7fd6f8280768d2b" kindref="member">SCIPvarGetBestBoundGlobal</ref>(</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="605"><highlight class="comment">/**<sp/>gets<sp/>worst<sp/>global<sp/>bound<sp/>of<sp/>variable<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>objective<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a6d7f89b524443fc2a40d4e023eaf32e9" kindref="member">SCIPvarGetWorstBoundGlobal</ref>(</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="611"><highlight class="comment">/**<sp/>gets<sp/>current<sp/>lower<sp/>bound<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a9dc3107400e7a0a52f9c5a84ad1e6106" kindref="member">SCIPvarGetLbLocal</ref>(</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="617"><highlight class="comment">/**<sp/>gets<sp/>current<sp/>upper<sp/>bound<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a35584d0cef32cfbfc7d40148ffd71beb" kindref="member">SCIPvarGetUbLocal</ref>(</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="623"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>current<sp/>hole<sp/>list<sp/>of<sp/>an<sp/>active<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref>*<sp/><ref refid="pub__var_8h_1a8790408c0041e1c7a1f59d2b3275f4ca" kindref="member">SCIPvarGetHolelistLocal</ref>(</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="629"><highlight class="comment">/**<sp/>gets<sp/>best<sp/>local<sp/>bound<sp/>of<sp/>variable<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>objective<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a7b399e7a1ec64c86e7abaecfdab956a8" kindref="member">SCIPvarGetBestBoundLocal</ref>(</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="635"><highlight class="comment">/**<sp/>gets<sp/>worst<sp/>local<sp/>bound<sp/>of<sp/>variable<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>objective<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a5f10adc9bd65d618ad0b9d69e34504eb" kindref="member">SCIPvarGetWorstBoundLocal</ref>(</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="641"><highlight class="comment">/**<sp/>gets<sp/>type<sp/>(lower<sp/>or<sp/>upper)<sp/>of<sp/>best<sp/>bound<sp/>of<sp/>variable<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>objective<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref><sp/><ref refid="pub__var_8h_1a149e2effcd312cb91185644c0b7c4a99" kindref="member">SCIPvarGetBestBoundType</ref>(</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="647"><highlight class="comment">/**<sp/>gets<sp/>type<sp/>(lower<sp/>or<sp/>upper)<sp/>of<sp/>worst<sp/>bound<sp/>of<sp/>variable<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>objective<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref><sp/><ref refid="pub__var_8h_1ad06ecd2db32c5a221906e42631531074" kindref="member">SCIPvarGetWorstBoundType</ref>(</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="653"><highlight class="comment">/**<sp/>gets<sp/>lazy<sp/>lower<sp/>bound<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1af6e8ecba7fae29086d3bf013c94ea066" kindref="member">SCIPvarGetLbLazy</ref>(</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="659"><highlight class="comment">/**<sp/>gets<sp/>lazy<sp/>upper<sp/>bound<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a87929eb208b171d78f0c8893af8bba19" kindref="member">SCIPvarGetUbLazy</ref>(</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="665"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>branch<sp/>factor<sp/>of<sp/>the<sp/>variable;<sp/>this<sp/>value<sp/>can<sp/>be<sp/>used<sp/>in<sp/>the<sp/>branching<sp/>methods<sp/>to<sp/>scale<sp/>the<sp/>score</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/>*<sp/><sp/>values<sp/>of<sp/>the<sp/>variables;<sp/>higher<sp/>factor<sp/>leads<sp/>to<sp/>a<sp/>higher<sp/>probability<sp/>that<sp/>this<sp/>variable<sp/>is<sp/>chosen<sp/>for<sp/>branching</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a7ea7752a0ae8a7dd70543c3a3769c5d2" kindref="member">SCIPvarGetBranchFactor</ref>(</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="673"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>branch<sp/>priority<sp/>of<sp/>the<sp/>variable;<sp/>variables<sp/>with<sp/>higher<sp/>priority<sp/>should<sp/>always<sp/>be<sp/>preferred<sp/>to<sp/>variables</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*<sp/><sp/>with<sp/>lower<sp/>priority</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1aacf94c529766169739e6ac18a204cbb5" kindref="member">SCIPvarGetBranchPriority</ref>(</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="681"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>preferred<sp/>branch<sp/>direction<sp/>of<sp/>the<sp/>variable<sp/>(downwards,<sp/>upwards,<sp/>or<sp/>auto)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><ref refid="type__history_8h_1afa732c27a07268b25862c97f60f06043" kindref="member">SCIP_BRANCHDIR</ref><sp/><ref refid="pub__var_8h_1a8c411c36f82de1f5085e82b0fc9051c9" kindref="member">SCIPvarGetBranchDirection</ref>(</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="687"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>variable<sp/>lower<sp/>bounds<sp/>x<sp/>&gt;=<sp/>b_i*z_i<sp/>+<sp/>d_i<sp/>of<sp/>given<sp/>variable<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a0a73ce48405736fc83c2bfa29c7eab79" kindref="member">SCIPvarGetNVlbs</ref>(</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="693"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>bounding<sp/>variables<sp/>z_i<sp/>in<sp/>variable<sp/>lower<sp/>bounds<sp/>x<sp/>&gt;=<sp/>b_i*z_i<sp/>+<sp/>d_i<sp/>of<sp/>given<sp/>variable<sp/>x;</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>variable<sp/>bounds<sp/>are<sp/>sorted<sp/>by<sp/>increasing<sp/>variable<sp/>index<sp/>of<sp/>the<sp/>bounding<sp/>variable<sp/>z_i<sp/>(see<sp/>SCIPvarGetIndex())</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><ref refid="pub__var_8h_1aab6ae97670db43871d13d5471f95c97a" kindref="member">SCIPvarGetVlbVars</ref>(</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="701"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>bounding<sp/>coefficients<sp/>b_i<sp/>in<sp/>variable<sp/>lower<sp/>bounds<sp/>x<sp/>&gt;=<sp/>b_i*z_i<sp/>+<sp/>d_i<sp/>of<sp/>given<sp/>variable<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__var_8h_1a37ac3fd8724ad7b089b5710e371804dd" kindref="member">SCIPvarGetVlbCoefs</ref>(</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="707"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>bounding<sp/>constants<sp/>d_i<sp/>in<sp/>variable<sp/>lower<sp/>bounds<sp/>x<sp/>&gt;=<sp/>b_i*z_i<sp/>+<sp/>d_i<sp/>of<sp/>given<sp/>variable<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__var_8h_1a1f8a4e93e49112dc2338dedad0b7ad88" kindref="member">SCIPvarGetVlbConstants</ref>(</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="713"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>variable<sp/>upper<sp/>bounds<sp/>x<sp/>&lt;=<sp/>b_i*z_i<sp/>+<sp/>d_i<sp/>of<sp/>given<sp/>variable<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a7c2ce9b2f433602d5d5a0329567ce42d" kindref="member">SCIPvarGetNVubs</ref>(</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="719"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>bounding<sp/>variables<sp/>z_i<sp/>in<sp/>variable<sp/>upper<sp/>bounds<sp/>x<sp/>&lt;=<sp/>b_i*z_i<sp/>+<sp/>d_i<sp/>of<sp/>given<sp/>variable<sp/>x;</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>variable<sp/>bounds<sp/>are<sp/>sorted<sp/>by<sp/>increasing<sp/>variable<sp/>index<sp/>of<sp/>the<sp/>bounding<sp/>variable<sp/>z_i<sp/>(see<sp/>SCIPvarGetIndex())</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><ref refid="pub__var_8h_1a82b950f4963b7bb16502c952d2e8592e" kindref="member">SCIPvarGetVubVars</ref>(</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="727"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>bounding<sp/>coefficients<sp/>b_i<sp/>in<sp/>variable<sp/>upper<sp/>bounds<sp/>x<sp/>&lt;=<sp/>b_i*z_i<sp/>+<sp/>d_i<sp/>of<sp/>given<sp/>variable<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__var_8h_1a57b6a5636331bde0eb90ea22cee594c5" kindref="member">SCIPvarGetVubCoefs</ref>(</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="733"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>bounding<sp/>constants<sp/>d_i<sp/>in<sp/>variable<sp/>upper<sp/>bounds<sp/>x<sp/>&lt;=<sp/>b_i*z_i<sp/>+<sp/>d_i<sp/>of<sp/>given<sp/>variable<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__var_8h_1a1cd1b24b22cee3cc7514ab351e5c2851" kindref="member">SCIPvarGetVubConstants</ref>(</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="739"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>implications<sp/><sp/>y<sp/>&lt;=<sp/>b<sp/>or<sp/>y<sp/>&gt;=<sp/>b<sp/>for<sp/>x<sp/>==<sp/>0<sp/>or<sp/>x<sp/>==<sp/>1<sp/>of<sp/>given<sp/>active<sp/>problem<sp/>variable<sp/>x,<sp/></highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/><sp/>there<sp/>are<sp/>no<sp/>implications<sp/>for<sp/>nonbinary<sp/>variable<sp/>x</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a2a55382fbfa13f5a3f5640b83543d3da" kindref="member">SCIPvarGetNImpls</ref>(</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>active<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varfixing<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>FALSE<sp/>for<sp/>implications<sp/>for<sp/>x<sp/>==<sp/>0,<sp/>TRUE<sp/>for<sp/>x<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="748"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>implication<sp/>variables<sp/>y<sp/>of<sp/>implications<sp/><sp/>y<sp/>&lt;=<sp/>b<sp/>or<sp/>y<sp/>&gt;=<sp/>b<sp/>for<sp/>x<sp/>==<sp/>0<sp/>or<sp/>x<sp/>==<sp/>1<sp/>of<sp/>given<sp/>active</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/><sp/>problem<sp/>variable<sp/>x,<sp/>there<sp/>are<sp/>no<sp/>implications<sp/>for<sp/>nonbinary<sp/>variable<sp/>x;</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>implications<sp/>are<sp/>sorted<sp/>such<sp/>that<sp/>implications<sp/>with<sp/>binary<sp/>implied<sp/>variables<sp/>precede<sp/>the<sp/>ones<sp/>with<sp/>non-binary</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/><sp/>implied<sp/>variables,<sp/>and<sp/>as<sp/>a<sp/>second<sp/>criteria,<sp/>the<sp/>implied<sp/>variables<sp/>are<sp/>sorted<sp/>by<sp/>increasing<sp/>variable<sp/>index</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/><sp/>(see<sp/>SCIPvarGetIndex())</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><ref refid="pub__var_8h_1af6d18a4b726482e883a11e8df5ec6569" kindref="member">SCIPvarGetImplVars</ref>(</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>active<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varfixing<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>FALSE<sp/>for<sp/>implications<sp/>for<sp/>x<sp/>==<sp/>0,<sp/>TRUE<sp/>for<sp/>x<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="760"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>implication<sp/>types<sp/>of<sp/>implications<sp/><sp/>y<sp/>&lt;=<sp/>b<sp/>or<sp/>y<sp/>&gt;=<sp/>b<sp/>for<sp/>x<sp/>==<sp/>0<sp/>or<sp/>x<sp/>==<sp/>1<sp/>of<sp/>given<sp/>active<sp/>problem</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*<sp/><sp/>variable<sp/>x<sp/>(SCIP_BOUNDTYPE_UPPER<sp/>if<sp/>y<sp/>&lt;=<sp/>b,<sp/>SCIP_BOUNDTYPE_LOWER<sp/>if<sp/>y<sp/>&gt;=<sp/>b),<sp/></highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*<sp/><sp/>there<sp/>are<sp/>no<sp/>implications<sp/>for<sp/>nonbinary<sp/>variable<sp/>x</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref>*<sp/><ref refid="pub__var_8h_1a3a8afc0a15ca5a8f9dc0765d56b4f63f" kindref="member">SCIPvarGetImplTypes</ref>(</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>active<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varfixing<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>FALSE<sp/>for<sp/>implications<sp/>for<sp/>x<sp/>==<sp/>0,<sp/>TRUE<sp/>for<sp/>x<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="770"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>implication<sp/>bounds<sp/>b<sp/>of<sp/>implications<sp/><sp/>y<sp/>&lt;=<sp/>b<sp/>or<sp/>y<sp/>&gt;=<sp/>b<sp/>for<sp/>x<sp/>==<sp/>0<sp/>or<sp/>x<sp/>==<sp/>1<sp/>of<sp/>given<sp/>active<sp/>problem</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/><sp/>variable<sp/>x,<sp/>there<sp/>are<sp/>no<sp/>implications<sp/>for<sp/>nonbinary<sp/>variable<sp/>x</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__var_8h_1a85753dff191242f295d147f4e32ae3ff" kindref="member">SCIPvarGetImplBounds</ref>(</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>active<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varfixing<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>FALSE<sp/>for<sp/>implications<sp/>for<sp/>x<sp/>==<sp/>0,<sp/>TRUE<sp/>for<sp/>x<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment">/**<sp/>Gets<sp/>array<sp/>with<sp/>unique<sp/>ids<sp/>of<sp/>implications<sp/><sp/>y<sp/>&lt;=<sp/>b<sp/>or<sp/>y<sp/>&gt;=<sp/>b<sp/>for<sp/>x<sp/>==<sp/>0<sp/>or<sp/>x<sp/>==<sp/>1<sp/>of<sp/>given<sp/>active<sp/>problem<sp/>variable<sp/>x,</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*<sp/><sp/>there<sp/>are<sp/>no<sp/>implications<sp/>for<sp/>nonbinary<sp/>variable<sp/>x.</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>an<sp/>implication<sp/>is<sp/>a<sp/>shortcut,<sp/>i.e.,<sp/>it<sp/>was<sp/>added<sp/>as<sp/>part<sp/>of<sp/>the<sp/>transitive<sp/>closure<sp/>of<sp/>another<sp/>implication,</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/><sp/>its<sp/>id<sp/>is<sp/>negative,<sp/>otherwise<sp/>it<sp/>is<sp/>nonnegative.</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="pub__var_8h_1a0f7453e57ae73a9a86ebb0efc3edefb0" kindref="member">SCIPvarGetImplIds</ref>(</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>active<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varfixing<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>FALSE<sp/>for<sp/>implications<sp/>for<sp/>x<sp/>==<sp/>0,<sp/>TRUE<sp/>for<sp/>x<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="790"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>cliques,<sp/>the<sp/>active<sp/>variable<sp/>is<sp/>contained<sp/>in<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a9beee972309b5f9f4ba145a14dc78431" kindref="member">SCIPvarGetNCliques</ref>(</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>active<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varfixing<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>FALSE<sp/>for<sp/>cliques<sp/>containing<sp/>x<sp/>==<sp/>0,<sp/>TRUE<sp/>for<sp/>x<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="797"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>of<sp/>cliques,<sp/>the<sp/>active<sp/>variable<sp/>is<sp/>contained<sp/>in<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><ref refid="type__implics_8h_1a8996d60cfd393cc8ab252b68365109d2" kindref="member">SCIP_CLIQUE</ref>**<sp/><ref refid="pub__var_8h_1aef0cdf6c72c435b4046ca3d02c15074c" kindref="member">SCIPvarGetCliques</ref>(</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>active<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varfixing<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>FALSE<sp/>for<sp/>cliques<sp/>containing<sp/>x<sp/>==<sp/>0,<sp/>TRUE<sp/>for<sp/>x<sp/>==<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="804"><highlight class="comment">/**<sp/>gets<sp/>primal<sp/>LP<sp/>solution<sp/>value<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a90ddaecb3d677f1204549292a6db9019" kindref="member">SCIPvarGetLPSol</ref>(</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="810"><highlight class="comment">/**<sp/>gets<sp/>primal<sp/>NLP<sp/>solution<sp/>value<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1ac97f55d178e9dcf573aca8c03937bb64" kindref="member">SCIPvarGetNLPSol</ref>(</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="816"><highlight class="comment">/**<sp/>return<sp/>lower<sp/>bound<sp/>change<sp/>info<sp/>at<sp/>requested<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><ref refid="pub__var_8h_1a3683bd42f195469cc73ecbae92227062" kindref="member">SCIPvarGetBdchgInfoLb</ref>(</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>requested<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="823"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>number<sp/>of<sp/>lower<sp/>bound<sp/>change<sp/>info<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1ae2931a8d8ac10291f3993de7ae6eed01" kindref="member">SCIPvarGetNBdchgInfosLb</ref>(</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="829"><highlight class="comment">/**<sp/>return<sp/>upper<sp/>bound<sp/>change<sp/>info<sp/>at<sp/>requested<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><ref refid="pub__var_8h_1a329f268bdfe510f7ffb059953b6469c7" kindref="member">SCIPvarGetBdchgInfoUb</ref>(</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>requested<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="836"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>number<sp/>upper<sp/>bound<sp/>change<sp/>info<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1acb2b85af48e09485b9d1662886ae694b" kindref="member">SCIPvarGetNBdchgInfosUb</ref>(</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="842"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>value<sp/>based<sp/>history<sp/>for<sp/>the<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><ref refid="type__history_8h_1aa9e4de315317e7dc12676583027d48d9" kindref="member">SCIP_VALUEHISTORY</ref>*<sp/><ref refid="pub__var_8h_1aa4e0c485178931982457ca53bf426b98" kindref="member">SCIPvarGetValuehistory</ref>(</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>optimized<sp/>mode,<sp/>the<sp/>function<sp/>calls<sp/>are<sp/>overwritten<sp/>by<sp/>defines<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>function<sp/>calls<sp/>and</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>*<sp/>speed<sp/>up<sp/>the<sp/>algorithms.</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetName(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNUses(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;nuses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetData(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;vardata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarSetData(var,vdata)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;vardata<sp/>=<sp/>(vdata)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarSetDelorigData(var,func)<sp/>(var)-&gt;vardelorig<sp/>=<sp/>(func)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarSetTransData(var,func)<sp/><sp/><sp/>(var)-&gt;vartrans<sp/>=<sp/>(func)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarSetDeltransData(var,func)<sp/>(var)-&gt;vardeltrans<sp/>=<sp/>(func)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetStatus(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCIP_VARSTATUS)((var)-&gt;varstatus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsOriginal(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_ORIGINAL<sp/>\</highlight></codeline>
<codeline lineno="863"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((var)-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_NEGATED<sp/>&amp;&amp;<sp/>(var)-&gt;negatedvar-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_ORIGINAL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsTransformed(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;varstatus<sp/>!=<sp/>SCIP_VARSTATUS_ORIGINAL<sp/>\</highlight></codeline>
<codeline lineno="865"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>((var)-&gt;varstatus<sp/>!=<sp/>SCIP_VARSTATUS_NEGATED<sp/>||<sp/>(var)-&gt;negatedvar-&gt;varstatus<sp/>!=<sp/>SCIP_VARSTATUS_ORIGINAL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsNegated(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_NEGATED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetType(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_VARTYPE)((var)-&gt;vartype))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsBinary(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;vartype<sp/>==<sp/>SCIP_VARTYPE_BINARY<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="869"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;vartype<sp/>!=<sp/>SCIP_VARTYPE_CONTINUOUS<sp/>&amp;&amp;<sp/>MAX((var)-&gt;glbdom.lb,<sp/>(var)-&gt;lazylb)<sp/>&gt;=<sp/>0.0<sp/><sp/>&amp;&amp;<sp/>MIN((var)-&gt;glbdom.ub,<sp/>(var)-&gt;lazyub)<sp/>&lt;=<sp/>1.0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsIntegral(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;vartype<sp/>!=<sp/>SCIP_VARTYPE_CONTINUOUS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsInitial(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;initial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsRemovable(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;removable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsDeleted(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarMarkDeletable(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;deletable<sp/>=<sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarMarkNotDeletable(var)<sp/><sp/><sp/><sp/>(var)-&gt;deletable<sp/>=<sp/>FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsDeletable(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;deletable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsActive(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;probindex<sp/>&gt;=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetIndex(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetProbindex(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;probindex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetTransVar(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;data.original.transvar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetCol(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;data.col</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarIsInLP(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_COLUMN<sp/>&amp;&amp;<sp/>SCIPcolIsInLP((var)-&gt;data.col))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>use<sp/>different<sp/>name<sp/>for<sp/>var<sp/>-<sp/>otherwise<sp/>we<sp/>have<sp/>clash<sp/>with<sp/>the<sp/>var<sp/>at<sp/>the<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetAggrVar(war)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(war)-&gt;data.aggregate.var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetAggrScalar(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;data.aggregate.scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetAggrConstant(var)<sp/><sp/><sp/><sp/><sp/>(var)-&gt;data.aggregate.constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetMultaggrNVars(var)<sp/><sp/><sp/><sp/>(var)-&gt;data.multaggr.nvars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetMultaggrVars(var)<sp/><sp/><sp/><sp/><sp/>(var)-&gt;data.multaggr.vars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetMultaggrScalars(var)<sp/><sp/>(var)-&gt;data.multaggr.scalars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetMultaggrConstant(var)<sp/>(var)-&gt;data.multaggr.constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNegatedVar(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;negatedvar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNegationVar(var)<sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;negatedvar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNegationConstant(var)<sp/>(var)-&gt;data.negate.constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetObj(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;obj</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetLbOriginal(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_ORIGINAL<sp/>\</highlight></codeline>
<codeline lineno="896"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(var)-&gt;data.original.origdom.lb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="897"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(var)-&gt;data.negate.constant<sp/>-<sp/>(var)-&gt;negatedvar-&gt;data.original.origdom.ub)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetUbOriginal(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_ORIGINAL<sp/>\</highlight></codeline>
<codeline lineno="899"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(var)-&gt;data.original.origdom.ub<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="900"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(var)-&gt;data.negate.constant<sp/>-<sp/>(var)-&gt;negatedvar-&gt;data.original.origdom.lb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetHolelistOriginal(var)<sp/>((var)-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_ORIGINAL<sp/>\</highlight></codeline>
<codeline lineno="902"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(var)-&gt;data.original.origdom.holelist<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="903"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetLbGlobal(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;glbdom.lb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetUbGlobal(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;glbdom.ub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetHolelistGlobal(var)<sp/><sp/><sp/>(var)-&gt;glbdom.holelist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetBestBoundGlobal(var)<sp/><sp/>((var)-&gt;obj<sp/>&gt;=<sp/>0.0<sp/>?<sp/>(var)-&gt;glbdom.lb<sp/>:<sp/>(var)-&gt;glbdom.ub)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetWorstBoundGlobal(var)<sp/>((var)-&gt;obj<sp/>&gt;=<sp/>0.0<sp/>?<sp/>(var)-&gt;glbdom.ub<sp/>:<sp/>(var)-&gt;glbdom.lb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetLbLocal(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;locdom.lb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetUbLocal(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;locdom.ub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetHolelistLocal(var)<sp/><sp/><sp/><sp/>(var)-&gt;locdom.holelist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetBestBoundLocal(var)<sp/><sp/><sp/>((var)-&gt;obj<sp/>&gt;=<sp/>0.0<sp/>?<sp/>(var)-&gt;locdom.lb<sp/>:<sp/>(var)-&gt;locdom.ub)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetWorstBoundLocal(var)<sp/><sp/>((var)-&gt;obj<sp/>&gt;=<sp/>0.0<sp/>?<sp/>(var)-&gt;locdom.ub<sp/>:<sp/>(var)-&gt;locdom.lb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetBestBoundType(var)<sp/><sp/><sp/><sp/>((var)-&gt;obj<sp/>&gt;=<sp/>0.0<sp/>?<sp/>SCIP_BOUNDTYPE_LOWER<sp/>:<sp/>SCIP_BOUNDTYPE_UPPER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetWorstBoundType(var)<sp/><sp/><sp/>((var)-&gt;obj<sp/>&gt;=<sp/>0.0<sp/>?<sp/>SCIP_BOUNDTYPE_UPPER<sp/>:<sp/>SCIP_BOUNDTYPE_LOWER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetLbLazy(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;lazylb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetUbLazy(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;lazyub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetBranchFactor(var)<sp/><sp/><sp/><sp/><sp/>(var)-&gt;branchfactor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetBranchPriority(var)<sp/><sp/><sp/>(var)-&gt;branchpriority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetBranchDirection(var)<sp/><sp/>(var)-&gt;branchdirection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNVlbs(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCIPvboundsGetNVbds((var)-&gt;vlbs))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetVlbVars(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCIPvboundsGetVars((var)-&gt;vlbs))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetVlbCoefs(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCIPvboundsGetCoefs((var)-&gt;vlbs))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetVlbConstants(var)<sp/><sp/><sp/><sp/><sp/>(SCIPvboundsGetConstants((var)-&gt;vlbs))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNVubs(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCIPvboundsGetNVbds((var)-&gt;vubs))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetVubVars(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCIPvboundsGetVars((var)-&gt;vubs))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetVubCoefs(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCIPvboundsGetCoefs((var)-&gt;vubs))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetVubConstants(var)<sp/><sp/><sp/><sp/><sp/>(SCIPvboundsGetConstants((var)-&gt;vubs))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNImpls(var,<sp/>fix)<sp/><sp/><sp/><sp/><sp/><sp/>(SCIPimplicsGetNImpls((var)-&gt;implics,<sp/>fix))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetImplVars(var,<sp/>fix)<sp/><sp/><sp/><sp/>(SCIPimplicsGetVars((var)-&gt;implics,<sp/>fix))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetImplTypes(var,<sp/>fix)<sp/><sp/><sp/>(SCIPimplicsGetTypes((var)-&gt;implics,<sp/>fix))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetImplBounds(var,<sp/>fix)<sp/><sp/>(SCIPimplicsGetBounds((var)-&gt;implics,<sp/>fix))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetImplIds(var,<sp/>fix)<sp/><sp/><sp/><sp/><sp/>(SCIPimplicsGetIds((var)-&gt;implics,<sp/>fix))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNCliques(var,<sp/>fix)<sp/><sp/><sp/><sp/>(SCIPcliquelistGetNCliques((var)-&gt;cliquelist,<sp/>fix))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetCliques(var,<sp/>fix)<sp/><sp/><sp/><sp/><sp/>(SCIPcliquelistGetCliques((var)-&gt;cliquelist,<sp/>fix))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetLPSol(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_COLUMN<sp/>?<sp/>SCIPcolGetPrimsol((var)-&gt;data.col)<sp/>:<sp/>SCIPvarGetLPSol_rec(var))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNLPSol(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((var)-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_COLUMN<sp/>||<sp/>((var)-&gt;varstatus<sp/>==<sp/>SCIP_VARSTATUS_LOOSE))<sp/>?<sp/>(var)-&gt;nlpsol<sp/>:<sp/>SCIPvarGetNLPSol_rec(var))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetBdchgInfoLb(var,<sp/>pos)<sp/><sp/><sp/>(&amp;((var)-&gt;lbchginfos[pos]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNBdchgInfosLb(var)<sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;nlbchginfos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetBdchgInfoUb(var,<sp/>pos)<sp/><sp/><sp/>(&amp;((var)-&gt;ubchginfos[pos]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetNBdchgInfosUb(var)<sp/><sp/><sp/><sp/><sp/><sp/>((var)-&gt;nubchginfos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPvarGetValuehistory(var)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(var)-&gt;valuehistory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="946"><highlight class="comment">/**<sp/>gets<sp/>primal<sp/>LP<sp/>solution<sp/>value<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a01f6981cd14ef86e8eb83b57cd31fcc1" kindref="member">SCIPvarGetLPSol_rec</ref>(</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="952"><highlight class="comment">/**<sp/>gets<sp/>primal<sp/>NLP<sp/>solution<sp/>value<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a5b8ff3b528f6b014ed788d3f05db9748" kindref="member">SCIPvarGetNLPSol_rec</ref>(</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="958"><highlight class="comment">/**<sp/>gets<sp/>pseudo<sp/>solution<sp/>value<sp/>of<sp/>variable<sp/>at<sp/>current<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a88890ba4946444cc1a6e009b5c295d7c" kindref="member">SCIPvarGetPseudoSol</ref>(</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="964"><highlight class="comment">/**<sp/>gets<sp/>current<sp/>LP<sp/>or<sp/>pseudo<sp/>solution<sp/>value<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a16d1467c170150942eab2743452f2d90" kindref="member">SCIPvarGetSol</ref>(</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getlpval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>LP<sp/>solution<sp/>value<sp/>be<sp/>returned?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="971"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>solution<sp/>of<sp/>the<sp/>variable<sp/>in<sp/>the<sp/>last<sp/>root<sp/>node&apos;s<sp/>relaxation,<sp/>if<sp/>the<sp/>root<sp/>relaxation<sp/>is<sp/>not<sp/>yet</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/>*<sp/><sp/>completely<sp/>solved,<sp/>zero<sp/>is<sp/>returned</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a78ea1976be7ce9909629c135864325b2" kindref="member">SCIPvarGetRootSol</ref>(</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="979"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>best<sp/>solution<sp/>(w.r.t.<sp/>root<sp/>reduced<sp/>cost<sp/>propagation)<sp/>of<sp/>the<sp/>variable<sp/>in<sp/>the<sp/>root<sp/>node&apos;s<sp/>relaxation,<sp/>if</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>root<sp/>relaxation<sp/>is<sp/>not<sp/>yet<sp/>completely<sp/>solved,<sp/>zero<sp/>is<sp/>returned</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a39198bdc56cb11a4b75545e28d640a5b" kindref="member">SCIPvarGetBestRootSol</ref>(</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="987"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>best<sp/>reduced<sp/>costs<sp/>(w.r.t.<sp/>root<sp/>reduced<sp/>cost<sp/>propagation)<sp/>of<sp/>the<sp/>variable<sp/>in<sp/>the<sp/>root<sp/>node&apos;s<sp/>relaxation,</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>the<sp/>root<sp/>relaxation<sp/>is<sp/>not<sp/>yet<sp/>completely<sp/>solved,<sp/>or<sp/>the<sp/>variable<sp/>was<sp/>no<sp/>column<sp/>of<sp/>the<sp/>root<sp/>LP,<sp/>SCIP_INVALID<sp/>is</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/>*<sp/><sp/>returned</highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1ab31bcc0f7311d4984fc069a508cb37aa" kindref="member">SCIPvarGetBestRootRedcost</ref>(</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="996"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>best<sp/>objective<sp/>value<sp/>(w.r.t.<sp/>root<sp/>reduced<sp/>cost<sp/>propagation)<sp/>of<sp/>the<sp/>root<sp/>LP<sp/>which<sp/>belongs<sp/>the<sp/>root</highlight></codeline>
<codeline lineno="997"><highlight class="comment"><sp/>*<sp/><sp/>reduced<sp/>cost<sp/>which<sp/>is<sp/>accessible<sp/>via<sp/>SCIPvarGetRootRedcost()<sp/>or<sp/>the<sp/>variable<sp/>was<sp/>no<sp/>column<sp/>of<sp/>the<sp/>root<sp/>LP,</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/>*<sp/><sp/>SCIP_INVALID<sp/>is<sp/>returned</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1abf43616778226fd887163d422c988998" kindref="member">SCIPvarGetBestRootLPObjval</ref>(</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1005"><highlight class="comment">/**<sp/>set<sp/>the<sp/>given<sp/>solution<sp/>as<sp/>the<sp/>best<sp/>root<sp/>solution<sp/>w.r.t.<sp/>root<sp/>reduced<sp/>cost<sp/>propagation<sp/>in<sp/>the<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a52a18b104d50dc9bfedfc22065732775" kindref="member">SCIPvarSetBestRootSol</ref>(</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootsol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>root<sp/>solution<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootredcost,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>root<sp/>reduced<sp/>cost<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootlpobjval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>objective<sp/>value<sp/>of<sp/>the<sp/>root<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1014"><highlight class="comment">/**<sp/>returns<sp/>a<sp/>weighted<sp/>average<sp/>solution<sp/>value<sp/>of<sp/>the<sp/>variable<sp/>in<sp/>all<sp/>feasible<sp/>primal<sp/>solutions<sp/>found<sp/>so<sp/>far<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a8345c51f4b6cd8a520c0cc8457059971" kindref="member">SCIPvarGetAvgSol</ref>(</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1020"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>bound<sp/>change<sp/>information<sp/>for<sp/>the<sp/>last<sp/>lower<sp/>bound<sp/>change<sp/>on<sp/>given<sp/>active<sp/>problem<sp/>variable<sp/>before<sp/>or</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/>*<sp/><sp/>after<sp/>the<sp/>bound<sp/>change<sp/>with<sp/>the<sp/>given<sp/>index<sp/>was<sp/>applied;</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/>*<sp/><sp/>returns<sp/>NULL,<sp/>if<sp/>no<sp/>change<sp/>to<sp/>the<sp/>lower<sp/>bound<sp/>was<sp/>applied<sp/>up<sp/>to<sp/>this<sp/>point<sp/>of<sp/>time</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><ref refid="pub__var_8h_1ad641d1c38d10aac2c0a9287a501f196d" kindref="member">SCIPvarGetLbchgInfo</ref>(</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>active<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>index<sp/>representing<sp/>time<sp/>on<sp/>path<sp/>to<sp/>current<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>bound<sp/>change<sp/>with<sp/>given<sp/>index<sp/>be<sp/>included?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1031"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>bound<sp/>change<sp/>information<sp/>for<sp/>the<sp/>last<sp/>upper<sp/>bound<sp/>change<sp/>on<sp/>given<sp/>active<sp/>problem<sp/>variable<sp/>before<sp/>or</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/>*<sp/><sp/>after<sp/>the<sp/>bound<sp/>change<sp/>with<sp/>the<sp/>given<sp/>index<sp/>was<sp/>applied;</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/>*<sp/><sp/>returns<sp/>NULL,<sp/>if<sp/>no<sp/>change<sp/>to<sp/>the<sp/>upper<sp/>bound<sp/>was<sp/>applied<sp/>up<sp/>to<sp/>this<sp/>point<sp/>of<sp/>time</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><ref refid="pub__var_8h_1aed405d2ff5f67560b010aaaead0a1d4b" kindref="member">SCIPvarGetUbchgInfo</ref>(</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>active<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>index<sp/>representing<sp/>time<sp/>on<sp/>path<sp/>to<sp/>current<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>bound<sp/>change<sp/>with<sp/>given<sp/>index<sp/>be<sp/>included?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1042"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>bound<sp/>change<sp/>information<sp/>for<sp/>the<sp/>last<sp/>lower<sp/>or<sp/>upper<sp/>bound<sp/>change<sp/>on<sp/>given<sp/>active<sp/>problem<sp/>variable</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/>*<sp/><sp/>before<sp/>or<sp/>after<sp/>the<sp/>bound<sp/>change<sp/>with<sp/>the<sp/>given<sp/>index<sp/>was<sp/>applied;</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/>*<sp/><sp/>returns<sp/>NULL,<sp/>if<sp/>no<sp/>change<sp/>to<sp/>the<sp/>lower/upper<sp/>bound<sp/>was<sp/>applied<sp/>up<sp/>to<sp/>this<sp/>point<sp/>of<sp/>time</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><ref refid="pub__var_8h_1a141e5c841d104d519cdae2edd7289b13" kindref="member">SCIPvarGetBdchgInfo</ref>(</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>active<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundtype,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>type<sp/>of<sp/>bound:<sp/>lower<sp/>or<sp/>upper<sp/>bound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>index<sp/>representing<sp/>time<sp/>on<sp/>path<sp/>to<sp/>current<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>bound<sp/>change<sp/>with<sp/>given<sp/>index<sp/>be<sp/>included?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1054"><highlight class="comment">/**<sp/>returns<sp/>lower<sp/>bound<sp/>of<sp/>variable<sp/>directly<sp/>before<sp/>or<sp/>after<sp/>the<sp/>bound<sp/>change<sp/>given<sp/>by<sp/>the<sp/>bound<sp/>change<sp/>index</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/>*<sp/><sp/>was<sp/>applied</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1abf655bf729d472d207ea61c628aca7c4" kindref="member">SCIPvarGetLbAtIndex</ref>(</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>index<sp/>representing<sp/>time<sp/>on<sp/>path<sp/>to<sp/>current<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>bound<sp/>change<sp/>with<sp/>given<sp/>index<sp/>be<sp/>included?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1064"><highlight class="comment">/**<sp/>returns<sp/>upper<sp/>bound<sp/>of<sp/>variable<sp/>directly<sp/>before<sp/>or<sp/>after<sp/>the<sp/>bound<sp/>change<sp/>given<sp/>by<sp/>the<sp/>bound<sp/>change<sp/>index</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/>*<sp/><sp/>was<sp/>applied</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1ae0e30a0524730fb4a4d176fb607bc4e0" kindref="member">SCIPvarGetUbAtIndex</ref>(</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>index<sp/>representing<sp/>time<sp/>on<sp/>path<sp/>to<sp/>current<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>bound<sp/>change<sp/>with<sp/>given<sp/>index<sp/>be<sp/>included?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1074"><highlight class="comment">/**<sp/>returns<sp/>lower<sp/>or<sp/>upper<sp/>bound<sp/>of<sp/>variable<sp/>directly<sp/>before<sp/>or<sp/>after<sp/>the<sp/>bound<sp/>change<sp/>given<sp/>by<sp/>the<sp/>bound<sp/>change<sp/>index</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/>*<sp/><sp/>was<sp/>applied</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1ad7f8ef0420a54e35e73fdfaae5440212" kindref="member">SCIPvarGetBdAtIndex</ref>(</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundtype,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>type<sp/>of<sp/>bound:<sp/>lower<sp/>or<sp/>upper<sp/>bound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>index<sp/>representing<sp/>time<sp/>on<sp/>path<sp/>to<sp/>current<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>bound<sp/>change<sp/>with<sp/>given<sp/>index<sp/>be<sp/>included?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1085"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>binary<sp/>variable<sp/>was<sp/>fixed<sp/>at<sp/>the<sp/>time<sp/>given<sp/>by<sp/>the<sp/>bound<sp/>change<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a11fcda08c9b188b28299a70128b1296a" kindref="member">SCIPvarWasFixedAtIndex</ref>(</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>index<sp/>representing<sp/>time<sp/>on<sp/>path<sp/>to<sp/>current<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>bound<sp/>change<sp/>with<sp/>given<sp/>index<sp/>be<sp/>included?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1093"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>last<sp/>bound<sp/>change<sp/>index,<sp/>at<sp/>which<sp/>the<sp/>bounds<sp/>of<sp/>the<sp/>given<sp/>variable<sp/>were<sp/>tightened<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><ref refid="pub__var_8h_1a4f5a75f2914757afc03aa63ac0092560" kindref="member">SCIPvarGetLastBdchgIndex</ref>(</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1099"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>last<sp/>depth<sp/>level,<sp/>at<sp/>which<sp/>the<sp/>bounds<sp/>of<sp/>the<sp/>given<sp/>variable<sp/>were<sp/>tightened;</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/>*<sp/><sp/>returns<sp/>-2,<sp/>if<sp/>the<sp/>variable&apos;s<sp/>bounds<sp/>are<sp/>still<sp/>the<sp/>global<sp/>bounds</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/>*<sp/><sp/>returns<sp/>-1,<sp/>if<sp/>the<sp/>variable<sp/>was<sp/>fixed<sp/>in<sp/>presolving</highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1ae2d1a700f5c4ae28643b1aea1c73cf99" kindref="member">SCIPvarGetLastBdchgDepth</ref>(</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1108"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>first<sp/>binary<sp/>variable<sp/>was<sp/>fixed<sp/>earlier<sp/>than<sp/>the<sp/>second<sp/>one;</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/>*<sp/><sp/>returns<sp/>FALSE,<sp/>if<sp/>the<sp/>first<sp/>variable<sp/>is<sp/>not<sp/>fixed,<sp/>and<sp/>returns<sp/>TRUE,<sp/>if<sp/>the<sp/>first<sp/>variable<sp/>is<sp/>fixed,<sp/>but<sp/>the</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/>*<sp/><sp/>second<sp/>one<sp/>is<sp/>not<sp/>fixed</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a24708a25840970228de5ea4692dfe402" kindref="member">SCIPvarWasFixedEarlier</ref>(</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>binary<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>binary<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1118"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>first<sp/>bound<sp/>change<sp/>index<sp/>belongs<sp/>to<sp/>an<sp/>earlier<sp/>applied<sp/>bound<sp/>change<sp/>than<sp/>second<sp/>one;</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/>*<sp/><sp/>if<sp/>a<sp/>bound<sp/>change<sp/>index<sp/>is<sp/>NULL,<sp/>the<sp/>bound<sp/>change<sp/>index<sp/>represents<sp/>the<sp/>current<sp/>time,<sp/>i.e.<sp/>the<sp/>time<sp/>after<sp/>the</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/>*<sp/><sp/>last<sp/>bound<sp/>change<sp/>was<sp/>applied<sp/>to<sp/>the<sp/>current<sp/>node</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a23fca46cd3ad5f688e54137d20532ded" kindref="member">SCIPbdchgidxIsEarlier</ref>(</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>bound<sp/>change<sp/>index,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>bound<sp/>change<sp/>index,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1128"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>first<sp/>bound<sp/>change<sp/>index<sp/>belongs<sp/>to<sp/>an<sp/>earlier<sp/>applied<sp/>bound<sp/>change<sp/>than<sp/>second<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1ad62af5c2177603dedeb37df179cdcb9e" kindref="member">SCIPbdchgidxIsEarlierNonNull</ref>(</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>bound<sp/>change<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchgidx2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>bound<sp/>change<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1135"><highlight class="comment">/**<sp/>returns<sp/>old<sp/>bound<sp/>that<sp/>was<sp/>overwritten<sp/>for<sp/>given<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a85bb9ba16f601027148f1843b5a4bac0" kindref="member">SCIPbdchginfoGetOldbound</ref>(</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1141"><highlight class="comment">/**<sp/>returns<sp/>new<sp/>bound<sp/>installed<sp/>for<sp/>given<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1ada932ca4a3bf05573daa045bfb9c1257" kindref="member">SCIPbdchginfoGetNewbound</ref>(</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1147"><highlight class="comment">/**<sp/>returns<sp/>variable<sp/>that<sp/>belongs<sp/>to<sp/>the<sp/>given<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><ref refid="pub__var_8h_1a50ff311153ede62964d80f2ec7f00b70" kindref="member">SCIPbdchginfoGetVar</ref>(</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1153"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>bound<sp/>change<sp/>information<sp/>belongs<sp/>to<sp/>a<sp/>branching<sp/>decision<sp/>or<sp/>a<sp/>deduction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><ref refid="type__var_8h_1a108f6095e2a5da5783ca8b4bb3556f97" kindref="member">SCIP_BOUNDCHGTYPE</ref><sp/><ref refid="pub__var_8h_1a9c84faa2a937a5c0a46d69a6ab53ea64" kindref="member">SCIPbdchginfoGetChgtype</ref>(</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1159"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>bound<sp/>change<sp/>information<sp/>belongs<sp/>to<sp/>a<sp/>lower<sp/>or<sp/>upper<sp/>bound<sp/>change<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref><sp/><ref refid="pub__var_8h_1acd2c02df2b42e3849815f265e885f771" kindref="member">SCIPbdchginfoGetBoundtype</ref>(</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1165"><highlight class="comment">/**<sp/>returns<sp/>depth<sp/>level<sp/>of<sp/>given<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a56b4b92b797d7c538dd5e0a50905d153" kindref="member">SCIPbdchginfoGetDepth</ref>(</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1171"><highlight class="comment">/**<sp/>returns<sp/>bound<sp/>change<sp/>position<sp/>in<sp/>its<sp/>depth<sp/>level<sp/>of<sp/>given<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a5d0d79dd71f0de8411869e5c05955e9c" kindref="member">SCIPbdchginfoGetPos</ref>(</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1177"><highlight class="comment">/**<sp/>returns<sp/>bound<sp/>change<sp/>index<sp/>of<sp/>given<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>*<sp/><ref refid="pub__var_8h_1ac0a634d34a9056376e5e66f5ab05c88d" kindref="member">SCIPbdchginfoGetIdx</ref>(</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1183"><highlight class="comment">/**<sp/>returns<sp/>inference<sp/>variable<sp/>of<sp/>given<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><ref refid="pub__var_8h_1aa70881f86d34ceacc6c7cb0dec27cf4b" kindref="member">SCIPbdchginfoGetInferVar</ref>(</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1189"><highlight class="comment">/**<sp/>returns<sp/>inference<sp/>constraint<sp/>of<sp/>given<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>*<sp/><ref refid="pub__var_8h_1a42471a8c41fbeb8031cabc30af23939b" kindref="member">SCIPbdchginfoGetInferCons</ref>(</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1195"><highlight class="comment">/**<sp/>returns<sp/>inference<sp/>propagator<sp/>of<sp/>given<sp/>bound<sp/>change<sp/>information,<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>propagator<sp/>was<sp/>responsible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><ref refid="type__prop_8h_1a6c7b32d7079dbd6e409f1c17bc3c3527" kindref="member">SCIP_PROP</ref>*<sp/><ref refid="pub__var_8h_1aa441836fba901cf2d613c83960e0ac33" kindref="member">SCIPbdchginfoGetInferProp</ref>(</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1201"><highlight class="comment">/**<sp/>returns<sp/>inference<sp/>user<sp/>information<sp/>of<sp/>given<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a577b8b938b9d3b83718075937e918182" kindref="member">SCIPbdchginfoGetInferInfo</ref>(</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1207"><highlight class="comment">/**<sp/>returns<sp/>inference<sp/>bound<sp/>of<sp/>inference<sp/>variable<sp/>of<sp/>given<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref><sp/><ref refid="pub__var_8h_1a8e3bbbf054ad4411747810e33ce67ef8" kindref="member">SCIPbdchginfoGetInferBoundtype</ref>(</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1213"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>bound<sp/>change<sp/>information<sp/>belongs<sp/>to<sp/>a<sp/>redundant<sp/>bound<sp/>change<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a11bd726658bec8608823d6fdef1b17d4" kindref="member">SCIPbdchginfoIsRedundant</ref>(</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1219"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>bound<sp/>change<sp/>has<sp/>an<sp/>inference<sp/>reason<sp/>(constraint<sp/>or<sp/>propagator),<sp/>that<sp/>can<sp/>be<sp/>resolved<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1aa33dae554e0a5b4c6fda2ec2eb599205" kindref="member">SCIPbdchginfoHasInferenceReason</ref>(</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1225"><highlight class="comment">/**<sp/>for<sp/>two<sp/>bound<sp/>change<sp/>informations<sp/>belonging<sp/>to<sp/>the<sp/>same<sp/>variable<sp/>and<sp/>bound,<sp/>returns<sp/>whether<sp/>the<sp/>first<sp/>bound<sp/>change</highlight></codeline>
<codeline lineno="1226"><highlight class="comment"><sp/>*<sp/><sp/>has<sp/>a<sp/>tighter<sp/>new<sp/>bound<sp/>as<sp/>the<sp/>second<sp/>bound<sp/>change</highlight></codeline>
<codeline lineno="1227"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1a97188a791a257a985ebd8bc0984dbdc1" kindref="member">SCIPbdchginfoIsTighter</ref>(</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a925fe78a28182518adb3d63b40f938c0" kindref="member">SCIP_BDCHGINFO</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdchginfo2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>bound<sp/>change<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1234"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>new<sp/>value<sp/>of<sp/>the<sp/>bound<sp/>in<sp/>the<sp/>bound<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a45940d56c97637152f81b1828f362439" kindref="member">SCIPboundchgGetNewbound</ref>(</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundchg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1240"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>variable<sp/>of<sp/>the<sp/>bound<sp/>change<sp/>in<sp/>the<sp/>bound<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><ref refid="pub__var_8h_1a40ae6ae67312bcf6235f609ad30847fb" kindref="member">SCIPboundchgGetVar</ref>(</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundchg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1246"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>bound<sp/>change<sp/>type<sp/>of<sp/>the<sp/>bound<sp/>change<sp/>in<sp/>the<sp/>bound<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><ref refid="type__var_8h_1a108f6095e2a5da5783ca8b4bb3556f97" kindref="member">SCIP_BOUNDCHGTYPE</ref><sp/><ref refid="pub__var_8h_1a2f815d272056ccfbc864672df7bbc9b2" kindref="member">SCIPboundchgGetBoundchgtype</ref>(</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundchg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1252"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>bound<sp/>type<sp/>of<sp/>the<sp/>bound<sp/>change<sp/>in<sp/>the<sp/>bound<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref><sp/><ref refid="pub__var_8h_1a1d6e9a36ddd5bd60a945d7806e22cc8f" kindref="member">SCIPboundchgGetBoundtype</ref>(</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundchg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1258"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>bound<sp/>change<sp/>is<sp/>redundant<sp/>due<sp/>to<sp/>a<sp/>more<sp/>global<sp/>bound<sp/>that<sp/>is<sp/>at<sp/>least<sp/>as<sp/>strong<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__var_8h_1aa3df503f6a6399f1b751347779c90ff0" kindref="member">SCIPboundchgIsRedundant</ref>(</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundchg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bound<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1264"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>bound<sp/>changes<sp/>in<sp/>the<sp/>domain<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__var_8h_1a65b0301c0a177928352957762f37bc50" kindref="member">SCIPdomchgGetNBoundchgs</ref>(</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a440799a07900a7d887c657d5b00d224d" kindref="member">SCIP_DOMCHG</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domchg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>domain<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1270"><highlight class="comment">/**<sp/>returns<sp/>a<sp/>particular<sp/>bound<sp/>change<sp/>in<sp/>the<sp/>domain<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><ref refid="type__var_8h_1a4f91a3978ac708da31b1e2f1934c0849" kindref="member">SCIP_BOUNDCHG</ref>*<sp/><ref refid="pub__var_8h_1a8fffc109eb5d72cec634a371695094b8" kindref="member">SCIPdomchgGetBoundchg</ref>(</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a440799a07900a7d887c657d5b00d224d" kindref="member">SCIP_DOMCHG</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domchg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>domain<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>position<sp/>of<sp/>the<sp/>bound<sp/>change<sp/>in<sp/>the<sp/>domain<sp/>change<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1277"><highlight class="comment">/**<sp/>returns<sp/>left<sp/>bound<sp/>of<sp/>open<sp/>interval<sp/>in<sp/>hole<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1aaab9f8d881dca504cbd3c008912f3195" kindref="member">SCIPholelistGetLeft</ref>(</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holelist<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>hole<sp/>list<sp/>pointer<sp/>to<sp/>hole<sp/>of<sp/>interest<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1283"><highlight class="comment">/**<sp/>returns<sp/>right<sp/>bound<sp/>of<sp/>open<sp/>interval<sp/>in<sp/>hole<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__var_8h_1a1f99ffa81e4e86f22cbff0024f4e88c0" kindref="member">SCIPholelistGetRight</ref>(</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holelist<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>hole<sp/>list<sp/>pointer<sp/>to<sp/>hole<sp/>of<sp/>interest<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1289"><highlight class="comment">/**<sp/>returns<sp/>next<sp/>hole<sp/>in<sp/>list<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref>*<sp/><ref refid="pub__var_8h_1a5a3fb872fab6cbc4c65cf6647e6c91d3" kindref="member">SCIPholelistGetNext</ref>(</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a7b792a43b58ca5a6fc9c4a2b8249adee" kindref="member">SCIP_HOLELIST</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holelist<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>hole<sp/>list<sp/>pointer<sp/>to<sp/>hole<sp/>of<sp/>interest<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>optimized<sp/>mode,<sp/>the<sp/>function<sp/>calls<sp/>are<sp/>overwritten<sp/>by<sp/>defines<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>function<sp/>calls<sp/>and</highlight></codeline>
<codeline lineno="1298"><highlight class="comment"><sp/>*<sp/>speed<sp/>up<sp/>the<sp/>algorithms.</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchgidxIsEarlierNonNull(idx1,idx2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1302"><highlight class="preprocessor"><sp/><sp/><sp/>((idx1)-&gt;depth<sp/>&lt;<sp/>(idx2)-&gt;depth<sp/>||<sp/>((idx1)-&gt;depth<sp/>==<sp/>(idx2)-&gt;depth<sp/>&amp;&amp;<sp/>(idx1)-&gt;pos<sp/>&lt;<sp/>(idx2)-&gt;pos))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchgidxIsEarlier(idx1,idx2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1304"><highlight class="preprocessor"><sp/><sp/><sp/>((idx1)<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>((idx2)<sp/>==<sp/>NULL<sp/>||<sp/>SCIPbdchgidxIsEarlierNonNull(idx1,<sp/>idx2)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetOldbound(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bdchginfo)-&gt;oldbound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetNewbound(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bdchginfo)-&gt;newbound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetVar(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bdchginfo)-&gt;var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetChgtype(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCIP_BOUNDCHGTYPE)((bdchginfo)-&gt;boundchgtype)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetBoundtype(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/>(SCIP_BOUNDTYPE)((bdchginfo)-&gt;boundtype)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetDepth(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bdchginfo)-&gt;bdchgidx.depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetPos(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bdchginfo)-&gt;bdchgidx.pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetIdx(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;(bdchginfo)-&gt;bdchgidx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetInferVar(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bdchginfo)-&gt;inferencedata.var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetInferCons(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/>(bdchginfo)-&gt;inferencedata.reason.cons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetInferProp(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/>(bdchginfo)-&gt;inferencedata.reason.prop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetInferInfo(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/>(bdchginfo)-&gt;inferencedata.info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoGetInferBoundtype(bdchginfo)<sp/>(SCIP_BOUNDTYPE)((bdchginfo)-&gt;inferboundtype)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoIsRedundant(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bdchginfo)-&gt;redundant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoHasInferenceReason(bdchginfo)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1320"><highlight class="preprocessor"><sp/><sp/><sp/>(((bdchginfo)-&gt;boundchgtype<sp/>==<sp/>SCIP_BOUNDCHGTYPE_CONSINFER)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((bdchginfo)-&gt;boundchgtype<sp/>==<sp/>SCIP_BOUNDCHGTYPE_PROPINFER<sp/>&amp;&amp;<sp/>(bdchginfo)-&gt;inferencedata.reason.prop<sp/>!=<sp/>NULL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPbdchginfoIsTighter(bdchginfo1,bdchginfo2)<sp/>((bdchginfo1)-&gt;boundtype<sp/>==<sp/>SCIP_BOUNDTYPE_LOWER<sp/>\</highlight></codeline>
<codeline lineno="1323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(bdchginfo1)-&gt;newbound<sp/>&gt;<sp/>bdchginfo2-&gt;newbound<sp/>:<sp/>(bdchginfo1)-&gt;newbound<sp/>&lt;<sp/>bdchginfo2-&gt;newbound)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPboundchgGetNewbound(boundchg)<sp/><sp/><sp/><sp/><sp/><sp/>((boundchg)-&gt;newbound)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPboundchgGetVar(boundchg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((boundchg)-&gt;var)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPboundchgGetBoundchgtype(boundchg)<sp/><sp/>((SCIP_BOUNDCHGTYPE)((boundchg)-&gt;boundchgtype))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPboundchgGetBoundtype(boundchg)<sp/><sp/><sp/><sp/><sp/>((SCIP_BOUNDTYPE)((boundchg)-&gt;boundtype))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPboundchgIsRedundant(boundchg)<sp/><sp/><sp/><sp/><sp/><sp/>((boundchg)-&gt;redundant)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPdomchgGetNBoundchgs(domchg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((domchg)<sp/>!=<sp/>NULL<sp/>?<sp/>(domchg)-&gt;domchgbound.nboundchgs<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPdomchgGetBoundchg(domchg,<sp/>pos)<sp/><sp/><sp/><sp/><sp/>(&amp;(domchg)-&gt;domchgbound.boundchgs[pos])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPholelistGetLeft(holelist)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((holelist)-&gt;hole.left)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPholelistGetRight(holelist)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((holelist)-&gt;hole.right)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPholelistGetNext(holelist)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((holelist)-&gt;next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/pub_var.h"/>
  </compounddef>
</doxygen>
