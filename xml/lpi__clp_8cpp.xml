<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="lpi__clp_8cpp" kind="file" language="C++">
    <compoundname>lpi_clp.cpp</compoundname>
    <includes local="no">ClpSimplex.hpp</includes>
    <includes local="no">ClpPrimalColumnSteepest.hpp</includes>
    <includes local="no">ClpDualRowSteepest.hpp</includes>
    <includes local="no">CoinIndexedVector.hpp</includes>
    <includes local="no">ClpConfig.h</includes>
    <includes local="no">config_clp.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes refid="lpi_8h" local="yes">lpi/lpi.h</includes>
    <includes local="yes">scip/bitencode.h</includes>
    <includes refid="pub__message_8h" local="yes">scip/pub_message.h</includes>
    <incdepgraph>
      <node id="7800">
        <label>stdarg.h</label>
      </node>
      <node id="7797">
        <label>assert.h</label>
      </node>
      <node id="7796">
        <label>float.h</label>
      </node>
      <node id="7793">
        <label>stdint.h</label>
      </node>
      <node id="7784">
        <label>config_clp.h</label>
      </node>
      <node id="7785">
        <label>cassert</label>
      </node>
      <node id="7789">
        <label>string</label>
      </node>
      <node id="7778">
        <label>lpi_clp.cpp</label>
        <link refid="lpi_clp.cpp"/>
        <childnode refid="7779" relation="include">
        </childnode>
        <childnode refid="7780" relation="include">
        </childnode>
        <childnode refid="7781" relation="include">
        </childnode>
        <childnode refid="7782" relation="include">
        </childnode>
        <childnode refid="7783" relation="include">
        </childnode>
        <childnode refid="7784" relation="include">
        </childnode>
        <childnode refid="7785" relation="include">
        </childnode>
        <childnode refid="7786" relation="include">
        </childnode>
        <childnode refid="7787" relation="include">
        </childnode>
        <childnode refid="7788" relation="include">
        </childnode>
        <childnode refid="7789" relation="include">
        </childnode>
        <childnode refid="7790" relation="include">
        </childnode>
        <childnode refid="7804" relation="include">
        </childnode>
        <childnode refid="7799" relation="include">
        </childnode>
      </node>
      <node id="7791">
        <label>scip/def.h</label>
        <link refid="def_8h"/>
        <childnode refid="7792" relation="include">
        </childnode>
        <childnode refid="7793" relation="include">
        </childnode>
        <childnode refid="7794" relation="include">
        </childnode>
        <childnode refid="7795" relation="include">
        </childnode>
        <childnode refid="7796" relation="include">
        </childnode>
        <childnode refid="7797" relation="include">
        </childnode>
        <childnode refid="7798" relation="include">
        </childnode>
        <childnode refid="7799" relation="include">
        </childnode>
      </node>
      <node id="7781">
        <label>ClpDualRowSteepest.hpp</label>
      </node>
      <node id="7795">
        <label>limits.h</label>
      </node>
      <node id="7788">
        <label>vector</label>
      </node>
      <node id="7783">
        <label>ClpConfig.h</label>
      </node>
      <node id="7804">
        <label>scip/bitencode.h</label>
      </node>
      <node id="7794">
        <label>math.h</label>
      </node>
      <node id="7802">
        <label>blockmemshell/memory.h</label>
      </node>
      <node id="7779">
        <label>ClpSimplex.hpp</label>
      </node>
      <node id="7786">
        <label>cstdlib</label>
      </node>
      <node id="7787">
        <label>iostream</label>
      </node>
      <node id="7798">
        <label>scip/type_retcode.h</label>
        <link refid="type__retcode_8h"/>
      </node>
      <node id="7782">
        <label>CoinIndexedVector.hpp</label>
      </node>
      <node id="7803">
        <label>lpi/type_lpi.h</label>
        <link refid="type__lpi_8h"/>
      </node>
      <node id="7799">
        <label>scip/pub_message.h</label>
        <link refid="pub__message_8h"/>
        <childnode refid="7800" relation="include">
        </childnode>
        <childnode refid="7791" relation="include">
        </childnode>
        <childnode refid="7801" relation="include">
        </childnode>
      </node>
      <node id="7801">
        <label>scip/type_message.h</label>
        <link refid="type__message_8h"/>
        <childnode refid="7792" relation="include">
        </childnode>
      </node>
      <node id="7792">
        <label>stdio.h</label>
      </node>
      <node id="7790">
        <label>lpi/lpi.h</label>
        <link refid="lpi_8h"/>
        <childnode refid="7791" relation="include">
        </childnode>
        <childnode refid="7802" relation="include">
        </childnode>
        <childnode refid="7798" relation="include">
        </childnode>
        <childnode refid="7803" relation="include">
        </childnode>
      </node>
      <node id="7780">
        <label>ClpPrimalColumnSteepest.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>Miscellaneous Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1aed7c57c93675aae2562abab53b487ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SCIPlpiGetSolverName</definition>
        <argsstring>(void)</argsstring>
        <name>SCIPlpiGetSolverName</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets name and version of LP solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="433" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="433" bodyend="439"/>
        <references refid="lpi__clp_8cpp_1a0ee1156529fc4949ac9510375ecc54dd" compoundref="lpi__clp_8cpp" startline="66">CLP_VERSION</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a6cfc10a9902214c1ac825998bebdea19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SCIPlpiGetSolverDesc</definition>
        <argsstring>(void)</argsstring>
        <name>SCIPlpiGetSolverDesc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets description of LP solver (developer, webpage, ...) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="442" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="442" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ac8b0874105d4a69fd4e35455d488edb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* SCIPlpiGetSolverPointer</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiGetSolverPointer</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>pointer to an LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets pointer for LP solver - use only with great care </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="450" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="450" bodyend="455"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>LPI Creation and Destruction Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1ae522c0e79b2f2c7d185e6b6cafec1a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiCreate</definition>
        <argsstring>(SCIP_LPI **lpi, SCIP_MESSAGEHDLR *messagehdlr, const char *name, SCIP_OBJSEN objsen)</argsstring>
        <name>SCIPlpiCreate</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> **</type>
          <declname>lpi</declname>
          <briefdescription><para>pointer to an LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref> *</type>
          <declname>messagehdlr</declname>
          <briefdescription><para>message handler to use for printing messages, or NULL </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <briefdescription><para>problem name </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref></type>
          <declname>objsen</declname>
          <briefdescription><para>objective sense </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an LP problem object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="469" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="469" bodyend="534"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="def_8h_1a7695e892dc456d85a3654eb158976921" compoundref="def_8h" startline="274">SCIP_ALLOC</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba0114e2317d0236d43fb3b297ee9aea8d" compoundref="type__lpi_8h" startline="45">SCIP_LPPAR_PRICING</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a840117e919783bcc69646f544c2db051" compoundref="type__lpi_8h" startline="66">SCIP_PRICING_LPIDEFAULT</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="lpi__clp_8cpp_1a8dac6dec76901acef9c18397582c5e9a" compoundref="lpi__clp_8cpp" startline="3491" endline="3589">SCIPlpiSetIntpar</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a6dfadd74b4f72eea58d0946ec9ea6f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiFree</definition>
        <argsstring>(SCIP_LPI **lpi)</argsstring>
        <name>SCIPlpiFree</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> **</type>
          <declname>lpi</declname>
          <briefdescription><para>pointer to an LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deletes an LP problem object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="538" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="538" bodyend="557"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modification Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1ae23bc1c98c8547a0ba03682d100365dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiLoadColLP</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_OBJSEN objsen, int ncols, const SCIP_Real *obj, const SCIP_Real *lb, const SCIP_Real *ub, char **colnames, int nrows, const SCIP_Real *lhs, const SCIP_Real *rhs, char **rownames, int nnonz, const int *beg, const int *ind, const SCIP_Real *val)</argsstring>
        <name>SCIPlpiLoadColLP</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref></type>
          <declname>objsen</declname>
          <briefdescription><para>objective sense </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>obj</declname>
          <briefdescription><para>objective function values of columns </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lb</declname>
          <briefdescription><para>lower bounds of columns </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ub</declname>
          <briefdescription><para>upper bounds of columns </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>colnames</declname>
          <briefdescription><para>column names, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nrows</declname>
          <briefdescription><para>number of rows </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lhs</declname>
          <briefdescription><para>left hand sides of rows </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>rhs</declname>
          <briefdescription><para>right hand sides of rows </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>rownames</declname>
          <briefdescription><para>row names, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nnonz</declname>
          <briefdescription><para>number of nonzero elements in the constraint matrix </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>beg</declname>
          <briefdescription><para>start index of each column in ind- and val-array </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>ind</declname>
          <briefdescription><para>row indices of constraint matrix entries </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>values of constraint matrix entries </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copies LP data with column matrix into LP solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="572" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="572" bodyend="634"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a7695e892dc456d85a3654eb158976921" compoundref="def_8h" startline="274">SCIP_ALLOC</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1add77293153dc03295e1782af22921906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiAddCols</definition>
        <argsstring>(SCIP_LPI *lpi, int ncols, const SCIP_Real *obj, const SCIP_Real *lb, const SCIP_Real *ub, char **colnames, int nnonz, const int *beg, const int *ind, const SCIP_Real *val)</argsstring>
        <name>SCIPlpiAddCols</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns to be added </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>obj</declname>
          <briefdescription><para>objective function values of new columns </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lb</declname>
          <briefdescription><para>lower bounds of new columns </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ub</declname>
          <briefdescription><para>upper bounds of new columns </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>colnames</declname>
          <briefdescription><para>column names, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nnonz</declname>
          <briefdescription><para>number of nonzero elements to be added to the constraint matrix </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>beg</declname>
          <briefdescription><para>start index of each column in ind- and val-array, or 0 if nnonz == 0 </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>ind</declname>
          <briefdescription><para>row indices of constraint matrix entries, or 0 if nnonz == 0 </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>values of constraint matrix entries, or 0 if nnonz == 0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds columns to the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="638" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="638" bodyend="701"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a7695e892dc456d85a3654eb158976921" compoundref="def_8h" startline="274">SCIP_ALLOC</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1af651ff93b2be704cacb27c13b24ab311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiDelCols</definition>
        <argsstring>(SCIP_LPI *lpi, int firstcol, int lastcol)</argsstring>
        <name>SCIPlpiDelCols</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
          <briefdescription><para>first column to be deleted </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastcol</declname>
          <briefdescription><para>last column to be deleted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deletes all columns in the given range from LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="705" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="705" bodyend="732"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a7695e892dc456d85a3654eb158976921" compoundref="def_8h" startline="274">SCIP_ALLOC</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ac93976edb5a40906de3c2163b2fafec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiDelColset</definition>
        <argsstring>(SCIP_LPI *lpi, int *dstat)</argsstring>
        <name>SCIPlpiDelColset</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>dstat</declname>
          <briefdescription><para>deletion status of columns input: 1 if column should be deleted, 0 if not output: new position of column, -1 if column was deleted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deletes columns from SCIP_LPI; the new position of a column must not be greater that its old position </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="736" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="736" bodyend="778"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a7695e892dc456d85a3654eb158976921" compoundref="def_8h" startline="274">SCIP_ALLOC</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a2bad82670d46254daf3e923898c404d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiAddRows</definition>
        <argsstring>(SCIP_LPI *lpi, int nrows, const SCIP_Real *lhs, const SCIP_Real *rhs, char **rownames, int nnonz, const int *beg, const int *ind, const SCIP_Real *val)</argsstring>
        <name>SCIPlpiAddRows</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nrows</declname>
          <briefdescription><para>number of rows to be added </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lhs</declname>
          <briefdescription><para>left hand sides of new rows </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>rhs</declname>
          <briefdescription><para>right hand sides of new rows </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>rownames</declname>
          <briefdescription><para>row names, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nnonz</declname>
          <briefdescription><para>number of nonzero elements to be added to the constraint matrix </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>beg</declname>
          <briefdescription><para>start index of each row in ind- and val-array, or 0 if nnonz == 0 </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>ind</declname>
          <briefdescription><para>column indices of constraint matrix entries, or 0 if nnonz == 0 </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>values of constraint matrix entries, or 0 if nnonz == 0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds rows to the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="782" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="782" bodyend="840"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a7695e892dc456d85a3654eb158976921" compoundref="def_8h" startline="274">SCIP_ALLOC</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a95a88cc92b9c3061762849aeb2edc9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiDelRows</definition>
        <argsstring>(SCIP_LPI *lpi, int firstrow, int lastrow)</argsstring>
        <name>SCIPlpiDelRows</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstrow</declname>
          <briefdescription><para>first row to be deleted </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastrow</declname>
          <briefdescription><para>last row to be deleted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deletes all rows in the given range from LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="844" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="844" bodyend="872"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a7695e892dc456d85a3654eb158976921" compoundref="def_8h" startline="274">SCIP_ALLOC</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1af7385b74de163f5ae25b77e99c7bdc1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiDelRowset</definition>
        <argsstring>(SCIP_LPI *lpi, int *dstat)</argsstring>
        <name>SCIPlpiDelRowset</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>dstat</declname>
          <briefdescription><para>deletion status of rows input: 1 if row should be deleted, 0 if not output: new position of row, -1 if row was deleted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deletes rows from SCIP_LP; the new position of a row must not be greater that its old position </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="876" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="876" bodyend="918"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a7695e892dc456d85a3654eb158976921" compoundref="def_8h" startline="274">SCIP_ALLOC</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a18664e9f784a12522aa9ec6e775e5a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiClear</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiClear</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clears the whole LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="922" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="922" bodyend="937"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a69472179ed0e902cb865b8bd3941c461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiChgBounds</definition>
        <argsstring>(SCIP_LPI *lpi, int ncols, const int *ind, const SCIP_Real *lb, const SCIP_Real *ub)</argsstring>
        <name>SCIPlpiChgBounds</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns to change bounds for </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>ind</declname>
          <briefdescription><para>column indices </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lb</declname>
          <briefdescription><para>values for the new lower bounds </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ub</declname>
          <briefdescription><para>values for the new upper bounds </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes lower and upper bounds of columns </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="941" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="941" bodyend="1003"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a00fa12a201791dbba7d4b17a75fe7ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiChgSides</definition>
        <argsstring>(SCIP_LPI *lpi, int nrows, const int *ind, const SCIP_Real *lhs, const SCIP_Real *rhs)</argsstring>
        <name>SCIPlpiChgSides</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nrows</declname>
          <briefdescription><para>number of rows to change sides for </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>ind</declname>
          <briefdescription><para>row indices </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lhs</declname>
          <briefdescription><para>new values for left hand sides </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>rhs</declname>
          <briefdescription><para>new values for right hand sides </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes left and right hand sides of rows </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1007" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1007" bodyend="1031"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1aff2b648673b8baac9903c236a97c267b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiChgCoef</definition>
        <argsstring>(SCIP_LPI *lpi, int row, int col, SCIP_Real newval)</argsstring>
        <name>SCIPlpiChgCoef</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
          <briefdescription><para>row number of coefficient to change </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column number of coefficient to change </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>newval</declname>
          <briefdescription><para>new value of coefficient </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes a single coefficient </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1035" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1035" bodyend="1054"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a0d794ce162ec1c45eb776baa2ffdc79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiChgObjsen</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_OBJSEN objsen)</argsstring>
        <name>SCIPlpiChgObjsen</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref></type>
          <declname>objsen</declname>
          <briefdescription><para>new objective sense </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes the objective sense </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1058" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1058" bodyend="1074"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a8f18465d14a5d1116c1dc8ea6cf90ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiChgObj</definition>
        <argsstring>(SCIP_LPI *lpi, int ncols, int *ind, SCIP_Real *obj)</argsstring>
        <name>SCIPlpiChgObj</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns to change objective value for </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ind</declname>
          <briefdescription><para>column indices to change objective value for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>obj</declname>
          <briefdescription><para>new objective values for columns </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes objective values of columns in the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1078" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1078" bodyend="1101"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1af94ca6a608b8e0be96158d78270b2715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiScaleRow</definition>
        <argsstring>(SCIP_LPI *lpi, int row, SCIP_Real scaleval)</argsstring>
        <name>SCIPlpiScaleRow</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
          <briefdescription><para>row number to scale </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>scaleval</declname>
          <briefdescription><para>scaling multiplier </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>multiplies a row with a non-zero scalar; for negative scalars, the row&apos;s sense is switched accordingly </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1105" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1105" bodyend="1172"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" compoundref="def_8h" startline="124">SCIP_Real</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a598ccc37a344e88c584b37691f162432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiScaleCol</definition>
        <argsstring>(SCIP_LPI *lpi, int col, SCIP_Real scaleval)</argsstring>
        <name>SCIPlpiScaleCol</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column number to scale </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>scaleval</declname>
          <briefdescription><para>scaling multiplier </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>multiplies a column with a non-zero scalar; the objective value is multiplied with the scalar, and the bounds are divided by the scalar; for negative scalars, the column&apos;s bounds are switched </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1178" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1178" bodyend="1238"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" compoundref="def_8h" startline="124">SCIP_Real</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Data Accessing Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1afc4ba497c8fef592df0c5bf7745bf9d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetNRows</definition>
        <argsstring>(SCIP_LPI *lpi, int *nrows)</argsstring>
        <name>SCIPlpiGetNRows</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nrows</declname>
          <briefdescription><para>pointer to store the number of rows </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the number of rows in the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1255" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1255" bodyend="1269"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1af0f0eab6882439ab9e263d6754c102f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetNCols</definition>
        <argsstring>(SCIP_LPI *lpi, int *ncols)</argsstring>
        <name>SCIPlpiGetNCols</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ncols</declname>
          <briefdescription><para>pointer to store the number of cols </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the number of columns in the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1273" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1273" bodyend="1287"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a4e84473a9742d228d1112cf94e0337e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetNNonz</definition>
        <argsstring>(SCIP_LPI *lpi, int *nnonz)</argsstring>
        <name>SCIPlpiGetNNonz</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nnonz</declname>
          <briefdescription><para>pointer to store the number of nonzeros </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the number of nonzero elements in the LP constraint matrix </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1291" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1291" bodyend="1305"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a9b718ef73cb5d6544472fb05f2193d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetCols</definition>
        <argsstring>(SCIP_LPI *lpi, int firstcol, int lastcol, SCIP_Real *lb, SCIP_Real *ub, int *nnonz, int *beg, int *ind, SCIP_Real *val)</argsstring>
        <name>SCIPlpiGetCols</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
          <briefdescription><para>first column to get from LP </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastcol</declname>
          <briefdescription><para>last column to get from LP </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lb</declname>
          <briefdescription><para>buffer to store the lower bound vector, or 0 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ub</declname>
          <briefdescription><para>buffer to store the upper bound vector, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nnonz</declname>
          <briefdescription><para>pointer to store the number of nonzero elements returned, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>beg</declname>
          <briefdescription><para>buffer to store start index of each column in ind- and val-array, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ind</declname>
          <briefdescription><para>buffer to store column indices of constraint matrix entries, or 0 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store values of constraint matrix entries, or 0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets columns from LP problem object; the arrays have to be large enough to store all values Either both, lb and ub, have to be 0, or both have to be non-0, either nnonz, beg, ind, and val have to be 0, or all of them have to be non-0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1312" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1312" bodyend="1372"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1aa925f44c4f2e5640b79ff87f8166d92e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetRows</definition>
        <argsstring>(SCIP_LPI *lpi, int firstrow, int lastrow, SCIP_Real *lhs, SCIP_Real *rhs, int *nnonz, int *beg, int *ind, SCIP_Real *val)</argsstring>
        <name>SCIPlpiGetRows</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstrow</declname>
          <briefdescription><para>first row to get from LP </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastrow</declname>
          <briefdescription><para>last row to get from LP </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lhs</declname>
          <briefdescription><para>buffer to store left hand side vector, or 0 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>rhs</declname>
          <briefdescription><para>buffer to store right hand side vector, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nnonz</declname>
          <briefdescription><para>pointer to store the number of nonzero elements returned, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>beg</declname>
          <briefdescription><para>buffer to store start index of each row in ind- and val-array, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ind</declname>
          <briefdescription><para>buffer to store row indices of constraint matrix entries, or 0 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store values of constraint matrix entries, or 0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets rows from LP problem object; the arrays have to be large enough to store all values. Either both, lhs and rhs, have to be 0, or both have to be non-0, either nnonz, beg, ind, and val have to be 0, or all of them have to be non-0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1379" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1379" bodyend="1439"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1aa01800088106fccc11758d86646a1933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetColNames</definition>
        <argsstring>(SCIP_LPI *lpi, int firstcol, int lastcol, char **colnames, char *namestorage, int namestoragesize, int *storageleft)</argsstring>
        <name>SCIPlpiGetColNames</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
          <briefdescription><para>first column to get name from LP </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastcol</declname>
          <briefdescription><para>last column to get name from LP </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>colnames</declname>
          <briefdescription><para>pointers to column names (of size at least lastcol-firstcol+1) </para></briefdescription>
        </param>
        <param>
          <type>char *</type>
          <declname>namestorage</declname>
          <briefdescription><para>storage for col names </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>namestoragesize</declname>
          <briefdescription><para>size of namestorage (if 0, storageleft returns the storage needed) </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>storageleft</declname>
          <briefdescription><para>amount of storage left (if &lt; 0 the namestorage was not big enough) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets column names </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1443" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1443" bodyend="1455"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" compoundref="type__retcode_8h" startline="40">SCIP_LPERROR</references>
        <references refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" compoundref="pub__message_8h" startline="45">SCIPerrorMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ab84a1811166e562112166eeddafe5f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetRowNames</definition>
        <argsstring>(SCIP_LPI *lpi, int firstrow, int lastrow, char **rownames, char *namestorage, int namestoragesize, int *storageleft)</argsstring>
        <name>SCIPlpiGetRowNames</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstrow</declname>
          <briefdescription><para>first row to get name from LP </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastrow</declname>
          <briefdescription><para>last row to get name from LP </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>rownames</declname>
          <briefdescription><para>pointers to row names (of size at least lastrow-firstrow+1) </para></briefdescription>
        </param>
        <param>
          <type>char *</type>
          <declname>namestorage</declname>
          <briefdescription><para>storage for row names </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>namestoragesize</declname>
          <briefdescription><para>size of namestorage (if 0, -storageleft returns the storage needed) </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>storageleft</declname>
          <briefdescription><para>amount of storage left (if &lt; 0 the namestorage was not big enough) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets row names </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1459" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1459" bodyend="1471"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" compoundref="type__retcode_8h" startline="40">SCIP_LPERROR</references>
        <references refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" compoundref="pub__message_8h" startline="45">SCIPerrorMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a6b24f7dd3dfac27d08f1cfc777e56a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiIgnoreInstability</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Bool *success)</argsstring>
        <name>SCIPlpiIgnoreInstability</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>success</declname>
          <briefdescription><para>pointer to store, whether the instability could be ignored </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tries to reset the internal status of the LP solver in order to ignore an instability of the last solving call </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1475" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1475" bodyend="1489"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1aee46b15c0fa3d6d86be4e3bf741f34b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetObjsen</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_OBJSEN *objsen)</argsstring>
        <name>SCIPlpiGetObjsen</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref> *</type>
          <declname>objsen</declname>
          <briefdescription><para>pointer to store objective sense </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the objective sense of the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1493" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1493" bodyend="1509"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__lpi_8h_1af1bc7f4fad28ccf4753250fa0558373ba32ae01999ecd89f94f4a0bd0b6be60c6" compoundref="type__lpi_8h" startline="33">SCIP_OBJSEN_MAXIMIZE</references>
        <references refid="type__lpi_8h_1af1bc7f4fad28ccf4753250fa0558373bab25a52cd6604d9c8c5fd02c5e03180a7" compoundref="type__lpi_8h" startline="34">SCIP_OBJSEN_MINIMIZE</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1accf7c7a0ba8f375dbfa9bce872586951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetObj</definition>
        <argsstring>(SCIP_LPI *lpi, int firstcol, int lastcol, SCIP_Real *vals)</argsstring>
        <name>SCIPlpiGetObj</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
          <briefdescription><para>first column to get objective coefficient for </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastcol</declname>
          <briefdescription><para>last column to get objective coefficient for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>vals</declname>
          <briefdescription><para>array to store objective coefficients </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets objective coefficients from LP problem object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1513" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1513" bodyend="1532"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a534fd30b49c755aea9b96a0365ee41b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBounds</definition>
        <argsstring>(SCIP_LPI *lpi, int firstcol, int lastcol, SCIP_Real *lbs, SCIP_Real *ubs)</argsstring>
        <name>SCIPlpiGetBounds</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
          <briefdescription><para>first column to get objective value for </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastcol</declname>
          <briefdescription><para>last column to get objective value for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lbs</declname>
          <briefdescription><para>array to store lower bound values, or 0 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ubs</declname>
          <briefdescription><para>array to store upper bound values, or 0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets current bounds from LP problem object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1536" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1536" bodyend="1563"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1abd761e9fb6a1dd346a08c94a50192d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetSides</definition>
        <argsstring>(SCIP_LPI *lpi, int firstrow, int lastrow, SCIP_Real *lhss, SCIP_Real *rhss)</argsstring>
        <name>SCIPlpiGetSides</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstrow</declname>
          <briefdescription><para>first row to get sides for </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastrow</declname>
          <briefdescription><para>last row to get sides for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lhss</declname>
          <briefdescription><para>array to store left hand side values, or 0 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>rhss</declname>
          <briefdescription><para>array to store right hand side values, or 0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets current row sides from LP problem object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1567" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1567" bodyend="1594"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a7ae0750d24c1e5ad1c719ca4a601b511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetCoef</definition>
        <argsstring>(SCIP_LPI *lpi, int row, int col, SCIP_Real *val)</argsstring>
        <name>SCIPlpiGetCoef</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
          <briefdescription><para>row number of coefficient </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column number of coefficient </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>pointer to store the value of the coefficient </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets a single coefficient </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1598" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1598" bodyend="1616"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Solving Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1adff9cd01f05724d2e00808ebd09c8e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSolvePrimal</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiSolvePrimal</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calls primal simplex to solve the LP </para>        </detaileddescription>
        <inbodydescription>
<para>startFinishOptions - bits 1 - do not delete work areas and factorization at end 2 - use old factorization if same number of rows 4 - skip as much initialization of work areas as possible (work in progress)</para><para>4 does not seem to work.</para><para>Primal algorithm </para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1632" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1632" bodyend="1701"/>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" compoundref="type__retcode_8h" startline="40">SCIP_LPERROR</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="lpi__clp_8cpp_1a311a14142841041e24d522b281124f57" compoundref="lpi__clp_8cpp" startline="3775" endline="3796">SCIPlpiWriteLP</references>
        <references refid="lpi__clp_8cpp_1a6b360b8eb706948179cc3b46fa4df372" compoundref="lpi__clp_8cpp" startline="3356" endline="3376">SCIPlpiWriteState</references>
        <references refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="def_8h" startline="52">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ad87b0da429ef0a5ef34ccdd01cc2309d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSolveDual</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiSolveDual</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calls dual simplex to solve the LP </para>        </detaileddescription>
        <inbodydescription>
<para>startFinishOptions - bits 1 - do not delete work areas and factorization at end 2 - use old factorization if same number of rows 4 - skip as much initialization of work areas as possible (work in progress)</para><para>4 does not seem to work.</para><para>Dual algorithm </para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1705" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1705" bodyend="1776"/>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" compoundref="type__retcode_8h" startline="40">SCIP_LPERROR</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="lpi__clp_8cpp_1a311a14142841041e24d522b281124f57" compoundref="lpi__clp_8cpp" startline="3775" endline="3796">SCIPlpiWriteLP</references>
        <references refid="lpi__clp_8cpp_1a6b360b8eb706948179cc3b46fa4df372" compoundref="lpi__clp_8cpp" startline="3356" endline="3376">SCIPlpiWriteState</references>
        <references refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="def_8h" startline="52">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1aaed3d89975ea9d3a6a79f03c1361d9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSolveBarrier</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Bool crossover)</argsstring>
        <name>SCIPlpiSolveBarrier</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>crossover</declname>
          <briefdescription><para>perform crossover </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calls barrier or interior point algorithm to solve the LP with crossover to simplex basis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1780" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1780" bodyend="1818"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" compoundref="type__retcode_8h" startline="40">SCIP_LPERROR</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="def_8h" startline="52">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a61eb2de700a5b2ca02c55a6f206af5df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiStartStrongbranch</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiStartStrongbranch</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>start strong branching - call before any strongbranching </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1821" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1821" bodyend="1827"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1abb4fffe6db4fc82590ffb3231a4e314c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiEndStrongbranch</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiEndStrongbranch</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>end strong branching - call after any strongbranching </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1830" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1830" bodyend="1836"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a85d660306c874b15fc0b24f3339bb3b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>static SCIP_RETCODE lpiStrongbranch</definition>
        <argsstring>(SCIP_LPI *lpi, int col, SCIP_Real psol, int itlim, SCIP_Real *down, SCIP_Real *up, SCIP_Bool *downvalid, SCIP_Bool *upvalid, int *iter)</argsstring>
        <name>lpiStrongbranch</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column to apply strong branching on </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>psol</declname>
          <briefdescription><para>current primal solution value of column </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>itlim</declname>
          <briefdescription><para>iteration limit for strong branchings </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>down</declname>
          <briefdescription><para>stores dual bound after branching column down </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>up</declname>
          <briefdescription><para>stores dual bound after branching column up </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>downvalid</declname>
          <briefdescription><para>stores whether the returned down value is a valid dual bound; otherwise, it can only be used as an estimate value </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>upvalid</declname>
          <briefdescription><para>stores whether the returned up value is a valid dual bound; otherwise, it can only be used as an estimate value </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
          <briefdescription><para>stores total number of strong branching iterations, or -1; may be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>performs strong branching iterations on one arbitrary candidate </para>        </detaileddescription>
        <inbodydescription>
<para>Clp special options: 1 - Don&apos;t keep changing infeasibility weight 2 - Keep nonLinearCost round solves 4 - Force outgoing variables to exact bound (primal) 8 - Safe to use dense initial factorization 16 - Just use basic variables for operation if column generation 32 - Create ray even in BAB 64 - Treat problem as feasible until last minute (i.e. minimize infeasibilities) 128 - Switch off all matrix sanity checks 256 - No row copy 512 - If not in values pass, solution guaranteed, skip as much as possible 1024 - In branch and bound 2048 - Don&apos;t bother to re-factorize if &lt; 20 iterations 4096 - Skip some optimality checks 8192 - Do Primal when cleaning up primal 16384 - In fast dual (so we can switch off things) 32768 - called from Osi 65536 - keep arrays around as much as possible (also use maximumR/C) 131072 - transposeTimes is -1.0 and can skip basic and fixed 262144 - extra copy of scaled matrix 524288 - Clp fast dual 1048576 - don&apos;t need to finish dual (can return 3) NOTE - many applications can call Clp but there may be some short cuts which are taken which are not guaranteed safe from all applications. Vetted applications will have a bit set and the code may test this At present I expect a few such applications - if too many I will have to re-think. It is up to application owner to change the code if she/he needs these short cuts. I will not debug unless in Coin repository. See COIN_CLP_VETTED comments. 0x01000000 is Cbc (and in branch and bound) 0x02000000 is in a different branch and bound</para><para>2048 does not seem to work 262144 does not seem to work</para><para>For strong branching. On input lower and upper are new bounds while on output they are change in objective function values (&gt;1.0e50 infeasible). Return code is 0 if nothing interesting, -1 if infeasible both ways and +1 if infeasible one way (check values to see which one(s)) -2 if bad factorization Solutions are filled in as well - even down, odd up - also status and number of iterations</para><para>The bools are: bool stopOnFirstInfeasible bool alwaysFinish</para><para>At the moment: we need alwaysFinish to get correct bounds.</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1840" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1840" bodyend="1995"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a0068773969fe3d7f57bce75df98f91ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>static SCIP_RETCODE lpiStrongbranches</definition>
        <argsstring>(SCIP_LPI *lpi, int *cols, int ncols, SCIP_Real *psols, int itlim, SCIP_Real *down, SCIP_Real *up, SCIP_Bool *downvalid, SCIP_Bool *upvalid, int *iter)</argsstring>
        <name>lpiStrongbranches</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>cols</declname>
          <briefdescription><para>columns to apply strong branching on </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>psols</declname>
          <briefdescription><para>fractional current primal solution values of columns </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>itlim</declname>
          <briefdescription><para>iteration limit for strong branchings </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>down</declname>
          <briefdescription><para>stores dual bounds after branching columns down </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>up</declname>
          <briefdescription><para>stores dual bounds after branching columns up </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>downvalid</declname>
          <briefdescription><para>stores whether the returned down values are valid dual bounds; otherwise, they can only be used as an estimate values </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>upvalid</declname>
          <briefdescription><para>stores whether the returned up values are a valid dual bounds; otherwise, they can only be used as an estimate values </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
          <briefdescription><para>stores total number of strong branching iterations, or -1; may be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>performs strong branching iterations on given arbitrary candidates </para>        </detaileddescription>
        <inbodydescription>
<para>Clp special options: 1 - Don&apos;t keep changing infeasibility weight 2 - Keep nonLinearCost round solves 4 - Force outgoing variables to exact bound (primal) 8 - Safe to use dense initial factorization 16 - Just use basic variables for operation if column generation 32 - Create ray even in BAB 64 - Treat problem as feasible until last minute (i.e. minimize infeasibilities) 128 - Switch off all matrix sanity checks 256 - No row copy 512 - If not in values pass, solution guaranteed, skip as much as possible 1024 - In branch and bound 2048 - Don&apos;t bother to re-factorize if &lt; 20 iterations 4096 - Skip some optimality checks 8192 - Do Primal when cleaning up primal 16384 - In fast dual (so we can switch off things) 32768 - called from Osi 65536 - keep arrays around as much as possible (also use maximumR/C) 131072 - transposeTimes is -1.0 and can skip basic and fixed 262144 - extra copy of scaled matrix 524288 - Clp fast dual 1048576 - don&apos;t need to finish dual (can return 3) NOTE - many applications can call Clp but there may be some short cuts which are taken which are not guaranteed safe from all applications. Vetted applications will have a bit set and the code may test this At present I expect a few such applications - if too many I will have to re-think. It is up to application owner to change the code if she/he needs these short cuts. I will not debug unless in Coin repository. See COIN_CLP_VETTED comments. 0x01000000 is Cbc (and in branch and bound) 0x02000000 is in a different branch and bound</para><para>2048 does not seem to work 262144 does not seem to work</para><para>For strong branching. On input lower and upper are new bounds while on output they are change in objective function values (&gt;1.0e50 infeasible). Return code is 0 if nothing interesting, -1 if infeasible both ways and +1 if infeasible one way (check values to see which one(s)) -2 if bad factorization Solutions are filled in as well - even down, odd up - also status and number of iterations</para><para>The bools are: bool stopOnFirstInfeasible bool alwaysFinish</para><para>At the moment: we need alwaysFinish to get correct bounds.</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="1999" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="1999" bodyend="2166"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a4b3e0e444fa2cba71360126834df07b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiStrongbranchFrac</definition>
        <argsstring>(SCIP_LPI *lpi, int col, SCIP_Real psol, int itlim, SCIP_Real *down, SCIP_Real *up, SCIP_Bool *downvalid, SCIP_Bool *upvalid, int *iter)</argsstring>
        <name>SCIPlpiStrongbranchFrac</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column to apply strong branching on </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>psol</declname>
          <briefdescription><para>current primal solution value of column </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>itlim</declname>
          <briefdescription><para>iteration limit for strong branchings </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>down</declname>
          <briefdescription><para>stores dual bound after branching column down </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>up</declname>
          <briefdescription><para>stores dual bound after branching column up </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>downvalid</declname>
          <briefdescription><para>stores whether the returned down value is a valid dual bound; otherwise, it can only be used as an estimate value </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>upvalid</declname>
          <briefdescription><para>stores whether the returned up value is a valid dual bound; otherwise, it can only be used as an estimate value </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
          <briefdescription><para>stores total number of strong branching iterations, or -1; may be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>performs strong branching iterations on one <bold>fractional</bold> candidate </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2169" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2169" bodyend="2187"/>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a7aa759face9cb33420e56984df7b6557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiStrongbranchesFrac</definition>
        <argsstring>(SCIP_LPI *lpi, int *cols, int ncols, SCIP_Real *psols, int itlim, SCIP_Real *down, SCIP_Real *up, SCIP_Bool *downvalid, SCIP_Bool *upvalid, int *iter)</argsstring>
        <name>SCIPlpiStrongbranchesFrac</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>cols</declname>
          <briefdescription><para>columns to apply strong branching on </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>psols</declname>
          <briefdescription><para>fractional current primal solution values of columns </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>itlim</declname>
          <briefdescription><para>iteration limit for strong branchings </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>down</declname>
          <briefdescription><para>stores dual bounds after branching columns down </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>up</declname>
          <briefdescription><para>stores dual bounds after branching columns up </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>downvalid</declname>
          <briefdescription><para>stores whether the returned down values are valid dual bounds; otherwise, they can only be used as an estimate values </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>upvalid</declname>
          <briefdescription><para>stores whether the returned up values are a valid dual bounds; otherwise, they can only be used as an estimate values </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
          <briefdescription><para>stores total number of strong branching iterations, or -1; may be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>performs strong branching iterations on given <bold>fractional</bold> candidates </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2190" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2190" bodyend="2212"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a5172db5f9ebd4ad8b1da84ce8c00bff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiStrongbranchInt</definition>
        <argsstring>(SCIP_LPI *lpi, int col, SCIP_Real psol, int itlim, SCIP_Real *down, SCIP_Real *up, SCIP_Bool *downvalid, SCIP_Bool *upvalid, int *iter)</argsstring>
        <name>SCIPlpiStrongbranchInt</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column to apply strong branching on </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>psol</declname>
          <briefdescription><para>current integral primal solution value of column </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>itlim</declname>
          <briefdescription><para>iteration limit for strong branchings </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>down</declname>
          <briefdescription><para>stores dual bound after branching column down </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>up</declname>
          <briefdescription><para>stores dual bound after branching column up </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>downvalid</declname>
          <briefdescription><para>stores whether the returned down value is a valid dual bound; otherwise, it can only be used as an estimate value </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>upvalid</declname>
          <briefdescription><para>stores whether the returned up value is a valid dual bound; otherwise, it can only be used as an estimate value </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
          <briefdescription><para>stores total number of strong branching iterations, or -1; may be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>performs strong branching iterations on one candidate with <bold>integral</bold> value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2215" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2215" bodyend="2233"/>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1abdfa4cbbbfc871eb382b8090167f715e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiStrongbranchesInt</definition>
        <argsstring>(SCIP_LPI *lpi, int *cols, int ncols, SCIP_Real *psols, int itlim, SCIP_Real *down, SCIP_Real *up, SCIP_Bool *downvalid, SCIP_Bool *upvalid, int *iter)</argsstring>
        <name>SCIPlpiStrongbranchesInt</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>cols</declname>
          <briefdescription><para>columns to apply strong branching on </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>psols</declname>
          <briefdescription><para>current integral primal solution values of columns </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>itlim</declname>
          <briefdescription><para>iteration limit for strong branchings </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>down</declname>
          <briefdescription><para>stores dual bounds after branching columns down </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>up</declname>
          <briefdescription><para>stores dual bounds after branching columns up </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>downvalid</declname>
          <briefdescription><para>stores whether the returned down values are valid dual bounds; otherwise, they can only be used as an estimate values </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>upvalid</declname>
          <briefdescription><para>stores whether the returned up values are a valid dual bounds; otherwise, they can only be used as an estimate values </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
          <briefdescription><para>stores total number of strong branching iterations, or -1; may be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>performs strong branching iterations on given candidates with <bold>integral</bold> values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2236" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2236" bodyend="2258"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Solution Information Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1aaa0c5c0be2bd96fce205e68f7d051abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiWasSolved</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiWasSolved</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether a solve method was called after the last modification of the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2271" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2271" bodyend="2278"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a61efb09a57b1279d91619c36cad3d597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetSolFeasibility</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Bool *primalfeasible, SCIP_Bool *dualfeasible)</argsstring>
        <name>SCIPlpiGetSolFeasibility</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>primalfeasible</declname>
          <briefdescription><para>stores primal feasibility status </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>dualfeasible</declname>
          <briefdescription><para>stores dual feasibility status </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets information about primal and dual feasibility of the current LP solution </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2281" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2281" bodyend="2320"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="lpi__clp_8cpp_1a2fd62d75c4d7a35e2b82e2d8de9c6130" compoundref="lpi__clp_8cpp" startline="90">SUMINFEASBOUND</references>
        <references refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="def_8h" startline="52">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a2562db03b64bf6ef2789e4edf3cc31a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiExistsPrimalRay</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiExistsPrimalRay</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to have a primal unbounded ray (but not necessary a primal feasible point); this does not necessarily mean, that the solver knows and can return the primal ray </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2326" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2326" bodyend="2338"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a91cb0382fe11412dfa127df4cc9f8e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiHasPrimalRay</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiHasPrimalRay</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to have a primal unbounded ray (but not necessary a primal feasible point), and the solver knows and can return the primal ray </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2344" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2344" bodyend="2356"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a698fec903ce3546e8066a3988ee906ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsPrimalUnbounded</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsPrimalUnbounded</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be primal unbounded </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2360" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2360" bodyend="2370"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ad2c1ad0f846c5827b5a2050ab13eba0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsPrimalInfeasible</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsPrimalInfeasible</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be primal infeasible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2374" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2374" bodyend="2389"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a824080a74642700e0919806405d4dd69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsPrimalFeasible</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsPrimalFeasible</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be primal feasible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2393" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2393" bodyend="2403"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a21939ccf03835cce5a9a449b6c43665b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiExistsDualRay</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiExistsDualRay</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to have a dual unbounded ray (but not necessary a dual feasible point); this does not necessarily mean, that the solver knows and can return the dual ray </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2409" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2409" bodyend="2421"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ac6738fca43ff0cbb9027560f18bd764c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiHasDualRay</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiHasDualRay</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to have a dual unbounded ray (but not necessary a dual feasible point), and the solver knows and can return the dual ray </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2427" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2427" bodyend="2451"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="def_8h" startline="52">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ae2cd5f0afa5f5940c9d7bab6f04b184e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsDualUnbounded</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsDualUnbounded</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be dual unbounded </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2455" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2455" bodyend="2468"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a348c42072a5aad88210e9d688b4d6a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsDualInfeasible</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsDualInfeasible</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be dual infeasible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2472" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2472" bodyend="2482"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a8457b3a26f7595f3390f7b34ab443fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsDualFeasible</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsDualFeasible</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be dual feasible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2486" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2486" bodyend="2496"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ab66f1eae0b448c155f0feaffa7bdda57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsOptimal</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsOptimal</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP was solved to optimality </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2500" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2500" bodyend="2514"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="lpi__clp_8cpp_1a0d4fca883c08a32af088280a78ca3ef2" compoundref="lpi__clp_8cpp" startline="2556" endline="2584">SCIPlpiIsObjlimExc</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1af04aa49d1337f5007cc0d78625d2dd4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsStable</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsStable</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff current LP basis is stable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2518" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2518" bodyend="2552"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a0d4fca883c08a32af088280a78ca3ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsObjlimExc</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsObjlimExc</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff the objective limit was reached </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2556" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2556" bodyend="2584"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="def_8h" startline="52">TRUE</references>
        <referencedby refid="lpi__clp_8cpp_1ab66f1eae0b448c155f0feaffa7bdda57" compoundref="lpi__clp_8cpp" startline="2500" endline="2514">SCIPlpiIsOptimal</referencedby>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a689c99183c7e0779c50f9aef63c79123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsIterlimExc</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsIterlimExc</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff the iteration limit was reached </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2588" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2588" bodyend="2600"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a8ac20384dbd857173c8dfe0dc37f7d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsTimelimExc</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsTimelimExc</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff the time limit was reached </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2604" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2604" bodyend="2616"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a5fbb9e1f86a8425b85760f01692f85aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPlpiGetInternalStatus</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiGetInternalStatus</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the internal solution status of the solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2620" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2620" bodyend="2630"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a5548fcdd7c4e4a3f6d542cd51da27c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetObjval</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Real *objval)</argsstring>
        <name>SCIPlpiGetObjval</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>objval</declname>
          <briefdescription><para>stores the objective value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets objective value of solution </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2634" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2634" bodyend="2648"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ac5a2315c14e99b919626de4170687227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetSol</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Real *objval, SCIP_Real *primsol, SCIP_Real *dualsol, SCIP_Real *activity, SCIP_Real *redcost)</argsstring>
        <name>SCIPlpiGetSol</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>objval</declname>
          <briefdescription><para>stores the objective value, may be 0 if not needed </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>primsol</declname>
          <briefdescription><para>primal solution vector, may be 0 if not needed </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>dualsol</declname>
          <briefdescription><para>dual solution vector, may be 0 if not needed </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>activity</declname>
          <briefdescription><para>row activity vector, may be 0 if not needed </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>redcost</declname>
          <briefdescription><para>reduced cost vector, may be 0 if not needed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets primal and dual solution vectors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2652" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2652" bodyend="2692"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a2d3ab14c33312daf6f0c51e7eba4ae95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetPrimalRay</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Real *ray)</argsstring>
        <name>SCIPlpiGetPrimalRay</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ray</declname>
          <briefdescription><para>primal ray </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets primal ray for unbounded LPs </para>        </detaileddescription>
        <inbodydescription>
<para>Unbounded ray (NULL returned if none/wrong). Up to user to use delete [] on these arrays. </para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2696" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2696" bodyend="2718"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" compoundref="type__retcode_8h" startline="40">SCIP_LPERROR</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a54ee13d012fb992394c0828166c2fea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetDualfarkas</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Real *dualfarkas)</argsstring>
        <name>SCIPlpiGetDualfarkas</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>dualfarkas</declname>
          <briefdescription><para>dual farkas row multipliers </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets dual farkas proof for infeasibility </para>        </detaileddescription>
        <inbodydescription>
<para>Infeasibility ray (NULL returned if none/wrong). Up to user to use delete [] on these arrays. </para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2721" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2721" bodyend="2749"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" compoundref="type__retcode_8h" startline="40">SCIP_LPERROR</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ae37bfbea024ddb8232827aeedc84afe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetIterations</definition>
        <argsstring>(SCIP_LPI *lpi, int *iterations)</argsstring>
        <name>SCIPlpiGetIterations</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iterations</declname>
          <briefdescription><para>pointer to store the number of iterations of the last solve call </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the number of LP iterations of the last solve call </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2753" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2753" bodyend="2764"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a83ddb586c09a37eea2e411f1271a32f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetRealSolQuality</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPSOLQUALITY qualityindicator, SCIP_Real *quality)</argsstring>
        <name>SCIPlpiGetRealSolQuality</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1ad43906673a9a8a661c5c454138207fc9" kindref="member">SCIP_LPSOLQUALITY</ref></type>
          <declname>qualityindicator</declname>
          <briefdescription><para>indicates which quality should be returned </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>quality</declname>
          <briefdescription><para>pointer to store quality number </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets information about the quality of an LP solution</para><para>Such information is usually only available, if also a (maybe not optimal) solution is available. The LPI should return SCIP_INVALID for <computeroutput>quality</computeroutput>, if the requested quantity is not available. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2771" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2771" bodyend="2783"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a5e26fa263b7982578f3d3e3e8e876bbc" compoundref="def_8h" startline="144">SCIP_INVALID</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>LP Basis Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1a258aa72f3b645b140c543f0fc7f3f37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBase</definition>
        <argsstring>(SCIP_LPI *lpi, int *cstat, int *rstat)</argsstring>
        <name>SCIPlpiGetBase</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>cstat</declname>
          <briefdescription><para>array to store column basis status, or 0 </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>rstat</declname>
          <briefdescription><para>array to store row basis status, or 0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets current basis status for columns and rows; arrays must be large enough to store the basis status </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2798" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2798" bodyend="2882"/>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a166f9b557960da4bec4a0dbd00c0d7f2" compoundref="type__lpi_8h" startline="80">SCIP_BASESTAT_BASIC</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" compoundref="type__lpi_8h" startline="79">SCIP_BASESTAT_LOWER</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" compoundref="type__lpi_8h" startline="81">SCIP_BASESTAT_UPPER</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648ac9fd196bcf1e32bef1f5a2a71b3421bc" compoundref="type__lpi_8h" startline="82">SCIP_BASESTAT_ZERO</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4e90bc81f0364ff12e57c3b3e03d315c" compoundref="type__retcode_8h" startline="43">SCIP_INVALIDDATA</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="def_8h_1ad8669395a2a82ed74b9b364f4a310c56" compoundref="def_8h" startline="235">SCIPABORT</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" compoundref="pub__message_8h" startline="45">SCIPerrorMessage</references>
        <referencedby refid="lpi__clp_8cpp_1afe1bc961d0f91cad7222870724175e21" compoundref="lpi__clp_8cpp" startline="3202" endline="3236">SCIPlpiGetState</referencedby>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a7d9cb745987d79fb87f60739a423c833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSetBase</definition>
        <argsstring>(SCIP_LPI *lpi, int *cstat, int *rstat)</argsstring>
        <name>SCIPlpiSetBase</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>cstat</declname>
          <briefdescription><para>array with column basis status </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>rstat</declname>
          <briefdescription><para>array with row basis status </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets current basis status for columns and rows </para>        </detaileddescription>
        <inbodydescription>
<para>Whats changed since last solve. Is only used when startFinishOptions used in dual or primal. Bit 1 - number of rows/columns has not changed (so work arrays valid) 2 - matrix has not changed 4 - if matrix has changed only by adding rows 8 - if matrix has changed only by adding columns 16 - row lbs not changed 32 - row ubs not changed 64 - column objective not changed 128 - column lbs not changed 256 - column ubs not changed 512 - basis not changed (up to user to set this to 0) top bits may be used internally</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="2886" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="2886" bodyend="2997"/>
        <references refid="def_8h_1aa83db7188806498ec9949e12d7f2bf80" compoundref="def_8h" startline="149">EPSEQ</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a166f9b557960da4bec4a0dbd00c0d7f2" compoundref="type__lpi_8h" startline="80">SCIP_BASESTAT_BASIC</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" compoundref="type__lpi_8h" startline="79">SCIP_BASESTAT_LOWER</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" compoundref="type__lpi_8h" startline="81">SCIP_BASESTAT_UPPER</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648ac9fd196bcf1e32bef1f5a2a71b3421bc" compoundref="type__lpi_8h" startline="82">SCIP_BASESTAT_ZERO</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4e90bc81f0364ff12e57c3b3e03d315c" compoundref="type__retcode_8h" startline="43">SCIP_INVALIDDATA</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="def_8h_1ad8669395a2a82ed74b9b364f4a310c56" compoundref="def_8h" startline="235">SCIPABORT</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" compoundref="pub__message_8h" startline="45">SCIPerrorMessage</references>
        <referencedby refid="lpi__clp_8cpp_1af59f56532adbbb974fc3a08280aedf4f" compoundref="lpi__clp_8cpp" startline="3242" endline="3293">SCIPlpiSetState</referencedby>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ae40a43f062d28623d57653ddb4719fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBasisInd</definition>
        <argsstring>(SCIP_LPI *lpi, int *bind)</argsstring>
        <name>SCIPlpiGetBasisInd</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>bind</declname>
          <briefdescription><para>pointer to store basis indices ready to keep number of rows entries </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the indices of the basic columns and rows; basic column n gives value n, basic row m gives value -1-m </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3002" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3002" bodyend="3043"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a7695e892dc456d85a3654eb158976921" compoundref="def_8h" startline="274">SCIP_ALLOC</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a9315c551e92d2caa54d42750f1f048cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBInvRow</definition>
        <argsstring>(SCIP_LPI *lpi, int r, SCIP_Real *coef, int *inds, int *ninds)</argsstring>
        <name>SCIPlpiGetBInvRow</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
          <briefdescription><para>row number </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coef</declname>
          <briefdescription><para>pointer to store the coefficients of the row </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>inds</declname>
          <briefdescription><para>array to store the non-zero indices </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ninds</declname>
          <briefdescription><para>pointer to store the number of non-zero indices (-1: if we do not store sparsity informations) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get dense row of inverse basis matrix B^-1</para><para><simplesect kind="note"><para>The LP interface defines slack variables to have coefficient +1. This means that if, internally, the LP solver uses a -1 coefficient, then rows associated with slacks variables whose coefficient is -1, should be negated; see also the explanation in <ref refid="lpi_8h" kindref="compound">lpi.h</ref>.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3054" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3054" bodyend="3078"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a9dda3c2147cbb647cfb0b5d198407525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBInvCol</definition>
        <argsstring>(SCIP_LPI *lpi, int c, SCIP_Real *coef, int *inds, int *ninds)</argsstring>
        <name>SCIPlpiGetBInvCol</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
          <briefdescription><para>column number of B^-1; this is NOT the number of the column in the LP; you have to call <ref refid="lpi__clp_8cpp_1ae40a43f062d28623d57653ddb4719fca" kindref="member">SCIPlpiGetBasisInd()</ref> to get the array which links the B^-1 column numbers to the row and column numbers of the LP! c must be between 0 and nrows-1, since the basis has the size nrows * nrows </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coef</declname>
          <briefdescription><para>pointer to store the coefficients of the column </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>inds</declname>
          <briefdescription><para>array to store the non-zero indices </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ninds</declname>
          <briefdescription><para>pointer to store the number of non-zero indices (-1: if we do not store sparsity informations) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get dense column of inverse basis matrix B^-1</para><para><simplesect kind="note"><para>The LP interface defines slack variables to have coefficient +1. This means that if, internally, the LP solver uses a -1 coefficient, then rows associated with slacks variables whose coefficient is -1, should be negated; see also the explanation in <ref refid="lpi_8h" kindref="compound">lpi.h</ref>.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3089" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3089" bodyend="3117"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1aa516aed02ad9b303b0d51eb0c7a66f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBInvARow</definition>
        <argsstring>(SCIP_LPI *lpi, int r, const SCIP_Real *binvrow, SCIP_Real *coef, int *inds, int *ninds)</argsstring>
        <name>SCIPlpiGetBInvARow</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
          <briefdescription><para>row number </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>binvrow</declname>
          <briefdescription><para>row in (A_B)^-1 from prior call to <ref refid="lpi__clp_8cpp_1a9315c551e92d2caa54d42750f1f048cb" kindref="member">SCIPlpiGetBInvRow()</ref>, or 0 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coef</declname>
          <briefdescription><para>vector to return coefficients </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>inds</declname>
          <briefdescription><para>array to store the non-zero indices </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ninds</declname>
          <briefdescription><para>pointer to store the number of non-zero indices (-1: if we do not store sparsity informations) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get dense row of inverse basis matrix times constraint matrix B^-1 * A</para><para><simplesect kind="note"><para>The LP interface defines slack variables to have coefficient +1. This means that if, internally, the LP solver uses a -1 coefficient, then rows associated with slacks variables whose coefficient is -1, should be negated; see also the explanation in <ref refid="lpi_8h" kindref="compound">lpi.h</ref>.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3127" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3127" bodyend="3152"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a015f424e442e74e4526ca62bdab54de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBInvACol</definition>
        <argsstring>(SCIP_LPI *lpi, int c, SCIP_Real *coef, int *inds, int *ninds)</argsstring>
        <name>SCIPlpiGetBInvACol</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
          <briefdescription><para>column number </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coef</declname>
          <briefdescription><para>vector to return coefficients </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>inds</declname>
          <briefdescription><para>array to store the non-zero indices </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ninds</declname>
          <briefdescription><para>pointer to store the number of non-zero indices (-1: if we do not store sparsity informations) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get dense column of inverse basis matrix times constraint matrix B^-1 * A</para><para><simplesect kind="note"><para>The LP interface defines slack variables to have coefficient +1. This means that if, internally, the LP solver uses a -1 coefficient, then rows associated with slacks variables whose coefficient is -1, should be negated; see also the explanation in <ref refid="lpi_8h" kindref="compound">lpi.h</ref>.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3162" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3162" bodyend="3186"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>LP State Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1afe1bc961d0f91cad7222870724175e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetState</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPISTATE **lpistate)</argsstring>
        <name>SCIPlpiGetState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> **</type>
          <declname>lpistate</declname>
          <briefdescription><para>pointer to LPi state information (like basis information) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stores LPi state (like basis information) into lpistate object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3202" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3202" bodyend="3236"/>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="lpi__clp_8cpp_1a258aa72f3b645b140c543f0fc7f3f37a" compoundref="lpi__clp_8cpp" startline="2798" endline="2882">SCIPlpiGetBase</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1af59f56532adbbb974fc3a08280aedf4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSetState</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *, SCIP_LPISTATE *lpistate)</argsstring>
        <name>SCIPlpiSetState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> *</type>
          <declname>lpistate</declname>
          <briefdescription><para>LPi state information (like basis information) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>loads LPi state (like basis information) into solver; note that the LP might have been extended with additional columns and rows since the state was stored with <ref refid="lpi__clp_8cpp_1afe1bc961d0f91cad7222870724175e21" kindref="member">SCIPlpiGetState()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3242" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3242" bodyend="3293"/>
        <references refid="def_8h_1add08ff5d5df711242962dc12240f968e" compoundref="def_8h" startline="148">REALABS</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a166f9b557960da4bec4a0dbd00c0d7f2" compoundref="type__lpi_8h" startline="80">SCIP_BASESTAT_BASIC</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" compoundref="type__lpi_8h" startline="79">SCIP_BASESTAT_LOWER</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" compoundref="type__lpi_8h" startline="81">SCIP_BASESTAT_UPPER</references>
        <references refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648ac9fd196bcf1e32bef1f5a2a71b3421bc" compoundref="type__lpi_8h" startline="82">SCIP_BASESTAT_ZERO</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" compoundref="def_8h" startline="124">SCIP_Real</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="lpi__clp_8cpp_1a8c50925f0993643dc0d04e0d1bbe848a" compoundref="lpi__clp_8cpp" startline="3707" endline="3715">SCIPlpiIsInfinity</references>
        <references refid="lpi__clp_8cpp_1a7d9cb745987d79fb87f60739a423c833" compoundref="lpi__clp_8cpp" startline="2886" endline="2997">SCIPlpiSetBase</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a1d56087500813e24687787cb90da5d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiClearState</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiClearState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clears current LPi state (like basis information) of the solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3296" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3296" bodyend="3309"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1acfee2d2ea719f54192a11c1e80f5e61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiFreeState</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPISTATE **lpistate)</argsstring>
        <name>SCIPlpiFreeState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> **</type>
          <declname>lpistate</declname>
          <briefdescription><para>pointer to LPi state information (like basis information) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees LPi state information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3312" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3312" bodyend="3327"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a8cf134c068da15fe85dfad3d3d0aae2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiHasStateBasis</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPISTATE *lpistate)</argsstring>
        <name>SCIPlpiHasStateBasis</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> *</type>
          <declname>lpistate</declname>
          <briefdescription><para>LP state information (like basis information) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks, whether the given LP state contains simplex basis information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3330" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3330" bodyend="3336"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a29c773d7e7763517c0952b9eee9ed7ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiReadState</definition>
        <argsstring>(SCIP_LPI *lpi, const char *fname)</argsstring>
        <name>SCIPlpiReadState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
          <briefdescription><para>file name </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reads LP state (like basis information) from a file </para>        </detaileddescription>
        <inbodydescription>
<para>Read a basis from the given filename, returns -1 on file error, 0 if no values, 1 if values</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3339" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3339" bodyend="3353"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4728a2c3d0d1498f254a56682cb4e08a" compoundref="type__retcode_8h" startline="36">SCIP_READERROR</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a6b360b8eb706948179cc3b46fa4df372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiWriteState</definition>
        <argsstring>(SCIP_LPI *lpi, const char *fname)</argsstring>
        <name>SCIPlpiWriteState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
          <briefdescription><para>file name </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>writes LP state (like basis information) to a file </para>        </detaileddescription>
        <inbodydescription>
<para>Write the basis in MPS format to the specified file. If writeValues true, writes values of structurals (and adds VALUES to end of NAME card)</para><para>parameters:<itemizedlist>
<listitem><para>filename</para></listitem><listitem><para>bool writeValues</para></listitem><listitem><para>int formatType (0 - normal, 1 - extra accuracy, 2 - IEEE hex)</para></listitem></itemizedlist>
</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3356" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3356" bodyend="3376"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da80c963e65537a7a1e175e8827f5bb740" compoundref="type__retcode_8h" startline="37">SCIP_WRITEERROR</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <referencedby refid="lpi__clp_8cpp_1ad87b0da429ef0a5ef34ccdd01cc2309d" compoundref="lpi__clp_8cpp" startline="1705" endline="1776">SCIPlpiSolveDual</referencedby>
        <referencedby refid="lpi__clp_8cpp_1adff9cd01f05724d2e00808ebd09c8e93" compoundref="lpi__clp_8cpp" startline="1632" endline="1701">SCIPlpiSolvePrimal</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>LP Pricing Norms Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1a868706bb40dc3fdeb76e81c56c1c4d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetNorms</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPINORMS **lpinorms)</argsstring>
        <name>SCIPlpiGetNorms</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1abb3fe4ccfb87fa50adfa0631ff0d5531" kindref="member">SCIP_LPINORMS</ref> **</type>
          <declname>lpinorms</declname>
          <briefdescription><para>pointer to LPi pricing norms information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stores LPi pricing norms information  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3393" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3393" bodyend="3404"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ad619ad2a4e65223449f5ab635985b70b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSetNorms</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPINORMS *lpinorms)</argsstring>
        <name>SCIPlpiSetNorms</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1abb3fe4ccfb87fa50adfa0631ff0d5531" kindref="member">SCIP_LPINORMS</ref> *</type>
          <declname>lpinorms</declname>
          <briefdescription><para>LPi pricing norms information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>loads LPi pricing norms into solver; note that the LP might have been extended with additional columns and rows since the state was stored with <ref refid="lpi__clp_8cpp_1a868706bb40dc3fdeb76e81c56c1c4d31" kindref="member">SCIPlpiGetNorms()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3409" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3409" bodyend="3419"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a640477b756ddb94827c1a4e5e3721d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiFreeNorms</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPINORMS **lpinorms)</argsstring>
        <name>SCIPlpiFreeNorms</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1abb3fe4ccfb87fa50adfa0631ff0d5531" kindref="member">SCIP_LPINORMS</ref> **</type>
          <declname>lpinorms</declname>
          <briefdescription><para>pointer to LPi pricing norms information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees pricing norms information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3422" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3422" bodyend="3432"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Parameter Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1a2d82a67789be908b161295f41d02ba8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetIntpar</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPPARAM type, int *ival)</argsstring>
        <name>SCIPlpiGetIntpar</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref></type>
          <declname>type</declname>
          <briefdescription><para>parameter number </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ival</declname>
          <briefdescription><para>buffer to store the parameter value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets integer parameter of LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3447" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3447" bodyend="3487"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba9cf2cefbf43816ba1c1e454b50c732fd" compoundref="type__lpi_8h" startline="42">SCIP_LPPAR_FASTMIP</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baabf8addc3b5db9eb7280711323285333" compoundref="type__lpi_8h" startline="41">SCIP_LPPAR_FROMSCRATCH</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba3a6b49761689f0768535d9edcb26a013" compoundref="type__lpi_8h" startline="46">SCIP_LPPAR_LPINFO</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038bad3a9947367aa599495456cd35502683b" compoundref="type__lpi_8h" startline="52">SCIP_LPPAR_LPITLIM</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba0114e2317d0236d43fb3b297ee9aea8d" compoundref="type__lpi_8h" startline="45">SCIP_LPPAR_PRICING</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba58e15a0d2bb9e631213db974ec701b18" compoundref="type__lpi_8h" startline="43">SCIP_LPPAR_SCALING</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" compoundref="type__retcode_8h" startline="46">SCIP_PARAMETERUNKNOWN</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="def_8h" startline="52">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a8dac6dec76901acef9c18397582c5e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSetIntpar</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPPARAM type, int ival)</argsstring>
        <name>SCIPlpiSetIntpar</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref></type>
          <declname>type</declname>
          <briefdescription><para>parameter number </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ival</declname>
          <briefdescription><para>parameter value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets integer parameter of LP </para>        </detaileddescription>
        <inbodydescription>
<para>Amount of print out: 0 - none 1 - just final 2 - just factorizations 3 - as 2 plus a bit more 4 - verbose above that 8,16,32 etc just for selective SCIPdebug</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3491" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3491" bodyend="3589"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4e90bc81f0364ff12e57c3b3e03d315c" compoundref="type__retcode_8h" startline="43">SCIP_INVALIDDATA</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" compoundref="type__retcode_8h" startline="40">SCIP_LPERROR</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba9cf2cefbf43816ba1c1e454b50c732fd" compoundref="type__lpi_8h" startline="42">SCIP_LPPAR_FASTMIP</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baabf8addc3b5db9eb7280711323285333" compoundref="type__lpi_8h" startline="41">SCIP_LPPAR_FROMSCRATCH</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba3a6b49761689f0768535d9edcb26a013" compoundref="type__lpi_8h" startline="46">SCIP_LPPAR_LPINFO</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038bad3a9947367aa599495456cd35502683b" compoundref="type__lpi_8h" startline="52">SCIP_LPPAR_LPITLIM</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba0114e2317d0236d43fb3b297ee9aea8d" compoundref="type__lpi_8h" startline="45">SCIP_LPPAR_PRICING</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba58e15a0d2bb9e631213db974ec701b18" compoundref="type__lpi_8h" startline="43">SCIP_LPPAR_SCALING</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" compoundref="type__retcode_8h" startline="46">SCIP_PARAMETERUNKNOWN</references>
        <references refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a1579f0b28462ca3030c2ea711509cf11" compoundref="type__lpi_8h" startline="67">SCIP_PRICING_AUTO</references>
        <references refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a1e601f75db40f3b48665aa04f5103987" compoundref="type__lpi_8h" startline="72">SCIP_PRICING_DEVEX</references>
        <references refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a42f5306421531962d1b113eab03e6cf0" compoundref="type__lpi_8h" startline="68">SCIP_PRICING_FULL</references>
        <references refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a840117e919783bcc69646f544c2db051" compoundref="type__lpi_8h" startline="66">SCIP_PRICING_LPIDEFAULT</references>
        <references refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a270fee7478b8951e2cc4fbefc7b7b477" compoundref="type__lpi_8h" startline="70">SCIP_PRICING_STEEP</references>
        <references refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a0b1034a38e607455f39eb74ad242bab6" compoundref="type__lpi_8h" startline="71">SCIP_PRICING_STEEPQSTART</references>
        <references refid="def_8h_1ad8669395a2a82ed74b9b364f4a310c56" compoundref="def_8h" startline="235">SCIPABORT</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" compoundref="pub__message_8h" startline="45">SCIPerrorMessage</references>
        <references refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="def_8h" startline="52">TRUE</references>
        <referencedby refid="lpi__clp_8cpp_1ae522c0e79b2f2c7d185e6b6cafec1a3d" compoundref="lpi__clp_8cpp" startline="469" endline="534">SCIPlpiCreate</referencedby>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a07259db5fb0599d063fa4973dc3d5d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetRealpar</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPPARAM type, SCIP_Real *dval)</argsstring>
        <name>SCIPlpiGetRealpar</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref></type>
          <declname>type</declname>
          <briefdescription><para>parameter number </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>dval</declname>
          <briefdescription><para>buffer to store the parameter value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets floating point parameter of LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3593" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3593" bodyend="3636"/>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba7a541158135537aa60d3649574621538" compoundref="type__lpi_8h" startline="49">SCIP_LPPAR_BARRIERCONVTOL</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baa9801355e17b1d3f1c5ed41616285dc5" compoundref="type__lpi_8h" startline="48">SCIP_LPPAR_DUALFEASTOL</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038bac3189a09fce4d5f22435928771524285" compoundref="type__lpi_8h" startline="47">SCIP_LPPAR_FEASTOL</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba3d88cde8e4c624e49c106d4c98955f10" compoundref="type__lpi_8h" startline="50">SCIP_LPPAR_LOBJLIM</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba733f4fa15222572d687c1bb753782cf0" compoundref="type__lpi_8h" startline="53">SCIP_LPPAR_LPTILIM</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baa9974a8818f5f48d32a5f5912bf085b2" compoundref="type__lpi_8h" startline="51">SCIP_LPPAR_UOBJLIM</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" compoundref="type__retcode_8h" startline="46">SCIP_PARAMETERUNKNOWN</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a468d983f0e77aa23e9563d4c1c1e3db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSetRealpar</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPPARAM type, SCIP_Real dval)</argsstring>
        <name>SCIPlpiSetRealpar</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref></type>
          <declname>type</declname>
          <briefdescription><para>parameter number </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>dval</declname>
          <briefdescription><para>parameter value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets floating point parameter of LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3639" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3639" bodyend="3681"/>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba7a541158135537aa60d3649574621538" compoundref="type__lpi_8h" startline="49">SCIP_LPPAR_BARRIERCONVTOL</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baa9801355e17b1d3f1c5ed41616285dc5" compoundref="type__lpi_8h" startline="48">SCIP_LPPAR_DUALFEASTOL</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038bac3189a09fce4d5f22435928771524285" compoundref="type__lpi_8h" startline="47">SCIP_LPPAR_FEASTOL</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba3d88cde8e4c624e49c106d4c98955f10" compoundref="type__lpi_8h" startline="50">SCIP_LPPAR_LOBJLIM</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba733f4fa15222572d687c1bb753782cf0" compoundref="type__lpi_8h" startline="53">SCIP_LPPAR_LPTILIM</references>
        <references refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baa9974a8818f5f48d32a5f5912bf085b2" compoundref="type__lpi_8h" startline="51">SCIP_LPPAR_UOBJLIM</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" compoundref="type__retcode_8h" startline="46">SCIP_PARAMETERUNKNOWN</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Numerical Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1aa11747a31cdd7efe4bfcd32b82d6b325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPlpiInfinity</definition>
        <argsstring>(SCIP_LPI *)</argsstring>
        <name>SCIPlpiInfinity</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns value treated as infinity in the LP solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3696" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3696" bodyend="3703"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a8c50925f0993643dc0d04e0d1bbe848a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsInfinity</definition>
        <argsstring>(SCIP_LPI *, SCIP_Real val)</argsstring>
        <name>SCIPlpiIsInfinity</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>val</declname>
          <briefdescription><para>value to be checked for infinity </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks if given value is treated as infinity in the LP solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3707" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3707" bodyend="3715"/>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <referencedby refid="lpi__clp_8cpp_1af59f56532adbbb974fc3a08280aedf4f" compoundref="lpi__clp_8cpp" startline="3242" endline="3293">SCIPlpiSetState</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>File Interface Methods</header>
      <memberdef kind="function" id="lpi__clp_8cpp_1a0c0a28e35ecfad28c0281b400e913e76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>static SCIP_Bool fileExists</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>fileExists</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
          <briefdescription><para>file name </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns, whether the given file exists </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3731" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3731" bodyend="3744"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a83b58a451300ba484bb9314b35edc63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiReadLP</definition>
        <argsstring>(SCIP_LPI *lpi, const char *fname)</argsstring>
        <name>SCIPlpiReadLP</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
          <briefdescription><para>file name </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reads LP from a file </para>        </detaileddescription>
        <inbodydescription>
<para>read file in MPS format parameters: filename bool keepNames bool ignoreErrors</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3747" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3747" bodyend="3772"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da3c613be50ade7386f4f5733304886659" compoundref="type__retcode_8h" startline="38">SCIP_NOFILE</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4728a2c3d0d1498f254a56682cb4e08a" compoundref="type__retcode_8h" startline="36">SCIP_READERROR</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a311a14142841041e24d522b281124f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiWriteLP</definition>
        <argsstring>(SCIP_LPI *lpi, const char *fname)</argsstring>
        <name>SCIPlpiWriteLP</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
          <briefdescription><para>file name </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>writes LP to a file </para>        </detaileddescription>
        <inbodydescription>
<para>write file in MPS format parameters: filename int formatType (0 - normal, 1 - extra accuracy, 2 - IEEE hex) int numberAcross (1 or 2 values should be specified on every data line in the MPS file) double objSense</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="3775" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="3775" bodyend="3796"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da80c963e65537a7a1e175e8827f5bb740" compoundref="type__retcode_8h" startline="37">SCIP_WRITEERROR</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <referencedby refid="lpi__clp_8cpp_1ad87b0da429ef0a5ef34ccdd01cc2309d" compoundref="lpi__clp_8cpp" startline="1705" endline="1776">SCIPlpiSolveDual</referencedby>
        <referencedby refid="lpi__clp_8cpp_1adff9cd01f05724d2e00808ebd09c8e93" compoundref="lpi__clp_8cpp" startline="1632" endline="1701">SCIPlpiSolvePrimal</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="lpi__clp_8cpp_1a0ee1156529fc4949ac9510375ecc54dd" prot="public" static="no">
        <name>CLP_VERSION</name>
        <initializer>VERSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="66" column="10" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="66" bodyend="-1"/>
        <referencedby refid="lpi__clp_8cpp_1aed7c57c93675aae2562abab53b487ce7" compoundref="lpi__clp_8cpp" startline="433" endline="439">SCIPlpiGetSolverName</referencedby>
      </memberdef>
      <memberdef kind="define" id="lpi__clp_8cpp_1a2fd62d75c4d7a35e2b82e2d8de9c6130" prot="public" static="no">
        <name>SUMINFEASBOUND</name>
        <initializer>1.0e-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="90" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="90" bodyend="-1"/>
        <referencedby refid="lpi__clp_8cpp_1a61efb09a57b1279d91619c36cad3d597" compoundref="lpi__clp_8cpp" startline="2281" endline="2320">SCIPlpiGetSolFeasibility</referencedby>
      </memberdef>
      <memberdef kind="define" id="lpi__clp_8cpp_1a3e80b2ad8cd656992a2f9c981adc8ad5" prot="public" static="no">
        <name>COLS_PER_PACKET</name>
        <initializer><ref refid="lpi__grb_8c_1a95bb8b60ad68b9a3682d5a20e14c63a2" kindref="member">SCIP_DUALPACKETSIZE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="116" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lpi__clp_8cpp_1ae3086d289ba34ee9eb88f8419a4f8e14" prot="public" static="no">
        <name>ROWS_PER_PACKET</name>
        <initializer><ref refid="lpi__grb_8c_1a95bb8b60ad68b9a3682d5a20e14c63a2" kindref="member">SCIP_DUALPACKETSIZE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="118" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lpi__clp_8cpp_1a70d7f598e377388ae50ff1417e34bd07" prot="public" static="no">
        <type><ref refid="lpi__grb_8c_1afd2fb34af6687b0159dfb63042899d4e" kindref="member">SCIP_DUALPACKET</ref></type>
        <definition>typedef SCIP_DUALPACKET COLPACKET</definition>
        <argsstring></argsstring>
        <name>COLPACKET</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Definitions for storing basis status (copied from <ref refid="lpi__spx_8cpp" kindref="compound">lpi_spx.cpp</ref>) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="115" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lpi__clp_8cpp_1a285e06216667783fd0bd0cbcd8b4882a" prot="public" static="no">
        <type><ref refid="lpi__grb_8c_1afd2fb34af6687b0159dfb63042899d4e" kindref="member">SCIP_DUALPACKET</ref></type>
        <definition>typedef SCIP_DUALPACKET ROWPACKET</definition>
        <argsstring></argsstring>
        <name>ROWPACKET</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="117" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lpi__clp_8cpp_1a2f7f47619afade96a5a8d57d275d2021" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>static SCIP_RETCODE ensureCstatMem</definition>
        <argsstring>(SCIP_LPI *lpi, int num)</argsstring>
        <name>ensureCstatMem</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
          <briefdescription><para>minimal number of entries in array </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>resizes cstat array to have at least num entries </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="138" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="138" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a970862781c7f83bbc9b53121ab22a221" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>static SCIP_RETCODE ensureRstatMem</definition>
        <argsstring>(SCIP_LPI *lpi, int num)</argsstring>
        <name>ensureRstatMem</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
          <briefdescription><para>minimal number of entries in array </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>resizes rstat array to have at least num entries </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="160" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="160" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a9fa4c5e7a391ec3383b136babdba11a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int colpacketNum</definition>
        <argsstring>(int ncols)</argsstring>
        <name>colpacketNum</name>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns to store </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of packets needed to store column packet information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="189" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a0f9024e35224ac7f278cab509e6366b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int rowpacketNum</definition>
        <argsstring>(int nrows)</argsstring>
        <name>rowpacketNum</name>
        <param>
          <type>int</type>
          <declname>nrows</declname>
          <briefdescription><para>number of rows to store </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of packets needed to store row packet information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="198" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="198" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a057e7e59ac1204b12a2ab2114680f4e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void lpistatePack</definition>
        <argsstring>(SCIP_LPISTATE *lpistate, const int *cstat, const int *rstat)</argsstring>
        <name>lpistatePack</name>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> *</type>
          <declname>lpistate</declname>
          <briefdescription><para>pointer to LPi state data </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>cstat</declname>
          <briefdescription><para>basis status of columns in unpacked format </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>rstat</declname>
          <briefdescription><para>basis status of rows in unpacked format </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>store row and column basis status in a packed LPi state object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="207" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="207" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a0ba848d541b86f80823bbab7729881ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void lpistateUnpack</definition>
        <argsstring>(const SCIP_LPISTATE *lpistate, int *cstat, int *rstat)</argsstring>
        <name>lpistateUnpack</name>
        <param>
          <type>const <ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> *</type>
          <declname>lpistate</declname>
          <briefdescription><para>pointer to LPi state data </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>cstat</declname>
          <briefdescription><para>buffer for storing basis status of columns in unpacked format </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>rstat</declname>
          <briefdescription><para>buffer for storing basis status of rows in unpacked format </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unpacks row and column basis status from a packed LPi state object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="223" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="223" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ade3a51ecce2b5631f48dbe1e7d12af0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>static SCIP_RETCODE lpistateCreate</definition>
        <argsstring>(SCIP_LPISTATE **lpistate, BMS_BLKMEM *blkmem, int ncols, int nrows)</argsstring>
        <name>lpistateCreate</name>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> **</type>
          <declname>lpistate</declname>
          <briefdescription><para>pointer to LPi state </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns to store </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nrows</declname>
          <briefdescription><para>number of rows to store </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates LPi state information object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="239" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="239" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a616652bd99fcec918d58e220bf6f9b50" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void lpistateFree</definition>
        <argsstring>(SCIP_LPISTATE **lpistate, BMS_BLKMEM *blkmem)</argsstring>
        <name>lpistateFree</name>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> **</type>
          <declname>lpistate</declname>
          <briefdescription><para>pointer to LPi state information (like basis information) </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees LPi state information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="260" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="260" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1aec1e720202f3965f1f7e56cb2c20e7ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void invalidateSolution</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>invalidateSolution</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>marks the current LP to be unsolved </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="284" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="284" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a9056d428109a05e6d320b1ab2ff3ea40" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setFactorizationFrequency</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>setFactorizationFrequency</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set factorization frequency </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="294" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="294" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1ab2ac06a63ee94745339e450cef75475e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setFastmipClpParameters</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>setFastmipClpParameters</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this methods sets parameters of Clp </para>        </detaileddescription>
        <inbodydescription>
<para>Perturbation: 50 - switch on perturbation 100 - auto perturb if takes too long (1.0e-6 largest nonzero) 101 - we are perturbed 102 - don&apos;t try perturbing again<itemizedlist>
<listitem><para>default is 100</para></listitem><listitem><para>others are for playing</para></listitem></itemizedlist>
</para><para>for Clp 1.8 stable: 50 seems to be 10% faster than 100</para><para>Special options description from ClpModell.hpp: 1 - Don&apos;t keep changing infeasibility weight 2 - Keep nonLinearCost round solves 4 - Force outgoing variables to exact bound (primal) 8 - Safe to use dense initial factorization 16 - Just use basic variables for operation if column generation 32 - Create ray even in BAB 64 - Treat problem as feasible until last minute (i.e. minimize infeasibilities) 128 - Switch off all matrix sanity checks 256 - No row copy 512 - If not in values pass, solution guaranteed, skip as much as possible 1024 - In branch and bound 2048 - Don&apos;t bother to re-factorize if &lt; 20 iterations 4096 - Skip some optimality checks 8192 - Do Primal when cleaning up primal 16384 - In fast dual (so we can switch off things) 32768 - called from Osi 65536 - keep arrays around as much as possible (also use maximumR/C) 131072 - transposeTimes is -1.0 and can skip basic and fixed 262144 - extra copy of scaled matrix 524288 - Clp fast dual 1048576 - don&apos;t need to finish dual (can return 3) NOTE - many applications can call Clp but there may be some short cuts which are taken which are not guaranteed safe from all applications. Vetted applications will have a bit set and the code may test this At present I expect a few such applications - if too many I will have to re-think. It is up to application owner to change the code if she/he needs these short cuts. I will not debug unless in Coin repository. See COIN_CLP_VETTED comments. 0x01000000 is Cbc (and in branch and bound) 0x02000000 is in a different branch and bound</para><para>Comments: 2 - nonlinear costs are used in primal for infeasibility weight 4 - in anti-degeneracy operations can move variables just off a bound 8 - means dense nucleus in factorization - normally not safe in first factorization as singularity handling is not useful. Is switched on if going from dual to primal or vv. 16 - Used for &quot;real&quot; column generation 64 - Good idea, since in B&amp;B most problems are feasible. 128 - Assumes user will not create tiny or duplicate elements. 256 - Normally Clp keeps a scaled row copy for speed. For very large problems you might want to turn it off. 512 - Means nonbasic variables should be at bounds and basis will be reasonable. 4096 - Skip some optimality checks 8192 - If the primal has a perturbed problem and needs to clean up, it normally uses dual - but in some cases can be better to use primal. 32768 - Just switches off some messages e.g. empty problem. 131072 - used internally 262144 - Normally Clp has unscaled column copy of matrix - this makes an extra scaled copy. 524288 - used internally 1048576 - only set by fastDual 0x02000000 - main point: does allow use of disaster handler</para><para>Cbc seems to use the following special options: lpi-&gt;clp-&gt;setSpecialOptions(64|128|1024|2048|4096|32768|262144|0x01000000); Sometimes 512+8192 and 8192 or 8 are used as well.</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="308" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="308" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="lpi__clp_8cpp_1a7e9da2d7f2fee791c4b143189314bbfb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void unsetFastmipClpParameters</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>unsetFastmipClpParameters</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this methods sets parameters of Clp </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" line="403" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp" bodystart="403" bodyend="417"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>LP interface for Clp. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Stefan Heinz </para></simplesect>
<simplesect kind="author"><para>Marc Pfetsch </para></simplesect>
<simplesect kind="author"><para>John Forrest</para></simplesect>
Notes on this interface:</para><para><itemizedlist>
<listitem><para>Currently, Clp (Version 1.10) supports two ways of adding rows/columns from arrays: One uses a length array that for each row/column specifies the number of nonzeros to be added. The second uses the <computeroutput>beg</computeroutput> array that gives the starting index for each row/column. We use the latter variant. Since for LPI there should be no gaps in the corresponding arrays, i.e., every entry in <computeroutput>val</computeroutput> and <emphasis>ind</emphasis> gives a nonzero entry, one can switch between the two formats. With the current Clp implementation both formats involve an overhead:<itemizedlist>
<listitem><para>For the <computeroutput>beg</computeroutput> variant, Clp gets the end of the array from the last position in <computeroutput>beg</computeroutput> (i.e., the entry one after the last row/column) and we have to copy and extend <computeroutput>beg</computeroutput> for this purpose. In the matrix implementation a length information is then again computed.</para></listitem><listitem><para>For the <computeroutput>length</computeroutput> variant, Clp computes the number of elements from this length variant and there exists no matrix implementation that uses the length information, i.e., it is recomputed again.</para></listitem></itemizedlist>
</para><para>Concluding: the implementation of Clp/CoinPackeMatrix could be improved. The functions affected by this are <ref refid="lpi__clp_8cpp_1ae23bc1c98c8547a0ba03682d100365dd" kindref="member">SCIPlpiLoadColLP()</ref>, <ref refid="lpi__clp_8cpp_1add77293153dc03295e1782af22921906" kindref="member">SCIPlpiAddCols()</ref>, <ref refid="lpi__clp_8cpp_1a2bad82670d46254daf3e923898c404d5" kindref="member">SCIPlpiAddRows()</ref></para></listitem><listitem><para>In former versions Clp used an &quot;auxiliary model&quot; that allows to save time when the model is scaled. This is discarded from version higher than 1.8.2.</para></listitem><listitem><para>Clp allows the setting of several special flags. These are now set when the FASTMIP option in SCIP is true. We tried to use the best settings, while still working correctly, see setFastmipClpParameters(). These settings probably have to be adapted to future Clp versions. Maybe more possibilities will appear.</para></listitem><listitem><para>At several places this interface corrects the return value of some Clp functions, e.g., isProvenPrimalInfeasible(). Currently (version 1.10) no change in the Clp functions will be made, but this might change in the future. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>program<sp/>and<sp/>library<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIP<sp/>---<sp/>Solving<sp/>Constraint<sp/>Integer<sp/>Programs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2002-2015<sp/>Konrad-Zuse-Zentrum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fuer<sp/>Informationstechnik<sp/>Berlin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>SCIP<sp/>is<sp/>distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>along<sp/>with<sp/>SCIP;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/>If<sp/>not<sp/>email<sp/>to<sp/>scip@zib.de.<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">/**@file<sp/><sp/><sp/>lpi_clp.cpp</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>LPIS</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/>LP<sp/>interface<sp/>for<sp/>Clp</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@author<sp/>Stefan<sp/>Heinz</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>@author<sp/>Marc<sp/>Pfetsch</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>@author<sp/>John<sp/>Forrest</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>Notes<sp/>on<sp/>this<sp/>interface:</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>-<sp/>Currently,<sp/>Clp<sp/>(Version<sp/>1.10)<sp/>supports<sp/>two<sp/>ways<sp/>of<sp/>adding<sp/>rows/columns<sp/>from<sp/>arrays:<sp/>One<sp/>uses<sp/>a</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/>length<sp/>array<sp/>that<sp/>for<sp/>each<sp/>row/column<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>nonzeros<sp/>to<sp/>be<sp/>added.<sp/>The<sp/>second</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/>uses<sp/>the<sp/>@p<sp/>beg<sp/>array<sp/>that<sp/>gives<sp/>the<sp/>starting<sp/>index<sp/>for<sp/>each<sp/>row/column.<sp/>We<sp/>use<sp/>the<sp/>latter</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/>variant.<sp/>Since<sp/>for<sp/>LPI<sp/>there<sp/>should<sp/>be<sp/>no<sp/>gaps<sp/>in<sp/>the<sp/>corresponding<sp/>arrays,<sp/>i.e.,<sp/>every<sp/>entry<sp/>in</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/>@p<sp/>val<sp/>and<sp/>@a<sp/>ind<sp/>gives<sp/>a<sp/>nonzero<sp/>entry,<sp/>one<sp/>can<sp/>switch<sp/>between<sp/>the<sp/>two<sp/>formats.<sp/>With<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Clp<sp/>implementation<sp/>both<sp/>formats<sp/>involve<sp/>an<sp/>overhead:</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>For<sp/>the<sp/>@p<sp/>beg<sp/>variant,<sp/>Clp<sp/>gets<sp/>the<sp/>end<sp/>of<sp/>the<sp/>array<sp/>from<sp/>the<sp/>last<sp/>position<sp/>in<sp/>@p<sp/>beg</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>(i.e.,<sp/>the<sp/>entry<sp/>one<sp/>after<sp/>the<sp/>last<sp/>row/column)<sp/>and<sp/>we<sp/>have<sp/>to<sp/>copy<sp/>and<sp/>extend<sp/>@p<sp/>beg<sp/>for<sp/>this</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>purpose.<sp/>In<sp/>the<sp/>matrix<sp/>implementation<sp/>a<sp/>length<sp/>information<sp/>is<sp/>then<sp/>again<sp/>computed.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>For<sp/>the<sp/>@p<sp/>length<sp/>variant,<sp/>Clp<sp/>computes<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>from<sp/>this<sp/>length<sp/>variant<sp/>and</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>there<sp/>exists<sp/>no<sp/>matrix<sp/>implementation<sp/>that<sp/>uses<sp/>the<sp/>length<sp/>information,<sp/>i.e.,<sp/>it<sp/>is<sp/>recomputed</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>again.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Concluding:<sp/>the<sp/>implementation<sp/>of<sp/>Clp/CoinPackeMatrix<sp/>could<sp/>be<sp/>improved.<sp/>The<sp/>functions</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>affected<sp/>by<sp/>this<sp/>are<sp/>SCIPlpiLoadColLP(),<sp/>SCIPlpiAddCols(),<sp/>SCIPlpiAddRows()</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>-<sp/>In<sp/>former<sp/>versions<sp/>Clp<sp/>used<sp/>an<sp/>&quot;auxiliary<sp/>model&quot;<sp/>that<sp/>allows<sp/>to<sp/>save<sp/>time<sp/>when<sp/>the<sp/>model<sp/>is</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/><sp/>scaled.<sp/>This<sp/>is<sp/>discarded<sp/>from<sp/>version<sp/>higher<sp/>than<sp/>1.8.2.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>-<sp/>Clp<sp/>allows<sp/>the<sp/>setting<sp/>of<sp/>several<sp/>special<sp/>flags.<sp/>These<sp/>are<sp/>now<sp/>set<sp/>when<sp/>the<sp/>FASTMIP<sp/>option<sp/>in</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/>SCIP<sp/>is<sp/>true.<sp/>We<sp/>tried<sp/>to<sp/>use<sp/>the<sp/>best<sp/>settings,<sp/>while<sp/>still<sp/>working<sp/>correctly,<sp/>see</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/><sp/>setFastmipClpParameters().<sp/>These<sp/>settings<sp/>probably<sp/>have<sp/>to<sp/>be<sp/>adapted<sp/>to<sp/>future<sp/>Clp</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/>versions.<sp/>Maybe<sp/>more<sp/>possibilities<sp/>will<sp/>appear.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>-<sp/>At<sp/>several<sp/>places<sp/>this<sp/>interface<sp/>corrects<sp/>the<sp/>return<sp/>value<sp/>of<sp/>some<sp/>Clp<sp/>functions,<sp/>e.g.,</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/>isProvenPrimalInfeasible().<sp/>Currently<sp/>(version<sp/>1.10)<sp/>no<sp/>change<sp/>in<sp/>the<sp/>Clp<sp/>functions<sp/>will<sp/>be<sp/>made,</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>this<sp/>might<sp/>change<sp/>in<sp/>the<sp/>future.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*--+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ClpSimplex.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ClpPrimalColumnSteepest.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ClpDualRowSteepest.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CoinIndexedVector.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ClpConfig.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CLP_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config_clp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="lpi__clp_8cpp_1a0ee1156529fc4949ac9510375ecc54dd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLP_VERSION<sp/>VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lpi_8h" kindref="compound">lpi/lpi.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;scip/bitencode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pub__message_8h" kindref="compound">scip/pub_message.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>do<sp/>defines<sp/>for<sp/>windows<sp/>directly<sp/>her<sp/>to<sp/>make<sp/>the<sp/>lpi<sp/>more<sp/>independent*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(_WIN64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>for<sp/>debugging:<sp/>alternatingly<sp/>write<sp/>files<sp/>&quot;debug_[p|d]_[0|1].mps&quot;<sp/>after<sp/>each<sp/>run<sp/>-<sp/>use<sp/>with<sp/>care!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LPI_CLP_DEBUG_WRITE_FILES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fileNr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>bound<sp/>for<sp/>accepting<sp/>primal<sp/>or<sp/>dual<sp/>sum<sp/>of<sp/>infeasibilities<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="lpi__clp_8cpp_1a2fd62d75c4d7a35e2b82e2d8de9c6130" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUMINFEASBOUND<sp/><sp/><sp/>1.0e-3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**<sp/>LP<sp/>interface<sp/>for<sp/>Clp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SCIP_LPi</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Clp<sp/>simiplex<sp/>solver<sp/>class<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>for<sp/>storing<sp/>column<sp/>basis<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>for<sp/>storing<sp/>row<sp/>basis<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstatsize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>size<sp/>of<sp/>cstat<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstatsize;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>size<sp/>of<sp/>rstat<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startscratch;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>start<sp/>from<sp/>scratch?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>presolving;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>preform<sp/>preprocessing?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a680b3359be1f3e2b0fbcdaa05d219d61" kindref="member">SCIP_PRICING</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pricing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>pricing<sp/>setting<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validFactorization;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>whether<sp/>we<sp/>have<sp/>a<sp/>valid<sp/>factorization<sp/>in<sp/>clp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solved;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>was<sp/>the<sp/>current<sp/>LP<sp/>solved?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setFactorizationFrequency;<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>store<sp/>whether<sp/>the<sp/>factorization<sp/>frequency<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fastmip;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>are<sp/>fast<sp/>mip<sp/>settings<sp/>turned<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**<sp/>Definitions<sp/>for<sp/>storing<sp/>basis<sp/>status<sp/><sp/>(copied<sp/>from<sp/>lpi_spx.cpp)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="lpi__clp_8cpp_1a70d7f598e377388ae50ff1417e34bd07" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="lpi__grb_8c_1afd2fb34af6687b0159dfb63042899d4e" kindref="member">SCIP_DUALPACKET</ref><sp/><ref refid="lpi__clp_8cpp_1a70d7f598e377388ae50ff1417e34bd07" kindref="member">COLPACKET</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>each<sp/>column<sp/>needs<sp/>two<sp/>bits<sp/>of<sp/>information<sp/>(basic/on_lower/on_upper)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="lpi__clp_8cpp_1a3e80b2ad8cd656992a2f9c981adc8ad5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COLS_PER_PACKET<sp/>SCIP_DUALPACKETSIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="lpi__clp_8cpp_1a285e06216667783fd0bd0cbcd8b4882a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="lpi__grb_8c_1afd2fb34af6687b0159dfb63042899d4e" kindref="member">SCIP_DUALPACKET</ref><sp/><ref refid="lpi__clp_8cpp_1a285e06216667783fd0bd0cbcd8b4882a" kindref="member">ROWPACKET</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>each<sp/>row<sp/>needs<sp/>two<sp/>bit<sp/>of<sp/>information<sp/>(basic/on_lower/on_upper)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="lpi__clp_8cpp_1ae3086d289ba34ee9eb88f8419a4f8e14" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ROWS_PER_PACKET<sp/>SCIP_DUALPACKETSIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">/**<sp/>LPi<sp/>state<sp/>stores<sp/>basis<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SCIP_LPiState</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>LP<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>LP<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><ref refid="lpi__clp_8cpp_1a70d7f598e377388ae50ff1417e34bd07" kindref="member">COLPACKET</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>packcstat;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>basis<sp/>status<sp/>in<sp/>compressed<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><ref refid="lpi__clp_8cpp_1a285e06216667783fd0bd0cbcd8b4882a" kindref="member">ROWPACKET</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>packrstat;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>basis<sp/>status<sp/>in<sp/>compressed<sp/>form<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>dynamic<sp/>memory<sp/>arrays</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**<sp/>resizes<sp/>cstat<sp/>array<sp/>to<sp/>have<sp/>at<sp/>least<sp/>num<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/>ensureCstatMem(</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>minimal<sp/>number<sp/>of<sp/>entries<sp/>in<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>num<sp/>&gt;<sp/>lpi-&gt;cstatsize<sp/>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newsize;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newsize<sp/>=<sp/><ref refid="def_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(2*lpi-&gt;cstatsize,<sp/>num);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSreallocMemoryArray(&amp;lpi-&gt;cstat,<sp/>newsize)<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;cstatsize<sp/>=<sp/>newsize;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>assert(num<sp/>&lt;=<sp/>lpi-&gt;cstatsize);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**<sp/>resizes<sp/>rstat<sp/>array<sp/>to<sp/>have<sp/>at<sp/>least<sp/>num<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/>ensureRstatMem(</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>minimal<sp/>number<sp/>of<sp/>entries<sp/>in<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>num<sp/>&gt;<sp/>lpi-&gt;rstatsize<sp/>)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newsize;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newsize<sp/>=<sp/><ref refid="def_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(2*lpi-&gt;rstatsize,<sp/>num);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSreallocMemoryArray(&amp;lpi-&gt;rstat,<sp/>newsize)<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;rstatsize<sp/>=<sp/>newsize;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/>assert(num<sp/>&lt;=<sp/>lpi-&gt;rstatsize);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>LPi<sp/>state<sp/>methods</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>packets<sp/>needed<sp/>to<sp/>store<sp/>column<sp/>packet<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colpacketNum(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>to<sp/>store<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ncols+(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="lpi__clp_8cpp_1a3e80b2ad8cd656992a2f9c981adc8ad5" kindref="member">COLS_PER_PACKET</ref>-1)/(int)<ref refid="lpi__clp_8cpp_1a3e80b2ad8cd656992a2f9c981adc8ad5" kindref="member">COLS_PER_PACKET</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>packets<sp/>needed<sp/>to<sp/>store<sp/>row<sp/>packet<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rowpacketNum(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>to<sp/>store<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nrows+(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="lpi__clp_8cpp_1ae3086d289ba34ee9eb88f8419a4f8e14" kindref="member">ROWS_PER_PACKET</ref>-1)/(int)<ref refid="lpi__clp_8cpp_1ae3086d289ba34ee9eb88f8419a4f8e14" kindref="member">ROWS_PER_PACKET</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">/**<sp/>store<sp/>row<sp/>and<sp/>column<sp/>basis<sp/>status<sp/>in<sp/>a<sp/>packed<sp/>LPi<sp/>state<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lpistatePack(</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>state<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>basis<sp/>status<sp/>of<sp/>columns<sp/>in<sp/>unpacked<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>basis<sp/>status<sp/>of<sp/>rows<sp/>in<sp/>unpacked<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate-&gt;packcstat<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate-&gt;packrstat<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/>SCIPencodeDualBit(cstat,<sp/>lpistate-&gt;packcstat,<sp/>lpistate-&gt;ncols);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/>SCIPencodeDualBit(rstat,<sp/>lpistate-&gt;packrstat,<sp/>lpistate-&gt;nrows);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment">/**<sp/>unpacks<sp/>row<sp/>and<sp/>column<sp/>basis<sp/>status<sp/>from<sp/>a<sp/>packed<sp/>LPi<sp/>state<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lpistateUnpack(</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>*<sp/>lpistate,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>state<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>for<sp/>storing<sp/>basis<sp/>status<sp/>of<sp/>columns<sp/>in<sp/>unpacked<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>for<sp/>storing<sp/>basis<sp/>status<sp/>of<sp/>rows<sp/>in<sp/>unpacked<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate-&gt;packcstat<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate-&gt;packrstat<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/>SCIPdecodeDualBit(lpistate-&gt;packcstat,<sp/>cstat,<sp/>lpistate-&gt;ncols);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/>SCIPdecodeDualBit(lpistate-&gt;packrstat,<sp/>rstat,<sp/>lpistate-&gt;nrows);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="237"><highlight class="comment">/**<sp/>creates<sp/>LPi<sp/>state<sp/>information<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/>lpistateCreate(</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>to<sp/>store<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>to<sp/>store<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/>assert(blkmem<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/>assert(ncols<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/>assert(nrows<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocBlockMemory(blkmem,<sp/>lpistate)<sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocBlockMemoryArray(blkmem,<sp/>&amp;(*lpistate)-&gt;packcstat,<sp/>colpacketNum(ncols))<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocBlockMemoryArray(blkmem,<sp/>&amp;(*lpistate)-&gt;packrstat,<sp/>rowpacketNum(nrows))<sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="258"><highlight class="comment">/**<sp/>frees<sp/>LPi<sp/>state<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lpistateFree(</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>state<sp/>information<sp/>(like<sp/>basis<sp/>information)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/>assert(blkmem<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/>assert(*lpistate<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/>BMSfreeBlockMemoryArray(blkmem,<sp/>&amp;(*lpistate)-&gt;packcstat,<sp/>colpacketNum((*lpistate)-&gt;ncols));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/>BMSfreeBlockMemoryArray(blkmem,<sp/>&amp;(*lpistate)-&gt;packrstat,<sp/>rowpacketNum((*lpistate)-&gt;nrows));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/>BMSfreeBlockMemory(blkmem,<sp/>lpistate);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>local<sp/>methods</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">/**<sp/>marks<sp/>the<sp/>current<sp/>LP<sp/>to<sp/>be<sp/>unsolved<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invalidateSolution(</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;solved<sp/>=<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="292"><highlight class="comment">/**<sp/>set<sp/>factorization<sp/>frequency<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFactorizationFrequency(</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>the<sp/>factorization<sp/>frequency<sp/>only<sp/>once<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;setFactorizationFrequency<sp/>)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;defaultFactorizationFrequency();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;setFactorizationFrequency<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="306"><highlight class="comment">/**<sp/>this<sp/>methods<sp/>sets<sp/>parameters<sp/>of<sp/>Clp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFastmipClpParameters(</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;fastmip<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Perturbation:</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>50<sp/><sp/>-<sp/>switch<sp/>on<sp/>perturbation</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>100<sp/>-<sp/>auto<sp/>perturb<sp/>if<sp/>takes<sp/>too<sp/>long<sp/>(1.0e-6<sp/>largest<sp/>nonzero)</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>101<sp/>-<sp/>we<sp/>are<sp/>perturbed</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>102<sp/>-<sp/>don&apos;t<sp/>try<sp/>perturbing<sp/>again</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>default<sp/>is<sp/>100</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>others<sp/>are<sp/>for<sp/>playing</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>for<sp/>Clp<sp/>1.8<sp/>stable:<sp/>50<sp/>seems<sp/>to<sp/>be<sp/>10%<sp/>faster<sp/>than<sp/>100</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;setPerturbation(50);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Special<sp/>options<sp/>description<sp/>from<sp/>ClpModell.hpp:</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>-<sp/>Don&apos;t<sp/>keep<sp/>changing<sp/>infeasibility<sp/>weight</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>-<sp/>Keep<sp/>nonLinearCost<sp/>round<sp/>solves</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>-<sp/>Force<sp/>outgoing<sp/>variables<sp/>to<sp/>exact<sp/>bound<sp/>(primal)</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>8<sp/>-<sp/>Safe<sp/>to<sp/>use<sp/>dense<sp/>initial<sp/>factorization</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>16<sp/>-<sp/>Just<sp/>use<sp/>basic<sp/>variables<sp/>for<sp/>operation<sp/>if<sp/>column<sp/>generation</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>32<sp/>-<sp/>Create<sp/>ray<sp/>even<sp/>in<sp/>BAB</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>64<sp/>-<sp/>Treat<sp/>problem<sp/>as<sp/>feasible<sp/>until<sp/>last<sp/>minute<sp/>(i.e.<sp/>minimize<sp/>infeasibilities)</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>128<sp/>-<sp/>Switch<sp/>off<sp/>all<sp/>matrix<sp/>sanity<sp/>checks</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>256<sp/>-<sp/>No<sp/>row<sp/>copy</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>512<sp/>-<sp/>If<sp/>not<sp/>in<sp/>values<sp/>pass,<sp/>solution<sp/>guaranteed,<sp/>skip<sp/>as<sp/>much<sp/>as<sp/>possible</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>1024<sp/>-<sp/>In<sp/>branch<sp/>and<sp/>bound</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>2048<sp/>-<sp/>Don&apos;t<sp/>bother<sp/>to<sp/>re-factorize<sp/>if<sp/>&lt;<sp/>20<sp/>iterations</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>4096<sp/>-<sp/>Skip<sp/>some<sp/>optimality<sp/>checks</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>8192<sp/>-<sp/>Do<sp/>Primal<sp/>when<sp/>cleaning<sp/>up<sp/>primal</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>16384<sp/>-<sp/>In<sp/>fast<sp/>dual<sp/>(so<sp/>we<sp/>can<sp/>switch<sp/>off<sp/>things)</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>32768<sp/>-<sp/>called<sp/>from<sp/>Osi</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>65536<sp/>-<sp/>keep<sp/>arrays<sp/>around<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>(also<sp/>use<sp/>maximumR/C)</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>131072<sp/>-<sp/>transposeTimes<sp/>is<sp/>-1.0<sp/>and<sp/>can<sp/>skip<sp/>basic<sp/>and<sp/>fixed</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>262144<sp/>-<sp/>extra<sp/>copy<sp/>of<sp/>scaled<sp/>matrix</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>524288<sp/>-<sp/>Clp<sp/>fast<sp/>dual</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>1048576<sp/>-<sp/>don&apos;t<sp/>need<sp/>to<sp/>finish<sp/>dual<sp/>(can<sp/>return<sp/>3)</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>NOTE<sp/><sp/><sp/>-<sp/>many<sp/>applications<sp/>can<sp/>call<sp/>Clp<sp/>but<sp/>there<sp/>may<sp/>be<sp/>some<sp/>short<sp/>cuts</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>are<sp/>taken<sp/>which<sp/>are<sp/>not<sp/>guaranteed<sp/>safe<sp/>from<sp/>all<sp/>applications.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vetted<sp/>applications<sp/>will<sp/>have<sp/>a<sp/>bit<sp/>set<sp/>and<sp/>the<sp/>code<sp/>may<sp/>test<sp/>this</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At<sp/>present<sp/>I<sp/>expect<sp/>a<sp/>few<sp/>such<sp/>applications<sp/>-<sp/>if<sp/>too<sp/>many<sp/>I<sp/>will</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>to<sp/>re-think.<sp/><sp/>It<sp/>is<sp/>up<sp/>to<sp/>application<sp/>owner<sp/>to<sp/>change<sp/>the<sp/>code</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>she/he<sp/>needs<sp/>these<sp/>short<sp/>cuts.<sp/><sp/>I<sp/>will<sp/>not<sp/>debug<sp/>unless<sp/>in<sp/>Coin</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repository.<sp/><sp/>See<sp/>COIN_CLP_VETTED<sp/>comments.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>0x01000000<sp/>is<sp/>Cbc<sp/>(and<sp/>in<sp/>branch<sp/>and<sp/>bound)</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>0x02000000<sp/>is<sp/>in<sp/>a<sp/>different<sp/>branch<sp/>and<sp/>bound</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>Comments:</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>-<sp/>nonlinear<sp/>costs<sp/>are<sp/>used<sp/>in<sp/>primal<sp/>for<sp/>infeasibility<sp/>weight</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>-<sp/>in<sp/>anti-degeneracy<sp/>operations<sp/>can<sp/>move<sp/>variables<sp/>just<sp/>off<sp/>a<sp/>bound</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>8<sp/>-<sp/>means<sp/>dense<sp/>nucleus<sp/>in<sp/>factorization<sp/>-<sp/>normally<sp/>not<sp/>safe<sp/>in<sp/>first<sp/>factorization<sp/>as</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>singularity<sp/>handling<sp/>is<sp/>not<sp/>useful.<sp/>Is<sp/>switched<sp/>on<sp/>if<sp/>going<sp/>from<sp/>dual<sp/>to<sp/>primal<sp/>or<sp/>vv.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>16<sp/>-<sp/>Used<sp/>for<sp/>&quot;real&quot;<sp/>column<sp/>generation</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>64<sp/>-<sp/>Good<sp/>idea,<sp/>since<sp/>in<sp/>B&amp;B<sp/>most<sp/>problems<sp/>are<sp/>feasible.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>128<sp/>-<sp/>Assumes<sp/>user<sp/>will<sp/>not<sp/>create<sp/>tiny<sp/>or<sp/>duplicate<sp/>elements.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>256<sp/>-<sp/>Normally<sp/>Clp<sp/>keeps<sp/>a<sp/>scaled<sp/>row<sp/>copy<sp/>for<sp/>speed.<sp/>For<sp/>very<sp/>large<sp/>problems<sp/>you<sp/>might<sp/>want<sp/>to<sp/>turn<sp/>it<sp/>off.</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>512<sp/>-<sp/>Means<sp/>nonbasic<sp/>variables<sp/>should<sp/>be<sp/>at<sp/>bounds<sp/>and<sp/>basis<sp/>will<sp/>be<sp/>reasonable.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>4096<sp/>-<sp/>Skip<sp/>some<sp/>optimality<sp/>checks</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>8192<sp/>-<sp/>If<sp/>the<sp/>primal<sp/>has<sp/>a<sp/>perturbed<sp/>problem<sp/>and<sp/>needs<sp/>to<sp/>clean<sp/>up,<sp/>it<sp/>normally<sp/>uses<sp/>dual<sp/>-<sp/>but<sp/>in<sp/>some<sp/>cases<sp/>can<sp/>be<sp/>better<sp/>to<sp/>use<sp/>primal.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>32768<sp/>-<sp/>Just<sp/>switches<sp/>off<sp/>some<sp/>messages<sp/>e.g.<sp/>empty<sp/>problem.</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>131072<sp/>-<sp/>used<sp/>internally</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>262144<sp/>-<sp/>Normally<sp/>Clp<sp/>has<sp/>unscaled<sp/>column<sp/>copy<sp/>of<sp/>matrix<sp/>-<sp/>this<sp/>makes<sp/>an<sp/>extra<sp/>scaled<sp/>copy.</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>524288<sp/>-<sp/>used<sp/>internally</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>1048576<sp/>-<sp/>only<sp/>set<sp/>by<sp/>fastDual</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>0x02000000<sp/>-<sp/>main<sp/>point:<sp/>does<sp/>allow<sp/>use<sp/>of<sp/>disaster<sp/>handler</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Cbc<sp/>seems<sp/>to<sp/>use<sp/>the<sp/>following<sp/>special<sp/>options:</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>lpi-&gt;clp-&gt;setSpecialOptions(64|128|1024|2048|4096|32768|262144|0x01000000);</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Sometimes<sp/>512+8192<sp/>and<sp/>8192<sp/>or<sp/>8<sp/>are<sp/>used<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2048<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>65536<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>262144<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>debug<sp/>mode:<sp/>leave<sp/>checks<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;setSpecialOptions(32|64|512|1024|32768);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;setSpecialOptions(32|64|128|512|1024|4096|32768);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8192<sp/>bit<sp/>-<sp/>don&apos;t<sp/>even<sp/>think<sp/>of<sp/>using<sp/>primal<sp/>if<sp/>user<sp/>asks<sp/>for<sp/>dual<sp/>(and<sp/>vv)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;setMoreSpecialOptions(8192<sp/>|<sp/>lpi-&gt;clp-&gt;moreSpecialOptions());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>memory<sp/>grow<sp/>only<sp/>(do<sp/>not<sp/>shrink)<sp/>-<sp/>[needs<sp/>specialOptions<sp/>&amp;<sp/>65536<sp/>!=<sp/>0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//lpi-&gt;clp-&gt;setPersistenceFlag(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="401"><highlight class="comment">/**<sp/>this<sp/>methods<sp/>sets<sp/>parameters<sp/>of<sp/>Clp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unsetFastmipClpParameters(</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;fastmip<sp/>=<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>to<sp/>default<sp/>value:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;setPerturbation(100);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>turn<sp/>off<sp/>special<sp/>options:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;setSpecialOptions(0);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>turn<sp/>off<sp/>memory<sp/>enlargement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;setPersistenceFlag(0);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/>LP<sp/>Interface<sp/>Methods</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>Miscellaneous<sp/>Methods</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="429"><highlight class="comment">/**@name<sp/>Miscellaneous<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="430"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="432"><highlight class="comment">/**<sp/>gets<sp/>name<sp/>and<sp/>version<sp/>of<sp/>LP<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="lpi__clp_8cpp_1aed7c57c93675aae2562abab53b487ce7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lpi__clp_8cpp_1aed7c57c93675aae2562abab53b487ce7" kindref="member">SCIPlpiGetSolverName</ref>(</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Currently<sp/>Clp<sp/>has<sp/>no<sp/>function<sp/>to<sp/>get<sp/>version,<sp/>so<sp/>we<sp/>hard<sp/>code<sp/>it<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Clp<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="lpi__clp_8cpp_1a0ee1156529fc4949ac9510375ecc54dd" kindref="member">CLP_VERSION</ref>;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="441"><highlight class="comment">/**<sp/>gets<sp/>description<sp/>of<sp/>LP<sp/>solver<sp/>(developer,<sp/>webpage,<sp/>...)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="lpi__clp_8cpp_1a6cfc10a9902214c1ac825998bebdea19" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lpi__clp_8cpp_1a6cfc10a9902214c1ac825998bebdea19" kindref="member">SCIPlpiGetSolverDesc</ref>(</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;COIN-OR<sp/>Linear<sp/>Programming<sp/>Solver<sp/>developed<sp/>by<sp/>J.<sp/>Forrest<sp/>et.al.<sp/>(projects.coin-or.org/Clp)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="449"><highlight class="comment">/**<sp/>gets<sp/>pointer<sp/>for<sp/>LP<sp/>solver<sp/>-<sp/>use<sp/>only<sp/>with<sp/>great<sp/>care<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="lpi__clp_8cpp_1ac8b0874105d4a69fd4e35455d488edb3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="lpi__clp_8cpp_1ac8b0874105d4a69fd4e35455d488edb3" kindref="member">SCIPlpiGetSolverPointer</ref>(</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>an<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="456"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/>LPI<sp/>Creation<sp/>and<sp/>Destruction<sp/>Methods</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="465"><highlight class="comment">/**@name<sp/>LPI<sp/>Creation<sp/>and<sp/>Destruction<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="466"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="468"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>LP<sp/>problem<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="lpi__clp_8cpp_1ae522c0e79b2f2c7d185e6b6cafec1a3d" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1ae522c0e79b2f2c7d185e6b6cafec1a3d" kindref="member">SCIPlpiCreate</ref>(</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>an<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref>*<sp/><sp/><sp/><sp/><sp/>messagehdlr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>message<sp/>handler<sp/>to<sp/>use<sp/>for<sp/>printing<sp/>messages,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objsen<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>objective<sp/>sense<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiCreate()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>lpi<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemory(lpi)<sp/>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;clp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ClpSimplex();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;cstat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;rstat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;cstatsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;rstatsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;startscratch<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;pricing<sp/>=<sp/><ref refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a840117e919783bcc69646f544c2db051" kindref="member">SCIP_PRICING_LPIDEFAULT</ref>;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;validFactorization<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;setFactorizationFrequency<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;fastmip<sp/>=<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(*lpi);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>you<sp/>want<sp/>to<sp/>use<sp/>saveModel()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(*lpi)-&gt;clp-&gt;setLengthNames(255);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>pricing<sp/>routines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>primal:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>is<sp/>exact<sp/>devex,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>full<sp/>steepest,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>is<sp/>partial<sp/>exact<sp/>devex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>switches<sp/>between<sp/>0<sp/>and<sp/>2<sp/>depending<sp/>on<sp/>factorization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4<sp/>starts<sp/>as<sp/>partial<sp/>dantzig/devex<sp/>but<sp/>then<sp/>may<sp/>switch<sp/>between<sp/>0<sp/>and<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>currently<sp/>(Clp<sp/>1.8stable)<sp/>default<sp/>is<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/>ClpPrimalColumnSteepest<sp/>primalSteepest;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;clp-&gt;setPrimalColumnPivotAlgorithm(primalSteepest);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>dual:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>is<sp/>uninitialized,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>full,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>is<sp/>partial<sp/>uninitialized,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>starts<sp/>as<sp/>2<sp/>but<sp/>may<sp/>switch<sp/>to<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>currently<sp/>(Clp<sp/>1.8stable)<sp/>default<sp/>is<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/>ClpDualRowSteepest<sp/>dualSteepest;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;clp-&gt;setDualRowPivotAlgorithm(dualSteepest);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>problem<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;clp-&gt;setStrParam(ClpProbName,<sp/>std::string(name)<sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>objective<sp/>sense:<sp/>SCIP<sp/>values<sp/>are<sp/>the<sp/>same<sp/>as<sp/>the<sp/>ones<sp/>for<sp/>Clp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;clp-&gt;setOptimizationDirection(objsen);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>turn<sp/>off<sp/>output<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;clp-&gt;setLogLevel(0);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>turn<sp/>off<sp/>scaling<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;clp-&gt;scaling(0);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>default<sp/>pricing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="lpi__clp_8cpp_1a8dac6dec76901acef9c18397582c5e9a" kindref="member">SCIPlpiSetIntpar</ref>(*lpi,<sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba0114e2317d0236d43fb3b297ee9aea8d" kindref="member">SCIP_LPPAR_PRICING</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(*lpi)-&gt;pricing)<sp/>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="537"><highlight class="comment">/**<sp/>deletes<sp/>an<sp/>LP<sp/>problem<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="lpi__clp_8cpp_1a6dfadd74b4f72eea58d0946ec9ea6f60" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a6dfadd74b4f72eea58d0946ec9ea6f60" kindref="member">SCIPlpiFree</ref>(</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>an<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/>assert(*lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/>assert((*lpi)-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiFree()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(*lpi)-&gt;clp;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArrayNull(&amp;(*lpi)-&gt;cstat);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArrayNull(&amp;(*lpi)-&gt;rstat);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemory(lpi);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/>Modification<sp/>Methods</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="568"><highlight class="comment">/**@name<sp/>Modification<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="569"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="571"><highlight class="comment">/**<sp/>copies<sp/>LP<sp/>data<sp/>with<sp/>column<sp/>matrix<sp/>into<sp/>LP<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="lpi__clp_8cpp_1ae23bc1c98c8547a0ba03682d100365dd" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1ae23bc1c98c8547a0ba03682d100365dd" kindref="member">SCIPlpiLoadColLP</ref>(</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objsen,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>objective<sp/>sense<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>obj,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>objective<sp/>function<sp/>values<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>lower<sp/>bounds<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>ub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>upper<sp/>bounds<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colnames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>names,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>left<sp/>hand<sp/>sides<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>rhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>right<sp/>hand<sp/>sides<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rownames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>names,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>in<sp/>the<sp/>constraint<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>start<sp/>index<sp/>of<sp/>each<sp/>column<sp/>in<sp/>ind-<sp/>and<sp/>val-array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>indices<sp/>of<sp/>constraint<sp/>matrix<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>constraint<sp/>matrix<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiLoadColLP()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/>assert(lhs<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/>assert(rhs<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>nnonz<sp/>&gt;<sp/>beg[ncols-1]<sp/>);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>beg-array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>mybeg<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(&amp;mybeg,<sp/>ncols<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/>BMScopyMemoryArray(mybeg,<sp/>beg,<sp/>ncols);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/>mybeg[ncols]<sp/>=<sp/>nnonz;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>additional<sp/>entry<sp/>at<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;loadProblem(ncols,<sp/>nrows,<sp/>mybeg,<sp/>ind,<sp/>val,<sp/>lb,<sp/>ub,<sp/>obj,<sp/>lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;mybeg<sp/>);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>objective<sp/>sense</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setOptimizationDirection(objsen);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>column<sp/>and<sp/>rownames<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>colnames<sp/>||<sp/>rownames<sp/>)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>columnNames(ncols);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>rowNames(nrows);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colnames)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ncols;<sp/>++j)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnNames[j].assign(colnames[j]);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rownames)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ncols;<sp/>++i)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowNames[i].assign(rownames[i]);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;copyNames(rowNames,<sp/>columnNames);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="637"><highlight class="comment">/**<sp/>adds<sp/>columns<sp/>to<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="lpi__clp_8cpp_1add77293153dc03295e1782af22921906" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1add77293153dc03295e1782af22921906" kindref="member">SCIPlpiAddCols</ref>(</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>to<sp/>be<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>obj,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>objective<sp/>function<sp/>values<sp/>of<sp/>new<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>lower<sp/>bounds<sp/>of<sp/>new<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>ub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>upper<sp/>bounds<sp/>of<sp/>new<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colnames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>names,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the<sp/>constraint<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>start<sp/>index<sp/>of<sp/>each<sp/>column<sp/>in<sp/>ind-<sp/>and<sp/>val-array,<sp/>or<sp/>0<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>indices<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>0<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>0<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiAddCols()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/>assert(obj<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/>assert(lb<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/>assert(ub<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/>assert(nnonz<sp/>==<sp/>0<sp/>||<sp/>beg<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/>assert(nnonz<sp/>==<sp/>0<sp/>||<sp/>ind<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/>assert(nnonz<sp/>==<sp/>0<sp/>||<sp/>val<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/>assert(nnonz<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/>assert(ncols<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>number<sp/>of<sp/>columns<sp/>for<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numCols<sp/>=<sp/>lpi-&gt;clp-&gt;getNumCols();</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>beg-array<sp/>(if<sp/>not<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>mybeg<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(&amp;mybeg,<sp/>ncols<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>columns<sp/>are<sp/>not<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nnonz<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(mybeg,<sp/>beg,<sp/>ncols);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mybeg[ncols]<sp/>=<sp/>nnonz;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>additional<sp/>entry<sp/>at<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;addColumns(ncols,<sp/>lb,<sp/>ub,<sp/>obj,<sp/>mybeg,<sp/>ind,<sp/>val);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>ncols;<sp/>++j)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mybeg[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>empty<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;addColumns(ncols,<sp/>lb,<sp/>ub,<sp/>obj,<sp/>mybeg,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(&amp;mybeg);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>columnnames<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>colnames<sp/>)</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>columnNames(ncols);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ncols;<sp/>++j)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnNames[j].assign(colnames[j]);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;copyColumnNames(columnNames,<sp/>numCols,<sp/>numCols<sp/>+<sp/>ncols);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="704"><highlight class="comment">/**<sp/>deletes<sp/>all<sp/>columns<sp/>in<sp/>the<sp/>given<sp/>range<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705" refid="lpi__clp_8cpp_1af651ff93b2be704cacb27c13b24ab311" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1af651ff93b2be704cacb27c13b24ab311" kindref="member">SCIPlpiDelCols</ref>(</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>column<sp/>to<sp/>be<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastcol<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>column<sp/>to<sp/>be<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiDelCols()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>firstcol<sp/>&amp;&amp;<sp/>firstcol<sp/>&lt;=<sp/>lastcol<sp/>&amp;&amp;<sp/>lastcol<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberColumns());</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>Clp<sp/>version<sp/>(1.8)<sp/>can&apos;t<sp/>delete<sp/>a<sp/>range<sp/>of<sp/>columns;<sp/>we<sp/>have<sp/>to<sp/>use<sp/>deleteColumns<sp/>(see<sp/>SCIPlpiDelColset)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>lastcol-firstcol+1;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>which<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;which,<sp/>num)<sp/>);;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>array<sp/>with<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>firstcol;<sp/>j<sp/>&lt;=<sp/>lastcol;<sp/>++j)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>which[j<sp/>-<sp/>firstcol]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;deleteColumns(num,<sp/>which);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;which<sp/>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="735"><highlight class="comment">/**<sp/>deletes<sp/>columns<sp/>from<sp/>SCIP_LPI;<sp/>the<sp/>new<sp/>position<sp/>of<sp/>a<sp/>column<sp/>must<sp/>not<sp/>be<sp/>greater<sp/>that<sp/>its<sp/>old<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736" refid="lpi__clp_8cpp_1ac93976edb5a40906de3c2163b2fafec0" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1ac93976edb5a40906de3c2163b2fafec0" kindref="member">SCIPlpiDelColset</ref>(</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>deletion<sp/>status<sp/>of<sp/>columns</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>input:<sp/><sp/>1<sp/>if<sp/>column<sp/>should<sp/>be<sp/>deleted,<sp/>0<sp/>if<sp/>not</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>output:<sp/>new<sp/>position<sp/>of<sp/>column,<sp/>-1<sp/>if<sp/>column<sp/>was<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="742"><highlight class="normal">{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiDelColset()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/>assert(dstat<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>dstat<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncols<sp/>=<sp/>lpi-&gt;clp-&gt;getNumCols();</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>which<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;which,<sp/>ncols)<sp/>);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ncols;<sp/>++j)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dstat[j]<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which[cnt++]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;deleteColumns(cnt,<sp/>which);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(&amp;which);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>dstat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ncols;<sp/>++j)</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dstat[j]<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat[j]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cnt;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat[j]<sp/>=<sp/>j<sp/>-<sp/>cnt;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="781"><highlight class="comment">/**<sp/>adds<sp/>rows<sp/>to<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782" refid="lpi__clp_8cpp_1a2bad82670d46254daf3e923898c404d5" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a2bad82670d46254daf3e923898c404d5" kindref="member">SCIPlpiAddRows</ref>(</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>to<sp/>be<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>left<sp/>hand<sp/>sides<sp/>of<sp/>new<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>rhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>right<sp/>hand<sp/>sides<sp/>of<sp/>new<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rownames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>names,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the<sp/>constraint<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>start<sp/>index<sp/>of<sp/>each<sp/>row<sp/>in<sp/>ind-<sp/>and<sp/>val-array,<sp/>or<sp/>0<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>indices<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>0<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>0<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiAddRows()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/>assert(lhs<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/>assert(rhs<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/>assert(nnonz<sp/>==<sp/>0<sp/>||<sp/>beg<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/>assert(nnonz<sp/>==<sp/>0<sp/>||<sp/>ind<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/>assert(nnonz<sp/>==<sp/>0<sp/>||<sp/>val<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>number<sp/>of<sp/>rows<sp/>for<sp/>later<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numRows<sp/>=<sp/>lpi-&gt;clp-&gt;getNumRows();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>mybeg<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;mybeg,<sp/>nrows<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nnonz<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>beg-array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>mybeg,<sp/>beg,<sp/>nrows);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mybeg[nrows]<sp/>=<sp/>nnonz;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>additional<sp/>entry<sp/>at<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;addRows(nrows,<sp/>lhs,<sp/>rhs,<sp/>mybeg,<sp/>ind,<sp/>val);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>empty<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>nrows;<sp/>++i)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mybeg[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;addRows(nrows,<sp/>lhs,<sp/>rhs,<sp/>mybeg,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;mybeg<sp/>);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>rownames<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rownames<sp/>)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>rowNames(nrows);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nrows;<sp/>++j)</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowNames[j].assign(rownames[j]);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;copyRowNames(rowNames,<sp/>numRows,<sp/>numRows<sp/>+<sp/>nrows);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="843"><highlight class="comment">/**<sp/>deletes<sp/>all<sp/>rows<sp/>in<sp/>the<sp/>given<sp/>range<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844" refid="lpi__clp_8cpp_1a95a88cc92b9c3061762849aeb2edc9ff" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a95a88cc92b9c3061762849aeb2edc9ff" kindref="member">SCIPlpiDelRows</ref>(</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>row<sp/>to<sp/>be<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastrow<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>row<sp/>to<sp/>be<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="849"><highlight class="normal">{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiDelRows()<sp/>(number:<sp/>%d)\n&quot;</highlight><highlight class="normal">,<sp/>lastrow-firstrow+1);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>firstrow<sp/>&amp;&amp;<sp/>firstrow<sp/>&lt;=<sp/>lastrow<sp/>&amp;&amp;<sp/>lastrow<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberRows());</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>Clp<sp/>version<sp/>(1.8)<sp/>can&apos;t<sp/>delete<sp/>a<sp/>range<sp/>of<sp/>rows;<sp/>we<sp/>have<sp/>to<sp/>use<sp/>deleteRows<sp/>(see<sp/>SCIPlpiDelRowset)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>lastrow-firstrow+1;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>which<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;which,<sp/>num)<sp/>);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>array<sp/>with<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>firstrow;<sp/>i<sp/>&lt;=<sp/>lastrow;<sp/>++i)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>which[i<sp/>-<sp/>firstrow]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;deleteRows(num,<sp/>which);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;which<sp/>);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="875"><highlight class="comment">/**<sp/>deletes<sp/>rows<sp/>from<sp/>SCIP_LP;<sp/>the<sp/>new<sp/>position<sp/>of<sp/>a<sp/>row<sp/>must<sp/>not<sp/>be<sp/>greater<sp/>that<sp/>its<sp/>old<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876" refid="lpi__clp_8cpp_1af7385b74de163f5ae25b77e99c7bdc1a" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1af7385b74de163f5ae25b77e99c7bdc1a" kindref="member">SCIPlpiDelRowset</ref>(</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>deletion<sp/>status<sp/>of<sp/>rows</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>input:<sp/><sp/>1<sp/>if<sp/>row<sp/>should<sp/>be<sp/>deleted,<sp/>0<sp/>if<sp/>not</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>output:<sp/>new<sp/>position<sp/>of<sp/>row,<sp/>-1<sp/>if<sp/>row<sp/>was<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiDelRowset()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/>assert(dstat<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transform<sp/>dstat<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrows<sp/>=<sp/>lpi-&gt;clp-&gt;getNumRows();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>which<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;which,<sp/>nrows)<sp/>);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nrows;<sp/>++i)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dstat[i]<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which[cnt++]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;deleteRows(cnt,<sp/>which);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;which<sp/>);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>dstat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nrows;<sp/>++i)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dstat[i]<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cnt;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat[i]<sp/>=<sp/>i<sp/>-<sp/>cnt;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="921"><highlight class="comment">/**<sp/>clears<sp/>the<sp/>whole<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922" refid="lpi__clp_8cpp_1a18664e9f784a12522aa9ec6e775e5a15" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a18664e9f784a12522aa9ec6e775e5a15" kindref="member">SCIPlpiClear</ref>(</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiClear()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>the<sp/>resize(0,0)<sp/>to<sp/>get<sp/>rid<sp/>of<sp/>the<sp/>model<sp/>but<sp/>keep<sp/>all<sp/>other<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;resize(0,0);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="940"><highlight class="comment">/**<sp/>changes<sp/>lower<sp/>and<sp/>upper<sp/>bounds<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941" refid="lpi__clp_8cpp_1a69472179ed0e902cb865b8bd3941c461" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a69472179ed0e902cb865b8bd3941c461" kindref="member">SCIPlpiChgBounds</ref>(</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>to<sp/>change<sp/>bounds<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>the<sp/>new<sp/>lower<sp/>bounds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>ub<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>the<sp/>new<sp/>upper<sp/>bounds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="948"><highlight class="normal">{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiChgBounds()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/>assert(ind<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/>assert(lb<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/>assert(ub<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>currently<sp/>employ<sp/>the<sp/>following<sp/>bug<sp/>fix:<sp/>the<sp/>solution<sp/>vector<sp/>is<sp/>modified<sp/>to<sp/>be<sp/>set<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>corresponding<sp/>bounds.<sp/>This<sp/>avoids<sp/>one<sp/>error<sp/>in<sp/>Clp<sp/>-<sp/>maybe<sp/>fixed<sp/>in<sp/>later<sp/>versions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sol<sp/>=<sp/>lpi-&gt;clp-&gt;primalColumnSolution();</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>colLower<sp/>=<sp/>lpi-&gt;clp-&gt;getColLower();</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>colUpper<sp/>=<sp/>lpi-&gt;clp-&gt;getColUpper();</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ncols;<sp/>++j)</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setColumnBounds(ind[j],<sp/>lb[j],<sp/>ub[j]);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sol<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>clp-&gt;statusExists()<sp/>)</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>colLower<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>colUpper<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>ind[j];</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>clp-&gt;getColumnStatus(k)<sp/>)</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::isFree:</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::superBasic:</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sol[j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::atUpperBound:</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sol[k]<sp/>=<sp/>colUpper[k];</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>colUpper[k]<sp/>==<sp/>ub[j]<sp/>);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::isFixed:</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::atLowerBound:</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sol[k]<sp/>=<sp/>colLower[k];</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>colLower[k]<sp/>==<sp/>lb[j]<sp/>);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>workaround:<sp/>if<sp/>there<sp/>is<sp/>no<sp/>status,<sp/>we<sp/>assume<sp/>something<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sol[j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1006"><highlight class="comment">/**<sp/>changes<sp/>left<sp/>and<sp/>right<sp/>hand<sp/>sides<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007" refid="lpi__clp_8cpp_1a00fa12a201791dbba7d4b17a75fe7ae2" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a00fa12a201791dbba7d4b17a75fe7ae2" kindref="member">SCIPlpiChgSides</ref>(</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>to<sp/>change<sp/>sides<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>values<sp/>for<sp/>left<sp/>hand<sp/>sides<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>rhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>values<sp/>for<sp/>right<sp/>hand<sp/>sides<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiChgSides()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/>assert(ind<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/>assert(lhs<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/>assert(rhs<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nrows;<sp/>++i)</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setRowBounds(ind[i],<sp/>lhs[i],<sp/>rhs[i]);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1034"><highlight class="comment">/**<sp/>changes<sp/>a<sp/>single<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035" refid="lpi__clp_8cpp_1aff2b648673b8baac9903c236a97c267b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1aff2b648673b8baac9903c236a97c267b" kindref="member">SCIPlpiChgCoef</ref>(</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>number<sp/>of<sp/>coefficient<sp/>to<sp/>change<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>number<sp/>of<sp/>coefficient<sp/>to<sp/>change<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>value<sp/>of<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiChgCoef()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>row<sp/>&amp;&amp;<sp/>row<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberRows());</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>col<sp/>&amp;&amp;<sp/>col<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberColumns());</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;matrix()-&gt;modifyCoefficient(row,<sp/>col,<sp/>newval);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1057"><highlight class="comment">/**<sp/>changes<sp/>the<sp/>objective<sp/>sense<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058" refid="lpi__clp_8cpp_1a0d794ce162ec1c45eb776baa2ffdc79c" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a0d794ce162ec1c45eb776baa2ffdc79c" kindref="member">SCIPlpiChgObjsen</ref>(</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objsen<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>objective<sp/>sense<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiChgObjsen()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>objective<sp/>sense:<sp/>SCIP<sp/>values<sp/>are<sp/>the<sp/>same<sp/>as<sp/>the<sp/>ones<sp/>for<sp/>Clp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;setOptimizationDirection(objsen);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1077"><highlight class="comment">/**<sp/>changes<sp/>objective<sp/>values<sp/>of<sp/>columns<sp/>in<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078" refid="lpi__clp_8cpp_1a8f18465d14a5d1116c1dc8ea6cf90ddb" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a8f18465d14a5d1116c1dc8ea6cf90ddb" kindref="member">SCIPlpiChgObj</ref>(</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>to<sp/>change<sp/>objective<sp/>value<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>indices<sp/>to<sp/>change<sp/>objective<sp/>value<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>objective<sp/>values<sp/>for<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiChgObj()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/>assert(ind<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/>assert(obj<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>updates<sp/>whatsChanged<sp/>in<sp/>Clp<sp/>(bound<sp/>checking<sp/>in<sp/>Clp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ncols;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setObjCoeff(ind[j],<sp/>obj[j]);<sp/><sp/></highlight><highlight class="comment">//<sp/>inlined<sp/>version<sp/>of<sp/>clp-&gt;setObjectiveCoefficient(ind[j],<sp/>obj[j]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1104"><highlight class="comment">/**<sp/>multiplies<sp/>a<sp/>row<sp/>with<sp/>a<sp/>non-zero<sp/>scalar;<sp/>for<sp/>negative<sp/>scalars,<sp/>the<sp/>row&apos;s<sp/>sense<sp/>is<sp/>switched<sp/>accordingly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105" refid="lpi__clp_8cpp_1af94ca6a608b8e0be96158d78270b2715" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1af94ca6a608b8e0be96158d78270b2715" kindref="member">SCIPlpiScaleRow</ref>(</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>number<sp/>to<sp/>scale<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaleval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>scaling<sp/>multiplier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiScaleRow()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/>assert(scaleval<sp/>!=<sp/>0.0);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>row<sp/>&amp;&amp;<sp/>row<sp/>&lt;=<sp/>lpi-&gt;clp-&gt;numberRows()<sp/>);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>if<sp/>the<sp/>scaling<sp/>should<sp/>be<sp/>performed<sp/>because<sp/>of<sp/>numerical<sp/>stability,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>other<sp/>more<sp/>effective<sp/>methods<sp/>in<sp/>Clp<sp/>to<sp/>adjust<sp/>the<sp/>scaling<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>the<sp/>sides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>lhs<sp/>=<sp/>clp-&gt;rowLower();</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rhs<sp/>=<sp/>clp-&gt;rowUpper();</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhsval<sp/>=<sp/>lhs[row];</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lhsval<sp/>&gt;<sp/>-COIN_DBL_MAX<sp/>)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lhsval<sp/>*=<sp/>scaleval;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>scaleval<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lhsval<sp/>=<sp/>COIN_DBL_MAX;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhsval<sp/>=<sp/>rhs[row];</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>rhsval<sp/>&lt;<sp/>COIN_DBL_MAX)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rhsval<sp/>*=<sp/>scaleval;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>scaleval<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rhsval<sp/>=<sp/>-COIN_DBL_MAX;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>scaleval<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/>oldlhs<sp/>=<sp/>lhsval;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lhsval<sp/>=<sp/>rhsval;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rhsval<sp/>=<sp/>oldlhs;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/>lhs[row]<sp/>=<sp/>lhsval;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>values<sp/>directly<sp/>into<sp/>Clp<sp/>data!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/>rhs[row]<sp/>=<sp/>rhsval;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>scaling<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING:<sp/>the<sp/>following<sp/>is<sp/>quite<sp/>expensive:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>loop<sp/>over<sp/>the<sp/>matrix<sp/>to<sp/>find<sp/>the<sp/>row<sp/>entries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>columns<sp/>we<sp/>can<sp/>do<sp/>better,<sp/>see<sp/>@c<sp/>SCIPlpiScaleCol.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/>CoinPackedMatrix*<sp/>M<sp/>=<sp/>clp-&gt;matrix();</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>M-&gt;getNumCols()<sp/>==<sp/>clp-&gt;numberColumns()<sp/>);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CoinBigIndex*<sp/>beg<sp/>=<sp/>M-&gt;getVectorStarts();</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>length<sp/>=<sp/>M-&gt;getVectorLengths();</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ind<sp/>=<sp/>M-&gt;getIndices();</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>val<sp/>=<sp/>M-&gt;getMutableElements();</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>M-&gt;getNumCols();<sp/>++j)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CoinBigIndex<sp/>k<sp/>=<sp/>beg[j];<sp/>k<sp/>&lt;<sp/>beg[j]<sp/>+<sp/>length[j];<sp/>++k)</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ind[k]<sp/>==<sp/>row)</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val[k]<sp/>*=<sp/>scaleval;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1175"><highlight class="comment">/**<sp/>multiplies<sp/>a<sp/>column<sp/>with<sp/>a<sp/>non-zero<sp/>scalar;<sp/>the<sp/>objective<sp/>value<sp/>is<sp/>multiplied<sp/>with<sp/>the<sp/>scalar,<sp/>and<sp/>the<sp/>bounds</highlight></codeline>
<codeline lineno="1176"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>divided<sp/>by<sp/>the<sp/>scalar;<sp/>for<sp/>negative<sp/>scalars,<sp/>the<sp/>column&apos;s<sp/>bounds<sp/>are<sp/>switched</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178" refid="lpi__clp_8cpp_1a598ccc37a344e88c584b37691f162432" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a598ccc37a344e88c584b37691f162432" kindref="member">SCIPlpiScaleCol</ref>(</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>number<sp/>to<sp/>scale<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaleval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>scaling<sp/>multiplier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiScaleCol()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/>assert(scaleval<sp/>!=<sp/>0.0);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>col<sp/>&amp;&amp;<sp/>col<sp/>&lt;=<sp/>lpi-&gt;clp-&gt;numberColumns()<sp/>);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>if<sp/>the<sp/>scaling<sp/>should<sp/>be<sp/>performed<sp/>because<sp/>of<sp/>numerical<sp/>stability,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>other<sp/>more<sp/>effective<sp/>methods<sp/>in<sp/>Clp<sp/>to<sp/>adjust<sp/>the<sp/>scaling<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>the<sp/>objective<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>objvec<sp/>=<sp/>clp-&gt;objective();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>direct<sp/>access<sp/>to<sp/>the<sp/>data<sp/>of<sp/>Clp!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/>objvec[col]<sp/>*=<sp/>scaleval;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>the<sp/>objective<sp/>function<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>the<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>lb<sp/>=<sp/>clp-&gt;columnLower();</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>ub<sp/>=<sp/>clp-&gt;columnUpper();</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lbval<sp/>=<sp/>lb[col];</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ubval<sp/>=<sp/>ub[col];</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lbval<sp/>&gt;<sp/>-COIN_DBL_MAX<sp/>)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lbval<sp/>/=<sp/>scaleval;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>scaleval<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lbval<sp/>=<sp/>COIN_DBL_MAX;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ubval<sp/>&lt;<sp/>COIN_DBL_MAX<sp/>)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ubval<sp/>/=<sp/>scaleval;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>scaleval<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ubval<sp/>=<sp/>-COIN_DBL_MAX;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>scaleval<sp/>&lt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/>oldlb<sp/>=<sp/>lbval;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lbval<sp/>=<sp/>ubval;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ubval<sp/>=<sp/>oldlb;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/>lb[col]<sp/>=<sp/>lbval;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>directly<sp/>adjust<sp/>values<sp/>into<sp/>Clp<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/>ub[col]<sp/>=<sp/>ubval;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>scaling<sp/>directly<sp/>to<sp/>matrix<sp/>(adapted<sp/>from<sp/>ClpPackedMatrix::reallyScale)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>also<sp/>ClpModel::gutsOfScaling<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/>CoinPackedMatrix*<sp/>M<sp/>=<sp/>clp-&gt;matrix();</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>M-&gt;getNumCols()<sp/>==<sp/>clp-&gt;numberColumns()<sp/>);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CoinBigIndex*<sp/>beg<sp/>=<sp/>M-&gt;getVectorStarts();</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>length<sp/>=<sp/>M-&gt;getVectorLengths();</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>val<sp/>=<sp/>M-&gt;getMutableElements();</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CoinBigIndex<sp/>k<sp/>=<sp/>beg[col];<sp/>k<sp/>&lt;<sp/>beg[col]<sp/>+<sp/>length[col];<sp/>++k)</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val[k]<sp/>*=<sp/>scaleval;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1242"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/>*<sp/>Data<sp/>Accessing<sp/>Methods</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1251"><highlight class="comment">/**@name<sp/>Data<sp/>Accessing<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1252"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1254"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255" refid="lpi__clp_8cpp_1afc4ba497c8fef592df0c5bf7745bf9d8" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1afc4ba497c8fef592df0c5bf7745bf9d8" kindref="member">SCIPlpiGetNRows</ref>(</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetNRows()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/>assert(nrows<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/>*nrows<sp/>=<sp/>lpi-&gt;clp-&gt;numberRows();</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1272"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273" refid="lpi__clp_8cpp_1af0f0eab6882439ab9e263d6754c102f3" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1af0f0eab6882439ab9e263d6754c102f3" kindref="member">SCIPlpiGetNCols</ref>(</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>cols<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetNCols()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/>assert(ncols<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/>*ncols<sp/>=<sp/>lpi-&gt;clp-&gt;numberColumns();</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1290"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>in<sp/>the<sp/>LP<sp/>constraint<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291" refid="lpi__clp_8cpp_1a4e84473a9742d228d1112cf94e0337e7" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a4e84473a9742d228d1112cf94e0337e7" kindref="member">SCIPlpiGetNNonz</ref>(</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>nonzeros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetNNonz()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/>assert(nnonz<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/>*nnonz<sp/>=<sp/>lpi-&gt;clp-&gt;getNumElements();</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1308"><highlight class="comment">/**<sp/>gets<sp/>columns<sp/>from<sp/>LP<sp/>problem<sp/>object;<sp/>the<sp/>arrays<sp/>have<sp/>to<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>store<sp/>all<sp/>values</highlight></codeline>
<codeline lineno="1309"><highlight class="comment"><sp/>*<sp/><sp/>Either<sp/>both,<sp/>lb<sp/>and<sp/>ub,<sp/>have<sp/>to<sp/>be<sp/>0,<sp/>or<sp/>both<sp/>have<sp/>to<sp/>be<sp/>non-0,</highlight></codeline>
<codeline lineno="1310"><highlight class="comment"><sp/>*<sp/><sp/>either<sp/>nnonz,<sp/>beg,<sp/>ind,<sp/>and<sp/>val<sp/>have<sp/>to<sp/>be<sp/>0,<sp/>or<sp/>all<sp/>of<sp/>them<sp/>have<sp/>to<sp/>be<sp/>non-0.</highlight></codeline>
<codeline lineno="1311"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312" refid="lpi__clp_8cpp_1a9b718ef73cb5d6544472fb05f2193d37" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a9b718ef73cb5d6544472fb05f2193d37" kindref="member">SCIPlpiGetCols</ref>(</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>column<sp/>to<sp/>get<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>column<sp/>to<sp/>get<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>lower<sp/>bound<sp/>vector,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>upper<sp/>bound<sp/>vector,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>returned,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>start<sp/>index<sp/>of<sp/>each<sp/>column<sp/>in<sp/>ind-<sp/>and<sp/>val-array,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>column<sp/>indices<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>values<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetCols()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>firstcol<sp/>&amp;&amp;<sp/>firstcol<sp/>&lt;=<sp/>lastcol<sp/>&amp;&amp;<sp/>lastcol<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberColumns());</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>lower<sp/>and<sp/>upper<sp/>bounds<sp/>for<sp/>the<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>(lb<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>ub<sp/>!=<sp/>0)<sp/>||<sp/>(lb<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>ub<sp/>==<sp/>0)<sp/>);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lb<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>colLower<sp/>=<sp/>clp-&gt;getColLower();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>can<sp/>use<sp/>the<sp/>const<sp/>versions<sp/>(see<sp/>SCIPchgBounds)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>colUpper<sp/>=<sp/>clp-&gt;getColUpper();</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>lb,<sp/>colLower<sp/>+<sp/>firstcol,<sp/>(lastcol<sp/>-<sp/>firstcol<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>ub,<sp/>colUpper<sp/>+<sp/>firstcol,<sp/>(lastcol<sp/>-<sp/>firstcol<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>nnonz<sp/>!=<sp/>0<sp/>||<sp/>beg<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>nnonz<sp/>!=<sp/>0<sp/>||<sp/>ind<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>nnonz<sp/>!=<sp/>0<sp/>||<sp/>val<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nnonz<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CoinPackedMatrix*<sp/>M<sp/>=<sp/>clp-&gt;matrix();</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>M<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>M-&gt;getNumCols()<sp/>==<sp/>clp-&gt;numberColumns()<sp/>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CoinBigIndex*<sp/>Mbeg<sp/>=<sp/>M-&gt;getVectorStarts();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>use<sp/>const<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>Mlength<sp/>=<sp/>M-&gt;getVectorLengths();</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>Mind<sp/>=<sp/>M-&gt;getIndices();</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Mval<sp/>=<sp/>M-&gt;getElements();</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*nnonz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>we<sp/>use<sp/>memcpy<sp/>for<sp/>the<sp/>whole<sp/>set<sp/>(requires<sp/>that<sp/>columns<sp/>are<sp/>stored<sp/>sequentially)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>firstcol;<sp/>j<sp/>&lt;=<sp/>lastcol;<sp/>++j)</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg[j-firstcol]<sp/>=<sp/>*nnonz;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>(ind<sp/>+<sp/>(*nnonz)),<sp/>Mind<sp/>+<sp/>Mbeg[j],<sp/>Mlength[j]);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>(val<sp/>+<sp/>(*nnonz)),<sp/>Mval<sp/>+<sp/>Mbeg[j],<sp/>Mlength[j]);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nnonz)<sp/>+=<sp/>Mlength[j];</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1375"><highlight class="comment">/**<sp/>gets<sp/>rows<sp/>from<sp/>LP<sp/>problem<sp/>object;<sp/>the<sp/>arrays<sp/>have<sp/>to<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>store<sp/>all<sp/>values.</highlight></codeline>
<codeline lineno="1376"><highlight class="comment"><sp/>*<sp/><sp/>Either<sp/>both,<sp/>lhs<sp/>and<sp/>rhs,<sp/>have<sp/>to<sp/>be<sp/>0,<sp/>or<sp/>both<sp/>have<sp/>to<sp/>be<sp/>non-0,</highlight></codeline>
<codeline lineno="1377"><highlight class="comment"><sp/>*<sp/><sp/>either<sp/>nnonz,<sp/>beg,<sp/>ind,<sp/>and<sp/>val<sp/>have<sp/>to<sp/>be<sp/>0,<sp/>or<sp/>all<sp/>of<sp/>them<sp/>have<sp/>to<sp/>be<sp/>non-0.</highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379" refid="lpi__clp_8cpp_1aa925f44c4f2e5640b79ff87f8166d92e" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1aa925f44c4f2e5640b79ff87f8166d92e" kindref="member">SCIPlpiGetRows</ref>(</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>row<sp/>to<sp/>get<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>row<sp/>to<sp/>get<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>left<sp/>hand<sp/>side<sp/>vector,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>right<sp/>hand<sp/>side<sp/>vector,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>returned,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>start<sp/>index<sp/>of<sp/>each<sp/>row<sp/>in<sp/>ind-<sp/>and<sp/>val-array,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>row<sp/>indices<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>values<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetRows()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>firstrow<sp/>&amp;&amp;<sp/>firstrow<sp/>&lt;=<sp/>lastrow<sp/>&amp;&amp;<sp/>lastrow<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberRows());</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>(lhs<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>rhs<sp/>!=<sp/>0)<sp/>||<sp/>(lhs<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>rhs<sp/>==<sp/>0)<sp/>);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lhs<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rowLower<sp/>=<sp/>clp-&gt;getRowLower();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>can<sp/>use<sp/>the<sp/>const<sp/>versions<sp/>(see<sp/>SCIPchgSides)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rowUpper<sp/>=<sp/>clp-&gt;getRowUpper();</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>lhs,<sp/>rowLower<sp/>+<sp/>firstrow,<sp/>(lastrow<sp/>-<sp/>firstrow<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>rhs,<sp/>rowUpper<sp/>+<sp/>firstrow,<sp/>(lastrow<sp/>-<sp/>firstrow<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>nnonz<sp/>!=<sp/>0<sp/>||<sp/>beg<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>nnonz<sp/>!=<sp/>0<sp/>||<sp/>ind<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>nnonz<sp/>!=<sp/>0<sp/>||<sp/>val<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nnonz<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClpMatrixBase*<sp/>M<sp/>=<sp/>clp-&gt;rowCopy();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>row<sp/>view<sp/>on<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>M<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>can<sp/>happen<sp/>e.g.<sp/>if<sp/>no<sp/>LP<sp/>was<sp/>solved<sp/>yet<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M<sp/>=<sp/>clp-&gt;clpMatrix()-&gt;reverseOrderedCopy();</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>M<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>M-&gt;getNumRows()<sp/>==<sp/>clp-&gt;numberRows()<sp/>);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CoinBigIndex*<sp/>Mbeg<sp/>=<sp/>M-&gt;getVectorStarts();</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>Mlength<sp/>=<sp/>M-&gt;getVectorLengths();</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>Mind<sp/>=<sp/>M-&gt;getIndices();</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>Mval<sp/>=<sp/>M-&gt;getElements();</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*nnonz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>firstrow;<sp/>i<sp/>&lt;=<sp/>lastrow;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg[i-firstrow]<sp/>=<sp/>*nnonz;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>CoinBigIndex<sp/>k<sp/>=<sp/>Mbeg[i];<sp/>k<sp/>&lt;<sp/>Mbeg[i]<sp/>+<sp/>Mlength[i];<sp/>++k<sp/>)</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind[*nnonz]<sp/>=<sp/>Mind[k];</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val[*nnonz]<sp/>=<sp/>Mval[k];</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*nnonz)++;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1442"><highlight class="comment">/**<sp/>gets<sp/>column<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443" refid="lpi__clp_8cpp_1aa01800088106fccc11758d86646a1933" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1aa01800088106fccc11758d86646a1933" kindref="member">SCIPlpiGetColNames</ref>(</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>column<sp/>to<sp/>get<sp/>name<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>column<sp/>to<sp/>get<sp/>name<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colnames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointers<sp/>to<sp/>column<sp/>names<sp/>(of<sp/>size<sp/>at<sp/>least<sp/>lastcol-firstcol+1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namestorage,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>storage<sp/>for<sp/>col<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namestoragesize,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>size<sp/>of<sp/>namestorage<sp/>(if<sp/>0,<sp/>storageleft<sp/>returns<sp/>the<sp/>storage<sp/>needed)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storageleft<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>amount<sp/>of<sp/>storage<sp/>left<sp/>(if<sp/>&lt;<sp/>0<sp/>the<sp/>namestorage<sp/>was<sp/>not<sp/>big<sp/>enough)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;SCIPlpiGetColNames()<sp/>has<sp/>not<sp/>been<sp/>implemented<sp/>yet.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" kindref="member">SCIP_LPERROR</ref>;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1458"><highlight class="comment">/**<sp/>gets<sp/>row<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459" refid="lpi__clp_8cpp_1ab84a1811166e562112166eeddafe5f08" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1ab84a1811166e562112166eeddafe5f08" kindref="member">SCIPlpiGetRowNames</ref>(</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>row<sp/>to<sp/>get<sp/>name<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>row<sp/>to<sp/>get<sp/>name<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rownames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointers<sp/>to<sp/>row<sp/>names<sp/>(of<sp/>size<sp/>at<sp/>least<sp/>lastrow-firstrow+1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namestorage,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>storage<sp/>for<sp/>row<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namestoragesize,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>size<sp/>of<sp/>namestorage<sp/>(if<sp/>0,<sp/>-storageleft<sp/>returns<sp/>the<sp/>storage<sp/>needed)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storageleft<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>amount<sp/>of<sp/>storage<sp/>left<sp/>(if<sp/>&lt;<sp/>0<sp/>the<sp/>namestorage<sp/>was<sp/>not<sp/>big<sp/>enough)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;SCIPlpiGetRowNames()<sp/>has<sp/>not<sp/>been<sp/>implemented<sp/>yet.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" kindref="member">SCIP_LPERROR</ref>;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1474"><highlight class="comment">/**<sp/>tries<sp/>to<sp/>reset<sp/>the<sp/>internal<sp/>status<sp/>of<sp/>the<sp/>LP<sp/>solver<sp/>in<sp/>order<sp/>to<sp/>ignore<sp/>an<sp/>instability<sp/>of<sp/>the<sp/>last<sp/>solving<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475" refid="lpi__clp_8cpp_1a6b24f7dd3dfac27d08f1cfc777e56a8b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a6b24f7dd3dfac27d08f1cfc777e56a8b" kindref="member">SCIPlpiIgnoreInstability</ref>(</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store,<sp/>whether<sp/>the<sp/>instability<sp/>could<sp/>be<sp/>ignored<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIgnoreInstability()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unstable<sp/>situations<sp/>cannot<sp/>be<sp/>ignored<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/>*success<sp/>=<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1492"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>objective<sp/>sense<sp/>of<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493" refid="lpi__clp_8cpp_1aee46b15c0fa3d6d86be4e3bf741f34b7" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1aee46b15c0fa3d6d86be4e3bf741f34b7" kindref="member">SCIPlpiGetObjsen</ref>(</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objsen<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>objective<sp/>sense<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;clp<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>objsen<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clp<sp/>direction<sp/>of<sp/>optimization<sp/>(1<sp/>-<sp/>minimize,<sp/>-1<sp/>-<sp/>maximize,<sp/>0<sp/>-<sp/>ignore)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;getObjSense()<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*objsen<sp/>=<sp/><ref refid="type__lpi_8h_1af1bc7f4fad28ccf4753250fa0558373ba32ae01999ecd89f94f4a0bd0b6be60c6" kindref="member">SCIP_OBJSEN_MAXIMIZE</ref>;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*objsen<sp/>=<sp/><ref refid="type__lpi_8h_1af1bc7f4fad28ccf4753250fa0558373bab25a52cd6604d9c8c5fd02c5e03180a7" kindref="member">SCIP_OBJSEN_MINIMIZE</ref>;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1512"><highlight class="comment">/**<sp/>gets<sp/>objective<sp/>coefficients<sp/>from<sp/>LP<sp/>problem<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513" refid="lpi__clp_8cpp_1accf7c7a0ba8f375dbfa9bce872586951" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1accf7c7a0ba8f375dbfa9bce872586951" kindref="member">SCIPlpiGetObj</ref>(</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>column<sp/>to<sp/>get<sp/>objective<sp/>coefficient<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>column<sp/>to<sp/>get<sp/>objective<sp/>coefficient<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>objective<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetObj()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>firstcol<sp/>&amp;&amp;<sp/>firstcol<sp/>&lt;=<sp/>lastcol<sp/>&amp;&amp;<sp/>lastcol<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberColumns());</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/>assert(vals<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>obj<sp/>=<sp/>lpi-&gt;clp-&gt;getObjCoefficients();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>can<sp/>use<sp/>the<sp/>const<sp/>versions<sp/>(see<sp/>SCIPchgObj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>vals,<sp/>obj<sp/>+<sp/>firstcol,<sp/>(lastcol<sp/>-<sp/>firstcol<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1535"><highlight class="comment">/**<sp/>gets<sp/>current<sp/>bounds<sp/>from<sp/>LP<sp/>problem<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536" refid="lpi__clp_8cpp_1a534fd30b49c755aea9b96a0365ee41b0" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a534fd30b49c755aea9b96a0365ee41b0" kindref="member">SCIPlpiGetBounds</ref>(</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>column<sp/>to<sp/>get<sp/>objective<sp/>value<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>column<sp/>to<sp/>get<sp/>objective<sp/>value<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lbs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>lower<sp/>bound<sp/>values,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ubs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>upper<sp/>bound<sp/>values,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetBounds()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>firstcol<sp/>&amp;&amp;<sp/>firstcol<sp/>&lt;=<sp/>lastcol<sp/>&amp;&amp;<sp/>lastcol<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberColumns());</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lbs<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>colLower<sp/>=<sp/>lpi-&gt;clp-&gt;getColLower();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>can<sp/>use<sp/>the<sp/>const<sp/>versions<sp/>(see<sp/>SCIPchgBounds)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>lbs,<sp/>colLower<sp/>+<sp/>firstcol,<sp/>(lastcol<sp/>-<sp/>firstcol<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ubs<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>colUpper<sp/>=<sp/>lpi-&gt;clp-&gt;getColUpper();</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>ubs,<sp/>colUpper<sp/>+<sp/>firstcol,<sp/>(lastcol<sp/>-<sp/>firstcol<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1566"><highlight class="comment">/**<sp/>gets<sp/>current<sp/>row<sp/>sides<sp/>from<sp/>LP<sp/>problem<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567" refid="lpi__clp_8cpp_1abd761e9fb6a1dd346a08c94a50192d8b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1abd761e9fb6a1dd346a08c94a50192d8b" kindref="member">SCIPlpiGetSides</ref>(</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>row<sp/>to<sp/>get<sp/>sides<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>row<sp/>to<sp/>get<sp/>sides<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>left<sp/>hand<sp/>side<sp/>values,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>right<sp/>hand<sp/>side<sp/>values,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetSides()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>firstrow<sp/>&amp;&amp;<sp/>firstrow<sp/>&lt;=<sp/>lastrow<sp/>&amp;&amp;<sp/>lastrow<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberRows());</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lhss<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rowLower<sp/>=<sp/>lpi-&gt;clp-&gt;getRowLower();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>can<sp/>use<sp/>the<sp/>const<sp/>versions<sp/>(see<sp/>SCIPchgSides)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>lhss,<sp/>rowLower<sp/>+<sp/>firstrow,<sp/>(lastrow<sp/>-<sp/>firstrow<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rhss<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rowUpper<sp/>=<sp/>lpi-&gt;clp-&gt;getRowUpper();</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>rhss,<sp/><sp/>rowUpper<sp/>+<sp/>firstrow,<sp/>(lastrow<sp/>-<sp/>firstrow<sp/>+<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1597"><highlight class="comment">/**<sp/>gets<sp/>a<sp/>single<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598" refid="lpi__clp_8cpp_1a7ae0750d24c1e5ad1c719ca4a601b511" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a7ae0750d24c1e5ad1c719ca4a601b511" kindref="member">SCIPlpiGetCoef</ref>(</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>number<sp/>of<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>number<sp/>of<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>value<sp/>of<sp/>the<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetCoef()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>col<sp/>&amp;&amp;<sp/>col<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberColumns());</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/>assert(0<sp/>&lt;=<sp/>row<sp/>&amp;&amp;<sp/>row<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberRows());</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/>assert(val<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/>*val<sp/>=<sp/>lpi-&gt;clp-&gt;matrix()-&gt;getCoefficient(row,<sp/>col);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1618"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1624"><highlight class="comment"><sp/>*<sp/>Solving<sp/>Methods</highlight></codeline>
<codeline lineno="1625"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1627"><highlight class="comment">/**@name<sp/>Solving<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1628"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1631"><highlight class="comment">/**<sp/>calls<sp/>primal<sp/>simplex<sp/>to<sp/>solve<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632" refid="lpi__clp_8cpp_1adff9cd01f05724d2e00808ebd09c8e93" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1adff9cd01f05724d2e00808ebd09c8e93" kindref="member">SCIPlpiSolvePrimal</ref>(</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>Clp<sp/>primal():<sp/>%d<sp/>cols,<sp/>%d<sp/>rows\n&quot;</highlight><highlight class="normal">,<sp/>lpi-&gt;clp-&gt;numberColumns(),<sp/>lpi-&gt;clp-&gt;numberRows());</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LPI_CLP_DEBUG_WRITE_FILES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filename[255];</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/>snprintf(filename,<sp/>255,<sp/></highlight><highlight class="stringliteral">&quot;debug_p_%d.mps&quot;</highlight><highlight class="normal">,<sp/>fileNr);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/>fileNr<sp/>=<sp/>fileNr<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><ref refid="lpi__clp_8cpp_1a311a14142841041e24d522b281124f57" kindref="member">SCIPlpiWriteLP</ref>(lpi,<sp/>filename);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;Wrote<sp/>file<sp/>&lt;%s&gt;\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intialize<sp/>factorization<sp/>freq.<sp/>depending<sp/>on<sp/>model<sp/>size<sp/>-<sp/>applied<sp/>only<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/>setFactorizationFrequency(lpi);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>want<sp/>to<sp/>construct<sp/>a<sp/>new<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;startscratch<sp/>)</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;allSlackBasis(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;validFactorization<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1661"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>startFinishOptions<sp/>-<sp/>bits</highlight></codeline>
<codeline lineno="1662"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>1<sp/>-<sp/>do<sp/>not<sp/>delete<sp/>work<sp/>areas<sp/>and<sp/>factorization<sp/>at<sp/>end</highlight></codeline>
<codeline lineno="1663"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>2<sp/>-<sp/>use<sp/>old<sp/>factorization<sp/>if<sp/>same<sp/>number<sp/>of<sp/>rows</highlight></codeline>
<codeline lineno="1664"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>4<sp/>-<sp/>skip<sp/>as<sp/>much<sp/>initialization<sp/>of<sp/>work<sp/>areas<sp/>as<sp/>possible<sp/>(work<sp/>in<sp/>progress)</highlight></codeline>
<codeline lineno="1665"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1666"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>4<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work.</highlight></codeline>
<codeline lineno="1667"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startFinishOptions<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;validFactorization<sp/>)</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startFinishOptions<sp/>=<sp/>startFinishOptions<sp/>|<sp/>2;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1672"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Primal<sp/>algorithm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>lpi-&gt;clp-&gt;primal(0,<sp/>startFinishOptions);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LPI_CLP_DEBUG_WRITE_FILES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basisname[255];</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/>snprintf(basisname,<sp/>255,<sp/></highlight><highlight class="stringliteral">&quot;debug_p_%d.bas&quot;</highlight><highlight class="normal">,<sp/>fileNr);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="lpi__clp_8cpp_1a6b360b8eb706948179cc3b46fa4df372" kindref="member">SCIPlpiWriteState</ref>(lpi,<sp/>basisname)<sp/>);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;Wrote<sp/>basis<sp/>file<sp/>&lt;%s&gt;\n&quot;</highlight><highlight class="normal">,<sp/>basisname);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/>++fileNr;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>increased<sp/>above!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/>fileNr<sp/>=<sp/>fileNr<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;validFactorization<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;solved<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unfortunately<sp/>the<sp/>status<sp/>of<sp/>Clp<sp/>is<sp/>hard<sp/>coded<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>-<sp/>did<sp/>not<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>0<sp/>-<sp/>optimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>1<sp/>-<sp/>primal<sp/>infeasible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>2<sp/>-<sp/>dual<sp/>infeasible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>3<sp/>-<sp/>stopped<sp/>on<sp/>iterations<sp/>or<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>4<sp/>-<sp/>stopped<sp/>due<sp/>to<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>5<sp/>-<sp/>stopped<sp/>by<sp/>event<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>status<sp/>!=<sp/>-1<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>did<sp/>not<sp/>run<sp/>should<sp/>not<sp/>occur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>status<sp/>!=<sp/>5<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>begin<sp/>stopped<sp/>by<sp/>event<sp/>handler<sp/>should<sp/>not<sp/>occur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>status<sp/>==<sp/>4<sp/>||<sp/>status<sp/>==<sp/>5<sp/>||<sp/>status<sp/>==<sp/>-1<sp/>)</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" kindref="member">SCIP_LPERROR</ref>;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1704"><highlight class="comment">/**<sp/>calls<sp/>dual<sp/>simplex<sp/>to<sp/>solve<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705" refid="lpi__clp_8cpp_1ad87b0da429ef0a5ef34ccdd01cc2309d" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1ad87b0da429ef0a5ef34ccdd01cc2309d" kindref="member">SCIPlpiSolveDual</ref>(</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>Clp<sp/>dual():<sp/>%d<sp/>cols,<sp/>%d<sp/>rows\n&quot;</highlight><highlight class="normal">,<sp/>lpi-&gt;clp-&gt;numberColumns(),<sp/>lpi-&gt;clp-&gt;numberRows());</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LPI_CLP_DEBUG_WRITE_FILES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filename[255];</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/>snprintf(filename,<sp/>255,<sp/></highlight><highlight class="stringliteral">&quot;debug_d_%d.mps&quot;</highlight><highlight class="normal">,<sp/>fileNr);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><ref refid="lpi__clp_8cpp_1a311a14142841041e24d522b281124f57" kindref="member">SCIPlpiWriteLP</ref>(lpi,<sp/>filename);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;Wrote<sp/>file<sp/>&lt;%s&gt;\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/>snprintf(filename,<sp/>255,<sp/></highlight><highlight class="stringliteral">&quot;debug_d_%d.sav&quot;</highlight><highlight class="normal">,<sp/>fileNr);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lpi-&gt;clp-&gt;saveModel(filename);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;Wrote<sp/>file<sp/>&lt;%s&gt;\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intialize<sp/>factorization<sp/>freq.<sp/>depending<sp/>on<sp/>model<sp/>size<sp/>-<sp/>applied<sp/>only<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/>setFactorizationFrequency(lpi);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>want<sp/>to<sp/>construct<sp/>a<sp/>new<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lpi-&gt;startscratch<sp/>)</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;allSlackBasis(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>basis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;validFactorization<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1736"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>startFinishOptions<sp/>-<sp/>bits</highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>1<sp/>-<sp/>do<sp/>not<sp/>delete<sp/>work<sp/>areas<sp/>and<sp/>factorization<sp/>at<sp/>end</highlight></codeline>
<codeline lineno="1738"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>2<sp/>-<sp/>use<sp/>old<sp/>factorization<sp/>if<sp/>same<sp/>number<sp/>of<sp/>rows</highlight></codeline>
<codeline lineno="1739"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>4<sp/>-<sp/>skip<sp/>as<sp/>much<sp/>initialization<sp/>of<sp/>work<sp/>areas<sp/>as<sp/>possible<sp/>(work<sp/>in<sp/>progress)</highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1741"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>4<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work.</highlight></codeline>
<codeline lineno="1742"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startFinishOptions<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;validFactorization<sp/>)</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startFinishOptions<sp/>=<sp/>startFinishOptions<sp/>|<sp/>2;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1747"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Dual<sp/>algorithm<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>lpi-&gt;clp-&gt;dual(0,<sp/>startFinishOptions);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>LPI_CLP_DEBUG_WRITE_FILES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>basisname[255];</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/>snprintf(basisname,<sp/>255,<sp/></highlight><highlight class="stringliteral">&quot;debug_d_%d.bas&quot;</highlight><highlight class="normal">,<sp/>fileNr);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="lpi__clp_8cpp_1a6b360b8eb706948179cc3b46fa4df372" kindref="member">SCIPlpiWriteState</ref>(lpi,<sp/>basisname)<sp/>);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;Wrote<sp/>basis<sp/>file<sp/>&lt;%s&gt;\n&quot;</highlight><highlight class="normal">,<sp/>basisname);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/>++fileNr;<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>increased<sp/>above!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/>fileNr<sp/>=<sp/>fileNr<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;validFactorization<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;solved<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unfortunately<sp/>the<sp/>status<sp/>of<sp/>Clp<sp/>is<sp/>hard<sp/>coded<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>-<sp/>did<sp/>not<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>0<sp/>-<sp/>optimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>1<sp/>-<sp/>primal<sp/>infeasible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>2<sp/>-<sp/>dual<sp/>infeasible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>3<sp/>-<sp/>stopped<sp/>on<sp/>iterations<sp/>or<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>4<sp/>-<sp/>stopped<sp/>due<sp/>to<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>5<sp/>-<sp/>stopped<sp/>by<sp/>event<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>status<sp/>!=<sp/>-1<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>did<sp/>not<sp/>run<sp/>should<sp/>not<sp/>occur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>status<sp/>!=<sp/>5<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>begin<sp/>stopped<sp/>by<sp/>event<sp/>handler<sp/>should<sp/>not<sp/>occur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>status<sp/>==<sp/>4<sp/>||<sp/>status<sp/>==<sp/>5<sp/>||<sp/>status<sp/>==<sp/>-1<sp/>)</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" kindref="member">SCIP_LPERROR</ref>;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1779"><highlight class="comment">/**<sp/>calls<sp/>barrier<sp/>or<sp/>interior<sp/>point<sp/>algorithm<sp/>to<sp/>solve<sp/>the<sp/>LP<sp/>with<sp/>crossover<sp/>to<sp/>simplex<sp/>basis<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780" refid="lpi__clp_8cpp_1aaed3d89975ea9d3a6a79f03c1361d9b5" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1aaed3d89975ea9d3a6a79f03c1361d9b5" kindref="member">SCIPlpiSolveBarrier</ref>(</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crossover<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>perform<sp/>crossover<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>Clp<sp/>barrier():<sp/>%d<sp/>cols,<sp/>%d<sp/>rows\n&quot;</highlight><highlight class="normal">,<sp/>lpi-&gt;clp-&gt;numberColumns(),<sp/>lpi-&gt;clp-&gt;numberRows());</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>we<sp/>have<sp/>a<sp/>factorization,<sp/>if<sp/>yes<sp/>destroy<sp/>it<sp/>(Clp<sp/>doesn&apos;t<sp/>like<sp/>it<sp/>...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1794"><highlight class="comment"><sp/><sp/><sp/>if<sp/>(lpi-&gt;haveFactorization)</highlight></codeline>
<codeline lineno="1795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;finish();</highlight></codeline>
<codeline lineno="1796"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>barrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>lpi-&gt;clp-&gt;barrier(crossover);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;solved<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>may<sp/>need<sp/>to<sp/>call<sp/>ClpModel::status()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unfortunately<sp/>the<sp/>status<sp/>of<sp/>Clp<sp/>is<sp/>hard<sp/>coded<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>-<sp/>did<sp/>not<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>0<sp/>-<sp/>optimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>1<sp/>-<sp/>primal<sp/>infeasible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>2<sp/>-<sp/>dual<sp/>infeasible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>3<sp/>-<sp/>stopped<sp/>on<sp/>iterations<sp/>or<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>4<sp/>-<sp/>stopped<sp/>due<sp/>to<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>5<sp/>-<sp/>stopped<sp/>by<sp/>event<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>status<sp/>!=<sp/>-1<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>did<sp/>not<sp/>run<sp/>should<sp/>not<sp/>occur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>status<sp/>!=<sp/>5<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>begin<sp/>stopped<sp/>by<sp/>event<sp/>handler<sp/>should<sp/>not<sp/>occur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>status<sp/>==<sp/>4<sp/>||<sp/>status<sp/>==<sp/>5<sp/>||<sp/>status<sp/>==<sp/>-1<sp/>)</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" kindref="member">SCIP_LPERROR</ref>;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1820"><highlight class="comment">/**<sp/>start<sp/>strong<sp/>branching<sp/>-<sp/>call<sp/>before<sp/>any<sp/>strongbranching<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821" refid="lpi__clp_8cpp_1a61eb2de700a5b2ca02c55a6f206af5df" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a61eb2de700a5b2ca02c55a6f206af5df" kindref="member">SCIPlpiStartStrongbranch</ref>(</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>currently<sp/>do<sp/>nothing;<sp/>in<sp/>the<sp/>future:<sp/>use<sp/>code<sp/>as<sp/>in<sp/>OSI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1829"><highlight class="comment">/**<sp/>end<sp/>strong<sp/>branching<sp/>-<sp/>call<sp/>after<sp/>any<sp/>strongbranching<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830" refid="lpi__clp_8cpp_1abb4fffe6db4fc82590ffb3231a4e314c" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1abb4fffe6db4fc82590ffb3231a4e314c" kindref="member">SCIPlpiEndStrongbranch</ref>(</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1833"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>currently<sp/>do<sp/>nothing;<sp/>in<sp/>the<sp/>future:<sp/>use<sp/>code<sp/>as<sp/>in<sp/>OSI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1838"><highlight class="comment">/**<sp/>performs<sp/>strong<sp/>branching<sp/>iterations<sp/>on<sp/>one<sp/>arbitrary<sp/>candidate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/>lpiStrongbranch(</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>to<sp/>apply<sp/>strong<sp/>branching<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>current<sp/>primal<sp/>solution<sp/>value<sp/>of<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itlim,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>iteration<sp/>limit<sp/>for<sp/>strong<sp/>branchings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bound<sp/>after<sp/>branching<sp/>column<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bound<sp/>after<sp/>branching<sp/>column<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>down<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>dual<sp/>bound;</highlight></codeline>
<codeline lineno="1848"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>up<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>dual<sp/>bound;</highlight></codeline>
<codeline lineno="1850"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>total<sp/>number<sp/>of<sp/>strong<sp/>branching<sp/>iterations,<sp/>or<sp/>-1;<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiStrongbranch()<sp/>on<sp/>variable<sp/>%d<sp/>(%d<sp/>iterations)\n&quot;</highlight><highlight class="normal">,<sp/>col,<sp/>itlim);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/>assert(down<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/>assert(up<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/>assert(downvalid<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/>assert(upvalid<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>output<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncols<sp/>=<sp/>clp-&gt;numberColumns();</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/>col<sp/>&amp;&amp;<sp/>col<sp/>&lt;<sp/>ncols<sp/>);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>outputSolution<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;outputSolution,<sp/>2)<sp/>);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;outputSolution[0],<sp/>ncols)<sp/>);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;outputSolution[1],<sp/>ncols)<sp/>);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outputStatus<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;outputStatus,<sp/>2)<sp/>);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outputIterations<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;outputIterations,<sp/>2)<sp/>);</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>iteration<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterlimit<sp/>=<sp/>clp-&gt;maximumIterations();</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setMaximumIterations(itlim);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>objective<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>objval<sp/>=<sp/>clp-&gt;objectiveValue();</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>special<sp/>options<sp/>for<sp/>later<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>specialoptions<sp/>=<sp/>clp-&gt;specialOptions();</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1889"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Clp<sp/>special<sp/>options:</highlight></codeline>
<codeline lineno="1890"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>-<sp/>Don&apos;t<sp/>keep<sp/>changing<sp/>infeasibility<sp/>weight</highlight></codeline>
<codeline lineno="1891"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>-<sp/>Keep<sp/>nonLinearCost<sp/>round<sp/>solves</highlight></codeline>
<codeline lineno="1892"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>-<sp/>Force<sp/>outgoing<sp/>variables<sp/>to<sp/>exact<sp/>bound<sp/>(primal)</highlight></codeline>
<codeline lineno="1893"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>8<sp/>-<sp/>Safe<sp/>to<sp/>use<sp/>dense<sp/>initial<sp/>factorization</highlight></codeline>
<codeline lineno="1894"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>16<sp/>-<sp/>Just<sp/>use<sp/>basic<sp/>variables<sp/>for<sp/>operation<sp/>if<sp/>column<sp/>generation</highlight></codeline>
<codeline lineno="1895"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>32<sp/>-<sp/>Create<sp/>ray<sp/>even<sp/>in<sp/>BAB</highlight></codeline>
<codeline lineno="1896"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>64<sp/>-<sp/>Treat<sp/>problem<sp/>as<sp/>feasible<sp/>until<sp/>last<sp/>minute<sp/>(i.e.<sp/>minimize<sp/>infeasibilities)</highlight></codeline>
<codeline lineno="1897"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>128<sp/>-<sp/>Switch<sp/>off<sp/>all<sp/>matrix<sp/>sanity<sp/>checks</highlight></codeline>
<codeline lineno="1898"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>256<sp/>-<sp/>No<sp/>row<sp/>copy</highlight></codeline>
<codeline lineno="1899"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>512<sp/>-<sp/>If<sp/>not<sp/>in<sp/>values<sp/>pass,<sp/>solution<sp/>guaranteed,<sp/>skip<sp/>as<sp/>much<sp/>as<sp/>possible</highlight></codeline>
<codeline lineno="1900"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>1024<sp/>-<sp/>In<sp/>branch<sp/>and<sp/>bound</highlight></codeline>
<codeline lineno="1901"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>2048<sp/>-<sp/>Don&apos;t<sp/>bother<sp/>to<sp/>re-factorize<sp/>if<sp/>&lt;<sp/>20<sp/>iterations</highlight></codeline>
<codeline lineno="1902"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>4096<sp/>-<sp/>Skip<sp/>some<sp/>optimality<sp/>checks</highlight></codeline>
<codeline lineno="1903"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>8192<sp/>-<sp/>Do<sp/>Primal<sp/>when<sp/>cleaning<sp/>up<sp/>primal</highlight></codeline>
<codeline lineno="1904"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>16384<sp/>-<sp/>In<sp/>fast<sp/>dual<sp/>(so<sp/>we<sp/>can<sp/>switch<sp/>off<sp/>things)</highlight></codeline>
<codeline lineno="1905"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>32768<sp/>-<sp/>called<sp/>from<sp/>Osi</highlight></codeline>
<codeline lineno="1906"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>65536<sp/>-<sp/>keep<sp/>arrays<sp/>around<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>(also<sp/>use<sp/>maximumR/C)</highlight></codeline>
<codeline lineno="1907"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>131072<sp/>-<sp/>transposeTimes<sp/>is<sp/>-1.0<sp/>and<sp/>can<sp/>skip<sp/>basic<sp/>and<sp/>fixed</highlight></codeline>
<codeline lineno="1908"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>262144<sp/>-<sp/>extra<sp/>copy<sp/>of<sp/>scaled<sp/>matrix</highlight></codeline>
<codeline lineno="1909"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>524288<sp/>-<sp/>Clp<sp/>fast<sp/>dual</highlight></codeline>
<codeline lineno="1910"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>1048576<sp/>-<sp/>don&apos;t<sp/>need<sp/>to<sp/>finish<sp/>dual<sp/>(can<sp/>return<sp/>3)</highlight></codeline>
<codeline lineno="1911"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>NOTE<sp/><sp/><sp/>-<sp/>many<sp/>applications<sp/>can<sp/>call<sp/>Clp<sp/>but<sp/>there<sp/>may<sp/>be<sp/>some<sp/>short<sp/>cuts</highlight></codeline>
<codeline lineno="1912"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>are<sp/>taken<sp/>which<sp/>are<sp/>not<sp/>guaranteed<sp/>safe<sp/>from<sp/>all<sp/>applications.</highlight></codeline>
<codeline lineno="1913"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vetted<sp/>applications<sp/>will<sp/>have<sp/>a<sp/>bit<sp/>set<sp/>and<sp/>the<sp/>code<sp/>may<sp/>test<sp/>this</highlight></codeline>
<codeline lineno="1914"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At<sp/>present<sp/>I<sp/>expect<sp/>a<sp/>few<sp/>such<sp/>applications<sp/>-<sp/>if<sp/>too<sp/>many<sp/>I<sp/>will</highlight></codeline>
<codeline lineno="1915"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>to<sp/>re-think.<sp/><sp/>It<sp/>is<sp/>up<sp/>to<sp/>application<sp/>owner<sp/>to<sp/>change<sp/>the<sp/>code</highlight></codeline>
<codeline lineno="1916"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>she/he<sp/>needs<sp/>these<sp/>short<sp/>cuts.<sp/><sp/>I<sp/>will<sp/>not<sp/>debug<sp/>unless<sp/>in<sp/>Coin</highlight></codeline>
<codeline lineno="1917"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repository.<sp/><sp/>See<sp/>COIN_CLP_VETTED<sp/>comments.</highlight></codeline>
<codeline lineno="1918"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>0x01000000<sp/>is<sp/>Cbc<sp/>(and<sp/>in<sp/>branch<sp/>and<sp/>bound)</highlight></codeline>
<codeline lineno="1919"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>0x02000000<sp/>is<sp/>in<sp/>a<sp/>different<sp/>branch<sp/>and<sp/>bound</highlight></codeline>
<codeline lineno="1920"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1921"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>2048<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work</highlight></codeline>
<codeline lineno="1922"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>262144<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work</highlight></codeline>
<codeline lineno="1923"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>debug<sp/>mode:<sp/>leave<sp/>checks<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setSpecialOptions(64|512|1024);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setSpecialOptions(64|128|512|1024|4096);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;startfinish&apos;<sp/>options<sp/>for<sp/>strong<sp/>branching:</highlight></codeline>
<codeline lineno="1932"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>1<sp/>-<sp/>do<sp/>not<sp/>delete<sp/>work<sp/>areas<sp/>and<sp/>factorization<sp/>at<sp/>end</highlight></codeline>
<codeline lineno="1933"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>2<sp/>-<sp/>use<sp/>old<sp/>factorization<sp/>if<sp/>same<sp/>number<sp/>of<sp/>rows</highlight></codeline>
<codeline lineno="1934"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>4<sp/>-<sp/>skip<sp/>as<sp/>much<sp/>initialization<sp/>of<sp/>work<sp/>areas<sp/>as<sp/>possible</highlight></codeline>
<codeline lineno="1935"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>(based<sp/>on<sp/>whatsChanged<sp/>in<sp/>clpmodel.hpp)<sp/>**<sp/>work<sp/>in<sp/>progress</highlight></codeline>
<codeline lineno="1936"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1937"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>4<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work<sp/>in<sp/>strong<sp/>branching<sp/>...</highlight></codeline>
<codeline lineno="1938"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startFinishOptions<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;validFactorization<sp/>)</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startFinishOptions<sp/>=<sp/>startFinishOptions<sp/>|<sp/>2;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>new<sp/>lower<sp/>and<sp/>upper<sp/>bounds<sp/>for<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/>*down<sp/>=<sp/><ref refid="def_8h_1ac727974c4f41af31763fe94fe4d9bd42" kindref="member">EPSCEIL</ref>(psol<sp/>-<sp/>1.0,<sp/>1e-06);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/>*up<sp/><sp/><sp/>=<sp/><ref refid="def_8h_1adc5197ac72e784d66e7fd2e304365011" kindref="member">EPSFLOOR</ref>(psol<sp/>+<sp/>1.0,<sp/>1e-06);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1947"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>For<sp/>strong<sp/>branching.<sp/><sp/>On<sp/>input<sp/>lower<sp/>and<sp/>upper<sp/>are<sp/>new<sp/>bounds<sp/>while</highlight></codeline>
<codeline lineno="1948"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>on<sp/>output<sp/>they<sp/>are<sp/>change<sp/>in<sp/>objective<sp/>function<sp/>values<sp/>(&gt;1.0e50</highlight></codeline>
<codeline lineno="1949"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>infeasible).<sp/><sp/>Return<sp/>code<sp/>is</highlight></codeline>
<codeline lineno="1950"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>0<sp/>if<sp/>nothing<sp/>interesting,</highlight></codeline>
<codeline lineno="1951"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>-1<sp/>if<sp/>infeasible<sp/>both<sp/>ways<sp/>and</highlight></codeline>
<codeline lineno="1952"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>+1<sp/>if<sp/>infeasible<sp/>one<sp/>way<sp/>(check<sp/>values<sp/>to<sp/>see<sp/>which<sp/>one(s))</highlight></codeline>
<codeline lineno="1953"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>-2<sp/>if<sp/>bad<sp/>factorization</highlight></codeline>
<codeline lineno="1954"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Solutions<sp/>are<sp/>filled<sp/>in<sp/>as<sp/>well<sp/>-<sp/>even<sp/>down,<sp/>odd<sp/>up<sp/>-<sp/>also<sp/>status<sp/>and<sp/>number<sp/>of<sp/>iterations</highlight></codeline>
<codeline lineno="1955"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1956"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>The<sp/>bools<sp/>are:</highlight></codeline>
<codeline lineno="1957"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>bool<sp/>stopOnFirstInfeasible</highlight></codeline>
<codeline lineno="1958"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>bool<sp/>alwaysFinish</highlight></codeline>
<codeline lineno="1959"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1960"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>At<sp/>the<sp/>moment:<sp/>we<sp/>need<sp/>alwaysFinish<sp/>to<sp/>get<sp/>correct<sp/>bounds.</highlight></codeline>
<codeline lineno="1961"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>res<sp/>=<sp/>clp-&gt;strongBranching(1,<sp/>&amp;col,<sp/>up,<sp/>down,<sp/>outputSolution,<sp/>outputStatus,<sp/>outputIterations,<sp/>false,<sp/>false,<sp/>startFinishOptions);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>clp-&gt;strongBranching(1,<sp/>&amp;col,<sp/>up,<sp/>down,<sp/>outputSolution,<sp/>outputStatus,<sp/>outputIterations,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>startFinishOptions);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>special<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setSpecialOptions(specialoptions);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;validFactorization<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/>*down<sp/>+=<sp/>objval;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/>*up<sp/>+=<sp/>objval;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bounds<sp/>returned<sp/>by<sp/>CLP<sp/>seem<sp/>to<sp/>be<sp/>valid<sp/>using<sp/>the<sp/>above<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/>*downvalid<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/>*upvalid<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>iteration<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter)</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*iter<sp/>=<sp/>outputIterations[0]<sp/>+<sp/>outputIterations[1];</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>iteration<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setMaximumIterations(iterlimit);</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>local<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;outputStatus<sp/>);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;outputIterations<sp/>);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;outputSolution[1]<sp/>);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;outputSolution[0]<sp/>);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;outputSolution<sp/>);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>res<sp/>==<sp/>-2<sp/>)</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" kindref="member">SCIP_LPERROR</ref>;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1997"><highlight class="comment">/**<sp/>performs<sp/>strong<sp/>branching<sp/>iterations<sp/>on<sp/>given<sp/>arbitrary<sp/>candidates<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/>lpiStrongbranches(</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>columns<sp/>to<sp/>apply<sp/>strong<sp/>branching<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>fractional<sp/>current<sp/>primal<sp/>solution<sp/>values<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itlim,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>iteration<sp/>limit<sp/>for<sp/>strong<sp/>branchings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bounds<sp/>after<sp/>branching<sp/>columns<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bounds<sp/>after<sp/>branching<sp/>columns<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>down<sp/>values<sp/>are<sp/>valid<sp/>dual<sp/>bounds;</highlight></codeline>
<codeline lineno="2008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>they<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>up<sp/>values<sp/>are<sp/>a<sp/>valid<sp/>dual<sp/>bounds;</highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>they<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>total<sp/>number<sp/>of<sp/>strong<sp/>branching<sp/>iterations,<sp/>or<sp/>-1;<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiStrongbranches()<sp/>on<sp/>%d<sp/>variables<sp/>(%d<sp/>iterations)\n&quot;</highlight><highlight class="normal">,<sp/>ncols,<sp/>itlim);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;clp<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>cols<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>psols<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>down<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>up<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>downvalid<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>upvalid<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>output<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>clp-&gt;numberColumns();</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>0<sp/>&lt;<sp/>ncols<sp/>&amp;&amp;<sp/>ncols<sp/>&lt;=<sp/>n<sp/>);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>outputSolution<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;outputSolution,<sp/>2*ncols)<sp/>);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>2*ncols;<sp/>++j)</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(<sp/>&amp;(outputSolution[j]),<sp/>n)<sp/>);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outputStatus<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(&amp;outputStatus,<sp/>2*ncols)<sp/>);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outputIterations<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(&amp;outputIterations,<sp/>2*ncols)<sp/>);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>iteration<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterlimit<sp/>=<sp/>clp-&gt;maximumIterations();</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setMaximumIterations(itlim);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>objective<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>objval<sp/>=<sp/>clp-&gt;objectiveValue();</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>special<sp/>options<sp/>for<sp/>later<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>specialoptions<sp/>=<sp/>clp-&gt;specialOptions();</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2053"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Clp<sp/>special<sp/>options:</highlight></codeline>
<codeline lineno="2054"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>-<sp/>Don&apos;t<sp/>keep<sp/>changing<sp/>infeasibility<sp/>weight</highlight></codeline>
<codeline lineno="2055"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>-<sp/>Keep<sp/>nonLinearCost<sp/>round<sp/>solves</highlight></codeline>
<codeline lineno="2056"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>-<sp/>Force<sp/>outgoing<sp/>variables<sp/>to<sp/>exact<sp/>bound<sp/>(primal)</highlight></codeline>
<codeline lineno="2057"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>8<sp/>-<sp/>Safe<sp/>to<sp/>use<sp/>dense<sp/>initial<sp/>factorization</highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>16<sp/>-<sp/>Just<sp/>use<sp/>basic<sp/>variables<sp/>for<sp/>operation<sp/>if<sp/>column<sp/>generation</highlight></codeline>
<codeline lineno="2059"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>32<sp/>-<sp/>Create<sp/>ray<sp/>even<sp/>in<sp/>BAB</highlight></codeline>
<codeline lineno="2060"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>64<sp/>-<sp/>Treat<sp/>problem<sp/>as<sp/>feasible<sp/>until<sp/>last<sp/>minute<sp/>(i.e.<sp/>minimize<sp/>infeasibilities)</highlight></codeline>
<codeline lineno="2061"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>128<sp/>-<sp/>Switch<sp/>off<sp/>all<sp/>matrix<sp/>sanity<sp/>checks</highlight></codeline>
<codeline lineno="2062"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>256<sp/>-<sp/>No<sp/>row<sp/>copy</highlight></codeline>
<codeline lineno="2063"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>512<sp/>-<sp/>If<sp/>not<sp/>in<sp/>values<sp/>pass,<sp/>solution<sp/>guaranteed,<sp/>skip<sp/>as<sp/>much<sp/>as<sp/>possible</highlight></codeline>
<codeline lineno="2064"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>1024<sp/>-<sp/>In<sp/>branch<sp/>and<sp/>bound</highlight></codeline>
<codeline lineno="2065"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>2048<sp/>-<sp/>Don&apos;t<sp/>bother<sp/>to<sp/>re-factorize<sp/>if<sp/>&lt;<sp/>20<sp/>iterations</highlight></codeline>
<codeline lineno="2066"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>4096<sp/>-<sp/>Skip<sp/>some<sp/>optimality<sp/>checks</highlight></codeline>
<codeline lineno="2067"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>8192<sp/>-<sp/>Do<sp/>Primal<sp/>when<sp/>cleaning<sp/>up<sp/>primal</highlight></codeline>
<codeline lineno="2068"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>16384<sp/>-<sp/>In<sp/>fast<sp/>dual<sp/>(so<sp/>we<sp/>can<sp/>switch<sp/>off<sp/>things)</highlight></codeline>
<codeline lineno="2069"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>32768<sp/>-<sp/>called<sp/>from<sp/>Osi</highlight></codeline>
<codeline lineno="2070"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>65536<sp/>-<sp/>keep<sp/>arrays<sp/>around<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>(also<sp/>use<sp/>maximumR/C)</highlight></codeline>
<codeline lineno="2071"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>131072<sp/>-<sp/>transposeTimes<sp/>is<sp/>-1.0<sp/>and<sp/>can<sp/>skip<sp/>basic<sp/>and<sp/>fixed</highlight></codeline>
<codeline lineno="2072"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>262144<sp/>-<sp/>extra<sp/>copy<sp/>of<sp/>scaled<sp/>matrix</highlight></codeline>
<codeline lineno="2073"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>524288<sp/>-<sp/>Clp<sp/>fast<sp/>dual</highlight></codeline>
<codeline lineno="2074"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>1048576<sp/>-<sp/>don&apos;t<sp/>need<sp/>to<sp/>finish<sp/>dual<sp/>(can<sp/>return<sp/>3)</highlight></codeline>
<codeline lineno="2075"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>NOTE<sp/><sp/><sp/>-<sp/>many<sp/>applications<sp/>can<sp/>call<sp/>Clp<sp/>but<sp/>there<sp/>may<sp/>be<sp/>some<sp/>short<sp/>cuts</highlight></codeline>
<codeline lineno="2076"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>are<sp/>taken<sp/>which<sp/>are<sp/>not<sp/>guaranteed<sp/>safe<sp/>from<sp/>all<sp/>applications.</highlight></codeline>
<codeline lineno="2077"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vetted<sp/>applications<sp/>will<sp/>have<sp/>a<sp/>bit<sp/>set<sp/>and<sp/>the<sp/>code<sp/>may<sp/>test<sp/>this</highlight></codeline>
<codeline lineno="2078"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At<sp/>present<sp/>I<sp/>expect<sp/>a<sp/>few<sp/>such<sp/>applications<sp/>-<sp/>if<sp/>too<sp/>many<sp/>I<sp/>will</highlight></codeline>
<codeline lineno="2079"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>to<sp/>re-think.<sp/><sp/>It<sp/>is<sp/>up<sp/>to<sp/>application<sp/>owner<sp/>to<sp/>change<sp/>the<sp/>code</highlight></codeline>
<codeline lineno="2080"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>she/he<sp/>needs<sp/>these<sp/>short<sp/>cuts.<sp/><sp/>I<sp/>will<sp/>not<sp/>debug<sp/>unless<sp/>in<sp/>Coin</highlight></codeline>
<codeline lineno="2081"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repository.<sp/><sp/>See<sp/>COIN_CLP_VETTED<sp/>comments.</highlight></codeline>
<codeline lineno="2082"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>0x01000000<sp/>is<sp/>Cbc<sp/>(and<sp/>in<sp/>branch<sp/>and<sp/>bound)</highlight></codeline>
<codeline lineno="2083"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>0x02000000<sp/>is<sp/>in<sp/>a<sp/>different<sp/>branch<sp/>and<sp/>bound</highlight></codeline>
<codeline lineno="2084"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2085"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>2048<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work</highlight></codeline>
<codeline lineno="2086"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>262144<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work</highlight></codeline>
<codeline lineno="2087"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>debug<sp/>mode:<sp/>leave<sp/>checks<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setSpecialOptions(64|512|1024);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setSpecialOptions(64|128|512|1024|4096);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;startfinish&apos;<sp/>options<sp/>for<sp/>strong<sp/>branching:</highlight></codeline>
<codeline lineno="2096"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>1<sp/>-<sp/>do<sp/>not<sp/>delete<sp/>work<sp/>areas<sp/>and<sp/>factorization<sp/>at<sp/>end</highlight></codeline>
<codeline lineno="2097"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>2<sp/>-<sp/>use<sp/>old<sp/>factorization<sp/>if<sp/>same<sp/>number<sp/>of<sp/>rows</highlight></codeline>
<codeline lineno="2098"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>4<sp/>-<sp/>skip<sp/>as<sp/>much<sp/>initialization<sp/>of<sp/>work<sp/>areas<sp/>as<sp/>possible</highlight></codeline>
<codeline lineno="2099"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>(based<sp/>on<sp/>whatsChanged<sp/>in<sp/>clpmodel.hpp)<sp/>**<sp/>work<sp/>in<sp/>progress</highlight></codeline>
<codeline lineno="2100"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2101"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>4<sp/>does<sp/>not<sp/>seem<sp/>to<sp/>work<sp/>in<sp/>strong<sp/>branching<sp/>...</highlight></codeline>
<codeline lineno="2102"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startFinishOptions<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;validFactorization<sp/>)</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>startFinishOptions<sp/>=<sp/>startFinishOptions<sp/>|<sp/>2;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>new<sp/>lower<sp/>and<sp/>upper<sp/>bounds<sp/>for<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ncols;<sp/>++j)</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/>cols[j]<sp/>&amp;&amp;<sp/>cols[j]<sp/>&lt;<sp/>n<sp/>);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>down[j]<sp/>=<sp/><ref refid="def_8h_1ac727974c4f41af31763fe94fe4d9bd42" kindref="member">EPSCEIL</ref>(psols[j]<sp/>-<sp/>1.0,<sp/>1e-06);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>up[j]<sp/><sp/><sp/>=<sp/><ref refid="def_8h_1adc5197ac72e784d66e7fd2e304365011" kindref="member">EPSFLOOR</ref>(psols[j]<sp/>+<sp/>1.0,<sp/>1e-06);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bounds<sp/>returned<sp/>by<sp/>CLP<sp/>seem<sp/>to<sp/>be<sp/>valid<sp/>using<sp/>the<sp/>above<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>downvalid[j]<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upvalid[j]<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2119"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>For<sp/>strong<sp/>branching.<sp/><sp/>On<sp/>input<sp/>lower<sp/>and<sp/>upper<sp/>are<sp/>new<sp/>bounds<sp/>while</highlight></codeline>
<codeline lineno="2120"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>on<sp/>output<sp/>they<sp/>are<sp/>change<sp/>in<sp/>objective<sp/>function<sp/>values<sp/>(&gt;1.0e50</highlight></codeline>
<codeline lineno="2121"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>infeasible).<sp/><sp/>Return<sp/>code<sp/>is</highlight></codeline>
<codeline lineno="2122"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>0<sp/>if<sp/>nothing<sp/>interesting,</highlight></codeline>
<codeline lineno="2123"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>-1<sp/>if<sp/>infeasible<sp/>both<sp/>ways<sp/>and</highlight></codeline>
<codeline lineno="2124"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>+1<sp/>if<sp/>infeasible<sp/>one<sp/>way<sp/>(check<sp/>values<sp/>to<sp/>see<sp/>which<sp/>one(s))</highlight></codeline>
<codeline lineno="2125"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>-2<sp/>if<sp/>bad<sp/>factorization</highlight></codeline>
<codeline lineno="2126"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Solutions<sp/>are<sp/>filled<sp/>in<sp/>as<sp/>well<sp/>-<sp/>even<sp/>down,<sp/>odd<sp/>up<sp/>-<sp/>also<sp/>status<sp/>and<sp/>number<sp/>of<sp/>iterations</highlight></codeline>
<codeline lineno="2127"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2128"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>The<sp/>bools<sp/>are:</highlight></codeline>
<codeline lineno="2129"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>bool<sp/>stopOnFirstInfeasible</highlight></codeline>
<codeline lineno="2130"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>bool<sp/>alwaysFinish</highlight></codeline>
<codeline lineno="2131"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="2132"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>At<sp/>the<sp/>moment:<sp/>we<sp/>need<sp/>alwaysFinish<sp/>to<sp/>get<sp/>correct<sp/>bounds.</highlight></codeline>
<codeline lineno="2133"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>clp-&gt;strongBranching(ncols,<sp/>cols,<sp/>up,<sp/>down,<sp/>outputSolution,<sp/>outputStatus,<sp/>outputIterations,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>startFinishOptions);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>special<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setSpecialOptions(specialoptions);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;validFactorization<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ncols;<sp/>++j)</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>down[j]<sp/>+=<sp/>objval;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>up[j]<sp/>+=<sp/>objval;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>iteration<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter)</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*iter<sp/>+=<sp/>outputIterations[2*j]<sp/>+<sp/>outputIterations[2*j+1];</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMSfreeMemoryArray(&amp;outputSolution[2*j]);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMSfreeMemoryArray(&amp;outputSolution[2*j+1]);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>iteration<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setMaximumIterations(iterlimit);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>local<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;outputStatus<sp/>);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;outputIterations<sp/>);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(<sp/>&amp;outputSolution<sp/>);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>res<sp/>==<sp/>-2<sp/>)</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" kindref="member">SCIP_LPERROR</ref>;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2168"><highlight class="comment">/**<sp/>performs<sp/>strong<sp/>branching<sp/>iterations<sp/>on<sp/>one<sp/>@b<sp/>fractional<sp/>candidate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169" refid="lpi__clp_8cpp_1a4b3e0e444fa2cba71360126834df07b4" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a4b3e0e444fa2cba71360126834df07b4" kindref="member">SCIPlpiStrongbranchFrac</ref>(</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>to<sp/>apply<sp/>strong<sp/>branching<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>current<sp/>primal<sp/>solution<sp/>value<sp/>of<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itlim,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>iteration<sp/>limit<sp/>for<sp/>strong<sp/>branchings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bound<sp/>after<sp/>branching<sp/>column<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bound<sp/>after<sp/>branching<sp/>column<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>down<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>dual<sp/>bound;</highlight></codeline>
<codeline lineno="2177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>up<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>dual<sp/>bound;</highlight></codeline>
<codeline lineno="2179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>total<sp/>number<sp/>of<sp/>strong<sp/>branching<sp/>iterations,<sp/>or<sp/>-1;<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pass<sp/>call<sp/>on<sp/>to<sp/>lpiStrongbranch()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>lpiStrongbranch(lpi,<sp/>col,<sp/>psol,<sp/>itlim,<sp/>down,<sp/>up,<sp/>downvalid,<sp/>upvalid,<sp/>iter)<sp/>);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2189"><highlight class="comment">/**<sp/>performs<sp/>strong<sp/>branching<sp/>iterations<sp/>on<sp/>given<sp/>@b<sp/>fractional<sp/>candidates<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190" refid="lpi__clp_8cpp_1a7aa759face9cb33420e56984df7b6557" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a7aa759face9cb33420e56984df7b6557" kindref="member">SCIPlpiStrongbranchesFrac</ref>(</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>columns<sp/>to<sp/>apply<sp/>strong<sp/>branching<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>fractional<sp/>current<sp/>primal<sp/>solution<sp/>values<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itlim,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>iteration<sp/>limit<sp/>for<sp/>strong<sp/>branchings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bounds<sp/>after<sp/>branching<sp/>columns<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bounds<sp/>after<sp/>branching<sp/>columns<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>down<sp/>values<sp/>are<sp/>valid<sp/>dual<sp/>bounds;</highlight></codeline>
<codeline lineno="2199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>they<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>up<sp/>values<sp/>are<sp/>a<sp/>valid<sp/>dual<sp/>bounds;</highlight></codeline>
<codeline lineno="2201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>they<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>total<sp/>number<sp/>of<sp/>strong<sp/>branching<sp/>iterations,<sp/>or<sp/>-1;<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iter<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pass<sp/>call<sp/>on<sp/>to<sp/>lpiStrongbranches()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>lpiStrongbranches(lpi,<sp/>cols,<sp/>ncols,<sp/>psols,<sp/>itlim,<sp/>down,<sp/>up,<sp/>downvalid,<sp/>upvalid,<sp/>iter)<sp/>);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2214"><highlight class="comment">/**<sp/>performs<sp/>strong<sp/>branching<sp/>iterations<sp/>on<sp/>one<sp/>candidate<sp/>with<sp/>@b<sp/>integral<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215" refid="lpi__clp_8cpp_1a5172db5f9ebd4ad8b1da84ce8c00bff7" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a5172db5f9ebd4ad8b1da84ce8c00bff7" kindref="member">SCIPlpiStrongbranchInt</ref>(</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>to<sp/>apply<sp/>strong<sp/>branching<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>current<sp/>integral<sp/>primal<sp/>solution<sp/>value<sp/>of<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itlim,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>iteration<sp/>limit<sp/>for<sp/>strong<sp/>branchings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bound<sp/>after<sp/>branching<sp/>column<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bound<sp/>after<sp/>branching<sp/>column<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>down<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>dual<sp/>bound;</highlight></codeline>
<codeline lineno="2223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>up<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>dual<sp/>bound;</highlight></codeline>
<codeline lineno="2225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>total<sp/>number<sp/>of<sp/>strong<sp/>branching<sp/>iterations,<sp/>or<sp/>-1;<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pass<sp/>call<sp/>on<sp/>to<sp/>lpiStrongbranch()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>lpiStrongbranch(lpi,<sp/>col,<sp/>psol,<sp/>itlim,<sp/>down,<sp/>up,<sp/>downvalid,<sp/>upvalid,<sp/>iter)<sp/>);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2235"><highlight class="comment">/**<sp/>performs<sp/>strong<sp/>branching<sp/>iterations<sp/>on<sp/>given<sp/>candidates<sp/>with<sp/>@b<sp/>integral<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236" refid="lpi__clp_8cpp_1abdfa4cbbbfc871eb382b8090167f715e" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1abdfa4cbbbfc871eb382b8090167f715e" kindref="member">SCIPlpiStrongbranchesInt</ref>(</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>columns<sp/>to<sp/>apply<sp/>strong<sp/>branching<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>current<sp/>integral<sp/>primal<sp/>solution<sp/>values<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itlim,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>iteration<sp/>limit<sp/>for<sp/>strong<sp/>branchings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bounds<sp/>after<sp/>branching<sp/>columns<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bounds<sp/>after<sp/>branching<sp/>columns<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>down<sp/>values<sp/>are<sp/>valid<sp/>dual<sp/>bounds;</highlight></codeline>
<codeline lineno="2245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>they<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>up<sp/>values<sp/>are<sp/>a<sp/>valid<sp/>dual<sp/>bounds;</highlight></codeline>
<codeline lineno="2247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>they<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>total<sp/>number<sp/>of<sp/>strong<sp/>branching<sp/>iterations,<sp/>or<sp/>-1;<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iter<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pass<sp/>call<sp/>on<sp/>to<sp/>lpiStrongbranches()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>lpiStrongbranches(lpi,<sp/>cols,<sp/>ncols,<sp/>psols,<sp/>itlim,<sp/>down,<sp/>up,<sp/>downvalid,<sp/>upvalid,<sp/>iter)<sp/>);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2264"><highlight class="comment"><sp/>*<sp/>Solution<sp/>Information<sp/>Methods</highlight></codeline>
<codeline lineno="2265"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2267"><highlight class="comment">/**@name<sp/>Solution<sp/>Information<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2268"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2270"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>a<sp/>solve<sp/>method<sp/>was<sp/>called<sp/>after<sp/>the<sp/>last<sp/>modification<sp/>of<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271" refid="lpi__clp_8cpp_1aaa0c5c0be2bd96fce205e68f7d051abe" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1aaa0c5c0be2bd96fce205e68f7d051abe" kindref="member">SCIPlpiWasSolved</ref>(</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lpi-&gt;solved;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2280"><highlight class="comment">/**<sp/>gets<sp/>information<sp/>about<sp/>primal<sp/>and<sp/>dual<sp/>feasibility<sp/>of<sp/>the<sp/>current<sp/>LP<sp/>solution<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281" refid="lpi__clp_8cpp_1a61efb09a57b1279d91619c36cad3d597" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a61efb09a57b1279d91619c36cad3d597" kindref="member">SCIPlpiGetSolFeasibility</ref>(</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primalfeasible,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>primal<sp/>feasibility<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dualfeasible<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>feasibility<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetSolFeasibility()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/>assert(primalfeasible<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/>assert(dualfeasible<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;primalFeasible()<sp/>)</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*primalfeasible<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*primalfeasible<sp/>=<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;dualFeasible()<sp/>)</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*dualfeasible<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*dualfeasible<sp/>=<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>say<sp/>feasible<sp/>if<sp/>deviation<sp/>is<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lpi-&gt;clp-&gt;status()==0<sp/>&amp;&amp;<sp/>(<sp/>!<sp/>(*primalfeasible)<sp/>||<sp/>!<sp/>(*dualfeasible))<sp/>)</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(*primalfeasible)<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;sumPrimalInfeasibilities()<sp/>&lt;<sp/><ref refid="lpi__clp_8cpp_1a2fd62d75c4d7a35e2b82e2d8de9c6130" kindref="member">SUMINFEASBOUND</ref><sp/>)</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setNumberPrimalInfeasibilities(0);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*primalfeasible<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!(*dualfeasible)<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;sumDualInfeasibilities()<sp/>&lt;<sp/><ref refid="lpi__clp_8cpp_1a2fd62d75c4d7a35e2b82e2d8de9c6130" kindref="member">SUMINFEASBOUND</ref>)</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setNumberDualInfeasibilities(0);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dualfeasible<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2323"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>have<sp/>a<sp/>primal<sp/>unbounded<sp/>ray<sp/>(but<sp/>not<sp/>necessary<sp/>a<sp/>primal<sp/>feasible<sp/>point);</highlight></codeline>
<codeline lineno="2324"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>does<sp/>not<sp/>necessarily<sp/>mean,<sp/>that<sp/>the<sp/>solver<sp/>knows<sp/>and<sp/>can<sp/>return<sp/>the<sp/>primal<sp/>ray</highlight></codeline>
<codeline lineno="2325"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2326" refid="lpi__clp_8cpp_1a2562db03b64bf6ef2789e4edf3cc31a3" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a2562db03b64bf6ef2789e4edf3cc31a3" kindref="member">SCIPlpiExistsPrimalRay</ref>(</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiExistsPrimalRay()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clp<sp/>seems<sp/>to<sp/>have<sp/>a<sp/>primal<sp/>ray<sp/>whenever<sp/>it<sp/>concludes<sp/>&quot;dual<sp/>infeasible&quot;<sp/>(status<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="2336"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>(but<sp/>is<sp/>not<sp/>necessarily<sp/>primal<sp/>feasible),<sp/>see<sp/>ClpModel::unboundedRay().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2341"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>have<sp/>a<sp/>primal<sp/>unbounded<sp/>ray<sp/>(but<sp/>not<sp/>necessary<sp/>a<sp/>primal<sp/>feasible<sp/>point),</highlight></codeline>
<codeline lineno="2342"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>the<sp/>solver<sp/>knows<sp/>and<sp/>can<sp/>return<sp/>the<sp/>primal<sp/>ray</highlight></codeline>
<codeline lineno="2343"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344" refid="lpi__clp_8cpp_1a91cb0382fe11412dfa127df4cc9f8e9a" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a91cb0382fe11412dfa127df4cc9f8e9a" kindref="member">SCIPlpiHasPrimalRay</ref>(</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiHasPrimalRay()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clp<sp/>seems<sp/>to<sp/>have<sp/>a<sp/>primal<sp/>ray<sp/>whenever<sp/>it<sp/>concludes<sp/>&quot;dual<sp/>infeasible&quot;<sp/>(status<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="2354"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>(but<sp/>is<sp/>not<sp/>necessarily<sp/>primal<sp/>feasible),<sp/>see<sp/>ClpModel::unboundedRay().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2359"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>primal<sp/>unbounded<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360" refid="lpi__clp_8cpp_1a698fec903ce3546e8066a3988ee906ee" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a698fec903ce3546e8066a3988ee906ee" kindref="member">SCIPlpiIsPrimalUnbounded</ref>(</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsPrimalUnbounded()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;isProvenDualInfeasible()<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;primalFeasible()<sp/>);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2373"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>primal<sp/>infeasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2374" refid="lpi__clp_8cpp_1ad2c1ad0f846c5827b5a2050ab13eba0f" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1ad2c1ad0f846c5827b5a2050ab13eba0f" kindref="member">SCIPlpiIsPrimalInfeasible</ref>(</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsPrimalInfeasible()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>return<sp/>ClpModel::isProvenPrimalInfeasible()<sp/>(which<sp/>returns<sp/>status<sp/>==<sp/>1),<sp/>but<sp/>the</highlight></codeline>
<codeline lineno="2384"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>following<sp/>is<sp/>correct<sp/>(Clp<sp/>will<sp/>not<sp/>be<sp/>changed).<sp/>The<sp/>secondaryStatus<sp/>is<sp/>1<sp/>if<sp/>the<sp/>dual<sp/>simplex</highlight></codeline>
<codeline lineno="2385"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>detects<sp/>an<sp/>objective<sp/>limit<sp/>exceedence.<sp/>The<sp/>primal<sp/>simplex<sp/>has<sp/>no<sp/>such<sp/>detection<sp/>(will<sp/>never</highlight></codeline>
<codeline lineno="2386"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>stop<sp/>with<sp/>objective<sp/>limit<sp/>exceedence).<sp/>Hence<sp/>we<sp/>are<sp/>infeasible<sp/>only<sp/>if<sp/>status<sp/>==<sp/>1<sp/>and<sp/>we<sp/>have</highlight></codeline>
<codeline lineno="2387"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>not<sp/>stopped<sp/>due<sp/>to<sp/>the<sp/>objective<sp/>limit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>(lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>0<sp/>||<sp/>lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>6)<sp/>);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2392"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>primal<sp/>feasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393" refid="lpi__clp_8cpp_1a824080a74642700e0919806405d4dd69" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a824080a74642700e0919806405d4dd69" kindref="member">SCIPlpiIsPrimalFeasible</ref>(</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsPrimalFeasible()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;primalFeasible()<sp/>);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2406"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>have<sp/>a<sp/>dual<sp/>unbounded<sp/>ray<sp/>(but<sp/>not<sp/>necessary<sp/>a<sp/>dual<sp/>feasible<sp/>point);</highlight></codeline>
<codeline lineno="2407"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>does<sp/>not<sp/>necessarily<sp/>mean,<sp/>that<sp/>the<sp/>solver<sp/>knows<sp/>and<sp/>can<sp/>return<sp/>the<sp/>dual<sp/>ray</highlight></codeline>
<codeline lineno="2408"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409" refid="lpi__clp_8cpp_1a21939ccf03835cce5a9a449b6c43665b" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a21939ccf03835cce5a9a449b6c43665b" kindref="member">SCIPlpiExistsDualRay</ref>(</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiExistsDualRay()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clp<sp/>assumes<sp/>to<sp/>have<sp/>a<sp/>dual<sp/>ray<sp/>whenever<sp/>it<sp/>concludes<sp/>&quot;primal<sp/>infeasible&quot;<sp/>and<sp/>the<sp/>algorithm<sp/>was</highlight></codeline>
<codeline lineno="2419"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>the<sp/>dual<sp/>simplex,<sp/>(but<sp/>is<sp/>not<sp/>necessarily<sp/>dual<sp/>feasible),<sp/>see<sp/>ClpModel::infeasibilityRay<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;algorithm()<sp/>&lt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2424"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>have<sp/>a<sp/>dual<sp/>unbounded<sp/>ray<sp/>(but<sp/>not<sp/>necessary<sp/>a<sp/>dual<sp/>feasible<sp/>point),</highlight></codeline>
<codeline lineno="2425"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>the<sp/>solver<sp/>knows<sp/>and<sp/>can<sp/>return<sp/>the<sp/>dual<sp/>ray</highlight></codeline>
<codeline lineno="2426"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427" refid="lpi__clp_8cpp_1ac6738fca43ff0cbb9027560f18bd764c" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1ac6738fca43ff0cbb9027560f18bd764c" kindref="member">SCIPlpiHasDualRay</ref>(</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiHasDualRay()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clp<sp/>assumes<sp/>to<sp/>have<sp/>a<sp/>dual<sp/>ray<sp/>whenever<sp/>it<sp/>concludes<sp/>&quot;primal<sp/>infeasible&quot;<sp/>and<sp/>the<sp/>algorithm<sp/>was</highlight></codeline>
<codeline lineno="2437"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>the<sp/>dual<sp/>simplex,<sp/>(but<sp/>is<sp/>not<sp/>necessarily<sp/>dual<sp/>feasible),<sp/>see<sp/>ClpModel::infeasibilityRay<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;rayExists()<sp/>)</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;algorithm()<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>!=<sp/>2<sp/>||<sp/>lpi-&gt;clp-&gt;algorithm()<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;deleteRay();</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2454"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>dual<sp/>unbounded<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455" refid="lpi__clp_8cpp_1ae2cd5f0afa5f5940c9d7bab6f04b184e" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1ae2cd5f0afa5f5940c9d7bab6f04b184e" kindref="member">SCIPlpiIsDualUnbounded</ref>(</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsDualUnbounded()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>dual<sp/>seems<sp/>to<sp/>be<sp/>unbounded<sp/>if<sp/>the<sp/>status<sp/>is<sp/>1<sp/>(primal<sp/>unbounded),<sp/>the<sp/>secondaryStatus<sp/>is</highlight></codeline>
<codeline lineno="2465"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>not<sp/>1<sp/>(i.e.,<sp/>the<sp/>dual<sp/>simplex<sp/>has<sp/>not<sp/>stopped<sp/>because<sp/>of<sp/>an<sp/>objective<sp/>limit<sp/>exceedence),<sp/>and</highlight></codeline>
<codeline lineno="2466"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>the<sp/>dual<sp/>is<sp/>feasible.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;dualFeasible()<sp/>);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2471"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>dual<sp/>infeasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472" refid="lpi__clp_8cpp_1a348c42072a5aad88210e9d688b4d6a1c" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a348c42072a5aad88210e9d688b4d6a1c" kindref="member">SCIPlpiIsDualInfeasible</ref>(</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsDualInfeasible()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;isProvenDualInfeasible()<sp/>);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2485"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>dual<sp/>feasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486" refid="lpi__clp_8cpp_1a8457b3a26f7595f3390f7b34ab443fd4" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a8457b3a26f7595f3390f7b34ab443fd4" kindref="member">SCIPlpiIsDualFeasible</ref>(</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsDualFeasible()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;dualFeasible()<sp/>);</highlight></codeline>
<codeline lineno="2496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2499"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>was<sp/>solved<sp/>to<sp/>optimality<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500" refid="lpi__clp_8cpp_1ab66f1eae0b448c155f0feaffa7bdda57" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1ab66f1eae0b448c155f0feaffa7bdda57" kindref="member">SCIPlpiIsOptimal</ref>(</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsOptimal()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="lpi__clp_8cpp_1a0d4fca883c08a32af088280a78ca3ef2" kindref="member">SCIPlpiIsObjlimExc</ref>(lpi)<sp/>)</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>secondaryStatus<sp/>==<sp/>6<sp/>means<sp/>that<sp/>the<sp/>problem<sp/>is<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<sp/>lpi-&gt;clp-&gt;isProvenOptimal()<sp/>&amp;&amp;<sp/>(lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>0<sp/>||<sp/>lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>6));</highlight></codeline>
<codeline lineno="2514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2517"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>current<sp/>LP<sp/>basis<sp/>is<sp/>stable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518" refid="lpi__clp_8cpp_1af04aa49d1337f5007cc0d78625d2dd4d" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1af04aa49d1337f5007cc0d78625d2dd4d" kindref="member">SCIPlpiIsStable</ref>(</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsStable()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>We<sp/>first<sp/>check<sp/>if<sp/>status<sp/>is<sp/>ok,<sp/>i.e.,<sp/>is<sp/>one<sp/>of<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="2528"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>0<sp/>-<sp/>optimal</highlight></codeline>
<codeline lineno="2529"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>1<sp/>-<sp/>primal<sp/>infeasible</highlight></codeline>
<codeline lineno="2530"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>2<sp/>-<sp/>dual<sp/>infeasible</highlight></codeline>
<codeline lineno="2531"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>3<sp/>-<sp/>stopped<sp/>on<sp/>iterations<sp/>or<sp/>time</highlight></codeline>
<codeline lineno="2532"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>4<sp/>-<sp/>stopped<sp/>due<sp/>to<sp/>errors</highlight></codeline>
<codeline lineno="2533"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>5<sp/>-<sp/>stopped<sp/>by<sp/>event<sp/>handler<sp/>(virtual<sp/>int<sp/>ClpEventHandler::event())</highlight></codeline>
<codeline lineno="2534"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Then<sp/>we<sp/>check<sp/>the<sp/>secondary<sp/>status<sp/>of<sp/>Clp:</highlight></codeline>
<codeline lineno="2537"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>0<sp/>-<sp/>none</highlight></codeline>
<codeline lineno="2538"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>1<sp/>-<sp/>primal<sp/>infeasible<sp/>because<sp/>dual<sp/>limit<sp/>reached<sp/>OR<sp/>(probably<sp/>primal<sp/>infeasible<sp/>but<sp/>can&apos;t<sp/>prove<sp/>it<sp/><sp/>-<sp/>main<sp/>status<sp/>was<sp/>4)</highlight></codeline>
<codeline lineno="2539"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>2<sp/>-<sp/>scaled<sp/>problem<sp/>optimal<sp/>-<sp/>unscaled<sp/>problem<sp/>has<sp/>primal<sp/>infeasibilities</highlight></codeline>
<codeline lineno="2540"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>3<sp/>-<sp/>scaled<sp/>problem<sp/>optimal<sp/>-<sp/>unscaled<sp/>problem<sp/>has<sp/>dual<sp/>infeasibilities</highlight></codeline>
<codeline lineno="2541"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>4<sp/>-<sp/>scaled<sp/>problem<sp/>optimal<sp/>-<sp/>unscaled<sp/>problem<sp/>has<sp/>primal<sp/>and<sp/>dual<sp/>infeasibilities</highlight></codeline>
<codeline lineno="2542"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>5<sp/>-<sp/>giving<sp/>up<sp/>in<sp/>primal<sp/>with<sp/>flagged<sp/>variables</highlight></codeline>
<codeline lineno="2543"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>6<sp/>-<sp/>failed<sp/>due<sp/>to<sp/>empty<sp/>problem<sp/>check</highlight></codeline>
<codeline lineno="2544"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>7<sp/>-<sp/>postSolve<sp/>says<sp/>not<sp/>optimal</highlight></codeline>
<codeline lineno="2545"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>8<sp/>-<sp/>failed<sp/>due<sp/>to<sp/>bad<sp/>element<sp/>check</highlight></codeline>
<codeline lineno="2546"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>9<sp/>-<sp/>status<sp/>was<sp/>3<sp/>and<sp/>stopped<sp/>on<sp/>time</highlight></codeline>
<codeline lineno="2547"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>100<sp/>up<sp/>-<sp/>translation<sp/>of<sp/>enum<sp/>from<sp/>ClpEventHandler</highlight></codeline>
<codeline lineno="2548"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;status:<sp/>%d<sp/><sp/><sp/>secondary:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>lpi-&gt;clp-&gt;status(),<sp/>lpi-&gt;clp-&gt;secondaryStatus());</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/>lpi-&gt;clp-&gt;status()<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;status()<sp/>&lt;=<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<sp/>(lpi-&gt;clp-&gt;status()<sp/>&lt;=<sp/>3)<sp/>&amp;&amp;<sp/>(lpi-&gt;clp-&gt;secondaryStatus()<sp/>&lt;=<sp/>1<sp/>||<sp/>lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>6<sp/>||<sp/>lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>9)<sp/>);</highlight></codeline>
<codeline lineno="2552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2555"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>the<sp/>objective<sp/>limit<sp/>was<sp/>reached<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556" refid="lpi__clp_8cpp_1a0d4fca883c08a32af088280a78ca3ef2" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a0d4fca883c08a32af088280a78ca3ef2" kindref="member">SCIPlpiIsObjlimExc</ref>(</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsObjlimExc()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>status<sp/>==<sp/>1<sp/>(primal<sp/>infeasible)<sp/>and<sp/>secondaryStatus<sp/>==<sp/>1<sp/>then<sp/>Clp<sp/>hit<sp/>the<sp/>dual<sp/>bound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;isObjectiveLimitTestValid()<sp/>&amp;&amp;<sp/>(lpi-&gt;clp-&gt;isPrimalObjectiveLimitReached()<sp/>||<sp/>lpi-&gt;clp-&gt;isDualObjectiveLimitReached())<sp/>);</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>above<sp/>code<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="2577"><highlight class="comment"><sp/><sp/><sp/>if<sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>==<sp/>0<sp/>||<sp/>(lpi-&gt;clp-&gt;status()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;algorithm()<sp/>&lt;<sp/>0)<sp/>||<sp/>(lpi-&gt;clp-&gt;status()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;algorithm()<sp/>&gt;<sp/>0)<sp/>)</highlight></codeline>
<codeline lineno="2578"><highlight class="comment"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(<sp/>lpi-&gt;clp-&gt;isPrimalObjectiveLimitReached()<sp/>||<sp/>lpi-&gt;clp-&gt;isDualObjectiveLimitReached()<sp/>);</highlight></codeline>
<codeline lineno="2580"><highlight class="comment"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2581"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2587"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>the<sp/>iteration<sp/>limit<sp/>was<sp/>reached<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588" refid="lpi__clp_8cpp_1a689c99183c7e0779c50f9aef63c79123" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a689c99183c7e0779c50f9aef63c79123" kindref="member">SCIPlpiIsIterlimExc</ref>(</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsIterlimExc()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>status<sp/>==<sp/>3<sp/>means<sp/>that<sp/>Clp<sp/>stopped<sp/>on<sp/>time<sp/>or<sp/>iteration<sp/>limit</highlight></codeline>
<codeline lineno="2598"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>secondary<sp/>status<sp/>==<sp/>9<sp/>means<sp/>that<sp/>status<sp/>was<sp/>3<sp/>and<sp/>Clp<sp/>stopped<sp/>on<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;secondaryStatus()<sp/>!=<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2603"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>the<sp/>time<sp/>limit<sp/>was<sp/>reached<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2604" refid="lpi__clp_8cpp_1a8ac20384dbd857173c8dfe0dc37f7d6a" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a8ac20384dbd857173c8dfe0dc37f7d6a" kindref="member">SCIPlpiIsTimelimExc</ref>(</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2607"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsTimelimExc()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>status<sp/>==<sp/>3<sp/>means<sp/>that<sp/>Clp<sp/>stopped<sp/>on<sp/>time<sp/>or<sp/>iteration<sp/>limit</highlight></codeline>
<codeline lineno="2614"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>secondary<sp/>status<sp/>==<sp/>9<sp/>means<sp/>that<sp/>status<sp/>was<sp/>3<sp/>and<sp/>Clp<sp/>stopped<sp/>on<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;status()<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>lpi-&gt;clp-&gt;secondaryStatus()<sp/>==<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2619"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>internal<sp/>solution<sp/>status<sp/>of<sp/>the<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2620" refid="lpi__clp_8cpp_1a5fbb9e1f86a8425b85760f01692f85aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lpi__clp_8cpp_1a5fbb9e1f86a8425b85760f01692f85aa" kindref="member">SCIPlpiGetInternalStatus</ref>(</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetInternalStatus()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lpi-&gt;clp-&gt;status();</highlight></codeline>
<codeline lineno="2630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2633"><highlight class="comment">/**<sp/>gets<sp/>objective<sp/>value<sp/>of<sp/>solution<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634" refid="lpi__clp_8cpp_1a5548fcdd7c4e4a3f6d542cd51da27c82" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a5548fcdd7c4e4a3f6d542cd51da27c82" kindref="member">SCIPlpiGetObjval</ref>(</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>the<sp/>objective<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetObjval()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/>assert(objval<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/>*objval<sp/>=<sp/>lpi-&gt;clp-&gt;objectiveValue();</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2651"><highlight class="comment">/**<sp/>gets<sp/>primal<sp/>and<sp/>dual<sp/>solution<sp/>vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652" refid="lpi__clp_8cpp_1ac5a2315c14e99b919626de4170687227" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1ac5a2315c14e99b919626de4170687227" kindref="member">SCIPlpiGetSol</ref>(</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objval,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>the<sp/>objective<sp/>value,<sp/>may<sp/>be<sp/>0<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primsol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>primal<sp/>solution<sp/>vector,<sp/>may<sp/>be<sp/>0<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dualsol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>dual<sp/>solution<sp/>vector,<sp/>may<sp/>be<sp/>0<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>activity<sp/>vector,<sp/>may<sp/>be<sp/>0<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>redcost<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>reduced<sp/>cost<sp/>vector,<sp/>may<sp/>be<sp/>0<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetSol()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>objval<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*objval<sp/>=<sp/>clp-&gt;objectiveValue();</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>primsol<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>sol<sp/>=<sp/>clp-&gt;getColSolution();</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>primsol,<sp/>sol,<sp/>clp-&gt;numberColumns()<sp/>);</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>dualsol<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>dsol<sp/>=<sp/>clp-&gt;getRowPrice();</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>dualsol,<sp/>dsol,<sp/>clp-&gt;numberRows()<sp/>);</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>activity<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>act<sp/>=<sp/>clp-&gt;getRowActivity();</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>activity,<sp/>act,<sp/>clp-&gt;numberRows()<sp/>);</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>redcost<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>red<sp/>=<sp/>clp-&gt;getReducedCost();</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>redcost,<sp/>red,<sp/>clp-&gt;numberColumns()<sp/>);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2695"><highlight class="comment">/**<sp/>gets<sp/>primal<sp/>ray<sp/>for<sp/>unbounded<sp/>LPs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696" refid="lpi__clp_8cpp_1a2d3ab14c33312daf6f0c51e7eba4ae95" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a2d3ab14c33312daf6f0c51e7eba4ae95" kindref="member">SCIPlpiGetPrimalRay</ref>(</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ray<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>primal<sp/>ray<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetPrimalRay()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/>assert(ray<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2707"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Unbounded<sp/>ray<sp/>(NULL<sp/>returned<sp/>if<sp/>none/wrong).<sp/>Up<sp/>to<sp/>user<sp/>to<sp/>use<sp/>delete<sp/>[]<sp/>on<sp/>these<sp/>arrays.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>clpray<sp/>=<sp/>lpi-&gt;clp-&gt;unboundedRay();</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clpray<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" kindref="member">SCIP_LPERROR</ref>;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>ray,<sp/>clpray,<sp/>lpi-&gt;clp-&gt;numberColumns()<sp/>);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>clpray;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2720"><highlight class="comment">/**<sp/>gets<sp/>dual<sp/>farkas<sp/>proof<sp/>for<sp/>infeasibility<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721" refid="lpi__clp_8cpp_1a54ee13d012fb992394c0828166c2fea3" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a54ee13d012fb992394c0828166c2fea3" kindref="member">SCIPlpiGetDualfarkas</ref>(</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dualfarkas<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>dual<sp/>farkas<sp/>row<sp/>multipliers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetDualfarkas()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/>assert(dualfarkas<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2732"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Infeasibility<sp/>ray<sp/>(NULL<sp/>returned<sp/>if<sp/>none/wrong).<sp/>Up<sp/>to<sp/>user<sp/>to<sp/>use<sp/>delete<sp/>[]<sp/>on<sp/>these<sp/>arrays.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>dualray<sp/>=<sp/>lpi-&gt;clp-&gt;infeasibilityRay();</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dualray<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" kindref="member">SCIP_LPERROR</ref>;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/>BMScopyMemoryArray(<sp/>dualfarkas,<sp/>dualray,<sp/>lpi-&gt;clp-&gt;numberRows()<sp/>);</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>sign<sp/>-<sp/>this<sp/>is<sp/>needed<sp/>for<sp/>versions<sp/>&lt;=<sp/>1.10<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2742"><highlight class="comment"><sp/><sp/><sp/>for<sp/>(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lpi-&gt;clp-&gt;numberRows();<sp/>++j)</highlight></codeline>
<codeline lineno="2743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>dualfarkas[j]<sp/>=<sp/>-dualfarkas[j];</highlight></codeline>
<codeline lineno="2744"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>dualray;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2752"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>number<sp/>of<sp/>LP<sp/>iterations<sp/>of<sp/>the<sp/>last<sp/>solve<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2753" refid="lpi__clp_8cpp_1ae37bfbea024ddb8232827aeedc84afe0" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1ae37bfbea024ddb8232827aeedc84afe0" kindref="member">SCIPlpiGetIterations</ref>(</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>iterations<sp/>of<sp/>the<sp/>last<sp/>solve<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/>assert(iterations<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/>*iterations<sp/>=<sp/>lpi-&gt;clp-&gt;numberIterations();</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2766"><highlight class="comment">/**<sp/>gets<sp/>information<sp/>about<sp/>the<sp/>quality<sp/>of<sp/>an<sp/>LP<sp/>solution</highlight></codeline>
<codeline lineno="2767"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2768"><highlight class="comment"><sp/>*<sp/><sp/>Such<sp/>information<sp/>is<sp/>usually<sp/>only<sp/>available,<sp/>if<sp/>also<sp/>a<sp/>(maybe<sp/>not<sp/>optimal)<sp/>solution<sp/>is<sp/>available.</highlight></codeline>
<codeline lineno="2769"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>LPI<sp/>should<sp/>return<sp/>SCIP_INVALID<sp/>for<sp/>@p<sp/>quality,<sp/>if<sp/>the<sp/>requested<sp/>quantity<sp/>is<sp/>not<sp/>available.</highlight></codeline>
<codeline lineno="2770"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2771" refid="lpi__clp_8cpp_1a83ddb586c09a37eea2e411f1271a32f6" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a83ddb586c09a37eea2e411f1271a32f6" kindref="member">SCIPlpiGetRealSolQuality</ref>(</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1ad43906673a9a8a661c5c454138207fc9" kindref="member">SCIP_LPSOLQUALITY</ref><sp/><sp/><sp/><sp/><sp/>qualityindicator,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>which<sp/>quality<sp/>should<sp/>be<sp/>returned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quality<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>quality<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/>assert(quality<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/>*quality<sp/>=<sp/><ref refid="def_8h_1a5e26fa263b7982578f3d3e3e8e876bbc" kindref="member">SCIP_INVALID</ref>;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2785"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2791"><highlight class="comment"><sp/>*<sp/>LP<sp/>Basis<sp/>Methods</highlight></codeline>
<codeline lineno="2792"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2794"><highlight class="comment">/**@name<sp/>LP<sp/>Basis<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2795"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2797"><highlight class="comment">/**<sp/>gets<sp/>current<sp/>basis<sp/>status<sp/>for<sp/>columns<sp/>and<sp/>rows;<sp/>arrays<sp/>must<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>store<sp/>the<sp/>basis<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798" refid="lpi__clp_8cpp_1a258aa72f3b645b140c543f0fc7f3f37a" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a258aa72f3b645b140c543f0fc7f3f37a" kindref="member">SCIPlpiGetBase</ref>(</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>column<sp/>basis<sp/>status,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>row<sp/>basis<sp/>status,<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetBase()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>slower<sp/>but<sp/>easier<sp/>to<sp/>understand<sp/>(and<sp/>portable)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>rstat<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>clp-&gt;numberRows();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>clp-&gt;getRowStatus(i)<sp/>)</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::isFree:</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648ac9fd196bcf1e32bef1f5a2a71b3421bc" kindref="member">SCIP_BASESTAT_ZERO</ref>;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::basic:</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a166f9b557960da4bec4a0dbd00c0d7f2" kindref="member">SCIP_BASESTAT_BASIC</ref>;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::atUpperBound:</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" kindref="member">SCIP_BASESTAT_UPPER</ref>;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::atLowerBound:</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" kindref="member">SCIP_BASESTAT_LOWER</ref>;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::superBasic:</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648ac9fd196bcf1e32bef1f5a2a71b3421bc" kindref="member">SCIP_BASESTAT_ZERO</ref>;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::isFixed:</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clp-&gt;getRowPrice()[i]<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" kindref="member">SCIP_BASESTAT_LOWER</ref>;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" kindref="member">SCIP_BASESTAT_UPPER</ref>;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>basis<sp/>status\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1ad8669395a2a82ed74b9b364f4a310c56" kindref="member">SCIPABORT</ref>();</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4e90bc81f0364ff12e57c3b3e03d315c" kindref="member">SCIP_INVALIDDATA</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e527*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cstat<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>clp-&gt;numberColumns();<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>clp-&gt;getColumnStatus(j)<sp/>)</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::isFree:</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat[j]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648ac9fd196bcf1e32bef1f5a2a71b3421bc" kindref="member">SCIP_BASESTAT_ZERO</ref>;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::basic:</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat[j]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a166f9b557960da4bec4a0dbd00c0d7f2" kindref="member">SCIP_BASESTAT_BASIC</ref>;</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::atUpperBound:</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat[j]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" kindref="member">SCIP_BASESTAT_UPPER</ref>;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::atLowerBound:</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat[j]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" kindref="member">SCIP_BASESTAT_LOWER</ref>;</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::superBasic:</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat[j]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648ac9fd196bcf1e32bef1f5a2a71b3421bc" kindref="member">SCIP_BASESTAT_ZERO</ref>;</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ClpSimplex::isFixed:</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clp-&gt;getReducedCost()[j]<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat[j]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" kindref="member">SCIP_BASESTAT_LOWER</ref>;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat[j]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" kindref="member">SCIP_BASESTAT_UPPER</ref>;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>basis<sp/>status\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1ad8669395a2a82ed74b9b364f4a310c56" kindref="member">SCIPABORT</ref>();</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4e90bc81f0364ff12e57c3b3e03d315c" kindref="member">SCIP_INVALIDDATA</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e527*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2885"><highlight class="comment">/**<sp/>sets<sp/>current<sp/>basis<sp/>status<sp/>for<sp/>columns<sp/>and<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2886" refid="lpi__clp_8cpp_1a7d9cb745987d79fb87f60739a423c833" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a7d9cb745987d79fb87f60739a423c833" kindref="member">SCIPlpiSetBase</ref>(</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>with<sp/>column<sp/>basis<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>with<sp/>row<sp/>basis<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiSetBase()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/>invalidateSolution(lpi);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adapted<sp/>from<sp/>OsiClpSolverInterface::setBasisStatus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;createStatus();</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>lhs<sp/>=<sp/>clp-&gt;getRowLower();</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rhs<sp/>=<sp/>clp-&gt;getRowUpper();</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>rstat<sp/>!=<sp/>0<sp/>||<sp/>clp-&gt;numberRows()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>clp-&gt;numberRows();<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>rstat[i];</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/>status<sp/>&amp;&amp;<sp/>status<sp/>&lt;=<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>lhs[i]<sp/>&gt;<sp/>-COIN_DBL_MAX<sp/>||<sp/>status<sp/>!=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" kindref="member">SCIP_BASESTAT_LOWER</ref>);<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>be<sp/>at<sp/>lower<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>rhs[i]<sp/>&lt;<sp/>COIN_DBL_MAX<sp/><sp/>||<sp/>status<sp/>!=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" kindref="member">SCIP_BASESTAT_UPPER</ref>);<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>be<sp/>at<sp/>upper<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>status<sp/>)</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648ac9fd196bcf1e32bef1f5a2a71b3421bc" kindref="member">SCIP_BASESTAT_ZERO</ref>:</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs[i]<sp/>&lt;=<sp/>-COIN_DBL_MAX<sp/>&amp;&amp;<sp/>rhs[i]<sp/>&gt;=<sp/>COIN_DBL_MAX)</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setRowStatus(i,<sp/>ClpSimplex::isFree);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setRowStatus(i,<sp/>ClpSimplex::superBasic);</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a166f9b557960da4bec4a0dbd00c0d7f2" kindref="member">SCIP_BASESTAT_BASIC</ref>:</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setRowStatus(i,<sp/>ClpSimplex::basic);</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" kindref="member">SCIP_BASESTAT_UPPER</ref>:</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setRowStatus(i,<sp/>ClpSimplex::atUpperBound);</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" kindref="member">SCIP_BASESTAT_LOWER</ref>:</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="def_8h_1aa83db7188806498ec9949e12d7f2bf80" kindref="member">EPSEQ</ref>(rhs[i],<sp/>lhs[i],<sp/>1e-6)<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>bounds<sp/>are<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setRowStatus(i,<sp/>ClpSimplex::isFixed);</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setRowStatus(i,<sp/>ClpSimplex::atLowerBound);</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>basis<sp/>status\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1ad8669395a2a82ed74b9b364f4a310c56" kindref="member">SCIPABORT</ref>();</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4e90bc81f0364ff12e57c3b3e03d315c" kindref="member">SCIP_INVALIDDATA</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e527*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>lb<sp/>=<sp/>clp-&gt;getColLower();</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>ub<sp/>=<sp/>clp-&gt;getColUpper();</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>cstat<sp/>!=<sp/>0<sp/>||<sp/>clp-&gt;numberColumns()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>clp-&gt;numberColumns();<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>cstat[j];</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/>status<sp/>&amp;&amp;<sp/>status<sp/>&lt;=<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>lb[j]<sp/>&gt;<sp/>-COIN_DBL_MAX<sp/>||<sp/>status<sp/>!=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" kindref="member">SCIP_BASESTAT_LOWER</ref>);<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>be<sp/>at<sp/>lower<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>ub[j]<sp/>&lt;<sp/>COIN_DBL_MAX<sp/><sp/>||<sp/>status<sp/>!=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" kindref="member">SCIP_BASESTAT_UPPER</ref>);<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>be<sp/>at<sp/>upper<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>status<sp/>)</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648ac9fd196bcf1e32bef1f5a2a71b3421bc" kindref="member">SCIP_BASESTAT_ZERO</ref>:</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lb[j]<sp/>&lt;=<sp/>-COIN_DBL_MAX<sp/>&amp;&amp;<sp/>ub[j]<sp/>&gt;=<sp/>COIN_DBL_MAX)</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setColumnStatus(j,<sp/>ClpSimplex::isFree);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setColumnStatus(j,<sp/>ClpSimplex::superBasic);</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a166f9b557960da4bec4a0dbd00c0d7f2" kindref="member">SCIP_BASESTAT_BASIC</ref>:</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setColumnStatus(j,<sp/>ClpSimplex::basic);</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" kindref="member">SCIP_BASESTAT_UPPER</ref>:</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setColumnStatus(j,<sp/>ClpSimplex::atUpperBound);</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" kindref="member">SCIP_BASESTAT_LOWER</ref>:</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="def_8h_1aa83db7188806498ec9949e12d7f2bf80" kindref="member">EPSEQ</ref>(ub[j],<sp/>lb[j],<sp/>1e-6)<sp/>)</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setColumnStatus(j,<sp/>ClpSimplex::isFixed);</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;setColumnStatus(j,<sp/>ClpSimplex::atLowerBound);</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>basis<sp/>status\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1ad8669395a2a82ed74b9b364f4a310c56" kindref="member">SCIPABORT</ref>();</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4e90bc81f0364ff12e57c3b3e03d315c" kindref="member">SCIP_INVALIDDATA</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e527*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2980"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Whats<sp/>changed<sp/>since<sp/>last<sp/>solve.</highlight></codeline>
<codeline lineno="2981"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>Is<sp/>only<sp/>used<sp/>when<sp/>startFinishOptions<sp/>used<sp/>in<sp/>dual<sp/>or<sp/>primal.</highlight></codeline>
<codeline lineno="2982"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Bit<sp/>1<sp/>-<sp/>number<sp/>of<sp/>rows/columns<sp/>has<sp/>not<sp/>changed<sp/>(so<sp/>work<sp/>arrays<sp/>valid)</highlight></codeline>
<codeline lineno="2983"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>2<sp/>-<sp/>matrix<sp/>has<sp/>not<sp/>changed</highlight></codeline>
<codeline lineno="2984"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>4<sp/>-<sp/>if<sp/>matrix<sp/>has<sp/>changed<sp/>only<sp/>by<sp/>adding<sp/>rows</highlight></codeline>
<codeline lineno="2985"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>8<sp/>-<sp/>if<sp/>matrix<sp/>has<sp/>changed<sp/>only<sp/>by<sp/>adding<sp/>columns</highlight></codeline>
<codeline lineno="2986"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>16<sp/>-<sp/>row<sp/>lbs<sp/>not<sp/>changed</highlight></codeline>
<codeline lineno="2987"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>32<sp/>-<sp/>row<sp/>ubs<sp/>not<sp/>changed</highlight></codeline>
<codeline lineno="2988"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>64<sp/>-<sp/>column<sp/>objective<sp/>not<sp/>changed</highlight></codeline>
<codeline lineno="2989"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>128<sp/>-<sp/>column<sp/>lbs<sp/>not<sp/>changed</highlight></codeline>
<codeline lineno="2990"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>256<sp/>-<sp/>column<sp/>ubs<sp/>not<sp/>changed</highlight></codeline>
<codeline lineno="2991"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>512<sp/>-<sp/>basis<sp/>not<sp/>changed<sp/>(up<sp/>to<sp/>user<sp/>to<sp/>set<sp/>this<sp/>to<sp/>0)</highlight></codeline>
<codeline lineno="2992"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top<sp/>bits<sp/>may<sp/>be<sp/>used<sp/>internally</highlight></codeline>
<codeline lineno="2993"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;setWhatsChanged(clp-&gt;whatsChanged()<sp/>&amp;<sp/>(~512));</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3000"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>indices<sp/>of<sp/>the<sp/>basic<sp/>columns<sp/>and<sp/>rows;<sp/>basic<sp/>column<sp/>n<sp/>gives<sp/>value<sp/>n,<sp/>basic<sp/>row<sp/>m<sp/>gives<sp/>value<sp/>-1-m<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3002" refid="lpi__clp_8cpp_1ae40a43f062d28623d57653ddb4719fca" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1ae40a43f062d28623d57653ddb4719fca" kindref="member">SCIPlpiGetBasisInd</ref>(</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bind<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>basis<sp/>indices<sp/>ready<sp/>to<sp/>keep<sp/>number<sp/>of<sp/>rows<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3006"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetBasisInd()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/>assert(bind<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrows<sp/>=<sp/>clp-&gt;numberRows();</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncols<sp/>=<sp/>clp-&gt;numberColumns();</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>idx<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemoryArray(&amp;idx,<sp/>nrows)<sp/>);</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>secondaryStatus<sp/>==<sp/>6,<sp/>clp<sp/>says<sp/>the<sp/>LP<sp/>is<sp/>empty.<sp/>Mose<sp/>likely<sp/>this<sp/>happened,<sp/>because<sp/>the</highlight></codeline>
<codeline lineno="3021"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>matrix<sp/>is<sp/>empty,<sp/>i.e.,<sp/>all<sp/>rows<sp/>were<sp/>redundant/empty.<sp/>In<sp/>this<sp/>case,<sp/>we<sp/>construct<sp/>a<sp/>basis</highlight></codeline>
<codeline lineno="3022"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>consisting<sp/>of<sp/>slack<sp/>variables.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>clp-&gt;secondaryStatus()<sp/>==<sp/>6<sp/>)</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>clp-&gt;getNumElements()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nrows;<sp/>++i)</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx[i]<sp/>=<sp/>ncols<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clp-&gt;getBasics(idx);</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nrows;<sp/>++i)</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>idx[i]<sp/>&lt;<sp/>ncols<sp/>)</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bind[i]<sp/>=<sp/>idx[i];</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bind[i]<sp/>=<sp/>-1<sp/>-<sp/>(idx[i]<sp/>-<sp/>ncols);</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArray(&amp;idx);</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3046"><highlight class="comment">/**<sp/>get<sp/>dense<sp/>row<sp/>of<sp/>inverse<sp/>basis<sp/>matrix<sp/>B^-1</highlight></codeline>
<codeline lineno="3047"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3048"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>The<sp/>LP<sp/>interface<sp/>defines<sp/>slack<sp/>variables<sp/>to<sp/>have<sp/>coefficient<sp/>+1.<sp/>This<sp/>means<sp/>that<sp/>if,<sp/>internally,<sp/>the<sp/>LP<sp/>solver</highlight></codeline>
<codeline lineno="3049"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>a<sp/>-1<sp/>coefficient,<sp/>then<sp/>rows<sp/>associated<sp/>with<sp/>slacks<sp/>variables<sp/>whose<sp/>coefficient<sp/>is<sp/>-1,<sp/>should<sp/>be<sp/>negated;</highlight></codeline>
<codeline lineno="3050"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>also<sp/>the<sp/>explanation<sp/>in<sp/>lpi.h.</highlight></codeline>
<codeline lineno="3051"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3052"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>check<sp/>that<sp/>the<sp/>result<sp/>is<sp/>in<sp/>terms<sp/>of<sp/>the<sp/>LP<sp/>interface<sp/>definition</highlight></codeline>
<codeline lineno="3053"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054" refid="lpi__clp_8cpp_1a9315c551e92d2caa54d42750f1f048cb" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a9315c551e92d2caa54d42750f1f048cb" kindref="member">SCIPlpiGetBInvRow</ref>(</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>coefficients<sp/>of<sp/>the<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>the<sp/>non-zero<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ninds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>indices</highlight></codeline>
<codeline lineno="3060"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>(-1:<sp/>if<sp/>we<sp/>do<sp/>not<sp/>store<sp/>sparsity<sp/>informations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetBInvRow()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;clp<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>coef<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/>r<sp/>&amp;&amp;<sp/>r<sp/>&lt;=<sp/>lpi-&gt;clp-&gt;numberRows()<sp/>);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>only<sp/>return<sp/>dense<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ninds<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ninds<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;getBInvRow(r,<sp/>coef);</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3081"><highlight class="comment">/**<sp/>get<sp/>dense<sp/>column<sp/>of<sp/>inverse<sp/>basis<sp/>matrix<sp/>B^-1</highlight></codeline>
<codeline lineno="3082"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3083"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>The<sp/>LP<sp/>interface<sp/>defines<sp/>slack<sp/>variables<sp/>to<sp/>have<sp/>coefficient<sp/>+1.<sp/>This<sp/>means<sp/>that<sp/>if,<sp/>internally,<sp/>the<sp/>LP<sp/>solver</highlight></codeline>
<codeline lineno="3084"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>a<sp/>-1<sp/>coefficient,<sp/>then<sp/>rows<sp/>associated<sp/>with<sp/>slacks<sp/>variables<sp/>whose<sp/>coefficient<sp/>is<sp/>-1,<sp/>should<sp/>be<sp/>negated;</highlight></codeline>
<codeline lineno="3085"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>also<sp/>the<sp/>explanation<sp/>in<sp/>lpi.h.</highlight></codeline>
<codeline lineno="3086"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3087"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>check<sp/>that<sp/>the<sp/>result<sp/>is<sp/>in<sp/>terms<sp/>of<sp/>the<sp/>LP<sp/>interface<sp/>definition</highlight></codeline>
<codeline lineno="3088"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3089" refid="lpi__clp_8cpp_1a9dda3c2147cbb647cfb0b5d198407525" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a9dda3c2147cbb647cfb0b5d198407525" kindref="member">SCIPlpiGetBInvCol</ref>(</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>number<sp/>of<sp/>B^-1;<sp/>this<sp/>is<sp/>NOT<sp/>the<sp/>number<sp/>of<sp/>the<sp/>column<sp/>in<sp/>the<sp/>LP;</highlight></codeline>
<codeline lineno="3092"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>you<sp/>have<sp/>to<sp/>call<sp/>SCIPlpiGetBasisInd()<sp/>to<sp/>get<sp/>the<sp/>array<sp/>which<sp/>links<sp/>the</highlight></codeline>
<codeline lineno="3093"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>B^-1<sp/>column<sp/>numbers<sp/>to<sp/>the<sp/>row<sp/>and<sp/>column<sp/>numbers<sp/>of<sp/>the<sp/>LP!</highlight></codeline>
<codeline lineno="3094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>c<sp/>must<sp/>be<sp/>between<sp/>0<sp/>and<sp/>nrows-1,<sp/>since<sp/>the<sp/>basis<sp/>has<sp/>the<sp/>size</highlight></codeline>
<codeline lineno="3095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>nrows<sp/>*<sp/>nrows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>coefficients<sp/>of<sp/>the<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>the<sp/>non-zero<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ninds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>indices</highlight></codeline>
<codeline lineno="3099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>(-1:<sp/>if<sp/>we<sp/>do<sp/>not<sp/>store<sp/>sparsity<sp/>informations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetBInvCol()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;clp<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>coef<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/>lpi-&gt;clp-&gt;numberRows()<sp/>);<sp/></highlight><highlight class="comment">/*<sp/>basis<sp/>matrix<sp/>is<sp/>nrows<sp/>*<sp/>nrows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>only<sp/>return<sp/>dense<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ninds<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ninds<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;getBInvCol(c,<sp/>coef);</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3119"><highlight class="comment">/**<sp/>get<sp/>dense<sp/>row<sp/>of<sp/>inverse<sp/>basis<sp/>matrix<sp/>times<sp/>constraint<sp/>matrix<sp/>B^-1<sp/>*<sp/>A</highlight></codeline>
<codeline lineno="3120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3121"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>The<sp/>LP<sp/>interface<sp/>defines<sp/>slack<sp/>variables<sp/>to<sp/>have<sp/>coefficient<sp/>+1.<sp/>This<sp/>means<sp/>that<sp/>if,<sp/>internally,<sp/>the<sp/>LP<sp/>solver</highlight></codeline>
<codeline lineno="3122"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>a<sp/>-1<sp/>coefficient,<sp/>then<sp/>rows<sp/>associated<sp/>with<sp/>slacks<sp/>variables<sp/>whose<sp/>coefficient<sp/>is<sp/>-1,<sp/>should<sp/>be<sp/>negated;</highlight></codeline>
<codeline lineno="3123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>also<sp/>the<sp/>explanation<sp/>in<sp/>lpi.h.</highlight></codeline>
<codeline lineno="3124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3125"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>check<sp/>that<sp/>the<sp/>result<sp/>is<sp/>in<sp/>terms<sp/>of<sp/>the<sp/>LP<sp/>interface<sp/>definition</highlight></codeline>
<codeline lineno="3126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3127" refid="lpi__clp_8cpp_1aa516aed02ad9b303b0d51eb0c7a66f5e" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1aa516aed02ad9b303b0d51eb0c7a66f5e" kindref="member">SCIPlpiGetBInvARow</ref>(</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>binvrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>in<sp/>(A_B)^-1<sp/>from<sp/>prior<sp/>call<sp/>to<sp/>SCIPlpiGetBInvRow(),<sp/>or<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>return<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>the<sp/>non-zero<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ninds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>indices</highlight></codeline>
<codeline lineno="3134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>(-1:<sp/>if<sp/>we<sp/>do<sp/>not<sp/>store<sp/>sparsity<sp/>informations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetBInvARow()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;clp<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>coef<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/>r<sp/>&amp;&amp;<sp/>r<sp/>&lt;=<sp/>lpi-&gt;clp-&gt;numberRows()<sp/>);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>only<sp/>return<sp/>dense<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ninds<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ninds<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;getBInvARow(r,<sp/>coef,<sp/>0);</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3154"><highlight class="comment">/**<sp/>get<sp/>dense<sp/>column<sp/>of<sp/>inverse<sp/>basis<sp/>matrix<sp/>times<sp/>constraint<sp/>matrix<sp/>B^-1<sp/>*<sp/>A</highlight></codeline>
<codeline lineno="3155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3156"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>The<sp/>LP<sp/>interface<sp/>defines<sp/>slack<sp/>variables<sp/>to<sp/>have<sp/>coefficient<sp/>+1.<sp/>This<sp/>means<sp/>that<sp/>if,<sp/>internally,<sp/>the<sp/>LP<sp/>solver</highlight></codeline>
<codeline lineno="3157"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>a<sp/>-1<sp/>coefficient,<sp/>then<sp/>rows<sp/>associated<sp/>with<sp/>slacks<sp/>variables<sp/>whose<sp/>coefficient<sp/>is<sp/>-1,<sp/>should<sp/>be<sp/>negated;</highlight></codeline>
<codeline lineno="3158"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>also<sp/>the<sp/>explanation<sp/>in<sp/>lpi.h.</highlight></codeline>
<codeline lineno="3159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3160"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>check<sp/>that<sp/>the<sp/>result<sp/>is<sp/>in<sp/>terms<sp/>of<sp/>the<sp/>LP<sp/>interface<sp/>definition</highlight></codeline>
<codeline lineno="3161"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162" refid="lpi__clp_8cpp_1a015f424e442e74e4526ca62bdab54de1" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a015f424e442e74e4526ca62bdab54de1" kindref="member">SCIPlpiGetBInvACol</ref>(</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>return<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>the<sp/>non-zero<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ninds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>indices</highlight></codeline>
<codeline lineno="3168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>(-1:<sp/>if<sp/>we<sp/>do<sp/>not<sp/>store<sp/>sparsity<sp/>informations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetBInvACol()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;clp<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>coef<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>0<sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/>lpi-&gt;clp-&gt;numberColumns()<sp/>);</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can<sp/>only<sp/>return<sp/>dense<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ninds<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ninds<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/>ClpSimplex*<sp/>clp<sp/>=<sp/>lpi-&gt;clp;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/>clp-&gt;getBInvACol(c,<sp/>coef);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3189"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3195"><highlight class="comment"><sp/>*<sp/>LP<sp/>State<sp/>Methods</highlight></codeline>
<codeline lineno="3196"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3198"><highlight class="comment">/**@name<sp/>LP<sp/>State<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3199"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3201"><highlight class="comment">/**<sp/>stores<sp/>LPi<sp/>state<sp/>(like<sp/>basis<sp/>information)<sp/>into<sp/>lpistate<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3202" refid="lpi__clp_8cpp_1afe1bc961d0f91cad7222870724175e21" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1afe1bc961d0f91cad7222870724175e21" kindref="member">SCIPlpiGetState</ref>(</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>state<sp/>information<sp/>(like<sp/>basis<sp/>information)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetState()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/>assert(blkmem<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncols<sp/>=<sp/>lpi-&gt;clp-&gt;numberColumns();</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrows<sp/>=<sp/>lpi-&gt;clp-&gt;numberRows();</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/>assert(ncols<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/>assert(nrows<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>lpistate<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>lpistateCreate(lpistate,<sp/>blkmem,<sp/>ncols,<sp/>nrows)<sp/>);</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>enough<sp/>memory<sp/>for<sp/>storing<sp/>uncompressed<sp/>basis<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>ensureCstatMem(lpi,<sp/>ncols)<sp/>);</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>ensureRstatMem(lpi,<sp/>nrows)<sp/>);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>unpacked<sp/>basis<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="lpi__clp_8cpp_1a258aa72f3b645b140c543f0fc7f3f37a" kindref="member">SCIPlpiGetBase</ref>(lpi,<sp/>lpi-&gt;cstat,<sp/>lpi-&gt;rstat)<sp/>);</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pack<sp/>LPi<sp/>state<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/>(*lpistate)-&gt;ncols<sp/>=<sp/>ncols;</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/>(*lpistate)-&gt;nrows<sp/>=<sp/>nrows;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/>lpistatePack(*lpistate,<sp/>lpi-&gt;cstat,<sp/>lpi-&gt;rstat);</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3239"><highlight class="comment">/**<sp/>loads<sp/>LPi<sp/>state<sp/>(like<sp/>basis<sp/>information)<sp/>into<sp/>solver;<sp/>note<sp/>that<sp/>the<sp/>LP<sp/>might<sp/>have<sp/>been<sp/>extended<sp/>with<sp/>additional</highlight></codeline>
<codeline lineno="3240"><highlight class="comment"><sp/>*<sp/><sp/>columns<sp/>and<sp/>rows<sp/>since<sp/>the<sp/>state<sp/>was<sp/>stored<sp/>with<sp/>SCIPlpiGetState()</highlight></codeline>
<codeline lineno="3241"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3242" refid="lpi__clp_8cpp_1af59f56532adbbb974fc3a08280aedf4f" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1af59f56532adbbb974fc3a08280aedf4f" kindref="member">SCIPlpiSetState</ref>(</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*blkmem*/</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LPi<sp/>state<sp/>information<sp/>(like<sp/>basis<sp/>information)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lpncols;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lpnrows;</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiSetState()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/>lpncols<sp/>=<sp/>lpi-&gt;clp-&gt;numberColumns();</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/>lpnrows<sp/>=<sp/>lpi-&gt;clp-&gt;numberRows();</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate-&gt;ncols<sp/>&lt;=<sp/>lpncols);</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate-&gt;nrows<sp/>&lt;=<sp/>lpnrows);</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>enough<sp/>memory<sp/>for<sp/>storing<sp/>uncompressed<sp/>basis<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>ensureCstatMem(lpi,<sp/>lpncols)<sp/>);</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>ensureRstatMem(lpi,<sp/>lpnrows)<sp/>);</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unpack<sp/>LPi<sp/>state<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/>lpistateUnpack(lpistate,<sp/>lpi-&gt;cstat,<sp/>lpi-&gt;rstat);</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extend<sp/>the<sp/>basis<sp/>to<sp/>the<sp/>current<sp/>LP<sp/>beyond<sp/>the<sp/>previously<sp/>existing<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>lpistate-&gt;ncols;<sp/>i<sp/>&lt;<sp/>lpncols;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/>bnd<sp/>=<sp/>(lpi-&gt;clp-&gt;getColLower())[i];</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="lpi__clp_8cpp_1a8c50925f0993643dc0d04e0d1bbe848a" kindref="member">SCIPlpiIsInfinity</ref>(lpi,<sp/><ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(bnd))<sp/>)</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>lower<sp/>bound<sp/>is<sp/>+/-<sp/>infinity<sp/>-&gt;<sp/>try<sp/>upper<sp/>bound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnd<sp/>=<sp/>(lpi-&gt;clp-&gt;getColUpper())[i];</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="lpi__clp_8cpp_1a8c50925f0993643dc0d04e0d1bbe848a" kindref="member">SCIPlpiIsInfinity</ref>(lpi,<sp/><ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(bnd))<sp/>)</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;cstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648ac9fd196bcf1e32bef1f5a2a71b3421bc" kindref="member">SCIP_BASESTAT_ZERO</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>variable<sp/>is<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;cstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a2b5d851810f72ad984abc6b47b852868" kindref="member">SCIP_BASESTAT_UPPER</ref>;<sp/></highlight><highlight class="comment">/*<sp/>use<sp/>finite<sp/>upper<sp/>bound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;cstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648aaf2c277e576d024183ed7949ba947da6" kindref="member">SCIP_BASESTAT_LOWER</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>finite<sp/>lower<sp/>bound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>lpistate-&gt;nrows;<sp/>i<sp/>&lt;<sp/>lpnrows;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;rstat[i]<sp/>=<sp/><ref refid="type__lpi_8h_1ac34513c7d1cc6c3eb46bc9f373d03648a166f9b557960da4bec4a0dbd00c0d7f2" kindref="member">SCIP_BASESTAT_BASIC</ref>;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>load<sp/>basis<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="lpi__clp_8cpp_1a7d9cb745987d79fb87f60739a423c833" kindref="member">SCIPlpiSetBase</ref>(lpi,<sp/>lpi-&gt;cstat,<sp/>lpi-&gt;rstat)<sp/>);</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3295"><highlight class="comment">/**<sp/>clears<sp/>current<sp/>LPi<sp/>state<sp/>(like<sp/>basis<sp/>information)<sp/>of<sp/>the<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3296" refid="lpi__clp_8cpp_1a1d56087500813e24687787cb90da5d93" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a1d56087500813e24687787cb90da5d93" kindref="member">SCIPlpiClearState</ref>(</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiClearState()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;clp-&gt;allSlackBasis(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;validFactorization<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3311"><highlight class="comment">/**<sp/>frees<sp/>LPi<sp/>state<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312" refid="lpi__clp_8cpp_1acfee2d2ea719f54192a11c1e80f5e61e" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1acfee2d2ea719f54192a11c1e80f5e61e" kindref="member">SCIPlpiFreeState</ref>(</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>state<sp/>information<sp/>(like<sp/>basis<sp/>information)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiFreeState()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*lpistate<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpistateFree(lpistate,<sp/>blkmem);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3329"><highlight class="comment">/**<sp/>checks,<sp/>whether<sp/>the<sp/>given<sp/>LP<sp/>state<sp/>contains<sp/>simplex<sp/>basis<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3330" refid="lpi__clp_8cpp_1a8cf134c068da15fe85dfad3d3d0aae2b" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a8cf134c068da15fe85dfad3d3d0aae2b" kindref="member">SCIPlpiHasStateBasis</ref>(</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>state<sp/>information<sp/>(like<sp/>basis<sp/>information)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lpistate<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="3336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3338"><highlight class="comment">/**<sp/>reads<sp/>LP<sp/>state<sp/>(like<sp/>basis<sp/>information)<sp/>from<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3339" refid="lpi__clp_8cpp_1a29c773d7e7763517c0952b9eee9ed7ec" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a29c773d7e7763517c0952b9eee9ed7ec" kindref="member">SCIPlpiReadState</ref>(</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiReadState()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3346"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Read<sp/>a<sp/>basis<sp/>from<sp/>the<sp/>given<sp/>filename,</highlight></codeline>
<codeline lineno="3347"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>returns<sp/>-1<sp/>on<sp/>file<sp/>error,<sp/>0<sp/>if<sp/>no<sp/>values,<sp/>1<sp/>if<sp/>values</highlight></codeline>
<codeline lineno="3348"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;readBasis(fname)<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4728a2c3d0d1498f254a56682cb4e08a" kindref="member">SCIP_READERROR</ref>;</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3355"><highlight class="comment">/**<sp/>writes<sp/>LP<sp/>state<sp/>(like<sp/>basis<sp/>information)<sp/>to<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356" refid="lpi__clp_8cpp_1a6b360b8eb706948179cc3b46fa4df372" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a6b360b8eb706948179cc3b46fa4df372" kindref="member">SCIPlpiWriteState</ref>(</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiWriteState()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3363"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Write<sp/>the<sp/>basis<sp/>in<sp/>MPS<sp/>format<sp/>to<sp/>the<sp/>specified<sp/>file.</highlight></codeline>
<codeline lineno="3364"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>If<sp/>writeValues<sp/>true,<sp/>writes<sp/>values<sp/>of<sp/>structurals</highlight></codeline>
<codeline lineno="3365"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>(and<sp/>adds<sp/>VALUES<sp/>to<sp/>end<sp/>of<sp/>NAME<sp/>card)</highlight></codeline>
<codeline lineno="3366"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3367"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>parameters:</highlight></codeline>
<codeline lineno="3368"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>filename</highlight></codeline>
<codeline lineno="3369"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>bool<sp/>writeValues</highlight></codeline>
<codeline lineno="3370"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>-<sp/>int<sp/>formatType<sp/><sp/>(0<sp/>-<sp/>normal,<sp/>1<sp/>-<sp/>extra<sp/>accuracy,<sp/>2<sp/>-<sp/>IEEE<sp/>hex)</highlight></codeline>
<codeline lineno="3371"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;writeBasis(fname,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0)<sp/>)</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da80c963e65537a7a1e175e8827f5bb740" kindref="member">SCIP_WRITEERROR</ref>;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"></highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3378"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3384"><highlight class="comment"><sp/>*<sp/>LP<sp/>Pricing<sp/>Norms<sp/>Methods</highlight></codeline>
<codeline lineno="3385"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3387"><highlight class="comment">/**@name<sp/>LP<sp/>Pricing<sp/>Norms<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3388"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3389"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3390"><highlight class="comment">/**<sp/>stores<sp/>LPi<sp/>pricing<sp/>norms<sp/>information</highlight></codeline>
<codeline lineno="3391"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>should<sp/>we<sp/>store<sp/>norm<sp/>information?</highlight></codeline>
<codeline lineno="3392"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3393" refid="lpi__clp_8cpp_1a868706bb40dc3fdeb76e81c56c1c4d31" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a868706bb40dc3fdeb76e81c56c1c4d31" kindref="member">SCIPlpiGetNorms</ref>(</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><ref refid="structSCIP__LPiNorms" kindref="compound">SCIP_LPINORMS</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpinorms<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>pricing<sp/>norms<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/>assert(lpinorms<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/>(*lpinorms)<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3406"><highlight class="comment">/**<sp/>loads<sp/>LPi<sp/>pricing<sp/>norms<sp/>into<sp/>solver;<sp/>note<sp/>that<sp/>the<sp/>LP<sp/>might<sp/>have<sp/>been<sp/>extended<sp/>with<sp/>additional</highlight></codeline>
<codeline lineno="3407"><highlight class="comment"><sp/>*<sp/><sp/>columns<sp/>and<sp/>rows<sp/>since<sp/>the<sp/>state<sp/>was<sp/>stored<sp/>with<sp/>SCIPlpiGetNorms()</highlight></codeline>
<codeline lineno="3408"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3409" refid="lpi__clp_8cpp_1ad619ad2a4e65223449f5ab635985b70b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1ad619ad2a4e65223449f5ab635985b70b" kindref="member">SCIPlpiSetNorms</ref>(</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><ref refid="structSCIP__LPiNorms" kindref="compound">SCIP_LPINORMS</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpinorms<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LPi<sp/>pricing<sp/>norms<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/>assert(lpinorms<sp/>==<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>work<sp/>necessary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3421"><highlight class="comment">/**<sp/>frees<sp/>pricing<sp/>norms<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3422" refid="lpi__clp_8cpp_1a640477b756ddb94827c1a4e5e3721d38" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a640477b756ddb94827c1a4e5e3721d38" kindref="member">SCIPlpiFreeNorms</ref>(</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><ref refid="structSCIP__LPiNorms" kindref="compound">SCIP_LPINORMS</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpinorms<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>pricing<sp/>norms<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/>assert(lpinorms<sp/>==<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>work<sp/>necessary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3434"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3440"><highlight class="comment"><sp/>*<sp/>Parameter<sp/>Methods</highlight></codeline>
<codeline lineno="3441"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3443"><highlight class="comment">/**@name<sp/>Parameter<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3444"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3446"><highlight class="comment">/**<sp/>gets<sp/>integer<sp/>parameter<sp/>of<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3447" refid="lpi__clp_8cpp_1a2d82a67789be908b161295f41d02ba8b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a2d82a67789be908b161295f41d02ba8b" kindref="member">SCIPlpiGetIntpar</ref>(</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>parameter<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetIntpar()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/>assert(ival<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>type<sp/>)</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baabf8addc3b5db9eb7280711323285333" kindref="member">SCIP_LPPAR_FROMSCRATCH</ref>:</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ival<sp/>=<sp/>lpi-&gt;startscratch;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba58e15a0d2bb9e631213db974ec701b18" kindref="member">SCIP_LPPAR_SCALING</ref>:</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lpi-&gt;clp-&gt;scalingFlag()<sp/>!=<sp/>0<sp/>)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>-off,<sp/>1<sp/>equilibrium,<sp/>2<sp/>geometric,<sp/>3,<sp/>auto,<sp/>4<sp/>dynamic(later)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ival<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ival<sp/>=<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba0114e2317d0236d43fb3b297ee9aea8d" kindref="member">SCIP_LPPAR_PRICING</ref>:</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ival<sp/>=<sp/>(int)lpi-&gt;pricing;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>pricing<sp/>method<sp/>in<sp/>LPI<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba3a6b49761689f0768535d9edcb26a013" kindref="member">SCIP_LPPAR_LPINFO</ref>:</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ival<sp/>=<sp/>lpi-&gt;clp-&gt;logLevel()<sp/>&gt;<sp/>0<sp/>?<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref><sp/>:<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038bad3a9947367aa599495456cd35502683b" kindref="member">SCIP_LPPAR_LPITLIM</ref>:</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ival<sp/>=<sp/>lpi-&gt;clp-&gt;maximumIterations();</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba9cf2cefbf43816ba1c1e454b50c732fd" kindref="member">SCIP_LPPAR_FASTMIP</ref>:</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ival<sp/>=<sp/>lpi-&gt;fastmip;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" kindref="member">SCIP_PARAMETERUNKNOWN</ref>;</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3490"><highlight class="comment">/**<sp/>sets<sp/>integer<sp/>parameter<sp/>of<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3491" refid="lpi__clp_8cpp_1a8dac6dec76901acef9c18397582c5e9a" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a8dac6dec76901acef9c18397582c5e9a" kindref="member">SCIPlpiSetIntpar</ref>(</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiSetIntpar()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"></highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>pricing<sp/>separately<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>type<sp/>==<sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba0114e2317d0236d43fb3b297ee9aea8d" kindref="member">SCIP_LPPAR_PRICING</ref><sp/>)</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>primal:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>is<sp/>exact<sp/>devex,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>full<sp/>steepest,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>is<sp/>partial<sp/>exact<sp/>devex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>switches<sp/>between<sp/>0<sp/>and<sp/>2<sp/>depending<sp/>on<sp/>factorization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4<sp/>starts<sp/>as<sp/>partial<sp/>dantzig/devex<sp/>but<sp/>then<sp/>may<sp/>switch<sp/>between<sp/>0<sp/>and<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>currently<sp/>(Clp<sp/>1.8)<sp/>default<sp/>is<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>dual:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>is<sp/>uninitialized,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>full,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>is<sp/>partial<sp/>uninitialized,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>starts<sp/>as<sp/>2<sp/>but<sp/>may<sp/>switch<sp/>to<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>currently<sp/>(Clp<sp/>1.8)<sp/>default<sp/>is<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;pricing<sp/>=<sp/>(<ref refid="type__lpi_8h_1a680b3359be1f3e2b0fbcdaa05d219d61" kindref="member">SCIP_PRICING</ref>)ival;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>primalmode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dualmode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>(<ref refid="type__lpi_8h_1a680b3359be1f3e2b0fbcdaa05d219d61" kindref="member">SCIP_PRICING</ref>)ival<sp/>)</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a1579f0b28462ca3030c2ea711509cf11" kindref="member">SCIP_PRICING_AUTO</ref>:</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primalmode<sp/>=<sp/>3;<sp/>dualmode<sp/>=<sp/>3;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a42f5306421531962d1b113eab03e6cf0" kindref="member">SCIP_PRICING_FULL</ref>:</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primalmode<sp/>=<sp/>0;<sp/>dualmode<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a840117e919783bcc69646f544c2db051" kindref="member">SCIP_PRICING_LPIDEFAULT</ref>:</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a270fee7478b8951e2cc4fbefc7b7b477" kindref="member">SCIP_PRICING_STEEP</ref>:</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primalmode<sp/>=<sp/>1;<sp/>dualmode<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a0b1034a38e607455f39eb74ad242bab6" kindref="member">SCIP_PRICING_STEEPQSTART</ref>:</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primalmode<sp/>=<sp/>1;<sp/>dualmode<sp/>=<sp/>2;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1a0483a21478d8f9c8d7c1ba9e3473d775a1e601f75db40f3b48665aa04f5103987" kindref="member">SCIP_PRICING_DEVEX</ref>:</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primalmode<sp/>=<sp/>2;<sp/>dualmode<sp/>=<sp/>3;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;unkown<sp/>pricing<sp/>parameter<sp/>%d!\n&quot;</highlight><highlight class="normal">,<sp/>ival);</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1ad8669395a2a82ed74b9b364f4a310c56" kindref="member">SCIPABORT</ref>();</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4e90bc81f0364ff12e57c3b3e03d315c" kindref="member">SCIP_INVALIDDATA</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e527*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClpPrimalColumnSteepest<sp/>primalpivot(primalmode);</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setPrimalColumnPivotAlgorithm(primalpivot);</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClpDualRowSteepest<sp/>dualpivot(dualmode);</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setDualRowPivotAlgorithm(dualpivot);</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"></highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>type<sp/>)</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baabf8addc3b5db9eb7280711323285333" kindref="member">SCIP_LPPAR_FROMSCRATCH</ref>:</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;startscratch<sp/>=<sp/>ival;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba58e15a0d2bb9e631213db974ec701b18" kindref="member">SCIP_LPPAR_SCALING</ref>:</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;scaling(ival<sp/>==<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref><sp/>?<sp/>3<sp/>:<sp/>0);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>-off,<sp/>1<sp/>equilibrium,<sp/>2<sp/>geometric,<sp/>3,<sp/>auto,<sp/>4<sp/>dynamic(later));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba0114e2317d0236d43fb3b297ee9aea8d" kindref="member">SCIP_LPPAR_PRICING</ref>:</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>should<sp/>not<sp/>happen<sp/>-<sp/>see<sp/>above<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1ad8669395a2a82ed74b9b364f4a310c56" kindref="member">SCIPABORT</ref>();</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da004953b01233fe72cb41c5d218abb858" kindref="member">SCIP_LPERROR</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e527*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba3a6b49761689f0768535d9edcb26a013" kindref="member">SCIP_LPPAR_LPINFO</ref>:</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ival<sp/>==<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref><sp/>||<sp/>ival<sp/>==<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Amount<sp/>of<sp/>print<sp/>out:</highlight></codeline>
<codeline lineno="3562"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>0<sp/>-<sp/>none</highlight></codeline>
<codeline lineno="3563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>1<sp/>-<sp/>just<sp/>final</highlight></codeline>
<codeline lineno="3564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>2<sp/>-<sp/>just<sp/>factorizations</highlight></codeline>
<codeline lineno="3565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>3<sp/>-<sp/>as<sp/>2<sp/>plus<sp/>a<sp/>bit<sp/>more</highlight></codeline>
<codeline lineno="3566"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>4<sp/>-<sp/>verbose</highlight></codeline>
<codeline lineno="3567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>above<sp/>that<sp/>8,16,32<sp/>etc<sp/>just<sp/>for<sp/>selective<sp/>SCIPdebug</highlight></codeline>
<codeline lineno="3568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ival<sp/>)</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setLogLevel(2);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lpi-&gt;clp-&gt;setLogLevel(63);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setLogLevel(0);</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038bad3a9947367aa599495456cd35502683b" kindref="member">SCIP_LPPAR_LPITLIM</ref>:</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setMaximumIterations(ival);</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba9cf2cefbf43816ba1c1e454b50c732fd" kindref="member">SCIP_LPPAR_FASTMIP</ref>:</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ival<sp/>==<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref><sp/>||<sp/>ival<sp/>==<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>);</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ival<sp/>)</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setFastmipClpParameters(lpi);</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsetFastmipClpParameters(lpi);</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" kindref="member">SCIP_PARAMETERUNKNOWN</ref>;</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3592"><highlight class="comment">/**<sp/>gets<sp/>floating<sp/>point<sp/>parameter<sp/>of<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3593" refid="lpi__clp_8cpp_1a07259db5fb0599d063fa4973dc3d5d8e" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a07259db5fb0599d063fa4973dc3d5d8e" kindref="member">SCIPlpiGetRealpar</ref>(</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>parameter<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiGetRealpar()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/>assert(dval<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"></highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>type<sp/>)</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038bac3189a09fce4d5f22435928771524285" kindref="member">SCIP_LPPAR_FEASTOL</ref>:</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*dval<sp/>=<sp/>lpi-&gt;clp-&gt;primalTolerance();</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baa9801355e17b1d3f1c5ed41616285dc5" kindref="member">SCIP_LPPAR_DUALFEASTOL</ref>:</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*dval<sp/>=<sp/>lpi-&gt;clp-&gt;dualTolerance();</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba7a541158135537aa60d3649574621538" kindref="member">SCIP_LPPAR_BARRIERCONVTOL</ref>:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3614"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>/**@todo<sp/>add<sp/>BARRIERCONVTOL<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" kindref="member">SCIP_PARAMETERUNKNOWN</ref>;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba3d88cde8e4c624e49c106d4c98955f10" kindref="member">SCIP_LPPAR_LOBJLIM</ref>:</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;optimizationDirection()<sp/>&gt;<sp/>0<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>minimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dval<sp/>=<sp/>lpi-&gt;clp-&gt;primalObjectiveLimit();</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dval<sp/>=<sp/>lpi-&gt;clp-&gt;dualObjectiveLimit();</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baa9974a8818f5f48d32a5f5912bf085b2" kindref="member">SCIP_LPPAR_UOBJLIM</ref>:</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;optimizationDirection()<sp/>&gt;<sp/>0<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>minimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dval<sp/>=<sp/>lpi-&gt;clp-&gt;dualObjectiveLimit();</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dval<sp/>=<sp/>lpi-&gt;clp-&gt;primalObjectiveLimit();</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba733f4fa15222572d687c1bb753782cf0" kindref="member">SCIP_LPPAR_LPTILIM</ref>:</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*dval<sp/>=<sp/>lpi-&gt;clp-&gt;maximumSeconds();</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" kindref="member">SCIP_PARAMETERUNKNOWN</ref>;</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3638"><highlight class="comment">/**<sp/>sets<sp/>floating<sp/>point<sp/>parameter<sp/>of<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3639" refid="lpi__clp_8cpp_1a468d983f0e77aa23e9563d4c1c1e3db8" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a468d983f0e77aa23e9563d4c1c1e3db8" kindref="member">SCIPlpiSetRealpar</ref>(</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiSetRealpar()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;setting<sp/>parameter<sp/>%d<sp/>to<sp/>value<sp/>%g.\n&quot;</highlight><highlight class="normal">,<sp/>type,<sp/>dval);</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>type<sp/>)</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038bac3189a09fce4d5f22435928771524285" kindref="member">SCIP_LPPAR_FEASTOL</ref>:</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setPrimalTolerance(dval);</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baa9801355e17b1d3f1c5ed41616285dc5" kindref="member">SCIP_LPPAR_DUALFEASTOL</ref>:</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setDualTolerance(dval);</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba7a541158135537aa60d3649574621538" kindref="member">SCIP_LPPAR_BARRIERCONVTOL</ref>:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>/**@todo<sp/>add<sp/>BARRIERCONVTOL<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" kindref="member">SCIP_PARAMETERUNKNOWN</ref>;</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba3d88cde8e4c624e49c106d4c98955f10" kindref="member">SCIP_LPPAR_LOBJLIM</ref>:</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;optimizationDirection()<sp/>&gt;<sp/>0<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>minimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setPrimalObjectiveLimit(dval);</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setDualObjectiveLimit(dval);</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038baa9974a8818f5f48d32a5f5912bf085b2" kindref="member">SCIP_LPPAR_UOBJLIM</ref>:</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;optimizationDirection()<sp/>&gt;<sp/>0<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>minimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setDualObjectiveLimit(dval);</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setPrimalObjectiveLimit(dval);</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__lpi_8h_1ac333f54119f676d19d81bed186b0038ba733f4fa15222572d687c1bb753782cf0" kindref="member">SCIP_LPPAR_LPTILIM</ref>:</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpi-&gt;clp-&gt;setMaximumSeconds(dval);</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" kindref="member">SCIP_PARAMETERUNKNOWN</ref>;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"></highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3683"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3689"><highlight class="comment"><sp/>*<sp/>Numerical<sp/>Methods</highlight></codeline>
<codeline lineno="3690"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3692"><highlight class="comment">/**@name<sp/>Numerical<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3693"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3695"><highlight class="comment">/**<sp/>returns<sp/>value<sp/>treated<sp/>as<sp/>infinity<sp/>in<sp/>the<sp/>LP<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696" refid="lpi__clp_8cpp_1aa11747a31cdd7efe4bfcd32b82d6b325" refkind="member"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="lpi__clp_8cpp_1aa11747a31cdd7efe4bfcd32b82d6b325" kindref="member">SCIPlpiInfinity</ref>(</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lpi*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiInfinity()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>COIN_DBL_MAX;</highlight></codeline>
<codeline lineno="3703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"></highlight></codeline>
<codeline lineno="3705"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3706"><highlight class="comment">/**<sp/>checks<sp/>if<sp/>given<sp/>value<sp/>is<sp/>treated<sp/>as<sp/>infinity<sp/>in<sp/>the<sp/>LP<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3707" refid="lpi__clp_8cpp_1a8c50925f0993643dc0d04e0d1bbe848a" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__clp_8cpp_1a8c50925f0993643dc0d04e0d1bbe848a" kindref="member">SCIPlpiIsInfinity</ref>(</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lpi*/</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiIsInfinity()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>COIN_DBL_MAX);</highlight></codeline>
<codeline lineno="3715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3717"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3723"><highlight class="comment"><sp/>*<sp/>File<sp/>Interface<sp/>Methods</highlight></codeline>
<codeline lineno="3724"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3726"><highlight class="comment">/**@name<sp/>File<sp/>Interface<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3727"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3729"><highlight class="comment">/**<sp/>returns,<sp/>whether<sp/>the<sp/>given<sp/>file<sp/>exists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/>fileExists(</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/>FILE*<sp/>f;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>f<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3746"><highlight class="comment">/**<sp/>reads<sp/>LP<sp/>from<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3747" refid="lpi__clp_8cpp_1a83b58a451300ba484bb9314b35edc63f" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a83b58a451300ba484bb9314b35edc63f" kindref="member">SCIPlpiReadLP</ref>(</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiReadLP()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WARNING:<sp/>can<sp/>only<sp/>read<sp/>mps<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!fileExists(fname)<sp/>)</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da3c613be50ade7386f4f5733304886659" kindref="member">SCIP_NOFILE</ref>;</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3762"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>read<sp/>file<sp/>in<sp/>MPS<sp/>format</highlight></codeline>
<codeline lineno="3763"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>parameters:</highlight></codeline>
<codeline lineno="3764"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>filename</highlight></codeline>
<codeline lineno="3765"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>bool<sp/>keepNames</highlight></codeline>
<codeline lineno="3766"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>bool<sp/>ignoreErrors</highlight></codeline>
<codeline lineno="3767"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;readMps(fname,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>)</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da4728a2c3d0d1498f254a56682cb4e08a" kindref="member">SCIP_READERROR</ref>;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3774"><highlight class="comment">/**<sp/>writes<sp/>LP<sp/>to<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3775" refid="lpi__clp_8cpp_1a311a14142841041e24d522b281124f57" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__clp_8cpp_1a311a14142841041e24d522b281124f57" kindref="member">SCIPlpiWriteLP</ref>(</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>SCIPlpiWriteLP()<sp/>-<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>fname);</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/>assert(lpi-&gt;clp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3785"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>write<sp/>file<sp/>in<sp/>MPS<sp/>format</highlight></codeline>
<codeline lineno="3786"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>parameters:</highlight></codeline>
<codeline lineno="3787"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>filename</highlight></codeline>
<codeline lineno="3788"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>int<sp/>formatType<sp/><sp/>(0<sp/>-<sp/>normal,<sp/>1<sp/>-<sp/>extra<sp/>accuracy,<sp/>2<sp/>-<sp/>IEEE<sp/>hex)</highlight></codeline>
<codeline lineno="3789"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>int<sp/>numberAcross<sp/>(1<sp/>or<sp/>2<sp/>values<sp/>should<sp/>be<sp/>specified<sp/>on<sp/>every<sp/>data<sp/>line<sp/>in<sp/>the<sp/>MPS<sp/>file)</highlight></codeline>
<codeline lineno="3790"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>double<sp/>objSense</highlight></codeline>
<codeline lineno="3791"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lpi-&gt;clp-&gt;writeMps(fname,<sp/>0,<sp/>2,<sp/>lpi-&gt;clp-&gt;optimizationDirection())<sp/>)</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da80c963e65537a7a1e175e8827f5bb740" kindref="member">SCIP_WRITEERROR</ref>;</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3798"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_clp.cpp"/>
  </compounddef>
</doxygen>
