<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="type__cons_8h" kind="file" language="C++">
    <compoundname>type_cons.h</compoundname>
    <includes refid="def_8h" local="yes">scip/def.h</includes>
    <includes refid="type__retcode_8h" local="yes">scip/type_retcode.h</includes>
    <includes refid="type__result_8h" local="yes">scip/type_result.h</includes>
    <includes refid="type__var_8h" local="yes">scip/type_var.h</includes>
    <includes refid="type__sol_8h" local="yes">scip/type_sol.h</includes>
    <includes refid="type__scip_8h" local="yes">scip/type_scip.h</includes>
    <includes refid="type__timing_8h" local="yes">scip/type_timing.h</includes>
    <includes refid="type__heur_8h" local="yes">scip/type_heur.h</includes>
    <includedby refid="pub__cons_8h" local="yes">pub_cons.h</includedby>
    <includedby refid="pub__matrix_8h" local="yes">pub_matrix.h</includedby>
    <includedby refid="pub__var_8h" local="yes">pub_var.h</includedby>
    <includedby refid="scip_8h" local="yes">scip.h</includedby>
    <incdepgraph>
      <node id="19401">
        <label>stdarg.h</label>
      </node>
      <node id="19398">
        <label>assert.h</label>
      </node>
      <node id="19397">
        <label>float.h</label>
      </node>
      <node id="19391">
        <label>type_cons.h</label>
        <link refid="type_cons.h"/>
        <childnode refid="19392" relation="include">
        </childnode>
        <childnode refid="19399" relation="include">
        </childnode>
        <childnode refid="19403" relation="include">
        </childnode>
        <childnode refid="19404" relation="include">
        </childnode>
        <childnode refid="19405" relation="include">
        </childnode>
        <childnode refid="19406" relation="include">
        </childnode>
        <childnode refid="19407" relation="include">
        </childnode>
        <childnode refid="19408" relation="include">
        </childnode>
      </node>
      <node id="19394">
        <label>stdint.h</label>
      </node>
      <node id="19403">
        <label>scip/type_result.h</label>
        <link refid="type__result_8h"/>
      </node>
      <node id="19407">
        <label>scip/type_timing.h</label>
        <link refid="type__timing_8h"/>
        <childnode refid="19392" relation="include">
        </childnode>
        <childnode refid="19403" relation="include">
        </childnode>
        <childnode refid="19406" relation="include">
        </childnode>
      </node>
      <node id="19406">
        <label>scip/type_scip.h</label>
        <link refid="type__scip_8h"/>
      </node>
      <node id="19392">
        <label>scip/def.h</label>
        <link refid="def_8h"/>
        <childnode refid="19393" relation="include">
        </childnode>
        <childnode refid="19394" relation="include">
        </childnode>
        <childnode refid="19395" relation="include">
        </childnode>
        <childnode refid="19396" relation="include">
        </childnode>
        <childnode refid="19397" relation="include">
        </childnode>
        <childnode refid="19398" relation="include">
        </childnode>
        <childnode refid="19399" relation="include">
        </childnode>
        <childnode refid="19400" relation="include">
        </childnode>
      </node>
      <node id="19396">
        <label>limits.h</label>
      </node>
      <node id="19408">
        <label>scip/type_heur.h</label>
        <link refid="type__heur_8h"/>
        <childnode refid="19392" relation="include">
        </childnode>
        <childnode refid="19406" relation="include">
        </childnode>
        <childnode refid="19403" relation="include">
        </childnode>
        <childnode refid="19407" relation="include">
        </childnode>
      </node>
      <node id="19405">
        <label>scip/type_sol.h</label>
        <link refid="type__sol_8h"/>
      </node>
      <node id="19395">
        <label>math.h</label>
      </node>
      <node id="19399">
        <label>scip/type_retcode.h</label>
        <link refid="type__retcode_8h"/>
      </node>
      <node id="19400">
        <label>scip/pub_message.h</label>
        <link refid="pub__message_8h"/>
        <childnode refid="19401" relation="include">
        </childnode>
        <childnode refid="19392" relation="include">
        </childnode>
        <childnode refid="19402" relation="include">
        </childnode>
      </node>
      <node id="19402">
        <label>scip/type_message.h</label>
        <link refid="type__message_8h"/>
        <childnode refid="19393" relation="include">
        </childnode>
      </node>
      <node id="19393">
        <label>stdio.h</label>
      </node>
      <node id="19404">
        <label>scip/type_var.h</label>
        <link refid="type__var_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="19498">
        <label>heur_zeroobj.h</label>
        <link refid="heur__zeroobj_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19543">
        <label>reader_pip.h</label>
        <link refid="reader__pip_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19458">
        <label>heur_clique.h</label>
        <link refid="heur__clique_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19510">
        <label>presol_domcol.h</label>
        <link refid="presol__domcol_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19487">
        <label>heur_shiftandpropagate.h</label>
        <link refid="heur__shiftandpropagate_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19558">
        <label>sepa_intobj.h</label>
        <link refid="sepa__intobj_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19425">
        <label>compr_largestrepr.h</label>
        <link refid="compr__largestrepr_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19451">
        <label>cons_varbound.h</label>
        <link refid="cons__varbound_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19415">
        <label>branch_distribution.h</label>
        <link refid="branch__distribution_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19427">
        <label>cons_abspower.h</label>
        <link refid="cons__abspower_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19488">
        <label>heur_shifting.h</label>
        <link refid="heur__shifting_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19452">
        <label>cons_xor.h</label>
        <link refid="cons__xor_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19446">
        <label>cons_setppc.h</label>
        <link refid="cons__setppc_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19562">
        <label>sepa_strongcg.h</label>
        <link refid="sepa__strongcg_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19497">
        <label>heur_veclendiving.h</label>
        <link refid="heur__veclendiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19556">
        <label>sepa_gomory.h</label>
        <link refid="sepa__gomory_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19522">
        <label>prop_genvbounds.h</label>
        <link refid="prop__genvbounds_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19437">
        <label>cons_knapsack.h</label>
        <link refid="cons__knapsack_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19463">
        <label>heur_dualval.h</label>
        <link refid="heur__dualval_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19467">
        <label>heur_guideddiving.h</label>
        <link refid="heur__guideddiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19505">
        <label>nodesel_restartdfs.h</label>
        <link refid="nodesel__restartdfs_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19409">
        <label>type_cons.h</label>
        <link refid="type_cons.h"/>
        <childnode refid="19410" relation="include">
        </childnode>
        <childnode refid="19564" relation="include">
        </childnode>
        <childnode refid="19565" relation="include">
        </childnode>
        <childnode refid="19411" relation="include">
        </childnode>
      </node>
      <node id="19481">
        <label>heur_randrounding.h</label>
        <link refid="heur__randrounding_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19545">
        <label>reader_rlp.h</label>
        <link refid="reader__rlp_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19515">
        <label>presol_implics.h</label>
        <link refid="presol__implics_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19480">
        <label>heur_pscostdiving.h</label>
        <link refid="heur__pscostdiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19438">
        <label>cons_linear.h</label>
        <link refid="cons__linear_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19483">
        <label>heur_reoptsols.h</label>
        <link refid="heur__reoptsols_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19511">
        <label>presol_dualagg.h</label>
        <link refid="presol__dualagg_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19523">
        <label>prop_obbt.h</label>
        <link refid="prop__obbt_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19553">
        <label>sepa_disjunctive.h</label>
        <link refid="sepa__disjunctive_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19491">
        <label>heur_trivial.h</label>
        <link refid="heur__trivial_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19444">
        <label>cons_pseudoboolean.h</label>
        <link refid="cons__pseudoboolean_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19514">
        <label>presol_implfree.h</label>
        <link refid="presol__implfree_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19494">
        <label>heur_twoopt.h</label>
        <link refid="heur__twoopt_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19410">
        <label>pub_cons.h</label>
        <link refid="pub__cons_8h"/>
        <childnode refid="19411" relation="include">
        </childnode>
      </node>
      <node id="19541">
        <label>reader_osil.h</label>
        <link refid="reader__osil_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19495">
        <label>heur_undercover.h</label>
        <link refid="heur__undercover_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19439">
        <label>cons_linking.h</label>
        <link refid="cons__linking_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19563">
        <label>sepa_zerohalf.h</label>
        <link refid="sepa__zerohalf_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19557">
        <label>sepa_impliedbounds.h</label>
        <link refid="sepa__impliedbounds_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19472">
        <label>heur_localbranching.h</label>
        <link refid="heur__localbranching_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19555">
        <label>sepa_flowcover.h</label>
        <link refid="sepa__flowcover_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19473">
        <label>heur_mutation.h</label>
        <link refid="heur__mutation_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19431">
        <label>cons_conjunction.h</label>
        <link refid="cons__conjunction_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19536">
        <label>reader_fzn.h</label>
        <link refid="reader__fzn_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19492">
        <label>heur_trivialnegation.h</label>
        <link refid="heur__trivialnegation_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19503">
        <label>nodesel_estimate.h</label>
        <link refid="nodesel__estimate_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19550">
        <label>sepa_clique.h</label>
        <link refid="sepa__clique_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19554">
        <label>sepa_eccuts.h</label>
        <link refid="sepa__eccuts_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19516">
        <label>presol_inttobinary.h</label>
        <link refid="presol__inttobinary_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19460">
        <label>heur_crossover.h</label>
        <link refid="heur__crossover_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19478">
        <label>heur_oneopt.h</label>
        <link refid="heur__oneopt_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19531">
        <label>reader_ccg.h</label>
        <link refid="reader__ccg_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19496">
        <label>heur_vbounds.h</label>
        <link refid="heur__vbounds_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19561">
        <label>sepa_rapidlearning.h</label>
        <link refid="sepa__rapidlearning_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19490">
        <label>heur_subnlp.h</label>
        <link refid="heur__subnlp_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19530">
        <label>reader_bnd.h</label>
        <link refid="reader__bnd_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19509">
        <label>presol_convertinttobin.h</label>
        <link refid="presol__convertinttobin_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19454">
        <label>disp_default.h</label>
        <link refid="disp__default_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19520">
        <label>presol_tworowbnd.h</label>
        <link refid="presol__tworowbnd_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19429">
        <label>cons_bivariate.h</label>
        <link refid="cons__bivariate_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19547">
        <label>reader_wbo.h</label>
        <link refid="reader__wbo_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19461">
        <label>heur_dins.h</label>
        <link refid="heur__dins_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19432">
        <label>cons_countsols.h</label>
        <link refid="cons__countsols_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19504">
        <label>nodesel_hybridestim.h</label>
        <link refid="nodesel__hybridestim_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19449">
        <label>cons_sos2.h</label>
        <link refid="cons__sos2_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19542">
        <label>reader_pbm.h</label>
        <link refid="reader__pbm_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19476">
        <label>heur_octane.h</label>
        <link refid="heur__octane_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19417">
        <label>branch_inference.h</label>
        <link refid="branch__inference_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19564">
        <label>pub_matrix.h</label>
        <link refid="pub__matrix_8h"/>
      </node>
      <node id="19423">
        <label>branch_random.h</label>
        <link refid="branch__random_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19499">
        <label>heur_zirounding.h</label>
        <link refid="heur__zirounding_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19524">
        <label>prop_probing.h</label>
        <link refid="prop__probing_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19450">
        <label>cons_superindicator.h</label>
        <link refid="cons__superindicator_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19544">
        <label>reader_ppm.h</label>
        <link refid="reader__ppm_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19539">
        <label>reader_mps.h</label>
        <link refid="reader__mps_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19552">
        <label>sepa_cmir.h</label>
        <link refid="sepa__cmir_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19532">
        <label>reader_cip.h</label>
        <link refid="reader__cip_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19413">
        <label>scipdefplugins.h</label>
        <link refid="scipdefplugins_8h"/>
      </node>
      <node id="19479">
        <label>heur_proximity.h</label>
        <link refid="heur__proximity_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19424">
        <label>branch_relpscost.h</label>
        <link refid="branch__relpscost_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19493">
        <label>heur_trysol.h</label>
        <link refid="heur__trysol_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19485">
        <label>heur_rootsoldiving.h</label>
        <link refid="heur__rootsoldiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19421">
        <label>branch_nodereopt.h</label>
        <link refid="branch__nodereopt_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19560">
        <label>sepa_oddcycle.h</label>
        <link refid="sepa__oddcycle_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19441">
        <label>cons_nonlinear.h</label>
        <link refid="cons__nonlinear_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19422">
        <label>branch_pscost.h</label>
        <link refid="branch__pscost_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19500">
        <label>nodesel_bfs.h</label>
        <link refid="nodesel__bfs_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19420">
        <label>branch_multaggr.h</label>
        <link refid="branch__multaggr_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19436">
        <label>cons_integral.h</label>
        <link refid="cons__integral_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19528">
        <label>prop_vbounds.h</label>
        <link refid="prop__vbounds_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19529">
        <label>pub_dive.h</label>
        <link refid="pub__dive_8h"/>
      </node>
      <node id="19465">
        <label>heur_fixandinfer.h</label>
        <link refid="heur__fixandinfer_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19428">
        <label>cons_and.h</label>
        <link refid="cons__and_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19412">
        <label>branch_allfullstrong.h</label>
        <link refid="branch__allfullstrong_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19506">
        <label>nodesel_uct.h</label>
        <link refid="nodesel__uct_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19484">
        <label>heur_rins.h</label>
        <link refid="heur__rins_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19470">
        <label>heur_intshifting.h</label>
        <link refid="heur__intshifting_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19426">
        <label>compr_weakcompr.h</label>
        <link refid="compr__weakcompr_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19418">
        <label>branch_leastinf.h</label>
        <link refid="branch__leastinf_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19448">
        <label>cons_sos1.h</label>
        <link refid="cons__sos1_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19502">
        <label>nodesel_dfs.h</label>
        <link refid="nodesel__dfs_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19459">
        <label>heur_coefdiving.h</label>
        <link refid="heur__coefdiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19501">
        <label>nodesel_breadthfirst.h</label>
        <link refid="nodesel__breadthfirst_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19525">
        <label>prop_pseudoobj.h</label>
        <link refid="prop__pseudoobj_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19411">
        <label>scip.h</label>
        <link refid="scip_8h"/>
        <childnode refid="19412" relation="include">
        </childnode>
        <childnode refid="19414" relation="include">
        </childnode>
        <childnode refid="19415" relation="include">
        </childnode>
        <childnode refid="19416" relation="include">
        </childnode>
        <childnode refid="19417" relation="include">
        </childnode>
        <childnode refid="19418" relation="include">
        </childnode>
        <childnode refid="19419" relation="include">
        </childnode>
        <childnode refid="19420" relation="include">
        </childnode>
        <childnode refid="19421" relation="include">
        </childnode>
        <childnode refid="19422" relation="include">
        </childnode>
        <childnode refid="19423" relation="include">
        </childnode>
        <childnode refid="19424" relation="include">
        </childnode>
        <childnode refid="19425" relation="include">
        </childnode>
        <childnode refid="19426" relation="include">
        </childnode>
        <childnode refid="19427" relation="include">
        </childnode>
        <childnode refid="19428" relation="include">
        </childnode>
        <childnode refid="19429" relation="include">
        </childnode>
        <childnode refid="19430" relation="include">
        </childnode>
        <childnode refid="19431" relation="include">
        </childnode>
        <childnode refid="19432" relation="include">
        </childnode>
        <childnode refid="19433" relation="include">
        </childnode>
        <childnode refid="19434" relation="include">
        </childnode>
        <childnode refid="19435" relation="include">
        </childnode>
        <childnode refid="19436" relation="include">
        </childnode>
        <childnode refid="19437" relation="include">
        </childnode>
        <childnode refid="19438" relation="include">
        </childnode>
        <childnode refid="19439" relation="include">
        </childnode>
        <childnode refid="19440" relation="include">
        </childnode>
        <childnode refid="19441" relation="include">
        </childnode>
        <childnode refid="19442" relation="include">
        </childnode>
        <childnode refid="19443" relation="include">
        </childnode>
        <childnode refid="19444" relation="include">
        </childnode>
        <childnode refid="19445" relation="include">
        </childnode>
        <childnode refid="19446" relation="include">
        </childnode>
        <childnode refid="19447" relation="include">
        </childnode>
        <childnode refid="19448" relation="include">
        </childnode>
        <childnode refid="19449" relation="include">
        </childnode>
        <childnode refid="19450" relation="include">
        </childnode>
        <childnode refid="19451" relation="include">
        </childnode>
        <childnode refid="19452" relation="include">
        </childnode>
        <childnode refid="19453" relation="include">
        </childnode>
        <childnode refid="19454" relation="include">
        </childnode>
        <childnode refid="19455" relation="include">
        </childnode>
        <childnode refid="19456" relation="include">
        </childnode>
        <childnode refid="19457" relation="include">
        </childnode>
        <childnode refid="19458" relation="include">
        </childnode>
        <childnode refid="19459" relation="include">
        </childnode>
        <childnode refid="19460" relation="include">
        </childnode>
        <childnode refid="19461" relation="include">
        </childnode>
        <childnode refid="19462" relation="include">
        </childnode>
        <childnode refid="19463" relation="include">
        </childnode>
        <childnode refid="19464" relation="include">
        </childnode>
        <childnode refid="19465" relation="include">
        </childnode>
        <childnode refid="19466" relation="include">
        </childnode>
        <childnode refid="19467" relation="include">
        </childnode>
        <childnode refid="19468" relation="include">
        </childnode>
        <childnode refid="19469" relation="include">
        </childnode>
        <childnode refid="19470" relation="include">
        </childnode>
        <childnode refid="19471" relation="include">
        </childnode>
        <childnode refid="19472" relation="include">
        </childnode>
        <childnode refid="19473" relation="include">
        </childnode>
        <childnode refid="19474" relation="include">
        </childnode>
        <childnode refid="19475" relation="include">
        </childnode>
        <childnode refid="19476" relation="include">
        </childnode>
        <childnode refid="19477" relation="include">
        </childnode>
        <childnode refid="19478" relation="include">
        </childnode>
        <childnode refid="19479" relation="include">
        </childnode>
        <childnode refid="19480" relation="include">
        </childnode>
        <childnode refid="19481" relation="include">
        </childnode>
        <childnode refid="19482" relation="include">
        </childnode>
        <childnode refid="19483" relation="include">
        </childnode>
        <childnode refid="19484" relation="include">
        </childnode>
        <childnode refid="19485" relation="include">
        </childnode>
        <childnode refid="19486" relation="include">
        </childnode>
        <childnode refid="19487" relation="include">
        </childnode>
        <childnode refid="19488" relation="include">
        </childnode>
        <childnode refid="19489" relation="include">
        </childnode>
        <childnode refid="19490" relation="include">
        </childnode>
        <childnode refid="19491" relation="include">
        </childnode>
        <childnode refid="19492" relation="include">
        </childnode>
        <childnode refid="19493" relation="include">
        </childnode>
        <childnode refid="19494" relation="include">
        </childnode>
        <childnode refid="19495" relation="include">
        </childnode>
        <childnode refid="19496" relation="include">
        </childnode>
        <childnode refid="19497" relation="include">
        </childnode>
        <childnode refid="19498" relation="include">
        </childnode>
        <childnode refid="19499" relation="include">
        </childnode>
        <childnode refid="19500" relation="include">
        </childnode>
        <childnode refid="19501" relation="include">
        </childnode>
        <childnode refid="19502" relation="include">
        </childnode>
        <childnode refid="19503" relation="include">
        </childnode>
        <childnode refid="19504" relation="include">
        </childnode>
        <childnode refid="19505" relation="include">
        </childnode>
        <childnode refid="19506" relation="include">
        </childnode>
        <childnode refid="19507" relation="include">
        </childnode>
        <childnode refid="19508" relation="include">
        </childnode>
        <childnode refid="19509" relation="include">
        </childnode>
        <childnode refid="19510" relation="include">
        </childnode>
        <childnode refid="19511" relation="include">
        </childnode>
        <childnode refid="19512" relation="include">
        </childnode>
        <childnode refid="19513" relation="include">
        </childnode>
        <childnode refid="19514" relation="include">
        </childnode>
        <childnode refid="19515" relation="include">
        </childnode>
        <childnode refid="19516" relation="include">
        </childnode>
        <childnode refid="19517" relation="include">
        </childnode>
        <childnode refid="19518" relation="include">
        </childnode>
        <childnode refid="19519" relation="include">
        </childnode>
        <childnode refid="19520" relation="include">
        </childnode>
        <childnode refid="19521" relation="include">
        </childnode>
        <childnode refid="19522" relation="include">
        </childnode>
        <childnode refid="19523" relation="include">
        </childnode>
        <childnode refid="19524" relation="include">
        </childnode>
        <childnode refid="19525" relation="include">
        </childnode>
        <childnode refid="19526" relation="include">
        </childnode>
        <childnode refid="19527" relation="include">
        </childnode>
        <childnode refid="19528" relation="include">
        </childnode>
        <childnode refid="19529" relation="include">
        </childnode>
        <childnode refid="19530" relation="include">
        </childnode>
        <childnode refid="19531" relation="include">
        </childnode>
        <childnode refid="19532" relation="include">
        </childnode>
        <childnode refid="19533" relation="include">
        </childnode>
        <childnode refid="19534" relation="include">
        </childnode>
        <childnode refid="19535" relation="include">
        </childnode>
        <childnode refid="19536" relation="include">
        </childnode>
        <childnode refid="19537" relation="include">
        </childnode>
        <childnode refid="19538" relation="include">
        </childnode>
        <childnode refid="19539" relation="include">
        </childnode>
        <childnode refid="19540" relation="include">
        </childnode>
        <childnode refid="19541" relation="include">
        </childnode>
        <childnode refid="19542" relation="include">
        </childnode>
        <childnode refid="19543" relation="include">
        </childnode>
        <childnode refid="19544" relation="include">
        </childnode>
        <childnode refid="19545" relation="include">
        </childnode>
        <childnode refid="19546" relation="include">
        </childnode>
        <childnode refid="19547" relation="include">
        </childnode>
        <childnode refid="19548" relation="include">
        </childnode>
        <childnode refid="19413" relation="include">
        </childnode>
        <childnode refid="19549" relation="include">
        </childnode>
        <childnode refid="19550" relation="include">
        </childnode>
        <childnode refid="19551" relation="include">
        </childnode>
        <childnode refid="19552" relation="include">
        </childnode>
        <childnode refid="19553" relation="include">
        </childnode>
        <childnode refid="19554" relation="include">
        </childnode>
        <childnode refid="19555" relation="include">
        </childnode>
        <childnode refid="19556" relation="include">
        </childnode>
        <childnode refid="19557" relation="include">
        </childnode>
        <childnode refid="19558" relation="include">
        </childnode>
        <childnode refid="19559" relation="include">
        </childnode>
        <childnode refid="19560" relation="include">
        </childnode>
        <childnode refid="19561" relation="include">
        </childnode>
        <childnode refid="19562" relation="include">
        </childnode>
        <childnode refid="19563" relation="include">
        </childnode>
      </node>
      <node id="19549">
        <label>sepa_cgmip.h</label>
        <link refid="sepa__cgmip_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19540">
        <label>reader_opb.h</label>
        <link refid="reader__opb_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19534">
        <label>reader_diff.h</label>
        <link refid="reader__diff_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19474">
        <label>heur_nlpdiving.h</label>
        <link refid="heur__nlpdiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19416">
        <label>branch_fullstrong.h</label>
        <link refid="branch__fullstrong_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19537">
        <label>reader_gms.h</label>
        <link refid="reader__gms_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19513">
        <label>presol_gateextraction.h</label>
        <link refid="presol__gateextraction_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19447">
        <label>cons_soc.h</label>
        <link refid="cons__soc_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19551">
        <label>sepa_closecuts.h</label>
        <link refid="sepa__closecuts_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19508">
        <label>presol_components.h</label>
        <link refid="presol__components_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19440">
        <label>cons_logicor.h</label>
        <link refid="cons__logicor_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19535">
        <label>reader_fix.h</label>
        <link refid="reader__fix_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19419">
        <label>branch_mostinf.h</label>
        <link refid="branch__mostinf_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19445">
        <label>cons_quadratic.h</label>
        <link refid="cons__quadratic_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19466">
        <label>heur_fracdiving.h</label>
        <link refid="heur__fracdiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19533">
        <label>reader_cnf.h</label>
        <link refid="reader__cnf_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19512">
        <label>presol_dualinfer.h</label>
        <link refid="presol__dualinfer_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19453">
        <label>dialog_default.h</label>
        <link refid="dialog__default_8h"/>
      </node>
      <node id="19482">
        <label>heur_rens.h</label>
        <link refid="heur__rens_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19519">
        <label>presol_trivial.h</label>
        <link refid="presol__trivial_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19517">
        <label>presol_redvub.h</label>
        <link refid="presol__redvub_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19489">
        <label>heur_simplerounding.h</label>
        <link refid="heur__simplerounding_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19457">
        <label>heur_bound.h</label>
        <link refid="heur__bound_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19518">
        <label>presol_stuffing.h</label>
        <link refid="presol__stuffing_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19456">
        <label>heur_actconsdiving.h</label>
        <link refid="heur__actconsdiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19548">
        <label>reader_zpl.h</label>
        <link refid="reader__zpl_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19435">
        <label>cons_indicator.h</label>
        <link refid="cons__indicator_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19434">
        <label>cons_disjunction.h</label>
        <link refid="cons__disjunction_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19475">
        <label>heur_objpscostdiving.h</label>
        <link refid="heur__objpscostdiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19521">
        <label>prop_dualfix.h</label>
        <link refid="prop__dualfix_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19538">
        <label>reader_lp.h</label>
        <link refid="reader__lp_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19469">
        <label>heur_intdiving.h</label>
        <link refid="heur__intdiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19433">
        <label>cons_cumulative.h</label>
        <link refid="cons__cumulative_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19471">
        <label>heur_linesearchdiving.h</label>
        <link refid="heur__linesearchdiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19462">
        <label>heur_distributiondiving.h</label>
        <link refid="heur__distributiondiving_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19559">
        <label>sepa_mcf.h</label>
        <link refid="sepa__mcf_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19565">
        <label>pub_var.h</label>
        <link refid="pub__var_8h"/>
        <childnode refid="19411" relation="include">
        </childnode>
      </node>
      <node id="19507">
        <label>presol_boundshift.h</label>
        <link refid="presol__boundshift_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19527">
        <label>prop_rootredcost.h</label>
        <link refid="prop__rootredcost_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19442">
        <label>cons_or.h</label>
        <link refid="cons__or_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19464">
        <label>heur_feaspump.h</label>
        <link refid="heur__feaspump_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19443">
        <label>cons_orbitope.h</label>
        <link refid="cons__orbitope_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19526">
        <label>prop_redcost.h</label>
        <link refid="prop__redcost_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19414">
        <label>branch_cloud.h</label>
        <link refid="branch__cloud_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19430">
        <label>cons_bounddisjunction.h</label>
        <link refid="cons__bounddisjunction_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19477">
        <label>heur_ofins.h</label>
        <link refid="heur__ofins_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19486">
        <label>heur_rounding.h</label>
        <link refid="heur__rounding_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19455">
        <label>event_softtimelimit.h</label>
        <link refid="event__softtimelimit_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19468">
        <label>heur_indicator.h</label>
        <link refid="heur__indicator_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
      <node id="19546">
        <label>reader_sol.h</label>
        <link refid="reader__sol_8h"/>
        <childnode refid="19413" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="type__cons_8h_1ad1fbf03b7692ccc565b2107db3965c27" prot="public" static="no">
        <name>SCIP_DECL_CONSHDLRCOPY</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>* valid)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copy method for constraint handler plugins (called when SCIP copies plugins)</para><para>If the copy process was a one to one the valid pointer can set to TRUE. Otherwise, you have to set this pointer to FALSE. In case all problem defining objects (constraint handlers and variable pricers) return a valid TRUE for all their copying calls, SCIP assumes that it is a overall one to one copy of the original instance. In this case any reductions made in the copied SCIP instance can be transfer to the original SCIP instance. If the valid pointer is set to TRUE and it was not one to one copy, it might happen that optimal solutions are cut off.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>valid : was the copying process valid? </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="66" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1ae374fa77c1e2ea90677f3eae2290b1c0" prot="public" static="no">
        <name>SCIP_DECL_CONSFREE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>destructor of constraint handler to free constraint handler data (called when SCIP is exiting)</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="74" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1ac2af95eeab68bf76a636f203d49838e2" prot="public" static="no">
        <name>SCIP_DECL_CONSINIT</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>initialization method of constraint handler (called after problem was transformed)</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints in transformed problem</para></listitem><listitem><para>nconss : number of constraints in transformed problem </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="84" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a3dbd78915084e4048a6fd2b2ec7debc8" prot="public" static="no">
        <name>SCIP_DECL_CONSEXIT</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deinitialization method of constraint handler (called before transformed problem is freed)</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints in transformed problem</para></listitem><listitem><para>nconss : number of constraints in transformed problem </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="94" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a2a1d22ad8250529ce6a21727f777bb92" prot="public" static="no">
        <name>SCIP_DECL_CONSINITPRE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>presolving initialization method of constraint handler (called when presolving is about to begin)</para><para>This method is called when the presolving process is about to begin, even if presolving is turned off. The constraint handler may use this call to initialize its data structures.</para><para>Necessary modifications that have to be performed even if presolving is turned off should be done here or in the presolving deinitialization call (<ref refid="type__cons_8h_1ab2b9fcf8af077942042885ba9225bda3" kindref="member">SCIP_DECL_CONSEXITPRE()</ref>).</para><para><simplesect kind="note"><para>Note that the constraint array might contain constraints that were created but not added to the problem. Constraints that are not added, i.e., for which <ref refid="pub__cons_8h_1acf4027a222bb2468a0f2654270ed5275" kindref="member">SCIPconsIsAdded()</ref> returns FALSE, cannot be used for problem reductions.</para></simplesect>
input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints in transformed problem</para></listitem><listitem><para>nconss : number of constraints in transformed problem </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="114" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1ab2b9fcf8af077942042885ba9225bda3" prot="public" static="no">
        <name>SCIP_DECL_CONSEXITPRE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>presolving deinitialization method of constraint handler (called after presolving has been finished)</para><para>This method is called after the presolving has been finished, even if presolving is turned off. The constraint handler may use this call e.g. to clean up or modify its data structures.</para><para>Necessary modifications that have to be performed even if presolving is turned off should be done here or in the presolving initialization call (<ref refid="type__cons_8h_1a2a1d22ad8250529ce6a21727f777bb92" kindref="member">SCIP_DECL_CONSINITPRE()</ref>).</para><para>Besides necessary modifications and clean up, no time consuming operations should be performed, especially if the problem has already been solved. Use the method <ref refid="scip_8h_1adfa940b47f19c0863d400b554378ef45" kindref="member">SCIPgetStatus()</ref>, which in this case returns SCIP_STATUS_OPTIMAL, SCIP_STATUS_INFEASIBLE, SCIP_STATUS_UNBOUNDED, or SCIP_STATUS_INFORUNBD.</para><para><simplesect kind="note"><para>Note that the constraint array might contain constraints that were created but not added to the problem. Constraints that are not added, i.e., for which <ref refid="pub__cons_8h_1acf4027a222bb2468a0f2654270ed5275" kindref="member">SCIPconsIsAdded()</ref> returns FALSE, cannot be used for problem reductions.</para></simplesect>
input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : final array of constraints in transformed problem</para></listitem><listitem><para>nconss : final number of constraints in transformed problem </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="138" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a4969f04dfc1dbc086baa57f4cf601e2a" prot="public" static="no">
        <name>SCIP_DECL_CONSINITSOL</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>solving process initialization method of constraint handler (called when branch and bound process is about to begin)</para><para>This method is called when the presolving was finished and the branch and bound process is about to begin. The constraint handler may use this call to initialize its branch and bound specific data.</para><para>Besides necessary modifications and clean up, no time consuming operations should be performed, especially if the problem has already been solved. Use the method <ref refid="scip_8h_1adfa940b47f19c0863d400b554378ef45" kindref="member">SCIPgetStatus()</ref>, which in this case returns SCIP_STATUS_OPTIMAL, SCIP_STATUS_INFEASIBLE, SCIP_STATUS_UNBOUNDED, or SCIP_STATUS_INFORUNBD.</para><para><simplesect kind="note"><para>Note that the constraint array might contain constraints that were created but not added to the problem. Constraints that are not added, i.e., for which <ref refid="pub__cons_8h_1acf4027a222bb2468a0f2654270ed5275" kindref="member">SCIPconsIsAdded()</ref> returns FALSE, cannot be used for problem reductions.</para></simplesect>
input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints of the constraint handler</para></listitem><listitem><para>nconss : number of constraints of the constraint handler </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="159" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1ade732129e1c1e829e1cf738c3eadb8e5" prot="public" static="no">
        <name>SCIP_DECL_CONSEXITSOL</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> restart)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>solving process deinitialization method of constraint handler (called before branch and bound process data is freed)</para><para>This method is called before the branch and bound process is freed. The constraint handler should use this call to clean up its branch and bound data, in particular to release all LP rows that he has created or captured.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints of the constraint handler</para></listitem><listitem><para>nconss : number of constraints of the constraint handler</para></listitem><listitem><para>restart : was this exit solve call triggered by a restart? </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="174" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a356ccbf8a6ac344c2b7fad0ad1e288b9" prot="public" static="no">
        <name>SCIP_DECL_CONSDELETE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* cons, <ref refid="type__cons_8h_1ac55797a3c65d3ec89dd29921d953c36e" kindref="member">SCIP_CONSDATA</ref>** consdata)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees specific constraint data</para><para><simplesect kind="warning"><para>There may exist unprocessed events. For example, a variable&apos;s bound may have been already changed, but the corresponding bound change event was not yet processed.</para></simplesect>
input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>cons : the constraint belonging to the constraint data</para></listitem><listitem><para>consdata : pointer to the constraint data to free </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="187" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a9310b78181f94e2923716f4e6e02dda7" prot="public" static="no">
        <name>SCIP_DECL_CONSTRANS</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* sourcecons, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** targetcons)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>transforms constraint data into data belonging to the transformed problem</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>sourcecons : source constraint to transform</para></listitem><listitem><para>targetcons : pointer to store created target constraint </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="197" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1aaa3496c95e47e4149a7e8dc629d3352a" prot="public" static="no">
        <name>SCIP_DECL_CONSINITLP</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LP initialization method of constraint handler (called before the initial LP relaxation at a node is solved)</para><para>Puts the LP relaxations of all &quot;initial&quot; constraints into the LP. The method should put a canonic LP relaxation of all given constraints to the LP with calls to <ref refid="scip_8h_1a5638b45263235d103b43926600601175" kindref="member">SCIPaddCut()</ref>.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints to process</para></listitem><listitem><para>nconss : number of constraints to process </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="210" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a517c2525fd8d67fb72c51b74860bde48" prot="public" static="no">
        <name>SCIP_DECL_CONSSEPALP</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, \
      int nconss, int nusefulconss, <ref refid="type__result_8h_1a6e9810021a07d59fc706fab113e634bb" kindref="member">SCIP_RESULT</ref>* result)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>separation method of constraint handler for LP solution</para><para>Separates all constraints of the constraint handler. The method is called in the LP solution loop, which means that a valid LP solution exists.</para><para>The first nusefulconss constraints are the ones, that are identified to likely be violated. The separation method should process only the useful constraints in most runs, and only occasionally the remaining nconss - nusefulconss constraints.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints to process</para></listitem><listitem><para>nconss : number of constraints to process</para></listitem><listitem><para>nusefulconss : number of useful (non-obsolete) constraints to process</para></listitem><listitem><para>result : pointer to store the result of the separation call</para></listitem></itemizedlist>
</para><para>possible return values for *result (if more than one applies, the first in the list should be used):<itemizedlist>
<listitem><para>SCIP_CUTOFF : the node is infeasible in the variable&apos;s bounds and can be cut off</para></listitem><listitem><para>SCIP_CONSADDED : an additional constraint was generated</para></listitem><listitem><para>SCIP_REDUCEDDOM : a variable&apos;s domain was reduced</para></listitem><listitem><para>SCIP_SEPARATED : a cutting plane was generated</para></listitem><listitem><para>SCIP_NEWROUND : a cutting plane was generated and a new separation round should immediately start</para></listitem><listitem><para>SCIP_DIDNOTFIND : the separator searched, but did not find domain reductions, cutting planes, or cut constraints</para></listitem><listitem><para>SCIP_DIDNOTRUN : the separator was skipped</para></listitem><listitem><para>SCIP_DELAYED : the separator was skipped, but should be called again </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="239" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1ae5aed12c51e87312fad8287c6b114bd4" prot="public" static="no">
        <name>SCIP_DECL_CONSSEPASOL</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, \
      int nconss, int nusefulconss, <ref refid="type__sol_8h_1a76b0c06e8d5c166fe241cced9564ce90" kindref="member">SCIP_SOL</ref>* sol, <ref refid="type__result_8h_1a6e9810021a07d59fc706fab113e634bb" kindref="member">SCIP_RESULT</ref>* result)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>separation method of constraint handler for arbitrary primal solution</para><para>Separates all constraints of the constraint handler. The method is called outside the LP solution loop (e.g., by a relaxator or a primal heuristic), which means that there is no valid LP solution. Instead, the method should produce cuts that separate the given solution.</para><para>The first nusefulconss constraints are the ones, that are identified to likely be violated. The separation method should process only the useful constraints in most runs, and only occasionally the remaining nconss - nusefulconss constraints.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints to process</para></listitem><listitem><para>nconss : number of constraints to process</para></listitem><listitem><para>nusefulconss : number of useful (non-obsolete) constraints to process</para></listitem><listitem><para>sol : primal solution that should be separated</para></listitem><listitem><para>result : pointer to store the result of the separation call</para></listitem></itemizedlist>
</para><para>possible return values for *result (if more than one applies, the first in the list should be used):<itemizedlist>
<listitem><para>SCIP_CUTOFF : the node is infeasible in the variable&apos;s bounds and can be cut off</para></listitem><listitem><para>SCIP_CONSADDED : an additional constraint was generated</para></listitem><listitem><para>SCIP_REDUCEDDOM : a variable&apos;s domain was reduced</para></listitem><listitem><para>SCIP_SEPARATED : a cutting plane was generated</para></listitem><listitem><para>SCIP_NEWROUND : a cutting plane was generated and a new separation round should immediately start</para></listitem><listitem><para>SCIP_DIDNOTFIND : the separator searched, but did not find domain reductions, cutting planes, or cut constraints</para></listitem><listitem><para>SCIP_DIDNOTRUN : the separator was skipped</para></listitem><listitem><para>SCIP_DELAYED : the separator was skipped, but should be called again </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="271" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a19c17cc4fe1c293cfc1f2487b70046f0" prot="public" static="no">
        <name>SCIP_DECL_CONSENFOLP</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss, int nusefulconss, \
      <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> solinfeasible, <ref refid="type__result_8h_1a6e9810021a07d59fc706fab113e634bb" kindref="member">SCIP_RESULT</ref>* result)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint enforcing method of constraint handler for LP solutions</para><para>The method is called at the end of the node processing loop for a node where the LP was solved. The LP solution has to be checked for feasibility. If possible, an infeasibility should be resolved by branching, reducing a variable&apos;s domain to exclude the solution or separating the solution with a valid cutting plane.</para><para>The enforcing methods of the active constraint handlers are called in decreasing order of their enforcing priorities until the first constraint handler returned with the value SCIP_CUTOFF, SCIP_SEPARATED, SCIP_REDUCEDDOM, SCIP_CONSADDED, or SCIP_BRANCHED. The integrality constraint handler has an enforcing priority of zero. A constraint handler which can (or wants) to enforce its constraints only for integral solutions should have a negative enforcing priority (e.g. the alldiff-constraint can only operate on integral solutions). A constraint handler which wants to incorporate its own branching strategy even on non-integral solutions must have an enforcing priority greater than zero (e.g. the SOS-constraint incorporates SOS-branching on non-integral solutions).</para><para>The first nusefulconss constraints are the ones, that are identified to likely be violated. The enforcing method should process the useful constraints first. The other nconss - nusefulconss constraints should only be enforced, if no violation was found in the useful constraints.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints to process</para></listitem><listitem><para>nconss : number of constraints to process</para></listitem><listitem><para>nusefulconss : number of useful (non-obsolete) constraints to process</para></listitem><listitem><para>solinfeasible : was the solution already declared infeasible by a constraint handler?</para></listitem><listitem><para>result : pointer to store the result of the enforcing call</para></listitem></itemizedlist>
</para><para>possible return values for *result (if more than one applies, the first in the list should be used):<itemizedlist>
<listitem><para>SCIP_CUTOFF : the node is infeasible in the variable&apos;s bounds and can be cut off</para></listitem><listitem><para>SCIP_CONSADDED : an additional constraint was generated</para></listitem><listitem><para>SCIP_REDUCEDDOM : a variable&apos;s domain was reduced</para></listitem><listitem><para>SCIP_SEPARATED : a cutting plane was generated</para></listitem><listitem><para>SCIP_BRANCHED : no changes were made to the problem, but a branching was applied to resolve an infeasibility</para></listitem><listitem><para>SCIP_INFEASIBLE : at least one constraint is infeasible, but it was not resolved</para></listitem><listitem><para>SCIP_FEASIBLE : all constraints of the handler are feasible </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="313" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a8e37444d363c0d6b659cf95866118c2e" prot="public" static="no">
        <name>SCIP_DECL_CONSENFOPS</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss, int nusefulconss, \
      <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> solinfeasible, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> objinfeasible, <ref refid="type__result_8h_1a6e9810021a07d59fc706fab113e634bb" kindref="member">SCIP_RESULT</ref>* result)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint enforcing method of constraint handler for pseudo solutions</para><para>The method is called at the end of the node processing loop for a node where the LP was not solved. The pseudo solution has to be checked for feasibility. If possible, an infeasibility should be resolved by branching, reducing a variable&apos;s domain to exclude the solution or adding an additional constraint. Separation is not possible, since the LP is not processed at the current node. All LP informations like LP solution, slack values, or reduced costs are invalid and must not be accessed.</para><para>Like in the enforcing method for LP solutions, the enforcing methods of the active constraint handlers are called in decreasing order of their enforcing priorities until the first constraint handler returned with the value SCIP_CUTOFF, SCIP_REDUCEDDOM, SCIP_CONSADDED, SCIP_BRANCHED, or SCIP_SOLVELP.</para><para>The first nusefulconss constraints are the ones, that are identified to likely be violated. The enforcing method should process the useful constraints first. The other nconss - nusefulconss constraints should only be enforced, if no violation was found in the useful constraints.</para><para>If the pseudo solution&apos;s objective value is lower than the lower bound of the node, it cannot be feasible and the enforcing method may skip it&apos;s check and set *result to SCIP_DIDNOTRUN. However, it can also process its constraints and return any other possible result code.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints to process</para></listitem><listitem><para>nconss : number of constraints to process</para></listitem><listitem><para>nusefulconss : number of useful (non-obsolete) constraints to process</para></listitem><listitem><para>solinfeasible : was the solution already declared infeasible by a constraint handler?</para></listitem><listitem><para>objinfeasible : is the solution infeasible anyway due to violating lower objective bound?</para></listitem><listitem><para>result : pointer to store the result of the enforcing call</para></listitem></itemizedlist>
</para><para>possible return values for *result (if more than one applies, the first in the list should be used):<itemizedlist>
<listitem><para>SCIP_CUTOFF : the node is infeasible in the variable&apos;s bounds and can be cut off</para></listitem><listitem><para>SCIP_CONSADDED : an additional constraint was generated</para></listitem><listitem><para>SCIP_REDUCEDDOM : a variable&apos;s domain was reduced</para></listitem><listitem><para>SCIP_BRANCHED : no changes were made to the problem, but a branching was applied to resolve an infeasibility</para></listitem><listitem><para>SCIP_SOLVELP : at least one constraint is infeasible, and this can only be resolved by solving the LP</para></listitem><listitem><para>SCIP_INFEASIBLE : at least one constraint is infeasible, but it was not resolved</para></listitem><listitem><para>SCIP_FEASIBLE : all constraints of the handler are feasible</para></listitem><listitem><para>SCIP_DIDNOTRUN : the enforcement was skipped (only possible, if objinfeasible is true) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="356" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1ad15dad558f571555f654cc052eb3fa38" prot="public" static="no">
        <name>SCIP_DECL_CONSCHECK</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss, <ref refid="type__sol_8h_1a76b0c06e8d5c166fe241cced9564ce90" kindref="member">SCIP_SOL</ref>* sol, \
      <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> checkintegrality, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> checklprows, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> printreason, <ref refid="type__result_8h_1a6e9810021a07d59fc706fab113e634bb" kindref="member">SCIP_RESULT</ref>* result)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>feasibility check method of constraint handler for integral solutions</para><para>The given solution has to be checked for feasibility.</para><para>The check methods of the active constraint handlers are called in decreasing order of their check priorities until the first constraint handler returned with the result SCIP_INFEASIBLE. The integrality constraint handler has a check priority of zero. A constraint handler which can (or wants) to check its constraints only for integral solutions should have a negative check priority (e.g. the alldiff-constraint can only operate on integral solutions). A constraint handler which wants to check feasibility even on non-integral solutions must have a check priority greater than zero (e.g. if the check is much faster than testing all variables for integrality).</para><para>In some cases, integrality conditions or rows of the current LP don&apos;t have to be checked, because their feasibility is already checked or implicitly given. In these cases, &apos;checkintegrality&apos; or &apos;checklprows&apos; is FALSE.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints to process</para></listitem><listitem><para>nconss : number of constraints to process</para></listitem><listitem><para>sol : the solution to check feasibility for</para></listitem><listitem><para>checkintegrality: has integrality to be checked?</para></listitem><listitem><para>checklprows : have current LP rows to be checked?</para></listitem><listitem><para>printreason : should the reason for the violation be printed?</para></listitem><listitem><para>result : pointer to store the result of the feasibility checking call</para></listitem></itemizedlist>
</para><para>possible return values for *result:<itemizedlist>
<listitem><para>SCIP_INFEASIBLE : at least one constraint of the handler is infeasible</para></listitem><listitem><para>SCIP_FEASIBLE : all constraints of the handler are feasible </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="391" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a7332f43c87e6e1c337c7e8a72f1660ee" prot="public" static="no">
        <name>SCIP_DECL_CONSPROP</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss, int nusefulconss, int nmarkedconss, \
      <ref refid="type__timing_8h_1a51b6c15170ea1425fadbdd4dcce3a5a9" kindref="member">SCIP_PROPTIMING</ref> proptiming, <ref refid="type__result_8h_1a6e9810021a07d59fc706fab113e634bb" kindref="member">SCIP_RESULT</ref>* result)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>domain propagation method of constraint handler</para><para>The first nusefulconss constraints are the ones, that are identified to likely be violated. The propagation method should process only the useful constraints in most runs, and only occasionally the remaining nconss - nusefulconss constraints.</para><para><simplesect kind="note"><para>if the constraint handler uses dual information in propagation it is nesassary to check via calling SCIPallowDualReds and SCIPallowObjProp if dual reductions and propgation with the current cutoff bound, resp., are allowed.</para></simplesect>
input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints to process</para></listitem><listitem><para>nconss : number of constraints to process</para></listitem><listitem><para>nusefulconss : number of useful (non-obsolete) constraints to process</para></listitem><listitem><para>nmarkedconss : number of constraints which are marked to be definitely propagated</para></listitem><listitem><para>proptiming : current point in the node solving loop</para></listitem><listitem><para>result : pointer to store the result of the propagation call</para></listitem></itemizedlist>
</para><para>possible return values for *result:<itemizedlist>
<listitem><para>SCIP_CUTOFF : the node is infeasible in the variable&apos;s bounds and can be cut off</para></listitem><listitem><para>SCIP_REDUCEDDOM : at least one domain reduction was found</para></listitem><listitem><para>SCIP_DIDNOTFIND : the propagator searched but did not find any domain reductions</para></listitem><listitem><para>SCIP_DIDNOTRUN : the propagator was skipped</para></listitem><listitem><para>SCIP_DELAYED : the propagator was skipped, but should be called again </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="421" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1aa1a9531dd2d21a1b43935038718325fb" prot="public" static="no">
        <name>SCIP_DECL_CONSPRESOL</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss, int nrounds, \
      <ref refid="type__timing_8h_1a623636041ddf65be8742740fdc3673b6" kindref="member">SCIP_PRESOLTIMING</ref> presoltiming, int nnewfixedvars, int nnewaggrvars, int nnewchgvartypes, int nnewchgbds, int nnewholes, \
      int nnewdelconss, int nnewaddconss, int nnewupgdconss, int nnewchgcoefs, int nnewchgsides, \
      int* nfixedvars, int* naggrvars, int* nchgvartypes, int* nchgbds, int* naddholes, \
      int* ndelconss, int* naddconss, int* nupgdconss, int* nchgcoefs, int* nchgsides, <ref refid="type__result_8h_1a6e9810021a07d59fc706fab113e634bb" kindref="member">SCIP_RESULT</ref>* result)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>presolving method of constraint handler</para><para>The presolver should go through the variables and constraints and tighten the domains or constraints. Each tightening should increase the given total number of changes.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints to process</para></listitem><listitem><para>nconss : number of constraints to process</para></listitem><listitem><para>nrounds : number of presolving rounds already done</para></listitem><listitem><para>presoltiming : current presolving timing</para></listitem><listitem><para>nnewfixedvars : number of variables fixed since the last call to the presolving method</para></listitem><listitem><para>nnewaggrvars : number of variables aggregated since the last call to the presolving method</para></listitem><listitem><para>nnewchgvartypes : number of variable type changes since the last call to the presolving method</para></listitem><listitem><para>nnewchgbds : number of variable bounds tightened since the last call to the presolving method</para></listitem><listitem><para>nnewholes : number of domain holes added since the last call to the presolving method</para></listitem><listitem><para>nnewdelconss : number of deleted constraints since the last call to the presolving method</para></listitem><listitem><para>nnewaddconss : number of added constraints since the last call to the presolving method</para></listitem><listitem><para>nnewupgdconss : number of upgraded constraints since the last call to the presolving method</para></listitem><listitem><para>nnewchgcoefs : number of changed coefficients since the last call to the presolving method</para></listitem><listitem><para>nnewchgsides : number of changed left or right hand sides since the last call to the presolving method</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>the counters state the changes since the last call including the changes of this presolving method during its call</para></simplesect>
<simplesect kind="note"><para>if the constraint handler performs dual presolving it is nesassary to check via calling SCIPallowDualReds if dual reductions are allowed.</para></simplesect>
input/output:<itemizedlist>
<listitem><para>nfixedvars : pointer to count total number of variables fixed of all presolvers</para></listitem><listitem><para>naggrvars : pointer to count total number of variables aggregated of all presolvers</para></listitem><listitem><para>nchgvartypes : pointer to count total number of variable type changes of all presolvers</para></listitem><listitem><para>nchgbds : pointer to count total number of variable bounds tightened of all presolvers</para></listitem><listitem><para>naddholes : pointer to count total number of domain holes added of all presolvers</para></listitem><listitem><para>ndelconss : pointer to count total number of deleted constraints of all presolvers</para></listitem><listitem><para>naddconss : pointer to count total number of added constraints of all presolvers</para></listitem><listitem><para>nupgdconss : pointer to count total number of upgraded constraints of all presolvers</para></listitem><listitem><para>nchgcoefs : pointer to count total number of changed coefficients of all presolvers</para></listitem><listitem><para>nchgsides : pointer to count total number of changed left/right hand sides of all presolvers</para></listitem></itemizedlist>
</para><para>output:<itemizedlist>
<listitem><para>result : pointer to store the result of the presolving call</para></listitem></itemizedlist>
</para><para>possible return values for *result:<itemizedlist>
<listitem><para>SCIP_UNBOUNDED : at least one variable is not bounded by any constraint in obj. direction -&gt; problem is unbounded</para></listitem><listitem><para>SCIP_CUTOFF : at least one constraint is infeasible in the variable&apos;s bounds -&gt; problem is infeasible</para></listitem><listitem><para>SCIP_SUCCESS : the presolving method found a reduction</para></listitem><listitem><para>SCIP_DIDNOTFIND : the presolving method searched, but did not find a presolving change</para></listitem><listitem><para>SCIP_DIDNOTRUN : the presolving method was skipped</para></listitem><listitem><para>SCIP_DELAYED : the presolving method was skipped, but should be called again </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="479" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a7ff294cd3a2a493e6e8b46dedd041b97" prot="public" static="no">
        <name>SCIP_DECL_CONSRESPROP</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* cons, \
      <ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>* infervar, int inferinfo, <ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref> boundtype, <ref refid="type__var_8h_1a511bb905f473e197a215b25c793998ce" kindref="member">SCIP_BDCHGIDX</ref>* bdchgidx, <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> relaxedbd, \
      <ref refid="type__result_8h_1a6e9810021a07d59fc706fab113e634bb" kindref="member">SCIP_RESULT</ref>* result)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>propagation conflict resolving method of constraint handler</para><para>This method is called during conflict analysis. If the constraint handler wants to support conflict analysis, it should call <ref refid="scip_8h_1ab3dde7eba569deda9dddfe11720f9094" kindref="member">SCIPinferVarLbCons()</ref> or <ref refid="scip_8h_1a413e36fae9f597c1b0a8bc25f32eb4e2" kindref="member">SCIPinferVarUbCons()</ref> in domain propagation instead of <ref refid="scip_8h_1a28fcf0e964533760e3822fed102d57bd" kindref="member">SCIPchgVarLb()</ref> or <ref refid="scip_8h_1a467948c18929421bcc14c1c009f58c56" kindref="member">SCIPchgVarUb()</ref> in order to deduce bound changes on variables. In the <ref refid="scip_8h_1ab3dde7eba569deda9dddfe11720f9094" kindref="member">SCIPinferVarLbCons()</ref> and <ref refid="scip_8h_1a413e36fae9f597c1b0a8bc25f32eb4e2" kindref="member">SCIPinferVarUbCons()</ref> calls, the handler provides the constraint, that deduced the variable&apos;s bound change, and an integer value &quot;inferinfo&quot; that can be arbitrarily chosen. The propagation conflict resolving method can then be implemented, to provide a &quot;reasons&quot; for the bound changes, i.e. the bounds of variables at the time of the propagation, that forced the constraint to set the conflict variable&apos;s bound to its current value. It can use the &quot;inferinfo&quot; tag to identify its own propagation rule and thus identify the &quot;reason&quot; bounds. The bounds that form the reason of the assignment must then be provided by calls to <ref refid="scip_8h_1a00bb542034657c5e850779556d033de3" kindref="member">SCIPaddConflictLb()</ref>, <ref refid="scip_8h_1a2136d87b957b9ca7bf845c3f1a92bd54" kindref="member">SCIPaddConflictUb()</ref>, <ref refid="scip_8h_1a758d29b6760cf072694ef6868db6d954" kindref="member">SCIPaddConflictBd()</ref>, <ref refid="scip_8h_1a45cc31772f3c625d3b0f0331bf0bc29c" kindref="member">SCIPaddConflictRelaxedLb()</ref>, <ref refid="scip_8h_1a7b8196ca39461a2b23d7fabc4539fc20" kindref="member">SCIPaddConflictRelaxedUb()</ref>, <ref refid="scip_8h_1a12f5e1acc1e24148bdeefee2424b0a23" kindref="member">SCIPaddConflictRelaxedBd()</ref>, and/or <ref refid="scip_8h_1acd62edc8da6ffb9dc9ba7ae721a798cf" kindref="member">SCIPaddConflictBinvar()</ref> in the propagation conflict resolving method.</para><para>For example, the logicor constraint c = &quot;x or y or z&quot; fixes variable z to TRUE (i.e. changes the lower bound of z to 1.0), if both, x and y, are assigned to FALSE (i.e. if the upper bounds of these variables are 0.0). It uses SCIPinferVarLbCons(scip, z, 1.0, c, 0) to apply this assignment (an inference information tag is not needed by the constraint handler and is set to 0). In the conflict analysis, the constraint handler may be asked to resolve the lower bound change on z with constraint c, that was applied at a time given by a bound change index &quot;bdchgidx&quot;. With a call to SCIPvarGetLbAtIndex(z, bdchgidx, TRUE), the handler can find out, that the lower bound of variable z was set to 1.0 at the given point of time, and should call SCIPaddConflictUb(scip, x, bdchgidx) and SCIPaddConflictUb(scip, y, bdchgidx) to tell SCIP, that the upper bounds of x and y at this point of time were the reason for the deduction of the lower bound of z.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>cons : the constraint that deduced the bound change of the conflict variable</para></listitem><listitem><para>infervar : the conflict variable whose bound change has to be resolved</para></listitem><listitem><para>inferinfo : the user information passed to the corresponding <ref refid="scip_8h_1ab3dde7eba569deda9dddfe11720f9094" kindref="member">SCIPinferVarLbCons()</ref> or <ref refid="scip_8h_1a413e36fae9f597c1b0a8bc25f32eb4e2" kindref="member">SCIPinferVarUbCons()</ref> call</para></listitem><listitem><para>boundtype : the type of the changed bound (lower or upper bound)</para></listitem><listitem><para>bdchgidx : the index of the bound change, representing the point of time where the change took place</para></listitem><listitem><para>relaxedbd : the relaxed bound which is sufficient to be explained</para></listitem></itemizedlist>
</para><para>output:<itemizedlist>
<listitem><para>result : pointer to store the result of the propagation conflict resolving call</para></listitem></itemizedlist>
</para><para>possible return values for *result:<itemizedlist>
<listitem><para>SCIP_SUCCESS : the conflicting bound change has been successfully resolved by adding all reason bounds</para></listitem><listitem><para>SCIP_DIDNOTFIND : the conflicting bound change could not be resolved and has to be put into the conflict set</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>it is sufficient to explain/resolve the relaxed bound </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="530" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1ab2edc602ea1ed35423a229aefaee7aaa" prot="public" static="no">
        <name>SCIP_DECL_CONSLOCK</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* cons, int nlockspos, int nlocksneg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>variable rounding lock method of constraint handler</para><para>This method is called, after a constraint is added or removed from the transformed problem. It should update the rounding locks of all associated variables with calls to <ref refid="scip_8h_1a0a00fbe33ee7405aedb341f606d35417" kindref="member">SCIPaddVarLocks()</ref>, depending on the way, the variable is involved in the constraint:<itemizedlist>
<listitem><para>If the constraint may get violated by decreasing the value of a variable, it should call SCIPaddVarLocks(scip, var, nlockspos, nlocksneg), saying that rounding down is potentially rendering the (positive) constraint infeasible and rounding up is potentially rendering the negation of the constraint infeasible.</para></listitem><listitem><para>If the constraint may get violated by increasing the value of a variable, it should call SCIPaddVarLocks(scip, var, nlocksneg, nlockspos), saying that rounding up is potentially rendering the constraint&apos;s negation infeasible and rounding up is potentially rendering the constraint itself infeasible.</para></listitem><listitem><para>If the constraint may get violated by changing the variable in any direction, it should call SCIPaddVarLocks(scip, var, nlockspos + nlocksneg, nlockspos + nlocksneg).</para></listitem></itemizedlist>
</para><para>Consider the linear constraint &quot;3x -5y +2z &lt;= 7&quot; as an example. The variable rounding lock method of the linear constraint handler should call SCIPaddVarLocks(scip, x, nlocksneg, nlockspos), SCIPaddVarLocks(scip, y, nlockspos, nlocksneg) and SCIPaddVarLocks(scip, z, nlocksneg, nlockspos) to tell SCIP, that rounding up of x and z and rounding down of y can destroy the feasibility of the constraint, while rounding down of x and z and rounding up of y can destroy the feasibility of the constraint&apos;s negation &quot;3x -5y +2z &gt; 7&quot;. A linear constraint &quot;2 &lt;= 3x -5y +2z &lt;= 7&quot; should call SCIPaddVarLocks(scip, ..., nlockspos + nlocksneg, nlockspos + nlocksneg) on all variables, since rounding in both directions of each variable can destroy both the feasibility of the constraint and it&apos;s negation &quot;3x -5y +2z &lt; 2  or  3x -5y +2z &gt; 7&quot;.</para><para>If the constraint itself contains other constraints as sub constraints (e.g. the &quot;or&quot; constraint concatenation &quot;c(x) or d(x)&quot;), the rounding lock methods of these constraints should be called in a proper way.<itemizedlist>
<listitem><para>If the constraint may get violated by the violation of the sub constraint c, it should call SCIPaddConsLocks(scip, c, nlockspos, nlocksneg), saying that infeasibility of c may lead to infeasibility of the (positive) constraint, and infeasibility of c&apos;s negation (i.e. feasibility of c) may lead to infeasibility of the constraint&apos;s negation (i.e. feasibility of the constraint).</para></listitem><listitem><para>If the constraint may get violated by the feasibility of the sub constraint c, it should call SCIPaddConsLocks(scip, c, nlocksneg, nlockspos), saying that infeasibility of c may lead to infeasibility of the constraint&apos;s negation (i.e. feasibility of the constraint), and infeasibility of c&apos;s negation (i.e. feasibility of c) may lead to infeasibility of the (positive) constraint.</para></listitem><listitem><para>If the constraint may get violated by any change in the feasibility of the sub constraint c, it should call SCIPaddConsLocks(scip, c, nlockspos + nlocksneg, nlockspos + nlocksneg).</para></listitem></itemizedlist>
</para><para>Consider the or concatenation &quot;c(x) or d(x)&quot;. The variable rounding lock method of the or constraint handler should call SCIPaddConsLocks(scip, c, nlockspos, nlocksneg) and SCIPaddConsLocks(scip, d, nlockspos, nlocksneg) to tell SCIP, that infeasibility of c and d can lead to infeasibility of &quot;c(x) or d(x)&quot;.</para><para>As a second example, consider the equivalence constraint &quot;y &lt;-&gt; c(x)&quot; with variable y and constraint c. The constraint demands, that y == 1 if and only if c(x) is satisfied. The variable lock method of the corresponding constraint handler should call SCIPaddVarLocks(scip, y, nlockspos + nlocksneg, nlockspos + nlocksneg) and SCIPaddConsLocks(scip, c, nlockspos + nlocksneg, nlockspos + nlocksneg), because any modification to the value of y or to the feasibility of c can alter the feasibility of the equivalence constraint.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>cons : the constraint that should lock rounding of its variables, or NULL if the constraint handler does not need constraints</para></listitem><listitem><para>nlockspos : number of times, the roundings should be locked for the constraint (may be negative)</para></listitem><listitem><para>nlocksneg : number of times, the roundings should be locked for the constraint&apos;s negation (may be negative) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="591" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a85c40a321635910478b808910ba9adba" prot="public" static="no">
        <name>SCIP_DECL_CONSACTIVE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* cons)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint activation notification method of constraint handler</para><para>WARNING! There may exist unprocessed events. For example, a variable&apos;s bound may have been already changed, but the corresponding bound change event was not yet processed.</para><para>This method is always called after a constraint of the constraint handler was activated. The constraint handler may use this call to update his own (statistical) data.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>cons : the constraint that has been activated </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="606" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a978ed7d67d8de87eeed9577a17b1744e" prot="public" static="no">
        <name>SCIP_DECL_CONSDEACTIVE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* cons)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint deactivation notification method of constraint handler</para><para>WARNING! There may exist unprocessed events. For example, a variable&apos;s bound may have been already changed, but the corresponding bound change event was not yet processed.</para><para>This method is always called before a constraint of the constraint handler is deactivated. The constraint handler may use this call to update his own (statistical) data.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>cons : the constraint that will be deactivated </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="621" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1aa83f578d4cc68fc292c889f3b53cf23c" prot="public" static="no">
        <name>SCIP_DECL_CONSENABLE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* cons)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint enabling notification method of constraint handler</para><para>WARNING! There may exist unprocessed events. For example, a variable&apos;s bound may have been already changed, but the corresponding bound change event was not yet processed.</para><para>This method is always called after a constraint of the constraint handler was enabled. The constraint handler may use this call to update his own (statistical) data.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>cons : the constraint that has been enabled </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="636" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a51ab5dc422ca7a11f11a58eaa94109a9" prot="public" static="no">
        <name>SCIP_DECL_CONSDISABLE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* cons)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint disabling notification method of constraint handler</para><para>WARNING! There may exist unprocessed events. For example, a variable&apos;s bound may have been already changed, but the corresponding bound change event was not yet processed.</para><para>This method is always called before a constraint of the constraint handler is disabled. The constraint handler may use this call to update his own (statistical) data.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>cons : the constraint that will be disabled </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="651" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1af704934b66490b447ea10fcfd6adcef9" prot="public" static="no">
        <name>SCIP_DECL_CONSDELVARS</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** conss, int nconss)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>variable deletion method of constraint handler</para><para>This method is optinal and only of interest if you are using SCIP as a branch-and-price framework. That means, you are generating new variables during the search. If you are not doing that just define the function pointer to be NULL.</para><para>If this method gets implemented you should iterate over all constraints of the constraint handler and delete all variables that were marked for deletion by <ref refid="scip_8h_1ac71becc93e5ec956c878d36edd0468d1" kindref="member">SCIPdelVar()</ref>.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>conss : array of constraints in transformed problem</para></listitem><listitem><para>nconss : number of constraints in transformed problem </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="668" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a4d409d37c6071020639ea8379787ad60" prot="public" static="no">
        <name>SCIP_DECL_CONSPRINT</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* cons, FILE* file)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint display method of constraint handler</para><para>The constraint handler can store a representation of the constraint into the given text file. Use the method <ref refid="scip_8h_1a0539bdb9cd224f8b4bceafb87accfe1a" kindref="member">SCIPinfoMessage()</ref> to push a string into the file stream.</para><para><simplesect kind="note"><para>There are several methods which help to display variables. These are <ref refid="scip_8h_1ac66398e06aef85099277390f02b91de7" kindref="member">SCIPwriteVarName()</ref>, <ref refid="scip_8h_1acd2011f8b65b8bbf1867f01c3c6d90a7" kindref="member">SCIPwriteVarsList()</ref>, <ref refid="scip_8h_1ad31442179d8a3c229bffd035749bae96" kindref="member">SCIPwriteVarsLinearsum()</ref>, and <ref refid="scip_8h_1aa25a519b2c015bafcb96b35b95e27806" kindref="member">SCIPwriteVarsPolynomial()</ref>.</para></simplesect>
input: - scip : SCIP main data structure - conshdlr : the constraint handler itself - cons : the constraint that should be displayed - file : the text file to store the information into </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="682" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1abf8e62f337ecf1d02581a514e99636ec" prot="public" static="no">
        <name>SCIP_DECL_CONSCOPY</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** cons, const char* name, \
      <ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* sourcescip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* sourceconshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* sourcecons, <ref refid="type__misc_8h_1a4372d6d4f362b30349748b72c8a28704" kindref="member">SCIP_HASHMAP</ref>* varmap, <ref refid="type__misc_8h_1a4372d6d4f362b30349748b72c8a28704" kindref="member">SCIP_HASHMAP</ref>* consmap, \
      <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> initial, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> separate, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> enforce, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> check, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> propagate, \
      <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> local, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> modifiable, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> dynamic, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> removable, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> stickingatnode, \
      <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> global, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>* valid)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint copying method of constraint handler</para><para>The constraint handler can provide a copy method which copies a constraint from one SCIP data structure into a other SCIP data structure. If a copy of a constraint is created the constraint has to be captured (The capture is usually already done due to the creation of the constraint).</para><para>If the copy process was a one to one the valid pointer can set to TRUE. Otherwise, you have to set this pointer to FALSE. In case all problem defining objects (constraint handlers and variable pricers) return a valid TRUE for all their copying calls, SCIP assumes that it is a overall one to one copy of the original instance. In this case any reductions made in the copied SCIP instance can be transfer to the original SCIP instance. If the valid pointer is set to TRUE and it was not one to one copy, it might happen that optimal solutions are cut off.</para><para>To get a copy of a variable in the target SCIP you should use the function <ref refid="scip_8h_1af13dc1d0d91e2c427f456949e65fea4c" kindref="member">SCIPgetVarCopy()</ref>.</para><para>input:<itemizedlist>
<listitem><para>scip : target SCIP data structure</para></listitem><listitem><para>cons : pointer to store the created target constraint</para></listitem><listitem><para>name : name of constraint, or NULL if the name of the source constraint should be used</para></listitem><listitem><para>sourcescip : source SCIP data structure</para></listitem><listitem><para>sourceconshdlr : source constraint handler of the source SCIP</para></listitem><listitem><para>sourcecons : source constraint of the source SCIP</para></listitem><listitem><para>varmap : a SCIP_HASHMAP mapping variables of the source SCIP to corresponding variables of the target SCIP</para></listitem><listitem><para>consmap : a SCIP_HASHMAP mapping constraints of the source SCIP to corresponding constraints of the target SCIP</para></listitem><listitem><para>initial : should the LP relaxation of constraint be in the initial LP?</para></listitem><listitem><para>separate : should the constraint be separated during LP processing?</para></listitem><listitem><para>enforce : should the constraint be enforced during node processing?</para></listitem><listitem><para>check : should the constraint be checked for feasibility?</para></listitem><listitem><para>propagate : should the constraint be propagated during node processing?</para></listitem><listitem><para>local : is constraint only valid locally?</para></listitem><listitem><para>modifiable : is constraint modifiable (subject to column generation)?</para></listitem><listitem><para>dynamic : is constraint subject to aging?</para></listitem><listitem><para>removable : should the relaxation be removed from the LP due to aging or cleanup?</para></listitem><listitem><para>stickingatnode : should the constraint always be kept at the node where it was added, even if it may be moved to a more global node?</para></listitem><listitem><para>global : should a global or a local copy be created?</para></listitem></itemizedlist>
</para><para>output:<itemizedlist>
<listitem><para>valid : pointer to store whether the copying was valid or not </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="723" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a92afdd77b74d9cac38e48d072dd72067" prot="public" static="no">
        <name>SCIP_DECL_CONSPARSE</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>** cons, \
      const char* name, const char* str, \
      <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> initial, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> separate, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> enforce, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> check, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> propagate, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> local, \
      <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> modifiable, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> dynamic, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> removable, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> stickingatnode, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>* success)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint parsing method of constraint handler</para><para>The constraint handler can provide a callback to parse the output created by the display method (<ref refid="type__cons_8h_1a4d409d37c6071020639ea8379787ad60" kindref="member">SCIP_DECL_CONSPRINT</ref>) and to create a constraint out of it.</para><para><simplesect kind="note"><para>For parsing there are several methods which are handy. Have a look at: <ref refid="scip_8h_1a4dced114542f3ef38ae949c50d563bdb" kindref="member">SCIPparseVarName()</ref>, <ref refid="scip_8h_1a3f8c67997baed436d42610ec73a4438b" kindref="member">SCIPparseVarsList()</ref>, <ref refid="scip_8h_1a814a0dec7e6ec79ca2360d49777fea14" kindref="member">SCIPparseVarsLinearsum()</ref>, <ref refid="scip_8h_1abbb3f6350430c843e133002532cb210b" kindref="member">SCIPparseVarsPolynomial()</ref>, <ref refid="group__StringMethods_1ga2d02c64c4ef4b1265a2764239e2de842" kindref="member">SCIPstrToRealValue()</ref>, and <ref refid="group__StringMethods_1ga585e90a5b270e3bdda15d38ff49bbcf4" kindref="member">SCIPstrCopySection()</ref>.</para></simplesect>
input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>cons : pointer to store the created constraint</para></listitem><listitem><para>name : name of the constraint</para></listitem><listitem><para>str : string to parse</para></listitem><listitem><para>initial : should the LP relaxation of constraint be in the initial LP?</para></listitem><listitem><para>separate : should the constraint be separated during LP processing?</para></listitem><listitem><para>enforce : should the constraint be enforced during node processing?</para></listitem><listitem><para>check : should the constraint be checked for feasibility?</para></listitem><listitem><para>propagate : should the constraint be propagated during node processing?</para></listitem><listitem><para>local : is constraint only valid locally?</para></listitem><listitem><para>modifiable : is constraint modifiable (subject to column generation)?</para></listitem><listitem><para>dynamic : is constraint subject to aging?</para></listitem><listitem><para>removable : should the relaxation be removed from the LP due to aging or cleanup?</para></listitem><listitem><para>stickingatnode : should the constraint always be kept at the node where it was added, even if it may be moved to a more global node? output:</para></listitem><listitem><para>success : pointer to store whether the parsing was successful or not </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="758" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a4213ba55688181a50f29979849dfe43b" prot="public" static="no">
        <name>SCIP_DECL_CONSGETVARS</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* cons, \
      <ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>** vars, int varssize, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>* success)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint method of constraint handler which returns the variables (if possible)</para><para>The constraint handler can (this callback is optional) provide this callback to return the variables which are involved in that particular constraint. If this is possible, the variables should be copyied into the variables array and the success pointers has to be set to TRUE. Otherwise the success has to be set FALSE or the callback should not be implemented.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>cons : the constraint that should return its variable data</para></listitem></itemizedlist>
</para><para>output:<itemizedlist>
<listitem><para>vars : array to store/copy the involved variables of the constraint</para></listitem><listitem><para>varssize : available slots in vars array which is needed to check if the array is large enough</para></listitem><listitem><para>success : pointer to store whether the variables are successfully copied </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="780" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a7bbb9a0dd7d4ae69b6feb144a3d45e00" prot="public" static="no">
        <name>SCIP_DECL_CONSGETNVARS</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>* cons, \
      int* nvars, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>* success)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint method of constraint handler which returns the number of variables (if possible)</para><para>The constraint handler can (this callback is optional) provide this callback to return the number variable which are involved in that particular constraint. If this is not possible, the success pointers has to be set to FALSE or the callback should not be implemented.</para><para>input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>cons : constraint for which the number of variables is wanted</para></listitem></itemizedlist>
</para><para>output:<itemizedlist>
<listitem><para>nvars : pointer to store the number of variables</para></listitem><listitem><para>success : pointer to store whether the constraint successfully returned the number of variables </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="798" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="798" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="type__cons_8h_1a721f05c56e6c59927ebc4e1642f88337" prot="public" static="no">
        <name>SCIP_DECL_CONSGETDIVEBDCHGS</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref> x (<ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>* scip, <ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>* conshdlr, <ref refid="type__heur_8h_1a83cd649a94ebf0df68ec061ab58bc93e" kindref="member">SCIP_DIVESET</ref>* diveset, \
      <ref refid="type__sol_8h_1a76b0c06e8d5c166fe241cced9564ce90" kindref="member">SCIP_SOL</ref>* sol, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>* success, <ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>* infeasible)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint handler method to suggest dive bound changes during the generic diving algorithm</para><para>This callback is used inside the various diving heuristics of SCIP and does not affect the normal branching of the actual search. The constraint handler can provide this callback to render the current solution (even more) infeasible by suggesting one or several variable bound changes. Infact, since diving heuristics do not necessarily solve LP relaxations at every probing depth, some of the variable local bounds might already be conflicting with the solution values. The solution is rendered infeasible by determining bound changes that should be applied to the next explored search node via <ref refid="scip_8h_1a881929aedc955baa8a0667e7aa240a07" kindref="member">SCIPaddDiveBoundChange()</ref>. An alternative in case that the preferred bound change(s) were detected infeasible must be provided.</para><para>The constraint handler must take care to only add bound changes that further shrink the variable domain.</para><para>The success pointer must be used to indicate whether the constraint handler succeeded in selecting diving bound changes. The infeasible pointer should be set to TRUE if the constraint handler found a local infeasibility. If the constraint handler needs to select between several candidates, it may use the scoring mechanism of the diveset argument to control its choice.</para><para>This callback is optional.</para><para><simplesect kind="note"><para>: <computeroutput>sol</computeroutput> is usually the LP relaxation solution unless the caller of the method, usually a diving heuristic, does not solve LP relaxations at every depth</para></simplesect>
input:<itemizedlist>
<listitem><para>scip : SCIP main data structure</para></listitem><listitem><para>conshdlr : the constraint handler itself</para></listitem><listitem><para>diveset : diving settings for scoring</para></listitem><listitem><para>sol : current diving solution, usually the LP relaxation solution</para></listitem></itemizedlist>
</para><para>output:<itemizedlist>
<listitem><para>success : pointer to store whether the constraint handler succeeded to determine dive bound changes</para></listitem><listitem><para>infeasible : pointer to store whether the constraint handler detected an infeasibility in the local node </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="837" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="837" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" prot="public" static="no">
        <type>struct SCIP_Conshdlr</type>
        <definition>typedef struct SCIP_Conshdlr SCIP_CONSHDLR</definition>
        <argsstring></argsstring>
        <name>SCIP_CONSHDLR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint handler for a specific constraint type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="37" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" prot="public" static="no">
        <type>struct SCIP_Cons</type>
        <definition>typedef struct SCIP_Cons SCIP_CONS</definition>
        <argsstring></argsstring>
        <name>SCIP_CONS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint data structure </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="37" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__cons_8h_1a4fbd129e0244d331664c5c618c85299c" prot="public" static="no">
        <type>struct SCIP_ConshdlrData</type>
        <definition>typedef struct SCIP_ConshdlrData SCIP_CONSHDLRDATA</definition>
        <argsstring></argsstring>
        <name>SCIP_CONSHDLRDATA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constraint handler data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="37" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__cons_8h_1ac55797a3c65d3ec89dd29921d953c36e" prot="public" static="no">
        <type>struct SCIP_ConsData</type>
        <definition>typedef struct SCIP_ConsData SCIP_CONSDATA</definition>
        <argsstring></argsstring>
        <name>SCIP_CONSDATA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>locally defined constraint type specific data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="37" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="type__cons_8h_1a581a228c2b766ad9f7a3906b5f8ed5bc" prot="public" static="no">
        <type>struct SCIP_ConsSetChg</type>
        <definition>typedef struct SCIP_ConsSetChg SCIP_CONSSETCHG</definition>
        <argsstring></argsstring>
        <name>SCIP_CONSSETCHG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tracks additions and removals of the set of active constraints </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" line="37" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>type definitions for constraints and constraint handlers </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Tobias Achterberg </para></simplesect>
<simplesect kind="author"><para>Stefan Heinz</para></simplesect>
This file defines the interface for constraint handlers implemented in C.</para><para><itemizedlist>
<listitem><para>Instructions for implementing a constraint handler</para></listitem><listitem><para>List of available constraint handlers</para></listitem><listitem><para>C++ wrapper class </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>program<sp/>and<sp/>library<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIP<sp/>---<sp/>Solving<sp/>Constraint<sp/>Integer<sp/>Programs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2002-2015<sp/>Konrad-Zuse-Zentrum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fuer<sp/>Informationstechnik<sp/>Berlin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>SCIP<sp/>is<sp/>distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>along<sp/>with<sp/>SCIP;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/>If<sp/>not<sp/>email<sp/>to<sp/>scip@zib.de.<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">/**@file<sp/><sp/><sp/>type_cons.h</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>TYPEDEFINITIONS</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/>type<sp/>definitions<sp/>for<sp/>constraints<sp/>and<sp/>constraint<sp/>handlers</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@author<sp/>Tobias<sp/>Achterberg</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>@author<sp/>Stefan<sp/>Heinz</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>defines<sp/>the<sp/>interface<sp/>for<sp/>constraint<sp/>handlers<sp/>implemented<sp/>in<sp/>C.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>\ref<sp/>CONS<sp/>&quot;Instructions<sp/>for<sp/>implementing<sp/>a<sp/>constraint<sp/>handler&quot;</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>\ref<sp/>CONSHDLRS<sp/>&quot;List<sp/>of<sp/>available<sp/>constraint<sp/>handlers&quot;</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>\ref<sp/>scip::ObjConshdlr<sp/>&quot;C++<sp/>wrapper<sp/>class&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SCIP_TYPE_CONS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SCIP_TYPE_CONS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="def_8h" kindref="compound">scip/def.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__retcode_8h" kindref="compound">scip/type_retcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__result_8h" kindref="compound">scip/type_result.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__var_8h" kindref="compound">scip/type_var.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__sol_8h" kindref="compound">scip/type_sol.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__scip_8h" kindref="compound">scip/type_scip.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__timing_8h" kindref="compound">scip/type_timing.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__heur_8h" kindref="compound">scip/type_heur.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SCIP_Conshdlr<sp/><ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constraint<sp/>handler<sp/>for<sp/>a<sp/>specific<sp/>constraint<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SCIP_Cons<sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constraint<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="type__cons_8h_1a4fbd129e0244d331664c5c618c85299c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SCIP_ConshdlrData<sp/><ref refid="type__cons_8h_1a4fbd129e0244d331664c5c618c85299c" kindref="member">SCIP_CONSHDLRDATA</ref>;<sp/></highlight><highlight class="comment">/**&lt;<sp/>constraint<sp/>handler<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="type__cons_8h_1ac55797a3c65d3ec89dd29921d953c36e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SCIP_ConsData<sp/><ref refid="type__cons_8h_1ac55797a3c65d3ec89dd29921d953c36e" kindref="member">SCIP_CONSDATA</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>locally<sp/>defined<sp/>constraint<sp/>type<sp/>specific<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="type__cons_8h_1a581a228c2b766ad9f7a3906b5f8ed5bc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SCIP_ConsSetChg<sp/><ref refid="type__cons_8h_1a581a228c2b766ad9f7a3906b5f8ed5bc" kindref="member">SCIP_CONSSETCHG</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>tracks<sp/>additions<sp/>and<sp/>removals<sp/>of<sp/>the<sp/>set<sp/>of<sp/>active<sp/>constraints<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">/**<sp/>copy<sp/>method<sp/>for<sp/>constraint<sp/>handler<sp/>plugins<sp/>(called<sp/>when<sp/>SCIP<sp/>copies<sp/>plugins)</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>copy<sp/>process<sp/>was<sp/>a<sp/>one<sp/>to<sp/>one<sp/>the<sp/>valid<sp/>pointer<sp/>can<sp/>set<sp/>to<sp/>TRUE.<sp/>Otherwise,<sp/>you<sp/>have<sp/>to<sp/>set<sp/>this<sp/>pointer<sp/>to</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>FALSE.<sp/>In<sp/>case<sp/>all<sp/>problem<sp/>defining<sp/>objects<sp/>(constraint<sp/>handlers<sp/>and<sp/>variable<sp/>pricers)<sp/>return<sp/>a<sp/>valid<sp/>TRUE<sp/>for<sp/>all</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>their<sp/>copying<sp/>calls,<sp/>SCIP<sp/>assumes<sp/>that<sp/>it<sp/>is<sp/>a<sp/>overall<sp/>one<sp/>to<sp/>one<sp/>copy<sp/>of<sp/>the<sp/>original<sp/>instance.<sp/>In<sp/>this<sp/>case<sp/>any</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>reductions<sp/>made<sp/>in<sp/>the<sp/>copied<sp/>SCIP<sp/>instance<sp/>can<sp/>be<sp/>transfer<sp/>to<sp/>the<sp/>original<sp/>SCIP<sp/>instance.<sp/>If<sp/>the<sp/>valid<sp/>pointer<sp/>is</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>set<sp/>to<sp/>TRUE<sp/>and<sp/>it<sp/>was<sp/>not<sp/>one<sp/>to<sp/>one<sp/>copy,<sp/>it<sp/>might<sp/>happen<sp/>that<sp/>optimal<sp/>solutions<sp/>are<sp/>cut<sp/>off.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>valid<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>was<sp/>the<sp/>copying<sp/>process<sp/>valid?<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="type__cons_8h_1ad1fbf03b7692ccc565b2107db3965c27" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSHDLRCOPY(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_Bool*<sp/>valid)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**<sp/>destructor<sp/>of<sp/>constraint<sp/>handler<sp/>to<sp/>free<sp/>constraint<sp/>handler<sp/>data<sp/>(called<sp/>when<sp/>SCIP<sp/>is<sp/>exiting)</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="type__cons_8h_1ae374fa77c1e2ea90677f3eae2290b1c0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSFREE(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment">/**<sp/>initialization<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>(called<sp/>after<sp/>problem<sp/>was<sp/>transformed)</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>in<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>in<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="type__cons_8h_1ac2af95eeab68bf76a636f203d49838e2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSINIT(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">/**<sp/>deinitialization<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>(called<sp/>before<sp/>transformed<sp/>problem<sp/>is<sp/>freed)</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>in<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>in<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="type__cons_8h_1a3dbd78915084e4048a6fd2b2ec7debc8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSEXIT(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment">/**<sp/>presolving<sp/>initialization<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>(called<sp/>when<sp/>presolving<sp/>is<sp/>about<sp/>to<sp/>begin)</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>called<sp/>when<sp/>the<sp/>presolving<sp/>process<sp/>is<sp/>about<sp/>to<sp/>begin,<sp/>even<sp/>if<sp/>presolving<sp/>is<sp/>turned<sp/>off.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>may<sp/>use<sp/>this<sp/>call<sp/>to<sp/>initialize<sp/>its<sp/>data<sp/>structures.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>Necessary<sp/>modifications<sp/>that<sp/>have<sp/>to<sp/>be<sp/>performed<sp/>even<sp/>if<sp/>presolving<sp/>is<sp/>turned<sp/>off<sp/>should<sp/>be<sp/>done<sp/>here<sp/>or<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>presolving<sp/>deinitialization<sp/>call<sp/>(SCIP_DECL_CONSEXITPRE()).</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>Note<sp/>that<sp/>the<sp/>constraint<sp/>array<sp/>might<sp/>contain<sp/>constraints<sp/>that<sp/>were<sp/>created<sp/>but<sp/>not<sp/>added<sp/>to<sp/>the<sp/>problem.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constraints<sp/>that<sp/>are<sp/>not<sp/>added,<sp/>i.e.,<sp/>for<sp/>which<sp/>SCIPconsIsAdded()<sp/>returns<sp/>FALSE,<sp/>cannot<sp/>be<sp/>used<sp/>for<sp/>problem</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reductions.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>in<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>in<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="type__cons_8h_1a2a1d22ad8250529ce6a21727f777bb92" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSINITPRE(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**<sp/>presolving<sp/>deinitialization<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>(called<sp/>after<sp/>presolving<sp/>has<sp/>been<sp/>finished)</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>called<sp/>after<sp/>the<sp/>presolving<sp/>has<sp/>been<sp/>finished,<sp/>even<sp/>if<sp/>presolving<sp/>is<sp/>turned<sp/>off.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>may<sp/>use<sp/>this<sp/>call<sp/>e.g.<sp/>to<sp/>clean<sp/>up<sp/>or<sp/>modify<sp/>its<sp/>data<sp/>structures.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>Necessary<sp/>modifications<sp/>that<sp/>have<sp/>to<sp/>be<sp/>performed<sp/>even<sp/>if<sp/>presolving<sp/>is<sp/>turned<sp/>off<sp/>should<sp/>be<sp/>done<sp/>here<sp/>or<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>presolving<sp/>initialization<sp/>call<sp/>(SCIP_DECL_CONSINITPRE()).</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>Besides<sp/>necessary<sp/>modifications<sp/>and<sp/>clean<sp/>up,<sp/>no<sp/>time<sp/>consuming<sp/>operations<sp/>should<sp/>be<sp/>performed,<sp/>especially<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>problem<sp/>has<sp/>already<sp/>been<sp/>solved.<sp/><sp/>Use<sp/>the<sp/>method<sp/>SCIPgetStatus(),<sp/>which<sp/>in<sp/>this<sp/>case<sp/>returns<sp/>SCIP_STATUS_OPTIMAL,</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/>SCIP_STATUS_INFEASIBLE,<sp/>SCIP_STATUS_UNBOUNDED,<sp/>or<sp/>SCIP_STATUS_INFORUNBD.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>Note<sp/>that<sp/>the<sp/>constraint<sp/>array<sp/>might<sp/>contain<sp/>constraints<sp/>that<sp/>were<sp/>created<sp/>but<sp/>not<sp/>added<sp/>to<sp/>the<sp/>problem.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constraints<sp/>that<sp/>are<sp/>not<sp/>added,<sp/>i.e.,<sp/>for<sp/>which<sp/>SCIPconsIsAdded()<sp/>returns<sp/>FALSE,<sp/>cannot<sp/>be<sp/>used<sp/>for<sp/>problem</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reductions.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>final<sp/>array<sp/>of<sp/>constraints<sp/>in<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>final<sp/>number<sp/>of<sp/>constraints<sp/>in<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="type__cons_8h_1ab2b9fcf8af077942042885ba9225bda3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSEXITPRE(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment">/**<sp/>solving<sp/>process<sp/>initialization<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>(called<sp/>when<sp/>branch<sp/>and<sp/>bound<sp/>process<sp/>is<sp/>about<sp/>to<sp/>begin)</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>called<sp/>when<sp/>the<sp/>presolving<sp/>was<sp/>finished<sp/>and<sp/>the<sp/>branch<sp/>and<sp/>bound<sp/>process<sp/>is<sp/>about<sp/>to<sp/>begin.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>may<sp/>use<sp/>this<sp/>call<sp/>to<sp/>initialize<sp/>its<sp/>branch<sp/>and<sp/>bound<sp/>specific<sp/>data.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/>Besides<sp/>necessary<sp/>modifications<sp/>and<sp/>clean<sp/>up,<sp/>no<sp/>time<sp/>consuming<sp/>operations<sp/>should<sp/>be<sp/>performed,<sp/>especially<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>problem<sp/>has<sp/>already<sp/>been<sp/>solved.<sp/><sp/>Use<sp/>the<sp/>method<sp/>SCIPgetStatus(),<sp/>which<sp/>in<sp/>this<sp/>case<sp/>returns<sp/>SCIP_STATUS_OPTIMAL,</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/>SCIP_STATUS_INFEASIBLE,<sp/>SCIP_STATUS_UNBOUNDED,<sp/>or<sp/>SCIP_STATUS_INFORUNBD.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>Note<sp/>that<sp/>the<sp/>constraint<sp/>array<sp/>might<sp/>contain<sp/>constraints<sp/>that<sp/>were<sp/>created<sp/>but<sp/>not<sp/>added<sp/>to<sp/>the<sp/>problem.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constraints<sp/>that<sp/>are<sp/>not<sp/>added,<sp/>i.e.,<sp/>for<sp/>which<sp/>SCIPconsIsAdded()<sp/>returns<sp/>FALSE,<sp/>cannot<sp/>be<sp/>used<sp/>for<sp/>problem</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reductions.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>of<sp/>the<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>of<sp/>the<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="type__cons_8h_1a4969f04dfc1dbc086baa57f4cf601e2a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSINITSOL(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="161"><highlight class="comment">/**<sp/>solving<sp/>process<sp/>deinitialization<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>(called<sp/>before<sp/>branch<sp/>and<sp/>bound<sp/>process<sp/>data<sp/>is<sp/>freed)</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>called<sp/>before<sp/>the<sp/>branch<sp/>and<sp/>bound<sp/>process<sp/>is<sp/>freed.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>should<sp/>use<sp/>this<sp/>call<sp/>to<sp/>clean<sp/>up<sp/>its<sp/>branch<sp/>and<sp/>bound<sp/>data,<sp/>in<sp/>particular<sp/>to<sp/>release</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/>all<sp/>LP<sp/>rows<sp/>that<sp/>he<sp/>has<sp/>created<sp/>or<sp/>captured.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>of<sp/>the<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>of<sp/>the<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>restart<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>was<sp/>this<sp/>exit<sp/>solve<sp/>call<sp/>triggered<sp/>by<sp/>a<sp/>restart?</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="type__cons_8h_1ade732129e1c1e829e1cf738c3eadb8e5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSEXITSOL(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss,<sp/>SCIP_Bool<sp/>restart)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment">/**<sp/>frees<sp/>specific<sp/>constraint<sp/>data</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/>@warning<sp/>There<sp/>may<sp/>exist<sp/>unprocessed<sp/>events.<sp/>For<sp/>example,<sp/>a<sp/>variable&apos;s<sp/>bound<sp/>may<sp/>have<sp/>been<sp/>already<sp/>changed,<sp/>but<sp/>the</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corresponding<sp/>bound<sp/>change<sp/>event<sp/>was<sp/>not<sp/>yet<sp/>processed.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>belonging<sp/>to<sp/>the<sp/>constraint<sp/>data</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>consdata<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>the<sp/>constraint<sp/>data<sp/>to<sp/>free</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="type__cons_8h_1a356ccbf8a6ac344c2b7fad0ad1e288b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSDELETE(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>cons,<sp/>SCIP_CONSDATA**<sp/>consdata)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">/**<sp/>transforms<sp/>constraint<sp/>data<sp/>into<sp/>data<sp/>belonging<sp/>to<sp/>the<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>sourcecons<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>source<sp/>constraint<sp/>to<sp/>transform</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>targetcons<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>created<sp/>target<sp/>constraint</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="197" refid="type__cons_8h_1a9310b78181f94e2923716f4e6e02dda7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSTRANS(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>sourcecons,<sp/>SCIP_CONS**<sp/>targetcons)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment">/**<sp/>LP<sp/>initialization<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>(called<sp/>before<sp/>the<sp/>initial<sp/>LP<sp/>relaxation<sp/>at<sp/>a<sp/>node<sp/>is<sp/>solved)</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/>Puts<sp/>the<sp/>LP<sp/>relaxations<sp/>of<sp/>all<sp/>&quot;initial&quot;<sp/>constraints<sp/>into<sp/>the<sp/>LP.<sp/>The<sp/>method<sp/>should<sp/>put<sp/>a<sp/>canonic<sp/>LP<sp/>relaxation</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>all<sp/>given<sp/>constraints<sp/>to<sp/>the<sp/>LP<sp/>with<sp/>calls<sp/>to<sp/>SCIPaddCut().</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="type__cons_8h_1aaa3496c95e47e4149a7e8dc629d3352a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSINITLP(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment">/**<sp/>separation<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>for<sp/>LP<sp/>solution</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/>Separates<sp/>all<sp/>constraints<sp/>of<sp/>the<sp/>constraint<sp/>handler.<sp/>The<sp/>method<sp/>is<sp/>called<sp/>in<sp/>the<sp/>LP<sp/>solution<sp/>loop,</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/>which<sp/>means<sp/>that<sp/>a<sp/>valid<sp/>LP<sp/>solution<sp/>exists.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>first<sp/>nusefulconss<sp/>constraints<sp/>are<sp/>the<sp/>ones,<sp/>that<sp/>are<sp/>identified<sp/>to<sp/>likely<sp/>be<sp/>violated.<sp/>The<sp/>separation</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/>method<sp/>should<sp/>process<sp/>only<sp/>the<sp/>useful<sp/>constraints<sp/>in<sp/>most<sp/>runs,<sp/>and<sp/>only<sp/>occasionally<sp/>the<sp/>remaining</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/><sp/>nconss<sp/>-<sp/>nusefulconss<sp/>constraints.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nusefulconss<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>useful<sp/>(non-obsolete)<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>result<sp/>of<sp/>the<sp/>separation<sp/>call</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/><sp/>possible<sp/>return<sp/>values<sp/>for<sp/>*result<sp/>(if<sp/>more<sp/>than<sp/>one<sp/>applies,<sp/>the<sp/>first<sp/>in<sp/>the<sp/>list<sp/>should<sp/>be<sp/>used):</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_CUTOFF<sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>node<sp/>is<sp/>infeasible<sp/>in<sp/>the<sp/>variable&apos;s<sp/>bounds<sp/>and<sp/>can<sp/>be<sp/>cut<sp/>off</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_CONSADDED<sp/><sp/>:<sp/>an<sp/>additional<sp/>constraint<sp/>was<sp/>generated</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_REDUCEDDOM<sp/>:<sp/>a<sp/>variable&apos;s<sp/>domain<sp/>was<sp/>reduced</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_SEPARATED<sp/><sp/>:<sp/>a<sp/>cutting<sp/>plane<sp/>was<sp/>generated</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_NEWROUND<sp/><sp/><sp/>:<sp/>a<sp/>cutting<sp/>plane<sp/>was<sp/>generated<sp/>and<sp/>a<sp/>new<sp/>separation<sp/>round<sp/>should<sp/>immediately<sp/>start</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DIDNOTFIND<sp/>:<sp/>the<sp/>separator<sp/>searched,<sp/>but<sp/>did<sp/>not<sp/>find<sp/>domain<sp/>reductions,<sp/>cutting<sp/>planes,<sp/>or<sp/>cut<sp/>constraints</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DIDNOTRUN<sp/><sp/>:<sp/>the<sp/>separator<sp/>was<sp/>skipped</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DELAYED<sp/><sp/><sp/><sp/>:<sp/>the<sp/>separator<sp/>was<sp/>skipped,<sp/>but<sp/>should<sp/>be<sp/>called<sp/>again</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="type__cons_8h_1a517c2525fd8d67fb72c51b74860bde48" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSSEPALP(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nconss,<sp/>int<sp/>nusefulconss,<sp/>SCIP_RESULT*<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment">/**<sp/>separation<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>for<sp/>arbitrary<sp/>primal<sp/>solution</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/>Separates<sp/>all<sp/>constraints<sp/>of<sp/>the<sp/>constraint<sp/>handler.<sp/>The<sp/>method<sp/>is<sp/>called<sp/>outside<sp/>the<sp/>LP<sp/>solution<sp/>loop<sp/>(e.g.,<sp/>by</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>relaxator<sp/>or<sp/>a<sp/>primal<sp/>heuristic),<sp/>which<sp/>means<sp/>that<sp/>there<sp/>is<sp/>no<sp/>valid<sp/>LP<sp/>solution.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/><sp/>Instead,<sp/>the<sp/>method<sp/>should<sp/>produce<sp/>cuts<sp/>that<sp/>separate<sp/>the<sp/>given<sp/>solution.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>first<sp/>nusefulconss<sp/>constraints<sp/>are<sp/>the<sp/>ones,<sp/>that<sp/>are<sp/>identified<sp/>to<sp/>likely<sp/>be<sp/>violated.<sp/>The<sp/>separation</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/>method<sp/>should<sp/>process<sp/>only<sp/>the<sp/>useful<sp/>constraints<sp/>in<sp/>most<sp/>runs,<sp/>and<sp/>only<sp/>occasionally<sp/>the<sp/>remaining</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/><sp/>nconss<sp/>-<sp/>nusefulconss<sp/>constraints.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nusefulconss<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>useful<sp/>(non-obsolete)<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>sol<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>primal<sp/>solution<sp/>that<sp/>should<sp/>be<sp/>separated</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>result<sp/>of<sp/>the<sp/>separation<sp/>call</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/>possible<sp/>return<sp/>values<sp/>for<sp/>*result<sp/>(if<sp/>more<sp/>than<sp/>one<sp/>applies,<sp/>the<sp/>first<sp/>in<sp/>the<sp/>list<sp/>should<sp/>be<sp/>used):</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_CUTOFF<sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>node<sp/>is<sp/>infeasible<sp/>in<sp/>the<sp/>variable&apos;s<sp/>bounds<sp/>and<sp/>can<sp/>be<sp/>cut<sp/>off</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_CONSADDED<sp/><sp/>:<sp/>an<sp/>additional<sp/>constraint<sp/>was<sp/>generated</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_REDUCEDDOM<sp/>:<sp/>a<sp/>variable&apos;s<sp/>domain<sp/>was<sp/>reduced</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_SEPARATED<sp/><sp/>:<sp/>a<sp/>cutting<sp/>plane<sp/>was<sp/>generated</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_NEWROUND<sp/><sp/><sp/>:<sp/>a<sp/>cutting<sp/>plane<sp/>was<sp/>generated<sp/>and<sp/>a<sp/>new<sp/>separation<sp/>round<sp/>should<sp/>immediately<sp/>start</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DIDNOTFIND<sp/>:<sp/>the<sp/>separator<sp/>searched,<sp/>but<sp/>did<sp/>not<sp/>find<sp/>domain<sp/>reductions,<sp/>cutting<sp/>planes,<sp/>or<sp/>cut<sp/>constraints</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DIDNOTRUN<sp/><sp/>:<sp/>the<sp/>separator<sp/>was<sp/>skipped</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DELAYED<sp/><sp/><sp/><sp/>:<sp/>the<sp/>separator<sp/>was<sp/>skipped,<sp/>but<sp/>should<sp/>be<sp/>called<sp/>again</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="type__cons_8h_1ae5aed12c51e87312fad8287c6b114bd4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSSEPASOL(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nconss,<sp/>int<sp/>nusefulconss,<sp/>SCIP_SOL*<sp/>sol,<sp/>SCIP_RESULT*<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="274"><highlight class="comment">/**<sp/>constraint<sp/>enforcing<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>for<sp/>LP<sp/>solutions</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>method<sp/>is<sp/>called<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>node<sp/>processing<sp/>loop<sp/>for<sp/>a<sp/>node<sp/>where<sp/>the<sp/>LP<sp/>was<sp/>solved.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>LP<sp/>solution<sp/>has<sp/>to<sp/>be<sp/>checked<sp/>for<sp/>feasibility.<sp/>If<sp/>possible,<sp/>an<sp/>infeasibility<sp/>should<sp/>be<sp/>resolved<sp/>by</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/><sp/>branching,<sp/>reducing<sp/>a<sp/>variable&apos;s<sp/>domain<sp/>to<sp/>exclude<sp/>the<sp/>solution<sp/>or<sp/>separating<sp/>the<sp/>solution<sp/>with<sp/>a<sp/>valid</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/><sp/>cutting<sp/>plane.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>enforcing<sp/>methods<sp/>of<sp/>the<sp/>active<sp/>constraint<sp/>handlers<sp/>are<sp/>called<sp/>in<sp/>decreasing<sp/>order<sp/>of<sp/>their<sp/>enforcing</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/><sp/>priorities<sp/>until<sp/>the<sp/>first<sp/>constraint<sp/>handler<sp/>returned<sp/>with<sp/>the<sp/>value<sp/>SCIP_CUTOFF,<sp/>SCIP_SEPARATED,</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/><sp/>SCIP_REDUCEDDOM,<sp/>SCIP_CONSADDED,<sp/>or<sp/>SCIP_BRANCHED.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>integrality<sp/>constraint<sp/>handler<sp/>has<sp/>an<sp/>enforcing<sp/>priority<sp/>of<sp/>zero.<sp/>A<sp/>constraint<sp/>handler<sp/>which<sp/>can</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/>(or<sp/>wants)<sp/>to<sp/>enforce<sp/>its<sp/>constraints<sp/>only<sp/>for<sp/>integral<sp/>solutions<sp/>should<sp/>have<sp/>a<sp/>negative<sp/>enforcing<sp/>priority</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/><sp/>(e.g.<sp/>the<sp/>alldiff-constraint<sp/>can<sp/>only<sp/>operate<sp/>on<sp/>integral<sp/>solutions).</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>constraint<sp/>handler<sp/>which<sp/>wants<sp/>to<sp/>incorporate<sp/>its<sp/>own<sp/>branching<sp/>strategy<sp/>even<sp/>on<sp/>non-integral</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/><sp/>solutions<sp/>must<sp/>have<sp/>an<sp/>enforcing<sp/>priority<sp/>greater<sp/>than<sp/>zero<sp/>(e.g.<sp/>the<sp/>SOS-constraint<sp/>incorporates</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/><sp/>SOS-branching<sp/>on<sp/>non-integral<sp/>solutions).</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>first<sp/>nusefulconss<sp/>constraints<sp/>are<sp/>the<sp/>ones,<sp/>that<sp/>are<sp/>identified<sp/>to<sp/>likely<sp/>be<sp/>violated.<sp/>The<sp/>enforcing</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/><sp/>method<sp/>should<sp/>process<sp/>the<sp/>useful<sp/>constraints<sp/>first.<sp/>The<sp/>other<sp/>nconss<sp/>-<sp/>nusefulconss<sp/>constraints<sp/>should<sp/>only</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/><sp/>be<sp/>enforced,<sp/>if<sp/>no<sp/>violation<sp/>was<sp/>found<sp/>in<sp/>the<sp/>useful<sp/>constraints.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nusefulconss<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>useful<sp/>(non-obsolete)<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>solinfeasible<sp/><sp/><sp/>:<sp/>was<sp/>the<sp/>solution<sp/>already<sp/>declared<sp/>infeasible<sp/>by<sp/>a<sp/>constraint<sp/>handler?</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>result<sp/>of<sp/>the<sp/>enforcing<sp/>call</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/><sp/>possible<sp/>return<sp/>values<sp/>for<sp/>*result<sp/>(if<sp/>more<sp/>than<sp/>one<sp/>applies,<sp/>the<sp/>first<sp/>in<sp/>the<sp/>list<sp/>should<sp/>be<sp/>used):</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_CUTOFF<sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>node<sp/>is<sp/>infeasible<sp/>in<sp/>the<sp/>variable&apos;s<sp/>bounds<sp/>and<sp/>can<sp/>be<sp/>cut<sp/>off</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_CONSADDED<sp/><sp/>:<sp/>an<sp/>additional<sp/>constraint<sp/>was<sp/>generated</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_REDUCEDDOM<sp/>:<sp/>a<sp/>variable&apos;s<sp/>domain<sp/>was<sp/>reduced</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_SEPARATED<sp/><sp/>:<sp/>a<sp/>cutting<sp/>plane<sp/>was<sp/>generated</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_BRANCHED<sp/><sp/><sp/>:<sp/>no<sp/>changes<sp/>were<sp/>made<sp/>to<sp/>the<sp/>problem,<sp/>but<sp/>a<sp/>branching<sp/>was<sp/>applied<sp/>to<sp/>resolve<sp/>an<sp/>infeasibility</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_INFEASIBLE<sp/>:<sp/>at<sp/>least<sp/>one<sp/>constraint<sp/>is<sp/>infeasible,<sp/>but<sp/>it<sp/>was<sp/>not<sp/>resolved</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_FEASIBLE<sp/><sp/><sp/>:<sp/>all<sp/>constraints<sp/>of<sp/>the<sp/>handler<sp/>are<sp/>feasible</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="type__cons_8h_1a19c17cc4fe1c293cfc1f2487b70046f0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSENFOLP(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss,<sp/>int<sp/>nusefulconss,<sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_Bool<sp/>solinfeasible,<sp/>SCIP_RESULT*<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="316"><highlight class="comment">/**<sp/>constraint<sp/>enforcing<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>for<sp/>pseudo<sp/>solutions</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>method<sp/>is<sp/>called<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>node<sp/>processing<sp/>loop<sp/>for<sp/>a<sp/>node<sp/>where<sp/>the<sp/>LP<sp/>was<sp/>not<sp/>solved.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>pseudo<sp/>solution<sp/>has<sp/>to<sp/>be<sp/>checked<sp/>for<sp/>feasibility.<sp/>If<sp/>possible,<sp/>an<sp/>infeasibility<sp/>should<sp/>be<sp/>resolved<sp/>by</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/><sp/>branching,<sp/>reducing<sp/>a<sp/>variable&apos;s<sp/>domain<sp/>to<sp/>exclude<sp/>the<sp/>solution<sp/>or<sp/>adding<sp/>an<sp/>additional<sp/>constraint.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/><sp/>Separation<sp/>is<sp/>not<sp/>possible,<sp/>since<sp/>the<sp/>LP<sp/>is<sp/>not<sp/>processed<sp/>at<sp/>the<sp/>current<sp/>node.<sp/>All<sp/>LP<sp/>informations<sp/>like</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/><sp/>LP<sp/>solution,<sp/>slack<sp/>values,<sp/>or<sp/>reduced<sp/>costs<sp/>are<sp/>invalid<sp/>and<sp/>must<sp/>not<sp/>be<sp/>accessed.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/><sp/>Like<sp/>in<sp/>the<sp/>enforcing<sp/>method<sp/>for<sp/>LP<sp/>solutions,<sp/>the<sp/>enforcing<sp/>methods<sp/>of<sp/>the<sp/>active<sp/>constraint<sp/>handlers<sp/>are</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/><sp/>called<sp/>in<sp/>decreasing<sp/>order<sp/>of<sp/>their<sp/>enforcing<sp/>priorities<sp/>until<sp/>the<sp/>first<sp/>constraint<sp/>handler<sp/>returned<sp/>with</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>value<sp/>SCIP_CUTOFF,<sp/>SCIP_REDUCEDDOM,<sp/>SCIP_CONSADDED,<sp/>SCIP_BRANCHED,<sp/>or<sp/>SCIP_SOLVELP.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>first<sp/>nusefulconss<sp/>constraints<sp/>are<sp/>the<sp/>ones,<sp/>that<sp/>are<sp/>identified<sp/>to<sp/>likely<sp/>be<sp/>violated.<sp/>The<sp/>enforcing</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/><sp/>method<sp/>should<sp/>process<sp/>the<sp/>useful<sp/>constraints<sp/>first.<sp/>The<sp/>other<sp/>nconss<sp/>-<sp/>nusefulconss<sp/>constraints<sp/>should<sp/>only</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/><sp/>be<sp/>enforced,<sp/>if<sp/>no<sp/>violation<sp/>was<sp/>found<sp/>in<sp/>the<sp/>useful<sp/>constraints.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>pseudo<sp/>solution&apos;s<sp/>objective<sp/>value<sp/>is<sp/>lower<sp/>than<sp/>the<sp/>lower<sp/>bound<sp/>of<sp/>the<sp/>node,<sp/>it<sp/>cannot<sp/>be<sp/>feasible</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>the<sp/>enforcing<sp/>method<sp/>may<sp/>skip<sp/>it&apos;s<sp/>check<sp/>and<sp/>set<sp/>*result<sp/>to<sp/>SCIP_DIDNOTRUN.<sp/>However,<sp/>it<sp/>can<sp/>also<sp/>process</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/><sp/>its<sp/>constraints<sp/>and<sp/>return<sp/>any<sp/>other<sp/>possible<sp/>result<sp/>code.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nusefulconss<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>useful<sp/>(non-obsolete)<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>solinfeasible<sp/><sp/><sp/>:<sp/>was<sp/>the<sp/>solution<sp/>already<sp/>declared<sp/>infeasible<sp/>by<sp/>a<sp/>constraint<sp/>handler?</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>objinfeasible<sp/><sp/><sp/>:<sp/>is<sp/>the<sp/>solution<sp/>infeasible<sp/>anyway<sp/>due<sp/>to<sp/>violating<sp/>lower<sp/>objective<sp/>bound?</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>result<sp/>of<sp/>the<sp/>enforcing<sp/>call</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/><sp/>possible<sp/>return<sp/>values<sp/>for<sp/>*result<sp/>(if<sp/>more<sp/>than<sp/>one<sp/>applies,<sp/>the<sp/>first<sp/>in<sp/>the<sp/>list<sp/>should<sp/>be<sp/>used):</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_CUTOFF<sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>node<sp/>is<sp/>infeasible<sp/>in<sp/>the<sp/>variable&apos;s<sp/>bounds<sp/>and<sp/>can<sp/>be<sp/>cut<sp/>off</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_CONSADDED<sp/><sp/>:<sp/>an<sp/>additional<sp/>constraint<sp/>was<sp/>generated</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_REDUCEDDOM<sp/>:<sp/>a<sp/>variable&apos;s<sp/>domain<sp/>was<sp/>reduced</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_BRANCHED<sp/><sp/><sp/>:<sp/>no<sp/>changes<sp/>were<sp/>made<sp/>to<sp/>the<sp/>problem,<sp/>but<sp/>a<sp/>branching<sp/>was<sp/>applied<sp/>to<sp/>resolve<sp/>an<sp/>infeasibility</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_SOLVELP<sp/><sp/><sp/><sp/>:<sp/>at<sp/>least<sp/>one<sp/>constraint<sp/>is<sp/>infeasible,<sp/>and<sp/>this<sp/>can<sp/>only<sp/>be<sp/>resolved<sp/>by<sp/>solving<sp/>the<sp/>LP</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_INFEASIBLE<sp/>:<sp/>at<sp/>least<sp/>one<sp/>constraint<sp/>is<sp/>infeasible,<sp/>but<sp/>it<sp/>was<sp/>not<sp/>resolved</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_FEASIBLE<sp/><sp/><sp/>:<sp/>all<sp/>constraints<sp/>of<sp/>the<sp/>handler<sp/>are<sp/>feasible</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DIDNOTRUN<sp/><sp/>:<sp/>the<sp/>enforcement<sp/>was<sp/>skipped<sp/>(only<sp/>possible,<sp/>if<sp/>objinfeasible<sp/>is<sp/>true)</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="type__cons_8h_1a8e37444d363c0d6b659cf95866118c2e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSENFOPS(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss,<sp/>int<sp/>nusefulconss,<sp/>\</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_Bool<sp/>solinfeasible,<sp/>SCIP_Bool<sp/>objinfeasible,<sp/>SCIP_RESULT*<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="359"><highlight class="comment">/**<sp/>feasibility<sp/>check<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>for<sp/>integral<sp/>solutions</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>given<sp/>solution<sp/>has<sp/>to<sp/>be<sp/>checked<sp/>for<sp/>feasibility.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>check<sp/>methods<sp/>of<sp/>the<sp/>active<sp/>constraint<sp/>handlers<sp/>are<sp/>called<sp/>in<sp/>decreasing<sp/>order<sp/>of<sp/>their<sp/>check</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/><sp/>priorities<sp/>until<sp/>the<sp/>first<sp/>constraint<sp/>handler<sp/>returned<sp/>with<sp/>the<sp/>result<sp/>SCIP_INFEASIBLE.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>integrality<sp/>constraint<sp/>handler<sp/>has<sp/>a<sp/>check<sp/>priority<sp/>of<sp/>zero.<sp/>A<sp/>constraint<sp/>handler<sp/>which<sp/>can</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/><sp/>(or<sp/>wants)<sp/>to<sp/>check<sp/>its<sp/>constraints<sp/>only<sp/>for<sp/>integral<sp/>solutions<sp/>should<sp/>have<sp/>a<sp/>negative<sp/>check<sp/>priority</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/><sp/>(e.g.<sp/>the<sp/>alldiff-constraint<sp/>can<sp/>only<sp/>operate<sp/>on<sp/>integral<sp/>solutions).</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>constraint<sp/>handler<sp/>which<sp/>wants<sp/>to<sp/>check<sp/>feasibility<sp/>even<sp/>on<sp/>non-integral<sp/>solutions<sp/>must<sp/>have<sp/>a</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/><sp/>check<sp/>priority<sp/>greater<sp/>than<sp/>zero<sp/>(e.g.<sp/>if<sp/>the<sp/>check<sp/>is<sp/>much<sp/>faster<sp/>than<sp/>testing<sp/>all<sp/>variables<sp/>for</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/><sp/>integrality).</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>some<sp/>cases,<sp/>integrality<sp/>conditions<sp/>or<sp/>rows<sp/>of<sp/>the<sp/>current<sp/>LP<sp/>don&apos;t<sp/>have<sp/>to<sp/>be<sp/>checked,<sp/>because<sp/>their</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/><sp/>feasibility<sp/>is<sp/>already<sp/>checked<sp/>or<sp/>implicitly<sp/>given.<sp/>In<sp/>these<sp/>cases,<sp/>&apos;checkintegrality&apos;<sp/>or</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/><sp/>&apos;checklprows&apos;<sp/>is<sp/>FALSE.</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>sol<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>solution<sp/>to<sp/>check<sp/>feasibility<sp/>for</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>checkintegrality:<sp/>has<sp/>integrality<sp/>to<sp/>be<sp/>checked?</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>checklprows<sp/><sp/><sp/><sp/><sp/>:<sp/>have<sp/>current<sp/>LP<sp/>rows<sp/>to<sp/>be<sp/>checked?</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>printreason<sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>reason<sp/>for<sp/>the<sp/>violation<sp/>be<sp/>printed?</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>result<sp/>of<sp/>the<sp/>feasibility<sp/>checking<sp/>call</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/><sp/>possible<sp/>return<sp/>values<sp/>for<sp/>*result:</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_INFEASIBLE<sp/>:<sp/>at<sp/>least<sp/>one<sp/>constraint<sp/>of<sp/>the<sp/>handler<sp/>is<sp/>infeasible</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_FEASIBLE<sp/><sp/><sp/>:<sp/>all<sp/>constraints<sp/>of<sp/>the<sp/>handler<sp/>are<sp/>feasible</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="type__cons_8h_1ad15dad558f571555f654cc052eb3fa38" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSCHECK(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss,<sp/>SCIP_SOL*<sp/>sol,<sp/>\</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_Bool<sp/>checkintegrality,<sp/>SCIP_Bool<sp/>checklprows,<sp/>SCIP_Bool<sp/>printreason,<sp/>SCIP_RESULT*<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="394"><highlight class="comment">/**<sp/>domain<sp/>propagation<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>first<sp/>nusefulconss<sp/>constraints<sp/>are<sp/>the<sp/>ones,<sp/>that<sp/>are<sp/>identified<sp/>to<sp/>likely<sp/>be<sp/>violated.<sp/>The<sp/>propagation</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/><sp/>method<sp/>should<sp/>process<sp/>only<sp/>the<sp/>useful<sp/>constraints<sp/>in<sp/>most<sp/>runs,<sp/>and<sp/>only<sp/>occasionally<sp/>the<sp/>remaining</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/><sp/>nconss<sp/>-<sp/>nusefulconss<sp/>constraints.</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>if<sp/>the<sp/>constraint<sp/>handler<sp/>uses<sp/>dual<sp/>information<sp/>in<sp/>propagation<sp/>it<sp/>is<sp/>nesassary<sp/>to<sp/>check<sp/>via<sp/>calling</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIPallowDualReds<sp/>and<sp/>SCIPallowObjProp<sp/>if<sp/>dual<sp/>reductions<sp/>and<sp/>propgation<sp/>with<sp/>the<sp/>current<sp/>cutoff<sp/>bound,<sp/>resp.,</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>allowed.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nusefulconss<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>useful<sp/>(non-obsolete)<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nmarkedconss<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>which<sp/>are<sp/>marked<sp/>to<sp/>be<sp/>definitely<sp/>propagated</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>proptiming<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>current<sp/>point<sp/>in<sp/>the<sp/>node<sp/>solving<sp/>loop</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>result<sp/>of<sp/>the<sp/>propagation<sp/>call</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/><sp/>possible<sp/>return<sp/>values<sp/>for<sp/>*result:</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_CUTOFF<sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>node<sp/>is<sp/>infeasible<sp/>in<sp/>the<sp/>variable&apos;s<sp/>bounds<sp/>and<sp/>can<sp/>be<sp/>cut<sp/>off</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_REDUCEDDOM<sp/>:<sp/>at<sp/>least<sp/>one<sp/>domain<sp/>reduction<sp/>was<sp/>found</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DIDNOTFIND<sp/>:<sp/>the<sp/>propagator<sp/>searched<sp/>but<sp/>did<sp/>not<sp/>find<sp/>any<sp/>domain<sp/>reductions</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DIDNOTRUN<sp/><sp/>:<sp/>the<sp/>propagator<sp/>was<sp/>skipped</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DELAYED<sp/><sp/><sp/><sp/>:<sp/>the<sp/>propagator<sp/>was<sp/>skipped,<sp/>but<sp/>should<sp/>be<sp/>called<sp/>again</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="type__cons_8h_1a7332f43c87e6e1c337c7e8a72f1660ee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSPROP(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss,<sp/>int<sp/>nusefulconss,<sp/>int<sp/>nmarkedconss,<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_PROPTIMING<sp/>proptiming,<sp/>SCIP_RESULT*<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="424"><highlight class="comment">/**<sp/>presolving<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>presolver<sp/>should<sp/>go<sp/>through<sp/>the<sp/>variables<sp/>and<sp/>constraints<sp/>and<sp/>tighten<sp/>the<sp/>domains<sp/>or</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/><sp/>constraints.<sp/>Each<sp/>tightening<sp/>should<sp/>increase<sp/>the<sp/>given<sp/>total<sp/>number<sp/>of<sp/>changes.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>to<sp/>process</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nrounds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>presolving<sp/>rounds<sp/>already<sp/>done</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>presoltiming<sp/><sp/><sp/><sp/>:<sp/>current<sp/>presolving<sp/>timing</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nnewfixedvars<sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>variables<sp/>fixed<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to<sp/>the<sp/>presolving<sp/>method</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nnewaggrvars<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>variables<sp/>aggregated<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to<sp/>the<sp/>presolving<sp/>method</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nnewchgvartypes<sp/>:<sp/>number<sp/>of<sp/>variable<sp/>type<sp/>changes<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to<sp/>the<sp/>presolving<sp/>method</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nnewchgbds<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>variable<sp/>bounds<sp/>tightened<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to<sp/>the<sp/>presolving<sp/>method</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nnewholes<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>domain<sp/>holes<sp/>added<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to<sp/>the<sp/>presolving<sp/>method</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nnewdelconss<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>deleted<sp/>constraints<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to<sp/>the<sp/>presolving<sp/>method</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nnewaddconss<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>added<sp/>constraints<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to<sp/>the<sp/>presolving<sp/>method</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nnewupgdconss<sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>upgraded<sp/>constraints<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to<sp/>the<sp/>presolving<sp/>method</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nnewchgcoefs<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>changed<sp/>coefficients<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to<sp/>the<sp/>presolving<sp/>method</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nnewchgsides<sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>changed<sp/>left<sp/>or<sp/>right<sp/>hand<sp/>sides<sp/>since<sp/>the<sp/>last<sp/>call<sp/>to<sp/>the<sp/>presolving<sp/>method</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>the<sp/>counters<sp/>state<sp/>the<sp/>changes<sp/>since<sp/>the<sp/>last<sp/>call<sp/>including<sp/>the<sp/>changes<sp/>of<sp/>this<sp/>presolving<sp/>method<sp/>during<sp/>its</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>if<sp/>the<sp/>constraint<sp/>handler<sp/>performs<sp/>dual<sp/>presolving<sp/>it<sp/>is<sp/>nesassary<sp/>to<sp/>check<sp/>via<sp/>calling<sp/>SCIPallowDualReds</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>dual<sp/>reductions<sp/>are<sp/>allowed.</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*<sp/><sp/>input/output:</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nfixedvars<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>count<sp/>total<sp/>number<sp/>of<sp/>variables<sp/>fixed<sp/>of<sp/>all<sp/>presolvers</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>naggrvars<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>count<sp/>total<sp/>number<sp/>of<sp/>variables<sp/>aggregated<sp/>of<sp/>all<sp/>presolvers</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nchgvartypes<sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>count<sp/>total<sp/>number<sp/>of<sp/>variable<sp/>type<sp/>changes<sp/>of<sp/>all<sp/>presolvers</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nchgbds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>count<sp/>total<sp/>number<sp/>of<sp/>variable<sp/>bounds<sp/>tightened<sp/>of<sp/>all<sp/>presolvers</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>naddholes<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>count<sp/>total<sp/>number<sp/>of<sp/>domain<sp/>holes<sp/>added<sp/>of<sp/>all<sp/>presolvers</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>ndelconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>count<sp/>total<sp/>number<sp/>of<sp/>deleted<sp/>constraints<sp/>of<sp/>all<sp/>presolvers</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>naddconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>count<sp/>total<sp/>number<sp/>of<sp/>added<sp/>constraints<sp/>of<sp/>all<sp/>presolvers</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nupgdconss<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>count<sp/>total<sp/>number<sp/>of<sp/>upgraded<sp/>constraints<sp/>of<sp/>all<sp/>presolvers</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nchgcoefs<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>count<sp/>total<sp/>number<sp/>of<sp/>changed<sp/>coefficients<sp/>of<sp/>all<sp/>presolvers</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nchgsides<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>count<sp/>total<sp/>number<sp/>of<sp/>changed<sp/>left/right<sp/>hand<sp/>sides<sp/>of<sp/>all<sp/>presolvers</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*<sp/><sp/>@todo:<sp/>implement<sp/>a<sp/>final<sp/>round<sp/>of<sp/>presolving<sp/>after<sp/>SCIPisPresolveFinished(),</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>therefore,<sp/>duplicate<sp/>counters<sp/>to<sp/>a<sp/>&quot;relevant<sp/>for<sp/>finishing<sp/>presolve&quot;<sp/>version</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/><sp/>output:</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>result<sp/>of<sp/>the<sp/>presolving<sp/>call</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/><sp/>possible<sp/>return<sp/>values<sp/>for<sp/>*result:</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_UNBOUNDED<sp/><sp/>:<sp/>at<sp/>least<sp/>one<sp/>variable<sp/>is<sp/>not<sp/>bounded<sp/>by<sp/>any<sp/>constraint<sp/>in<sp/>obj.<sp/>direction<sp/>-&gt;<sp/>problem<sp/>is<sp/>unbounded</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_CUTOFF<sp/><sp/><sp/><sp/><sp/>:<sp/>at<sp/>least<sp/>one<sp/>constraint<sp/>is<sp/>infeasible<sp/>in<sp/>the<sp/>variable&apos;s<sp/>bounds<sp/>-&gt;<sp/>problem<sp/>is<sp/>infeasible</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_SUCCESS<sp/><sp/><sp/><sp/>:<sp/>the<sp/>presolving<sp/>method<sp/>found<sp/>a<sp/>reduction</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DIDNOTFIND<sp/>:<sp/>the<sp/>presolving<sp/>method<sp/>searched,<sp/>but<sp/>did<sp/>not<sp/>find<sp/>a<sp/>presolving<sp/>change</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DIDNOTRUN<sp/><sp/>:<sp/>the<sp/>presolving<sp/>method<sp/>was<sp/>skipped</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DELAYED<sp/><sp/><sp/><sp/>:<sp/>the<sp/>presolving<sp/>method<sp/>was<sp/>skipped,<sp/>but<sp/>should<sp/>be<sp/>called<sp/>again</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="type__cons_8h_1aa1a9531dd2d21a1b43935038718325fb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSPRESOL(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss,<sp/>int<sp/>nrounds,<sp/>\</highlight></codeline>
<codeline lineno="480"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_PRESOLTIMING<sp/>presoltiming,<sp/>int<sp/>nnewfixedvars,<sp/>int<sp/>nnewaggrvars,<sp/>int<sp/>nnewchgvartypes,<sp/>int<sp/>nnewchgbds,<sp/>int<sp/>nnewholes,<sp/>\</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nnewdelconss,<sp/>int<sp/>nnewaddconss,<sp/>int<sp/>nnewupgdconss,<sp/>int<sp/>nnewchgcoefs,<sp/>int<sp/>nnewchgsides,<sp/>\</highlight></codeline>
<codeline lineno="482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>nfixedvars,<sp/>int*<sp/>naggrvars,<sp/>int*<sp/>nchgvartypes,<sp/>int*<sp/>nchgbds,<sp/>int*<sp/>naddholes,<sp/>\</highlight></codeline>
<codeline lineno="483"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>ndelconss,<sp/>int*<sp/>naddconss,<sp/>int*<sp/>nupgdconss,<sp/>int*<sp/>nchgcoefs,<sp/>int*<sp/>nchgsides,<sp/>SCIP_RESULT*<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="485"><highlight class="comment">/**<sp/>propagation<sp/>conflict<sp/>resolving<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>called<sp/>during<sp/>conflict<sp/>analysis.<sp/>If<sp/>the<sp/>constraint<sp/>handler<sp/>wants<sp/>to<sp/>support<sp/>conflict<sp/>analysis,</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>should<sp/>call<sp/>SCIPinferVarLbCons()<sp/>or<sp/>SCIPinferVarUbCons()<sp/>in<sp/>domain<sp/>propagation<sp/>instead<sp/>of<sp/>SCIPchgVarLb()<sp/>or</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/><sp/>SCIPchgVarUb()<sp/>in<sp/>order<sp/>to<sp/>deduce<sp/>bound<sp/>changes<sp/>on<sp/>variables.</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>the<sp/>SCIPinferVarLbCons()<sp/>and<sp/>SCIPinferVarUbCons()<sp/>calls,<sp/>the<sp/>handler<sp/>provides<sp/>the<sp/>constraint,<sp/>that<sp/>deduced<sp/>the</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/><sp/>variable&apos;s<sp/>bound<sp/>change,<sp/>and<sp/>an<sp/>integer<sp/>value<sp/>&quot;inferinfo&quot;<sp/>that<sp/>can<sp/>be<sp/>arbitrarily<sp/>chosen.</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>propagation<sp/>conflict<sp/>resolving<sp/>method<sp/>can<sp/>then<sp/>be<sp/>implemented,<sp/>to<sp/>provide<sp/>a<sp/>&quot;reasons&quot;<sp/>for<sp/>the<sp/>bound</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/><sp/>changes,<sp/>i.e.<sp/>the<sp/>bounds<sp/>of<sp/>variables<sp/>at<sp/>the<sp/>time<sp/>of<sp/>the<sp/>propagation,<sp/>that<sp/>forced<sp/>the<sp/>constraint<sp/>to<sp/>set<sp/>the</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/><sp/>conflict<sp/>variable&apos;s<sp/>bound<sp/>to<sp/>its<sp/>current<sp/>value.<sp/>It<sp/>can<sp/>use<sp/>the<sp/>&quot;inferinfo&quot;<sp/>tag<sp/>to<sp/>identify<sp/>its<sp/>own<sp/>propagation</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/><sp/>rule<sp/>and<sp/>thus<sp/>identify<sp/>the<sp/>&quot;reason&quot;<sp/>bounds.<sp/>The<sp/>bounds<sp/>that<sp/>form<sp/>the<sp/>reason<sp/>of<sp/>the<sp/>assignment<sp/>must<sp/>then<sp/>be<sp/>provided</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/><sp/>by<sp/>calls<sp/>to<sp/>SCIPaddConflictLb(),<sp/>SCIPaddConflictUb(),<sp/>SCIPaddConflictBd(),<sp/>SCIPaddConflictRelaxedLb(),</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/><sp/>SCIPaddConflictRelaxedUb(),<sp/>SCIPaddConflictRelaxedBd(),<sp/>and/or<sp/>SCIPaddConflictBinvar()<sp/>in<sp/>the<sp/>propagation<sp/>conflict</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/><sp/>resolving<sp/>method.</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*<sp/><sp/>For<sp/>example,<sp/>the<sp/>logicor<sp/>constraint<sp/>c<sp/>=<sp/>&quot;x<sp/>or<sp/>y<sp/>or<sp/>z&quot;<sp/>fixes<sp/>variable<sp/>z<sp/>to<sp/>TRUE<sp/>(i.e.<sp/>changes<sp/>the<sp/>lower<sp/>bound<sp/>of<sp/>z</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>1.0),<sp/>if<sp/>both,<sp/>x<sp/>and<sp/>y,<sp/>are<sp/>assigned<sp/>to<sp/>FALSE<sp/>(i.e.<sp/>if<sp/>the<sp/>upper<sp/>bounds<sp/>of<sp/>these<sp/>variables<sp/>are<sp/>0.0).<sp/>It<sp/>uses</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/><sp/>SCIPinferVarLbCons(scip,<sp/>z,<sp/>1.0,<sp/>c,<sp/>0)<sp/>to<sp/>apply<sp/>this<sp/>assignment<sp/>(an<sp/>inference<sp/>information<sp/>tag<sp/>is<sp/>not<sp/>needed<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/><sp/>constraint<sp/>handler<sp/>and<sp/>is<sp/>set<sp/>to<sp/>0).</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>the<sp/>conflict<sp/>analysis,<sp/>the<sp/>constraint<sp/>handler<sp/>may<sp/>be<sp/>asked<sp/>to<sp/>resolve<sp/>the<sp/>lower<sp/>bound<sp/>change<sp/>on<sp/>z<sp/>with</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/><sp/>constraint<sp/>c,<sp/>that<sp/>was<sp/>applied<sp/>at<sp/>a<sp/>time<sp/>given<sp/>by<sp/>a<sp/>bound<sp/>change<sp/>index<sp/>&quot;bdchgidx&quot;.</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/><sp/>With<sp/>a<sp/>call<sp/>to<sp/>SCIPvarGetLbAtIndex(z,<sp/>bdchgidx,<sp/>TRUE),<sp/>the<sp/>handler<sp/>can<sp/>find<sp/>out,<sp/>that<sp/>the<sp/>lower<sp/>bound<sp/>of</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/><sp/>variable<sp/>z<sp/>was<sp/>set<sp/>to<sp/>1.0<sp/>at<sp/>the<sp/>given<sp/>point<sp/>of<sp/>time,<sp/>and<sp/>should<sp/>call<sp/>SCIPaddConflictUb(scip,<sp/>x,<sp/>bdchgidx)<sp/>and</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/><sp/>SCIPaddConflictUb(scip,<sp/>y,<sp/>bdchgidx)<sp/>to<sp/>tell<sp/>SCIP,<sp/>that<sp/>the<sp/>upper<sp/>bounds<sp/>of<sp/>x<sp/>and<sp/>y<sp/>at<sp/>this<sp/>point<sp/>of<sp/>time<sp/>were</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>reason<sp/>for<sp/>the<sp/>deduction<sp/>of<sp/>the<sp/>lower<sp/>bound<sp/>of<sp/>z.</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>that<sp/>deduced<sp/>the<sp/>bound<sp/>change<sp/>of<sp/>the<sp/>conflict<sp/>variable</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>infervar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>conflict<sp/>variable<sp/>whose<sp/>bound<sp/>change<sp/>has<sp/>to<sp/>be<sp/>resolved</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>inferinfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>user<sp/>information<sp/>passed<sp/>to<sp/>the<sp/>corresponding<sp/>SCIPinferVarLbCons()<sp/>or<sp/>SCIPinferVarUbCons()<sp/>call</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>boundtype<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>type<sp/>of<sp/>the<sp/>changed<sp/>bound<sp/>(lower<sp/>or<sp/>upper<sp/>bound)</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>bdchgidx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>index<sp/>of<sp/>the<sp/>bound<sp/>change,<sp/>representing<sp/>the<sp/>point<sp/>of<sp/>time<sp/>where<sp/>the<sp/>change<sp/>took<sp/>place</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>relaxedbd<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>relaxed<sp/>bound<sp/>which<sp/>is<sp/>sufficient<sp/>to<sp/>be<sp/>explained</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/><sp/>output:</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>result<sp/>of<sp/>the<sp/>propagation<sp/>conflict<sp/>resolving<sp/>call</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/><sp/>possible<sp/>return<sp/>values<sp/>for<sp/>*result:</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_SUCCESS<sp/><sp/><sp/><sp/>:<sp/>the<sp/>conflicting<sp/>bound<sp/>change<sp/>has<sp/>been<sp/>successfully<sp/>resolved<sp/>by<sp/>adding<sp/>all<sp/>reason<sp/>bounds</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>SCIP_DIDNOTFIND<sp/>:<sp/>the<sp/>conflicting<sp/>bound<sp/>change<sp/>could<sp/>not<sp/>be<sp/>resolved<sp/>and<sp/>has<sp/>to<sp/>be<sp/>put<sp/>into<sp/>the<sp/>conflict<sp/>set</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>it<sp/>is<sp/>sufficient<sp/>to<sp/>explain/resolve<sp/>the<sp/>relaxed<sp/>bound</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="type__cons_8h_1a7ff294cd3a2a493e6e8b46dedd041b97" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSRESPROP(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>cons,<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_VAR*<sp/>infervar,<sp/>int<sp/>inferinfo,<sp/>SCIP_BOUNDTYPE<sp/>boundtype,<sp/>SCIP_BDCHGIDX*<sp/>bdchgidx,<sp/>SCIP_Real<sp/>relaxedbd,<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_RESULT*<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="534"><highlight class="comment">/**<sp/>variable<sp/>rounding<sp/>lock<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>called,<sp/>after<sp/>a<sp/>constraint<sp/>is<sp/>added<sp/>or<sp/>removed<sp/>from<sp/>the<sp/>transformed<sp/>problem.</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>should<sp/>update<sp/>the<sp/>rounding<sp/>locks<sp/>of<sp/>all<sp/>associated<sp/>variables<sp/>with<sp/>calls<sp/>to<sp/>SCIPaddVarLocks(),</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/><sp/>depending<sp/>on<sp/>the<sp/>way,<sp/>the<sp/>variable<sp/>is<sp/>involved<sp/>in<sp/>the<sp/>constraint:</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>If<sp/>the<sp/>constraint<sp/>may<sp/>get<sp/>violated<sp/>by<sp/>decreasing<sp/>the<sp/>value<sp/>of<sp/>a<sp/>variable,<sp/>it<sp/>should<sp/>call</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>SCIPaddVarLocks(scip,<sp/>var,<sp/>nlockspos,<sp/>nlocksneg),<sp/>saying<sp/>that<sp/>rounding<sp/>down<sp/>is<sp/>potentially<sp/>rendering<sp/>the</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>(positive)<sp/>constraint<sp/>infeasible<sp/>and<sp/>rounding<sp/>up<sp/>is<sp/>potentially<sp/>rendering<sp/>the<sp/>negation<sp/>of<sp/>the<sp/>constraint</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>infeasible.</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>If<sp/>the<sp/>constraint<sp/>may<sp/>get<sp/>violated<sp/>by<sp/>increasing<sp/>the<sp/>value<sp/>of<sp/>a<sp/>variable,<sp/>it<sp/>should<sp/>call</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>SCIPaddVarLocks(scip,<sp/>var,<sp/>nlocksneg,<sp/>nlockspos),<sp/>saying<sp/>that<sp/>rounding<sp/>up<sp/>is<sp/>potentially<sp/>rendering<sp/>the</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>constraint&apos;s<sp/>negation<sp/>infeasible<sp/>and<sp/>rounding<sp/>up<sp/>is<sp/>potentially<sp/>rendering<sp/>the<sp/>constraint<sp/>itself</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>infeasible.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>If<sp/>the<sp/>constraint<sp/>may<sp/>get<sp/>violated<sp/>by<sp/>changing<sp/>the<sp/>variable<sp/>in<sp/>any<sp/>direction,<sp/>it<sp/>should<sp/>call</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>SCIPaddVarLocks(scip,<sp/>var,<sp/>nlockspos<sp/>+<sp/>nlocksneg,<sp/>nlockspos<sp/>+<sp/>nlocksneg).</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/><sp/>Consider<sp/>the<sp/>linear<sp/>constraint<sp/>&quot;3x<sp/>-5y<sp/>+2z<sp/>&lt;=<sp/>7&quot;<sp/>as<sp/>an<sp/>example.<sp/>The<sp/>variable<sp/>rounding<sp/>lock<sp/>method<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/><sp/>linear<sp/>constraint<sp/>handler<sp/>should<sp/>call<sp/>SCIPaddVarLocks(scip,<sp/>x,<sp/>nlocksneg,<sp/>nlockspos),<sp/></highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/><sp/>SCIPaddVarLocks(scip,<sp/>y,<sp/>nlockspos,<sp/>nlocksneg)<sp/>and<sp/>SCIPaddVarLocks(scip,<sp/>z,<sp/>nlocksneg,<sp/>nlockspos)<sp/>to<sp/>tell<sp/>SCIP,</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*<sp/><sp/>that<sp/>rounding<sp/>up<sp/>of<sp/>x<sp/>and<sp/>z<sp/>and<sp/>rounding<sp/>down<sp/>of<sp/>y<sp/>can<sp/>destroy<sp/>the<sp/>feasibility<sp/>of<sp/>the<sp/>constraint,<sp/>while<sp/>rounding</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/><sp/>down<sp/>of<sp/>x<sp/>and<sp/>z<sp/>and<sp/>rounding<sp/>up<sp/>of<sp/>y<sp/>can<sp/>destroy<sp/>the<sp/>feasibility<sp/>of<sp/>the<sp/>constraint&apos;s<sp/>negation<sp/>&quot;3x<sp/>-5y<sp/>+2z<sp/>&gt;<sp/>7&quot;.</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>linear<sp/>constraint<sp/>&quot;2<sp/>&lt;=<sp/>3x<sp/>-5y<sp/>+2z<sp/>&lt;=<sp/>7&quot;<sp/>should<sp/>call</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*<sp/><sp/>SCIPaddVarLocks(scip,<sp/>...,<sp/>nlockspos<sp/>+<sp/>nlocksneg,<sp/>nlockspos<sp/>+<sp/>nlocksneg)<sp/>on<sp/>all<sp/>variables,<sp/>since<sp/>rounding<sp/>in<sp/>both</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/><sp/>directions<sp/>of<sp/>each<sp/>variable<sp/>can<sp/>destroy<sp/>both<sp/>the<sp/>feasibility<sp/>of<sp/>the<sp/>constraint<sp/>and<sp/>it&apos;s<sp/>negation</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*<sp/><sp/>&quot;3x<sp/>-5y<sp/>+2z<sp/>&lt;<sp/>2<sp/><sp/>or<sp/><sp/>3x<sp/>-5y<sp/>+2z<sp/>&gt;<sp/>7&quot;.</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>constraint<sp/>itself<sp/>contains<sp/>other<sp/>constraints<sp/>as<sp/>sub<sp/>constraints<sp/>(e.g.<sp/>the<sp/>&quot;or&quot;<sp/>constraint<sp/>concatenation</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*<sp/><sp/>&quot;c(x)<sp/>or<sp/>d(x)&quot;),<sp/>the<sp/>rounding<sp/>lock<sp/>methods<sp/>of<sp/>these<sp/>constraints<sp/>should<sp/>be<sp/>called<sp/>in<sp/>a<sp/>proper<sp/>way.</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>If<sp/>the<sp/>constraint<sp/>may<sp/>get<sp/>violated<sp/>by<sp/>the<sp/>violation<sp/>of<sp/>the<sp/>sub<sp/>constraint<sp/>c,<sp/>it<sp/>should<sp/>call</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>SCIPaddConsLocks(scip,<sp/>c,<sp/>nlockspos,<sp/>nlocksneg),<sp/>saying<sp/>that<sp/>infeasibility<sp/>of<sp/>c<sp/>may<sp/>lead<sp/>to<sp/>infeasibility<sp/>of</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>(positive)<sp/>constraint,<sp/>and<sp/>infeasibility<sp/>of<sp/>c&apos;s<sp/>negation<sp/>(i.e.<sp/>feasibility<sp/>of<sp/>c)<sp/>may<sp/>lead<sp/>to<sp/>infeasibility</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>of<sp/>the<sp/>constraint&apos;s<sp/>negation<sp/>(i.e.<sp/>feasibility<sp/>of<sp/>the<sp/>constraint).</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>If<sp/>the<sp/>constraint<sp/>may<sp/>get<sp/>violated<sp/>by<sp/>the<sp/>feasibility<sp/>of<sp/>the<sp/>sub<sp/>constraint<sp/>c,<sp/>it<sp/>should<sp/>call</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>SCIPaddConsLocks(scip,<sp/>c,<sp/>nlocksneg,<sp/>nlockspos),<sp/>saying<sp/>that<sp/>infeasibility<sp/>of<sp/>c<sp/>may<sp/>lead<sp/>to<sp/>infeasibility<sp/>of</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>constraint&apos;s<sp/>negation<sp/>(i.e.<sp/>feasibility<sp/>of<sp/>the<sp/>constraint),<sp/>and<sp/>infeasibility<sp/>of<sp/>c&apos;s<sp/>negation<sp/>(i.e.<sp/>feasibility</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>of<sp/>c)<sp/>may<sp/>lead<sp/>to<sp/>infeasibility<sp/>of<sp/>the<sp/>(positive)<sp/>constraint.</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>If<sp/>the<sp/>constraint<sp/>may<sp/>get<sp/>violated<sp/>by<sp/>any<sp/>change<sp/>in<sp/>the<sp/>feasibility<sp/>of<sp/>the<sp/>sub<sp/>constraint<sp/>c,<sp/>it<sp/>should<sp/>call</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>SCIPaddConsLocks(scip,<sp/>c,<sp/>nlockspos<sp/>+<sp/>nlocksneg,<sp/>nlockspos<sp/>+<sp/>nlocksneg).</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>*<sp/><sp/>Consider<sp/>the<sp/>or<sp/>concatenation<sp/>&quot;c(x)<sp/>or<sp/>d(x)&quot;.<sp/>The<sp/>variable<sp/>rounding<sp/>lock<sp/>method<sp/>of<sp/>the<sp/>or<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/><sp/>should<sp/>call<sp/>SCIPaddConsLocks(scip,<sp/>c,<sp/>nlockspos,<sp/>nlocksneg)<sp/>and<sp/>SCIPaddConsLocks(scip,<sp/>d,<sp/>nlockspos,<sp/>nlocksneg)</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>tell<sp/>SCIP,<sp/>that<sp/>infeasibility<sp/>of<sp/>c<sp/>and<sp/>d<sp/>can<sp/>lead<sp/>to<sp/>infeasibility<sp/>of<sp/>&quot;c(x)<sp/>or<sp/>d(x)&quot;.</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/><sp/>As<sp/>a<sp/>second<sp/>example,<sp/>consider<sp/>the<sp/>equivalence<sp/>constraint<sp/>&quot;y<sp/>&lt;-&gt;<sp/>c(x)&quot;<sp/>with<sp/>variable<sp/>y<sp/>and<sp/>constraint<sp/>c.<sp/>The</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/><sp/>constraint<sp/>demands,<sp/>that<sp/>y<sp/>==<sp/>1<sp/>if<sp/>and<sp/>only<sp/>if<sp/>c(x)<sp/>is<sp/>satisfied.<sp/>The<sp/>variable<sp/>lock<sp/>method<sp/>of<sp/>the<sp/>corresponding</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/><sp/>constraint<sp/>handler<sp/>should<sp/>call<sp/>SCIPaddVarLocks(scip,<sp/>y,<sp/>nlockspos<sp/>+<sp/>nlocksneg,<sp/>nlockspos<sp/>+<sp/>nlocksneg)<sp/>and</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*<sp/><sp/>SCIPaddConsLocks(scip,<sp/>c,<sp/>nlockspos<sp/>+<sp/>nlocksneg,<sp/>nlockspos<sp/>+<sp/>nlocksneg),<sp/>because<sp/>any<sp/>modification<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*<sp/><sp/>value<sp/>of<sp/>y<sp/>or<sp/>to<sp/>the<sp/>feasibility<sp/>of<sp/>c<sp/>can<sp/>alter<sp/>the<sp/>feasibility<sp/>of<sp/>the<sp/>equivalence<sp/>constraint.</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>that<sp/>should<sp/>lock<sp/>rounding<sp/>of<sp/>its<sp/>variables,<sp/>or<sp/>NULL<sp/>if<sp/>the<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>need<sp/>constraints</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nlockspos<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>times,<sp/>the<sp/>roundings<sp/>should<sp/>be<sp/>locked<sp/>for<sp/>the<sp/>constraint<sp/>(may<sp/>be<sp/>negative)</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nlocksneg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>times,<sp/>the<sp/>roundings<sp/>should<sp/>be<sp/>locked<sp/>for<sp/>the<sp/>constraint&apos;s<sp/>negation<sp/>(may<sp/>be<sp/>negative)</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591" refid="type__cons_8h_1ab2edc602ea1ed35423a229aefaee7aaa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSLOCK(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>cons,<sp/>int<sp/>nlockspos,<sp/>int<sp/>nlocksneg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="593"><highlight class="comment">/**<sp/>constraint<sp/>activation<sp/>notification<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/><sp/>WARNING!<sp/>There<sp/>may<sp/>exist<sp/>unprocessed<sp/>events.<sp/>For<sp/>example,<sp/>a<sp/>variable&apos;s<sp/>bound<sp/>may<sp/>have<sp/>been<sp/>already<sp/>changed,<sp/>but</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>corresponding<sp/>bound<sp/>change<sp/>event<sp/>was<sp/>not<sp/>yet<sp/>processed.</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>always<sp/>called<sp/>after<sp/>a<sp/>constraint<sp/>of<sp/>the<sp/>constraint<sp/>handler<sp/>was<sp/>activated.<sp/>The<sp/>constraint</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*<sp/><sp/>handler<sp/>may<sp/>use<sp/>this<sp/>call<sp/>to<sp/>update<sp/>his<sp/>own<sp/>(statistical)<sp/>data.</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>that<sp/>has<sp/>been<sp/>activated</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="type__cons_8h_1a85c40a321635910478b808910ba9adba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSACTIVE(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>cons)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="608"><highlight class="comment">/**<sp/>constraint<sp/>deactivation<sp/>notification<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*<sp/><sp/>WARNING!<sp/>There<sp/>may<sp/>exist<sp/>unprocessed<sp/>events.<sp/>For<sp/>example,<sp/>a<sp/>variable&apos;s<sp/>bound<sp/>may<sp/>have<sp/>been<sp/>already<sp/>changed,<sp/>but</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>corresponding<sp/>bound<sp/>change<sp/>event<sp/>was<sp/>not<sp/>yet<sp/>processed.</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>always<sp/>called<sp/>before<sp/>a<sp/>constraint<sp/>of<sp/>the<sp/>constraint<sp/>handler<sp/>is<sp/>deactivated.<sp/>The<sp/>constraint</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/>*<sp/><sp/>handler<sp/>may<sp/>use<sp/>this<sp/>call<sp/>to<sp/>update<sp/>his<sp/>own<sp/>(statistical)<sp/>data.</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>that<sp/>will<sp/>be<sp/>deactivated</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="type__cons_8h_1a978ed7d67d8de87eeed9577a17b1744e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSDEACTIVE(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>cons)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="623"><highlight class="comment">/**<sp/>constraint<sp/>enabling<sp/>notification<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/>*<sp/><sp/>WARNING!<sp/>There<sp/>may<sp/>exist<sp/>unprocessed<sp/>events.<sp/>For<sp/>example,<sp/>a<sp/>variable&apos;s<sp/>bound<sp/>may<sp/>have<sp/>been<sp/>already<sp/>changed,<sp/>but</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>corresponding<sp/>bound<sp/>change<sp/>event<sp/>was<sp/>not<sp/>yet<sp/>processed.</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>always<sp/>called<sp/>after<sp/>a<sp/>constraint<sp/>of<sp/>the<sp/>constraint<sp/>handler<sp/>was<sp/>enabled.<sp/>The<sp/>constraint</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*<sp/><sp/>handler<sp/>may<sp/>use<sp/>this<sp/>call<sp/>to<sp/>update<sp/>his<sp/>own<sp/>(statistical)<sp/>data.</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>that<sp/>has<sp/>been<sp/>enabled</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="type__cons_8h_1aa83f578d4cc68fc292c889f3b53cf23c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSENABLE(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>cons)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="638"><highlight class="comment">/**<sp/>constraint<sp/>disabling<sp/>notification<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/><sp/>WARNING!<sp/>There<sp/>may<sp/>exist<sp/>unprocessed<sp/>events.<sp/>For<sp/>example,<sp/>a<sp/>variable&apos;s<sp/>bound<sp/>may<sp/>have<sp/>been<sp/>already<sp/>changed,<sp/>but</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>corresponding<sp/>bound<sp/>change<sp/>event<sp/>was<sp/>not<sp/>yet<sp/>processed.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>always<sp/>called<sp/>before<sp/>a<sp/>constraint<sp/>of<sp/>the<sp/>constraint<sp/>handler<sp/>is<sp/>disabled.<sp/>The<sp/>constraint</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*<sp/><sp/>handler<sp/>may<sp/>use<sp/>this<sp/>call<sp/>to<sp/>update<sp/>his<sp/>own<sp/>(statistical)<sp/>data.</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>that<sp/>will<sp/>be<sp/>disabled</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="type__cons_8h_1a51ab5dc422ca7a11f11a58eaa94109a9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSDISABLE(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>cons)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="653"><highlight class="comment">/**<sp/>variable<sp/>deletion<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>method<sp/>is<sp/>optinal<sp/>and<sp/>only<sp/>of<sp/>interest<sp/>if<sp/>you<sp/>are<sp/>using<sp/>SCIP<sp/>as<sp/>a<sp/>branch-and-price<sp/>framework.<sp/>That<sp/>means,<sp/>you</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>generating<sp/>new<sp/>variables<sp/>during<sp/>the<sp/>search.<sp/>If<sp/>you<sp/>are<sp/>not<sp/>doing<sp/>that<sp/>just<sp/>define<sp/>the<sp/>function<sp/>pointer<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/>*<sp/><sp/>NULL.</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>this<sp/>method<sp/>gets<sp/>implemented<sp/>you<sp/>should<sp/>iterate<sp/>over<sp/>all<sp/>constraints<sp/>of<sp/>the<sp/>constraint<sp/>handler<sp/>and<sp/>delete<sp/>all</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*<sp/><sp/>variables<sp/>that<sp/>were<sp/>marked<sp/>for<sp/>deletion<sp/>by<sp/>SCIPdelVar().</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>of<sp/>constraints<sp/>in<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nconss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>number<sp/>of<sp/>constraints<sp/>in<sp/>transformed<sp/>problem</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668" refid="type__cons_8h_1af704934b66490b447ea10fcfd6adcef9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSDELVARS(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>conss,<sp/>int<sp/>nconss)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="670"><highlight class="comment">/**<sp/>constraint<sp/>display<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>can<sp/>store<sp/>a<sp/>representation<sp/>of<sp/>the<sp/>constraint<sp/>into<sp/>the<sp/>given<sp/>text<sp/>file.<sp/>Use<sp/>the<sp/>method</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*<sp/><sp/>SCIPinfoMessage()<sp/>to<sp/>push<sp/>a<sp/>string<sp/>into<sp/>the<sp/>file<sp/>stream.</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>There<sp/>are<sp/>several<sp/>methods<sp/>which<sp/>help<sp/>to<sp/>display<sp/>variables.<sp/>These<sp/>are<sp/>SCIPwriteVarName(),<sp/>SCIPwriteVarsList(),</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIPwriteVarsLinearsum(),<sp/>and<sp/>SCIPwriteVarsPolynomial().</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*<sp/><sp/>input:<sp/>-<sp/>scip<sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure<sp/>-<sp/>conshdlr<sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself<sp/>-<sp/>cons<sp/>:<sp/>the<sp/>constraint<sp/>that</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/><sp/>should<sp/>be<sp/>displayed<sp/>-<sp/>file<sp/>:<sp/>the<sp/>text<sp/>file<sp/>to<sp/>store<sp/>the<sp/>information<sp/>into</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682" refid="type__cons_8h_1a4d409d37c6071020639ea8379787ad60" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSPRINT(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>cons,<sp/>FILE*<sp/>file)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="684"><highlight class="comment">/**<sp/>constraint<sp/>copying<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>can<sp/>provide<sp/>a<sp/>copy<sp/>method<sp/>which<sp/>copies<sp/>a<sp/>constraint<sp/>from<sp/>one<sp/>SCIP<sp/>data<sp/>structure<sp/>into<sp/>a<sp/>other</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/>*<sp/><sp/>SCIP<sp/>data<sp/>structure.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>a<sp/>constraint<sp/>is<sp/>created<sp/>the<sp/>constraint<sp/>has<sp/>to<sp/>be<sp/>captured<sp/>(The<sp/>capture<sp/>is<sp/>usually</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/>*<sp/><sp/>already<sp/>done<sp/>due<sp/>to<sp/>the<sp/>creation<sp/>of<sp/>the<sp/>constraint).</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>copy<sp/>process<sp/>was<sp/>a<sp/>one<sp/>to<sp/>one<sp/>the<sp/>valid<sp/>pointer<sp/>can<sp/>set<sp/>to<sp/>TRUE.<sp/>Otherwise,<sp/>you<sp/>have<sp/>to<sp/>set<sp/>this<sp/>pointer<sp/>to</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/>*<sp/><sp/>FALSE.<sp/>In<sp/>case<sp/>all<sp/>problem<sp/>defining<sp/>objects<sp/>(constraint<sp/>handlers<sp/>and<sp/>variable<sp/>pricers)<sp/>return<sp/>a<sp/>valid<sp/>TRUE<sp/>for<sp/>all</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/>*<sp/><sp/>their<sp/>copying<sp/>calls,<sp/>SCIP<sp/>assumes<sp/>that<sp/>it<sp/>is<sp/>a<sp/>overall<sp/>one<sp/>to<sp/>one<sp/>copy<sp/>of<sp/>the<sp/>original<sp/>instance.<sp/>In<sp/>this<sp/>case<sp/>any</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/><sp/>reductions<sp/>made<sp/>in<sp/>the<sp/>copied<sp/>SCIP<sp/>instance<sp/>can<sp/>be<sp/>transfer<sp/>to<sp/>the<sp/>original<sp/>SCIP<sp/>instance.<sp/>If<sp/>the<sp/>valid<sp/>pointer<sp/>is</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*<sp/><sp/>set<sp/>to<sp/>TRUE<sp/>and<sp/>it<sp/>was<sp/>not<sp/>one<sp/>to<sp/>one<sp/>copy,<sp/>it<sp/>might<sp/>happen<sp/>that<sp/>optimal<sp/>solutions<sp/>are<sp/>cut<sp/>off.</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>get<sp/>a<sp/>copy<sp/>of<sp/>a<sp/>variable<sp/>in<sp/>the<sp/>target<sp/>SCIP<sp/>you<sp/>should<sp/>use<sp/>the<sp/>function<sp/>SCIPgetVarCopy().</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>target<sp/>SCIP<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>created<sp/>target<sp/>constraint</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name<sp/>of<sp/>constraint,<sp/>or<sp/>NULL<sp/>if<sp/>the<sp/>name<sp/>of<sp/>the<sp/>source<sp/>constraint<sp/>should<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>sourcescip<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>source<sp/>SCIP<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>sourceconshdlr<sp/><sp/>:<sp/>source<sp/>constraint<sp/>handler<sp/>of<sp/>the<sp/>source<sp/>SCIP</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>sourcecons<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>source<sp/>constraint<sp/>of<sp/>the<sp/>source<sp/>SCIP</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>varmap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>a<sp/>SCIP_HASHMAP<sp/>mapping<sp/>variables<sp/>of<sp/>the<sp/>source<sp/>SCIP<sp/>to<sp/>corresponding<sp/>variables<sp/>of<sp/>the<sp/>target<sp/>SCIP</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>consmap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>a<sp/>SCIP_HASHMAP<sp/>mapping<sp/>constraints<sp/>of<sp/>the<sp/>source<sp/>SCIP<sp/>to<sp/>corresponding<sp/>constraints<sp/>of<sp/>the<sp/>target<sp/>SCIP</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>initial<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>LP<sp/>relaxation<sp/>of<sp/>constraint<sp/>be<sp/>in<sp/>the<sp/>initial<sp/>LP?</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>separate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>separated<sp/>during<sp/>LP<sp/>processing?</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>enforce<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>enforced<sp/>during<sp/>node<sp/>processing?</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>check<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>checked<sp/>for<sp/>feasibility?</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>propagate<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>propagated<sp/>during<sp/>node<sp/>processing?</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>local<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>is<sp/>constraint<sp/>only<sp/>valid<sp/>locally?</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>modifiable<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>is<sp/>constraint<sp/>modifiable<sp/>(subject<sp/>to<sp/>column<sp/>generation)?</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>dynamic<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>is<sp/>constraint<sp/>subject<sp/>to<sp/>aging?</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>removable<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>relaxation<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>LP<sp/>due<sp/>to<sp/>aging<sp/>or<sp/>cleanup?</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>stickingatnode<sp/><sp/>:<sp/>should<sp/>the<sp/>constraint<sp/>always<sp/>be<sp/>kept<sp/>at<sp/>the<sp/>node<sp/>where<sp/>it<sp/>was<sp/>added,<sp/>even</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>it<sp/>may<sp/>be<sp/>moved<sp/>to<sp/>a<sp/>more<sp/>global<sp/>node?</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>global<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>a<sp/>global<sp/>or<sp/>a<sp/>local<sp/>copy<sp/>be<sp/>created?</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*<sp/><sp/>output:</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>valid<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>whether<sp/>the<sp/>copying<sp/>was<sp/>valid<sp/>or<sp/>not<sp/></highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723" refid="type__cons_8h_1abf8e62f337ecf1d02581a514e99636ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSCOPY(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONS**<sp/>cons,<sp/>const<sp/>char*<sp/>name,<sp/>\</highlight></codeline>
<codeline lineno="724"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP*<sp/>sourcescip,<sp/>SCIP_CONSHDLR*<sp/>sourceconshdlr,<sp/>SCIP_CONS*<sp/>sourcecons,<sp/>SCIP_HASHMAP*<sp/>varmap,<sp/>SCIP_HASHMAP*<sp/>consmap,<sp/>\</highlight></codeline>
<codeline lineno="725"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_Bool<sp/>initial,<sp/>SCIP_Bool<sp/>separate,<sp/>SCIP_Bool<sp/>enforce,<sp/>SCIP_Bool<sp/>check,<sp/>SCIP_Bool<sp/>propagate,<sp/>\</highlight></codeline>
<codeline lineno="726"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_Bool<sp/>local,<sp/>SCIP_Bool<sp/>modifiable,<sp/>SCIP_Bool<sp/>dynamic,<sp/>SCIP_Bool<sp/>removable,<sp/>SCIP_Bool<sp/>stickingatnode,<sp/>\</highlight></codeline>
<codeline lineno="727"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_Bool<sp/>global,<sp/>SCIP_Bool*<sp/>valid)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="729"><highlight class="comment">/**<sp/>constraint<sp/>parsing<sp/>method<sp/>of<sp/>constraint<sp/>handler</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>can<sp/>provide<sp/>a<sp/>callback<sp/>to<sp/>parse<sp/>the<sp/>output<sp/>created<sp/>by<sp/>the<sp/>display<sp/>method</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/>*<sp/><sp/>(\ref<sp/>SCIP_DECL_CONSPRINT)<sp/>and<sp/>to<sp/>create<sp/>a<sp/>constraint<sp/>out<sp/>of<sp/>it.</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>For<sp/>parsing<sp/>there<sp/>are<sp/>several<sp/>methods<sp/>which<sp/>are<sp/>handy.<sp/>Have<sp/>a<sp/>look<sp/>at:<sp/>SCIPparseVarName(),</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIPparseVarsList(),<sp/>SCIPparseVarsLinearsum(),<sp/>SCIPparseVarsPolynomial(),<sp/>SCIPstrToRealValue(),<sp/>and</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIPstrCopySection().</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>created<sp/>constraint</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name<sp/>of<sp/>the<sp/>constraint</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>str<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>string<sp/>to<sp/>parse</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>initial<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>LP<sp/>relaxation<sp/>of<sp/>constraint<sp/>be<sp/>in<sp/>the<sp/>initial<sp/>LP?</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>separate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>separated<sp/>during<sp/>LP<sp/>processing?</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>enforce<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>enforced<sp/>during<sp/>node<sp/>processing?</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>check<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>checked<sp/>for<sp/>feasibility?</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>propagate<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>propagated<sp/>during<sp/>node<sp/>processing?</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>local<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>is<sp/>constraint<sp/>only<sp/>valid<sp/>locally?</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>modifiable<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>is<sp/>constraint<sp/>modifiable<sp/>(subject<sp/>to<sp/>column<sp/>generation)?</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>dynamic<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>is<sp/>constraint<sp/>subject<sp/>to<sp/>aging?</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>removable<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>should<sp/>the<sp/>relaxation<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>LP<sp/>due<sp/>to<sp/>aging<sp/>or<sp/>cleanup?</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>stickingatnode<sp/><sp/>:<sp/>should<sp/>the<sp/>constraint<sp/>always<sp/>be<sp/>kept<sp/>at<sp/>the<sp/>node<sp/>where<sp/>it<sp/>was<sp/>added,<sp/>even</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>it<sp/>may<sp/>be<sp/>moved<sp/>to<sp/>a<sp/>more<sp/>global<sp/>node?</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*<sp/><sp/>output:</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>success<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>whether<sp/>the<sp/>parsing<sp/>was<sp/>successful<sp/>or<sp/>not</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758" refid="type__cons_8h_1a92afdd77b74d9cac38e48d072dd72067" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSPARSE(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS**<sp/>cons,<sp/>\</highlight></codeline>
<codeline lineno="759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>name,<sp/>const<sp/>char*<sp/>str,<sp/>\</highlight></codeline>
<codeline lineno="760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_Bool<sp/>initial,<sp/>SCIP_Bool<sp/>separate,<sp/>SCIP_Bool<sp/>enforce,<sp/>SCIP_Bool<sp/>check,<sp/>SCIP_Bool<sp/>propagate,<sp/>SCIP_Bool<sp/>local,<sp/>\</highlight></codeline>
<codeline lineno="761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_Bool<sp/>modifiable,<sp/>SCIP_Bool<sp/>dynamic,<sp/>SCIP_Bool<sp/>removable,<sp/>SCIP_Bool<sp/>stickingatnode,<sp/>SCIP_Bool*<sp/>success)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="763"><highlight class="comment">/**<sp/>constraint<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>which<sp/>returns<sp/>the<sp/>variables<sp/>(if<sp/>possible)</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>can<sp/>(this<sp/>callback<sp/>is<sp/>optional)<sp/>provide<sp/>this<sp/>callback<sp/>to<sp/>return<sp/>the<sp/>variables<sp/>which<sp/>are</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*<sp/><sp/>involved<sp/>in<sp/>that<sp/>particular<sp/>constraint.<sp/>If<sp/>this<sp/>is<sp/>possible,<sp/>the<sp/>variables<sp/>should<sp/>be<sp/>copyied<sp/>into<sp/>the<sp/>variables</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*<sp/><sp/>array<sp/>and<sp/>the<sp/>success<sp/>pointers<sp/>has<sp/>to<sp/>be<sp/>set<sp/>to<sp/>TRUE.<sp/>Otherwise<sp/>the<sp/>success<sp/>has<sp/>to<sp/>be<sp/>set<sp/>FALSE<sp/>or<sp/>the<sp/>callback</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/><sp/>should<sp/>not<sp/>be<sp/>implemented.</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>that<sp/>should<sp/>return<sp/>its<sp/>variable<sp/>data</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/>*<sp/><sp/>output:</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>vars<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>array<sp/>to<sp/>store/copy<sp/>the<sp/>involved<sp/>variables<sp/>of<sp/>the<sp/>constraint</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>varssize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>available<sp/>slots<sp/>in<sp/>vars<sp/>array<sp/>which<sp/>is<sp/>needed<sp/>to<sp/>check<sp/>if<sp/>the<sp/>array<sp/>is<sp/>large<sp/>enough</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>success<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>whether<sp/>the<sp/>variables<sp/>are<sp/>successfully<sp/>copied</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780" refid="type__cons_8h_1a4213ba55688181a50f29979849dfe43b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSGETVARS(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>cons,<sp/>\</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_VAR**<sp/>vars,<sp/>int<sp/>varssize,<sp/>SCIP_Bool*<sp/>success)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="783"><highlight class="comment">/**<sp/>constraint<sp/>method<sp/>of<sp/>constraint<sp/>handler<sp/>which<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>variables<sp/>(if<sp/>possible)</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>can<sp/>(this<sp/>callback<sp/>is<sp/>optional)<sp/>provide<sp/>this<sp/>callback<sp/>to<sp/>return<sp/>the<sp/>number<sp/>variable<sp/>which<sp/>are</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/>*<sp/><sp/>involved<sp/>in<sp/>that<sp/>particular<sp/>constraint.<sp/>If<sp/>this<sp/>is<sp/>not<sp/>possible,<sp/>the<sp/>success<sp/>pointers<sp/>has<sp/>to<sp/>be<sp/>set<sp/>to<sp/>FALSE<sp/>or<sp/>the</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>*<sp/><sp/>callback<sp/>should<sp/>not<sp/>be<sp/>implemented.</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>constraint<sp/>for<sp/>which<sp/>the<sp/>number<sp/>of<sp/>variables<sp/>is<sp/>wanted</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*<sp/><sp/>output:</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>nvars<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>variables</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>success<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>whether<sp/>the<sp/>constraint<sp/>successfully<sp/>returned<sp/>the<sp/>number<sp/>of<sp/>variables</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798" refid="type__cons_8h_1a7bbb9a0dd7d4ae69b6feb144a3d45e00" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSGETNVARS(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_CONS*<sp/>cons,<sp/>\</highlight></codeline>
<codeline lineno="799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>nvars,<sp/>SCIP_Bool*<sp/>success)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="801"><highlight class="comment">/**<sp/>constraint<sp/>handler<sp/>method<sp/>to<sp/>suggest<sp/>dive<sp/>bound<sp/>changes<sp/>during<sp/>the<sp/>generic<sp/>diving<sp/>algorithm</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>callback<sp/>is<sp/>used<sp/>inside<sp/>the<sp/>various<sp/>diving<sp/>heuristics<sp/>of<sp/>SCIP<sp/>and<sp/>does<sp/>not<sp/>affect<sp/>the<sp/>normal<sp/>branching</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>the<sp/>actual<sp/>search.</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>can<sp/>provide<sp/>this<sp/>callback<sp/>to<sp/>render<sp/>the<sp/>current<sp/>solution<sp/>(even<sp/>more)<sp/>infeasible<sp/>by</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*<sp/><sp/>suggesting<sp/>one<sp/>or<sp/>several<sp/>variable<sp/>bound<sp/>changes.<sp/>Infact,</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*<sp/><sp/>since<sp/>diving<sp/>heuristics<sp/>do<sp/>not<sp/>necessarily<sp/>solve<sp/>LP<sp/>relaxations<sp/>at<sp/>every<sp/>probing<sp/>depth,<sp/>some<sp/>of<sp/>the<sp/>variable</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*<sp/><sp/>local<sp/>bounds<sp/>might<sp/>already<sp/>be<sp/>conflicting<sp/>with<sp/>the<sp/>solution<sp/>values.</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>solution<sp/>is<sp/>rendered<sp/>infeasible<sp/>by<sp/>determining<sp/>bound<sp/>changes<sp/>that<sp/>should<sp/>be<sp/>applied<sp/>to<sp/>the<sp/>next<sp/>explored<sp/>search<sp/>node</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/>*<sp/><sp/>via<sp/>SCIPaddDiveBoundChange().</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/>*<sp/><sp/>An<sp/>alternative<sp/>in<sp/>case<sp/>that<sp/>the<sp/>preferred<sp/>bound<sp/>change(s)<sp/>were<sp/>detected<sp/>infeasible<sp/>must<sp/>be<sp/>provided.</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>constraint<sp/>handler<sp/>must<sp/>take<sp/>care<sp/>to<sp/>only<sp/>add<sp/>bound<sp/>changes<sp/>that<sp/>further<sp/>shrink<sp/>the<sp/>variable<sp/>domain.</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>success<sp/>pointer<sp/>must<sp/>be<sp/>used<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>constraint<sp/>handler<sp/>succeeded<sp/>in<sp/>selecting<sp/>diving<sp/>bound</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*<sp/><sp/>changes.<sp/>The<sp/>infeasible<sp/>pointer<sp/>should<sp/>be<sp/>set<sp/>to<sp/>TRUE<sp/>if<sp/>the<sp/>constraint<sp/>handler<sp/>found<sp/>a<sp/>local<sp/>infeasibility.<sp/><sp/>If<sp/>the</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/><sp/>constraint<sp/>handler<sp/>needs<sp/>to<sp/>select<sp/>between<sp/>several<sp/>candidates,<sp/>it<sp/>may<sp/>use<sp/>the<sp/>scoring<sp/>mechanism<sp/>of<sp/>the<sp/>diveset</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*<sp/><sp/>argument<sp/>to<sp/>control<sp/>its<sp/>choice.</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>callback<sp/>is<sp/>optional.</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/><sp/>@note:<sp/>@p<sp/>sol<sp/>is<sp/>usually<sp/>the<sp/>LP<sp/>relaxation<sp/>solution<sp/>unless<sp/>the<sp/>caller<sp/>of<sp/>the<sp/>method,<sp/>usually<sp/>a<sp/>diving<sp/>heuristic,</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>solve<sp/>LP<sp/>relaxations<sp/>at<sp/>every<sp/>depth</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/><sp/>input:</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SCIP<sp/>main<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>conshdlr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>the<sp/>constraint<sp/>handler<sp/>itself</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>diveset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>diving<sp/>settings<sp/>for<sp/>scoring</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>sol<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>current<sp/>diving<sp/>solution,<sp/>usually<sp/>the<sp/>LP<sp/>relaxation<sp/>solution</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/>*<sp/><sp/>output:</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>success<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>whether<sp/>the<sp/>constraint<sp/>handler<sp/>succeeded<sp/>to<sp/>determine<sp/>dive<sp/>bound<sp/>changes</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>infeasible<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pointer<sp/>to<sp/>store<sp/>whether<sp/>the<sp/>constraint<sp/>handler<sp/>detected<sp/>an<sp/>infeasibility<sp/>in<sp/>the<sp/>local<sp/>node</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837" refid="type__cons_8h_1a721f05c56e6c59927ebc4e1642f88337" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIP_DECL_CONSGETDIVEBDCHGS(x)<sp/>SCIP_RETCODE<sp/>x<sp/>(SCIP*<sp/>scip,<sp/>SCIP_CONSHDLR*<sp/>conshdlr,<sp/>SCIP_DIVESET*<sp/>diveset,<sp/>\</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SCIP_SOL*<sp/>sol,<sp/>SCIP_Bool*<sp/>success,<sp/>SCIP_Bool*<sp/>infeasible)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/type_cons.h"/>
  </compounddef>
</doxygen>
