<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="pub__lp_8h" kind="file">
    <compoundname>pub_lp.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes refid="def_8h" local="yes">scip/def.h</includes>
    <includes local="yes">blockmemshell/memory.h</includes>
    <includes refid="type__set_8h" local="yes">scip/type_set.h</includes>
    <includes refid="type__stat_8h" local="yes">scip/type_stat.h</includes>
    <includes refid="type__lp_8h" local="yes">scip/type_lp.h</includes>
    <includes refid="type__var_8h" local="yes">scip/type_var.h</includes>
    <includes refid="type__sol_8h" local="yes">scip/type_sol.h</includes>
    <includes refid="type__sepa_8h" local="yes">scip/type_sepa.h</includes>
    <includes refid="type__misc_8h" local="yes">scip/type_misc.h</includes>
    <includes local="yes">lpi/type_lpi.h</includes>
    <includedby refid="scip_8h" local="yes">scip.h</includedby>
    <incdepgraph>
      <node id="9967">
        <label>stdarg.h</label>
      </node>
      <node id="9974">
        <label>scip/type_sol.h</label>
        <link refid="type__sol_8h"/>
      </node>
      <node id="9964">
        <label>assert.h</label>
      </node>
      <node id="9963">
        <label>float.h</label>
      </node>
      <node id="9973">
        <label>scip/type_var.h</label>
        <link refid="type__var_8h"/>
      </node>
      <node id="9958">
        <label>pub_lp.h</label>
        <link refid="pub_lp.h"/>
        <childnode refid="9959" relation="include">
        </childnode>
        <childnode refid="9960" relation="include">
        </childnode>
        <childnode refid="9969" relation="include">
        </childnode>
        <childnode refid="9970" relation="include">
        </childnode>
        <childnode refid="9971" relation="include">
        </childnode>
        <childnode refid="9972" relation="include">
        </childnode>
        <childnode refid="9973" relation="include">
        </childnode>
        <childnode refid="9974" relation="include">
        </childnode>
        <childnode refid="9975" relation="include">
        </childnode>
        <childnode refid="9978" relation="include">
        </childnode>
        <childnode refid="9979" relation="include">
        </childnode>
      </node>
      <node id="9976">
        <label>scip/type_result.h</label>
        <link refid="type__result_8h"/>
      </node>
      <node id="9979">
        <label>lpi/type_lpi.h</label>
      </node>
      <node id="9972">
        <label>scip/type_lp.h</label>
        <link refid="type__lp_8h"/>
      </node>
      <node id="9962">
        <label>limits.h</label>
      </node>
      <node id="9971">
        <label>scip/type_stat.h</label>
        <link refid="type__stat_8h"/>
      </node>
      <node id="9977">
        <label>scip/type_scip.h</label>
        <link refid="type__scip_8h"/>
      </node>
      <node id="9968">
        <label>scip/type_message.h</label>
        <link refid="type__message_8h"/>
        <childnode refid="9959" relation="include">
        </childnode>
      </node>
      <node id="9978">
        <label>scip/type_misc.h</label>
        <link refid="type__misc_8h"/>
        <childnode refid="9960" relation="include">
        </childnode>
      </node>
      <node id="9970">
        <label>scip/type_set.h</label>
        <link refid="type__set_8h"/>
      </node>
      <node id="9966">
        <label>scip/pub_message.h</label>
        <link refid="pub__message_8h"/>
        <childnode refid="9967" relation="include">
        </childnode>
        <childnode refid="9960" relation="include">
        </childnode>
        <childnode refid="9968" relation="include">
        </childnode>
      </node>
      <node id="9975">
        <label>scip/type_sepa.h</label>
        <link refid="type__sepa_8h"/>
        <childnode refid="9960" relation="include">
        </childnode>
        <childnode refid="9965" relation="include">
        </childnode>
        <childnode refid="9976" relation="include">
        </childnode>
        <childnode refid="9974" relation="include">
        </childnode>
        <childnode refid="9977" relation="include">
        </childnode>
      </node>
      <node id="9965">
        <label>scip/type_retcode.h</label>
        <link refid="type__retcode_8h"/>
      </node>
      <node id="9961">
        <label>math.h</label>
      </node>
      <node id="9969">
        <label>blockmemshell/memory.h</label>
      </node>
      <node id="9960">
        <label>scip/def.h</label>
        <link refid="def_8h"/>
        <childnode refid="9959" relation="include">
        </childnode>
        <childnode refid="9961" relation="include">
        </childnode>
        <childnode refid="9962" relation="include">
        </childnode>
        <childnode refid="9963" relation="include">
        </childnode>
        <childnode refid="9964" relation="include">
        </childnode>
        <childnode refid="9965" relation="include">
        </childnode>
        <childnode refid="9966" relation="include">
        </childnode>
      </node>
      <node id="9959">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10021">
        <label>heur_clique.h</label>
        <link refid="heur__clique_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10017">
        <label>cons_xor.h</label>
        <link refid="cons__xor_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10093">
        <label>reader_pbm.h</label>
        <link refid="reader__pbm_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10022">
        <label>heur_coefdiving.h</label>
        <link refid="heur__coefdiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10067">
        <label>presol_convertinttobin.h</label>
        <link refid="presol__convertinttobin_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10112">
        <label>sepa_zerohalf.h</label>
        <link refid="sepa__zerohalf_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10053">
        <label>heur_undercover.h</label>
        <link refid="heur__undercover_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10048">
        <label>heur_simplerounding.h</label>
        <link refid="heur__simplerounding_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10033">
        <label>heur_localbranching.h</label>
        <link refid="heur__localbranching_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10095">
        <label>reader_ppm.h</label>
        <link refid="reader__ppm_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9981">
        <label>scip.h</label>
        <link refid="scip_8h"/>
        <childnode refid="9982" relation="include">
        </childnode>
        <childnode refid="9984" relation="include">
        </childnode>
        <childnode refid="9985" relation="include">
        </childnode>
        <childnode refid="9986" relation="include">
        </childnode>
        <childnode refid="9987" relation="include">
        </childnode>
        <childnode refid="9988" relation="include">
        </childnode>
        <childnode refid="9989" relation="include">
        </childnode>
        <childnode refid="9990" relation="include">
        </childnode>
        <childnode refid="9991" relation="include">
        </childnode>
        <childnode refid="9992" relation="include">
        </childnode>
        <childnode refid="9993" relation="include">
        </childnode>
        <childnode refid="9994" relation="include">
        </childnode>
        <childnode refid="9995" relation="include">
        </childnode>
        <childnode refid="9996" relation="include">
        </childnode>
        <childnode refid="9997" relation="include">
        </childnode>
        <childnode refid="9998" relation="include">
        </childnode>
        <childnode refid="9999" relation="include">
        </childnode>
        <childnode refid="10000" relation="include">
        </childnode>
        <childnode refid="10001" relation="include">
        </childnode>
        <childnode refid="10002" relation="include">
        </childnode>
        <childnode refid="10003" relation="include">
        </childnode>
        <childnode refid="10004" relation="include">
        </childnode>
        <childnode refid="10005" relation="include">
        </childnode>
        <childnode refid="10006" relation="include">
        </childnode>
        <childnode refid="10007" relation="include">
        </childnode>
        <childnode refid="10008" relation="include">
        </childnode>
        <childnode refid="10009" relation="include">
        </childnode>
        <childnode refid="10010" relation="include">
        </childnode>
        <childnode refid="10011" relation="include">
        </childnode>
        <childnode refid="10012" relation="include">
        </childnode>
        <childnode refid="10013" relation="include">
        </childnode>
        <childnode refid="10014" relation="include">
        </childnode>
        <childnode refid="10015" relation="include">
        </childnode>
        <childnode refid="10016" relation="include">
        </childnode>
        <childnode refid="10017" relation="include">
        </childnode>
        <childnode refid="10018" relation="include">
        </childnode>
        <childnode refid="10019" relation="include">
        </childnode>
        <childnode refid="10020" relation="include">
        </childnode>
        <childnode refid="10021" relation="include">
        </childnode>
        <childnode refid="10022" relation="include">
        </childnode>
        <childnode refid="10023" relation="include">
        </childnode>
        <childnode refid="10024" relation="include">
        </childnode>
        <childnode refid="10025" relation="include">
        </childnode>
        <childnode refid="10026" relation="include">
        </childnode>
        <childnode refid="10027" relation="include">
        </childnode>
        <childnode refid="10028" relation="include">
        </childnode>
        <childnode refid="10029" relation="include">
        </childnode>
        <childnode refid="10030" relation="include">
        </childnode>
        <childnode refid="10031" relation="include">
        </childnode>
        <childnode refid="10032" relation="include">
        </childnode>
        <childnode refid="10033" relation="include">
        </childnode>
        <childnode refid="10034" relation="include">
        </childnode>
        <childnode refid="10035" relation="include">
        </childnode>
        <childnode refid="10036" relation="include">
        </childnode>
        <childnode refid="10037" relation="include">
        </childnode>
        <childnode refid="10038" relation="include">
        </childnode>
        <childnode refid="10039" relation="include">
        </childnode>
        <childnode refid="10040" relation="include">
        </childnode>
        <childnode refid="10041" relation="include">
        </childnode>
        <childnode refid="10042" relation="include">
        </childnode>
        <childnode refid="10043" relation="include">
        </childnode>
        <childnode refid="10044" relation="include">
        </childnode>
        <childnode refid="10045" relation="include">
        </childnode>
        <childnode refid="10046" relation="include">
        </childnode>
        <childnode refid="10047" relation="include">
        </childnode>
        <childnode refid="10048" relation="include">
        </childnode>
        <childnode refid="10049" relation="include">
        </childnode>
        <childnode refid="10050" relation="include">
        </childnode>
        <childnode refid="10051" relation="include">
        </childnode>
        <childnode refid="10052" relation="include">
        </childnode>
        <childnode refid="10053" relation="include">
        </childnode>
        <childnode refid="10054" relation="include">
        </childnode>
        <childnode refid="10055" relation="include">
        </childnode>
        <childnode refid="10056" relation="include">
        </childnode>
        <childnode refid="10057" relation="include">
        </childnode>
        <childnode refid="10058" relation="include">
        </childnode>
        <childnode refid="10059" relation="include">
        </childnode>
        <childnode refid="10060" relation="include">
        </childnode>
        <childnode refid="10061" relation="include">
        </childnode>
        <childnode refid="10062" relation="include">
        </childnode>
        <childnode refid="10063" relation="include">
        </childnode>
        <childnode refid="10064" relation="include">
        </childnode>
        <childnode refid="10065" relation="include">
        </childnode>
        <childnode refid="10066" relation="include">
        </childnode>
        <childnode refid="10067" relation="include">
        </childnode>
        <childnode refid="10068" relation="include">
        </childnode>
        <childnode refid="10069" relation="include">
        </childnode>
        <childnode refid="10070" relation="include">
        </childnode>
        <childnode refid="10071" relation="include">
        </childnode>
        <childnode refid="10072" relation="include">
        </childnode>
        <childnode refid="10073" relation="include">
        </childnode>
        <childnode refid="10074" relation="include">
        </childnode>
        <childnode refid="10075" relation="include">
        </childnode>
        <childnode refid="10076" relation="include">
        </childnode>
        <childnode refid="10077" relation="include">
        </childnode>
        <childnode refid="10078" relation="include">
        </childnode>
        <childnode refid="10079" relation="include">
        </childnode>
        <childnode refid="10080" relation="include">
        </childnode>
        <childnode refid="10081" relation="include">
        </childnode>
        <childnode refid="10082" relation="include">
        </childnode>
        <childnode refid="10083" relation="include">
        </childnode>
        <childnode refid="10084" relation="include">
        </childnode>
        <childnode refid="10085" relation="include">
        </childnode>
        <childnode refid="10086" relation="include">
        </childnode>
        <childnode refid="10087" relation="include">
        </childnode>
        <childnode refid="10088" relation="include">
        </childnode>
        <childnode refid="10089" relation="include">
        </childnode>
        <childnode refid="10090" relation="include">
        </childnode>
        <childnode refid="10091" relation="include">
        </childnode>
        <childnode refid="10092" relation="include">
        </childnode>
        <childnode refid="10093" relation="include">
        </childnode>
        <childnode refid="10094" relation="include">
        </childnode>
        <childnode refid="10095" relation="include">
        </childnode>
        <childnode refid="10096" relation="include">
        </childnode>
        <childnode refid="10097" relation="include">
        </childnode>
        <childnode refid="10098" relation="include">
        </childnode>
        <childnode refid="10099" relation="include">
        </childnode>
        <childnode refid="9983" relation="include">
        </childnode>
        <childnode refid="10100" relation="include">
        </childnode>
        <childnode refid="10101" relation="include">
        </childnode>
        <childnode refid="10102" relation="include">
        </childnode>
        <childnode refid="10103" relation="include">
        </childnode>
        <childnode refid="10104" relation="include">
        </childnode>
        <childnode refid="10105" relation="include">
        </childnode>
        <childnode refid="10106" relation="include">
        </childnode>
        <childnode refid="10107" relation="include">
        </childnode>
        <childnode refid="10108" relation="include">
        </childnode>
        <childnode refid="10109" relation="include">
        </childnode>
        <childnode refid="10110" relation="include">
        </childnode>
        <childnode refid="10111" relation="include">
        </childnode>
        <childnode refid="10112" relation="include">
        </childnode>
      </node>
      <node id="9986">
        <label>branch_inference.h</label>
        <link refid="branch__inference_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10009">
        <label>cons_pseudoboolean.h</label>
        <link refid="cons__pseudoboolean_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10047">
        <label>heur_shifting.h</label>
        <link refid="heur__shifting_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10038">
        <label>heur_oneopt.h</label>
        <link refid="heur__oneopt_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10013">
        <label>cons_sos1.h</label>
        <link refid="cons__sos1_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10063">
        <label>nodesel_restartdfs.h</label>
        <link refid="nodesel__restartdfs_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10102">
        <label>sepa_closecuts.h</label>
        <link refid="sepa__closecuts_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9993">
        <label>cons_and.h</label>
        <link refid="cons__and_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10094">
        <label>reader_pip.h</label>
        <link refid="reader__pip_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10045">
        <label>heur_rounding.h</label>
        <link refid="heur__rounding_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10043">
        <label>heur_rins.h</label>
        <link refid="heur__rins_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9983">
        <label>scipdefplugins.h</label>
        <link refid="scipdefplugins_8h"/>
      </node>
      <node id="10019">
        <label>disp_default.h</label>
        <link refid="disp__default_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10024">
        <label>heur_dins.h</label>
        <link refid="heur__dins_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10056">
        <label>heur_zeroobj.h</label>
        <link refid="heur__zeroobj_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10018">
        <label>dialog_default.h</label>
        <link refid="dialog__default_8h"/>
      </node>
      <node id="9985">
        <label>branch_fullstrong.h</label>
        <link refid="branch__fullstrong_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10029">
        <label>heur_guideddiving.h</label>
        <link refid="heur__guideddiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10091">
        <label>reader_opb.h</label>
        <link refid="reader__opb_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10007">
        <label>cons_or.h</label>
        <link refid="cons__or_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10070">
        <label>presol_gateextraction.h</label>
        <link refid="presol__gateextraction_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9990">
        <label>branch_random.h</label>
        <link refid="branch__random_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10028">
        <label>heur_fracdiving.h</label>
        <link refid="heur__fracdiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9980">
        <label>pub_lp.h</label>
        <link refid="pub_lp.h"/>
        <childnode refid="9981" relation="include">
        </childnode>
      </node>
      <node id="9999">
        <label>cons_disjunction.h</label>
        <link refid="cons__disjunction_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10082">
        <label>reader_bnd.h</label>
        <link refid="reader__bnd_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9991">
        <label>branch_relpscost.h</label>
        <link refid="branch__relpscost_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10031">
        <label>heur_intshifting.h</label>
        <link refid="heur__intshifting_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10016">
        <label>cons_varbound.h</label>
        <link refid="cons__varbound_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10064">
        <label>nodesel_uct.h</label>
        <link refid="nodesel__uct_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9998">
        <label>cons_cumulative.h</label>
        <link refid="cons__cumulative_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10000">
        <label>cons_indicator.h</label>
        <link refid="cons__indicator_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10079">
        <label>prop_redcost.h</label>
        <link refid="prop__redcost_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10026">
        <label>heur_feaspump.h</label>
        <link refid="heur__feaspump_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10099">
        <label>reader_zpl.h</label>
        <link refid="reader__zpl_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10100">
        <label>sepa_cgmip.h</label>
        <link refid="sepa__cgmip_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10040">
        <label>heur_pscostdiving.h</label>
        <link refid="heur__pscostdiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10086">
        <label>reader_fix.h</label>
        <link refid="reader__fix_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10014">
        <label>cons_sos2.h</label>
        <link refid="cons__sos2_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10050">
        <label>heur_trivial.h</label>
        <link refid="heur__trivial_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10003">
        <label>cons_linear.h</label>
        <link refid="cons__linear_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10035">
        <label>heur_nlpdiving.h</label>
        <link refid="heur__nlpdiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10001">
        <label>cons_integral.h</label>
        <link refid="cons__integral_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10103">
        <label>sepa_cmir.h</label>
        <link refid="sepa__cmir_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10042">
        <label>heur_rens.h</label>
        <link refid="heur__rens_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10025">
        <label>heur_dualval.h</label>
        <link refid="heur__dualval_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10044">
        <label>heur_rootsoldiving.h</label>
        <link refid="heur__rootsoldiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10077">
        <label>prop_probing.h</label>
        <link refid="prop__probing_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10008">
        <label>cons_orbitope.h</label>
        <link refid="cons__orbitope_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9997">
        <label>cons_countsols.h</label>
        <link refid="cons__countsols_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10110">
        <label>sepa_rapidlearning.h</label>
        <link refid="sepa__rapidlearning_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10041">
        <label>heur_randrounding.h</label>
        <link refid="heur__randrounding_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10059">
        <label>nodesel_breadthfirst.h</label>
        <link refid="nodesel__breadthfirst_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10049">
        <label>heur_subnlp.h</label>
        <link refid="heur__subnlp_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10084">
        <label>reader_cip.h</label>
        <link refid="reader__cip_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10061">
        <label>nodesel_estimate.h</label>
        <link refid="nodesel__estimate_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10074">
        <label>prop_dualfix.h</label>
        <link refid="prop__dualfix_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10030">
        <label>heur_intdiving.h</label>
        <link refid="heur__intdiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10076">
        <label>prop_obbt.h</label>
        <link refid="prop__obbt_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10078">
        <label>prop_pseudoobj.h</label>
        <link refid="prop__pseudoobj_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10071">
        <label>presol_implics.h</label>
        <link refid="presol__implics_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10034">
        <label>heur_mutation.h</label>
        <link refid="heur__mutation_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10101">
        <label>sepa_clique.h</label>
        <link refid="sepa__clique_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10051">
        <label>heur_trysol.h</label>
        <link refid="heur__trysol_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10089">
        <label>reader_lp.h</label>
        <link refid="reader__lp_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10107">
        <label>sepa_intobj.h</label>
        <link refid="sepa__intobj_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10052">
        <label>heur_twoopt.h</label>
        <link refid="heur__twoopt_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10055">
        <label>heur_veclendiving.h</label>
        <link refid="heur__veclendiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9992">
        <label>cons_abspower.h</label>
        <link refid="cons__abspower_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10011">
        <label>cons_setppc.h</label>
        <link refid="cons__setppc_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10039">
        <label>heur_proximity.h</label>
        <link refid="heur__proximity_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10105">
        <label>sepa_gomory.h</label>
        <link refid="sepa__gomory_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10002">
        <label>cons_knapsack.h</label>
        <link refid="cons__knapsack_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10080">
        <label>prop_rootredcost.h</label>
        <link refid="prop__rootredcost_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10062">
        <label>nodesel_hybridestim.h</label>
        <link refid="nodesel__hybridestim_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10004">
        <label>cons_linking.h</label>
        <link refid="cons__linking_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9982">
        <label>branch_allfullstrong.h</label>
        <link refid="branch__allfullstrong_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10097">
        <label>reader_sol.h</label>
        <link refid="reader__sol_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10066">
        <label>presol_components.h</label>
        <link refid="presol__components_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10090">
        <label>reader_mps.h</label>
        <link refid="reader__mps_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10036">
        <label>heur_objpscostdiving.h</label>
        <link refid="heur__objpscostdiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10020">
        <label>heur_actconsdiving.h</label>
        <link refid="heur__actconsdiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10072">
        <label>presol_inttobinary.h</label>
        <link refid="presol__inttobinary_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10081">
        <label>prop_vbounds.h</label>
        <link refid="prop__vbounds_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10108">
        <label>sepa_mcf.h</label>
        <link refid="sepa__mcf_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10104">
        <label>sepa_flowcover.h</label>
        <link refid="sepa__flowcover_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10075">
        <label>prop_genvbounds.h</label>
        <link refid="prop__genvbounds_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10069">
        <label>presol_dualinfer.h</label>
        <link refid="presol__dualinfer_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10012">
        <label>cons_soc.h</label>
        <link refid="cons__soc_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10058">
        <label>nodesel_bfs.h</label>
        <link refid="nodesel__bfs_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9989">
        <label>branch_pscost.h</label>
        <link refid="branch__pscost_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10106">
        <label>sepa_impliedbounds.h</label>
        <link refid="sepa__impliedbounds_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10006">
        <label>cons_nonlinear.h</label>
        <link refid="cons__nonlinear_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10085">
        <label>reader_cnf.h</label>
        <link refid="reader__cnf_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10054">
        <label>heur_vbounds.h</label>
        <link refid="heur__vbounds_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10068">
        <label>presol_domcol.h</label>
        <link refid="presol__domcol_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10032">
        <label>heur_linesearchdiving.h</label>
        <link refid="heur__linesearchdiving_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10088">
        <label>reader_gms.h</label>
        <link refid="reader__gms_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10096">
        <label>reader_rlp.h</label>
        <link refid="reader__rlp_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10015">
        <label>cons_superindicator.h</label>
        <link refid="cons__superindicator_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9987">
        <label>branch_leastinf.h</label>
        <link refid="branch__leastinf_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10046">
        <label>heur_shiftandpropagate.h</label>
        <link refid="heur__shiftandpropagate_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10065">
        <label>presol_boundshift.h</label>
        <link refid="presol__boundshift_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10005">
        <label>cons_logicor.h</label>
        <link refid="cons__logicor_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10092">
        <label>reader_osil.h</label>
        <link refid="reader__osil_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10087">
        <label>reader_fzn.h</label>
        <link refid="reader__fzn_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10060">
        <label>nodesel_dfs.h</label>
        <link refid="nodesel__dfs_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9996">
        <label>cons_conjunction.h</label>
        <link refid="cons__conjunction_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10111">
        <label>sepa_strongcg.h</label>
        <link refid="sepa__strongcg_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10083">
        <label>reader_ccg.h</label>
        <link refid="reader__ccg_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10073">
        <label>presol_trivial.h</label>
        <link refid="presol__trivial_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10027">
        <label>heur_fixandinfer.h</label>
        <link refid="heur__fixandinfer_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10010">
        <label>cons_quadratic.h</label>
        <link refid="cons__quadratic_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9984">
        <label>branch_cloud.h</label>
        <link refid="branch__cloud_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10109">
        <label>sepa_oddcycle.h</label>
        <link refid="sepa__oddcycle_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10023">
        <label>heur_crossover.h</label>
        <link refid="heur__crossover_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9995">
        <label>cons_bounddisjunction.h</label>
        <link refid="cons__bounddisjunction_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9994">
        <label>cons_bivariate.h</label>
        <link refid="cons__bivariate_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10098">
        <label>reader_wbo.h</label>
        <link refid="reader__wbo_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10057">
        <label>heur_zirounding.h</label>
        <link refid="heur__zirounding_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="10037">
        <label>heur_octane.h</label>
        <link refid="heur__octane_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
      <node id="9988">
        <label>branch_mostinf.h</label>
        <link refid="branch__mostinf_8h"/>
        <childnode refid="9983" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ColumnMethods_1ga9280fc67dc5f3384c3fb2b609cba1f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPcolSort</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolSort</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>column to be sorted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sorts column entries such that LP rows precede non-LP rows and inside both parts lower row indices precede higher ones </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1ga60e8cc2149d3713998ce665e7ab26dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPcolGetObj</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetObj</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets objective value of column </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gaa52fb121ea929652cabd1f106bc237b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPcolGetLb</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetLb</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets lower bound of column </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gaae55f446379f772ff2fde480b16d4fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPcolGetUb</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetUb</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets upper bound of column </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1ga99493443fa15a7e69b29de402f83ef65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPcolGetBestBound</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetBestBound</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets best bound of column with respect to the objective function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gaad8dfe4530e50dcace40973f53bcb2d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPcolGetPrimsol</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetPrimsol</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the primal LP solution of a column </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1ga1b82154dd7c59d7e86ab15230291a30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPcolGetMinPrimsol</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetMinPrimsol</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the minimal LP solution value, this column ever assumed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gaf388065f45fe597b72454523efb2587d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPcolGetMaxPrimsol</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetMaxPrimsol</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the maximal LP solution value, this column ever assumed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gadb8546b57618b5cca7c70b7fa1d32192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SCIP_BASESTAT</type>
        <definition>SCIP_BASESTAT SCIPcolGetBasisStatus</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetBasisStatus</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the basis status of a column in the LP solution; only valid for LPs with status SCIP_LPSOLSTAT_OPTIMAL and with SCIPisLPSolBasic(scip) == TRUE; returns SCIP_BASESTAT_ZERO for columns not in the current SCIP_LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gae94430cb664027be0dd4534f2dc87147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
        <definition>SCIP_VAR* SCIPcolGetVar</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetVar</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets variable this column represents </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1ga9794af9c00858606285e18b8b5085cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPcolGetIndex</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetIndex</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP col </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets unique index of col </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1ga3e350bcbe852993a8d166d66a15fcd81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPcolIsIntegral</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolIsIntegral</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the associated variable is of integral type (binary, integer, implicit integer) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1ga2e6a046236d3af0b0d4752114d89888b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPcolIsRemovable</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolIsRemovable</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff column is removable from the LP (due to aging or cleanup) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1ga26d319bbff50575ce36abf598f108a35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPcolGetLPPos</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetLPPos</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets position of column in current LP, or -1 if it is not in LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gad0233da25643a27180d04e1568655d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPcolGetLPDepth</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetLPDepth</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets depth in the tree where the column entered the LP, or -1 if it is not in LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gac396a6cdc07f780aa8132555922778a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPcolIsInLP</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolIsInLP</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff column is member of current LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1ga68a6d090a09fb49728514c911c9a0f42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPcolGetNNonz</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetNNonz</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get number of nonzero entries in column vector </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gabe411088770afcdc19a58b78e7cab426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPcolGetNLPNonz</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetNLPNonz</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get number of nonzero entries in column vector, that correspond to rows currently in the SCIP_LP;</para><para><simplesect kind="warning"><para>This method is only applicable on columns, that are completely linked to their rows (e.g. a column that is in the current LP and the LP was solved, or a column that was in a solved LP and didn&apos;t change afterwards </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1ga78725376bb4d4742fd6e10387d745e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> **</type>
        <definition>SCIP_ROW** SCIPcolGetRows</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetRows</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with rows of nonzero entries </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gaaae6a87005ee5bc57e4d0d413148243d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPcolGetVals</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetVals</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with coefficients of nonzero entries </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gab484986a7593c61bc7fb72968e80c3a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a1e6171040084cc1f39f88e386238ee10" kindref="member">SCIP_Longint</ref></type>
        <definition>SCIP_Longint SCIPcolGetStrongbranchNode</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetStrongbranchNode</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets node number of the last node in current branch and bound run, where strong branching was used on the given column, or -1 if strong branching was never applied to the column in current run </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gac0ef7353bffa2053bd47d84d5bbd521a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPcolGetNStrongbranchs</definition>
        <argsstring>(SCIP_COL *col)</argsstring>
        <name>SCIPcolGetNStrongbranchs</name>
        <param>
          <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> *</type>
          <declname>col</declname>
          <briefdescription><para>LP column </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of times, strong branching was applied in current run on the given column </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__ColumnMethods_1gaeffe67ec8bab6c3e621f75c616042ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref></type>
        <definition>SCIP_BOUNDTYPE SCIPboundtypeOpposite</definition>
        <argsstring>(SCIP_BOUNDTYPE boundtype)</argsstring>
        <name>SCIPboundtypeOpposite</name>
        <param>
          <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref></type>
          <declname>boundtype</declname>
          <briefdescription><para>type of bound (lower or upper) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets opposite bound type of given bound type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gab2d1441c7477d08b18fc922b91178256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SCIP_DECL_SORTPTRCOMP</definition>
        <argsstring>(SCIProwComp)</argsstring>
        <name>SCIP_DECL_SORTPTRCOMP</name>
        <param>
          <type>SCIProwComp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>comparison method for sorting rows by non-decreasing index </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gaa35d3025a3738c05ccdb24032fe83506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIProwLock</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwLock</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>locks an unmodifiable row, which forbids further changes; has no effect on modifiable rows </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gaab40ea4ee2b87d8669176b7c78832447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIProwUnlock</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwUnlock</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unlocks a lock of an unmodifiable row; a row with no sealed lock may be modified; has no effect on modifiable rows </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga210e47e1ef0847b71ed99bef762aac94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIProwGetScalarProduct</definition>
        <argsstring>(SCIP_ROW *row1, SCIP_ROW *row2)</argsstring>
        <name>SCIProwGetScalarProduct</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row1</declname>
          <briefdescription><para>first LP row </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row2</declname>
          <briefdescription><para>second LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the scalar product of the coefficient vectors of the two given rows </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga3e6d355bb8bcca14c6cfd5a3c5c2194e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIProwGetParallelism</definition>
        <argsstring>(SCIP_ROW *row1, SCIP_ROW *row2, char orthofunc)</argsstring>
        <name>SCIProwGetParallelism</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row1</declname>
          <briefdescription><para>first LP row </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row2</declname>
          <briefdescription><para>second LP row </para></briefdescription>
        </param>
        <param>
          <type>char</type>
          <declname>orthofunc</declname>
          <briefdescription><para>function used for calc. scalar prod. (&apos;e&apos;uclidean, &apos;d&apos;iscrete) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the degree of parallelism between the hyperplanes defined by the two row vectors v, w: p = |v*w|/(|v|*|w|); the hyperplanes are parallel, iff p = 1, they are orthogonal, iff p = 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga1da290281a2143a814cec5a36b439417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIProwGetOrthogonality</definition>
        <argsstring>(SCIP_ROW *row1, SCIP_ROW *row2, char orthofunc)</argsstring>
        <name>SCIProwGetOrthogonality</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row1</declname>
          <briefdescription><para>first LP row </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row2</declname>
          <briefdescription><para>second LP row </para></briefdescription>
        </param>
        <param>
          <type>char</type>
          <declname>orthofunc</declname>
          <briefdescription><para>function used for calc. scalar prod. (&apos;e&apos;uclidean, &apos;d&apos;iscrete) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the degree of orthogonality between the hyperplanes defined by the two row vectors v, w: o = 1 - |v*w|/(|v|*|w|); the hyperplanes are orthogonal, iff p = 1, they are parallel, iff p = 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga01e2f5babc7d250aab1d195b228af56b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIProwSort</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwSort</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>row to be sorted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sorts row entries such that LP columns precede non-LP columns and inside both parts lower column indices precede higher ones </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga4bbbf624eade774dee24d0c489c7d435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIProwGetNNonz</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetNNonz</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get number of nonzero entries in row vector </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga7b035934338a39447a0612291d389a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIProwGetNLPNonz</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetNLPNonz</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get number of nonzero entries in row vector, that correspond to columns currently in the SCIP_LP;</para><para><simplesect kind="warning"><para>This method is only applicable on rows, that are completely linked to their columns (e.g. a row that is in the current LP and the LP was solved, or a row that was in a solved LP and didn&apos;t change afterwards </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gae7bce0efc6e4a007f7d50f6f93b38c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref> **</type>
        <definition>SCIP_COL** SCIProwGetCols</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetCols</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with columns of nonzero entries </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga6bdc0a46ccec39f94e8d09f205dc0191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIProwGetVals</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetVals</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with coefficients of nonzero entries </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gacf6752903a7ed39e049f259957433f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIProwGetConstant</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetConstant</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets constant shift of row </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga7d29e684cea78b9ef37bd56ec1b14ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIProwGetNorm</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetNorm</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets Euclidean norm of row vector </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gaab46833330d62c0e6daa82eb1566c27f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIProwGetSumNorm</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetSumNorm</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets sum norm of row vector (sum of absolute values of coefficients) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga0a8911ae1d2af432cef8e29e794d3c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIProwGetLhs</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetLhs</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the left hand side of the row </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga68fba35b3a070fe4b08d39dde3e44f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIProwGetRhs</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetRhs</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the right hand side of the row </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gae8bbb1d51edf13ff67d505b95f1bb0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIProwGetDualsol</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetDualsol</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the dual LP solution of a row </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gac28481db594a2070bf9e9b0cb72dc23d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIProwGetDualfarkas</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetDualfarkas</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the dual Farkas coefficient of a row in an infeasible LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gaf3c45c4b08cb081f56efc7b125368517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SCIP_BASESTAT</type>
        <definition>SCIP_BASESTAT SCIProwGetBasisStatus</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetBasisStatus</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the basis status of a row in the LP solution; only valid for LPs with status SCIP_LPSOLSTAT_OPTIMAL and with SCIPisLPSolBasic(scip) == TRUE; returns SCIP_BASESTAT_BASIC for rows not in the current SCIP_LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga221966d7fe396296f24e35e85d2a43b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SCIProwGetName</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetName</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the name of the row </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gac7cab1ce5f56af4a19f945b8471d151f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIProwGetIndex</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetIndex</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets unique index of row </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga799938b3c4fd09ba65b020a20cf07d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIProwGetAge</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetAge</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets age of row </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gabd02a834d00e21620c5b3fb6897eea9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIProwGetRank</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetRank</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets rank of row </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga01bc0fcf1d610b60e8a241521bc74697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIProwIsIntegral</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwIsIntegral</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff the activity of the row (without the row&apos;s constant) is always integral in a feasible solution </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga8d12128cf2298b27d57bcaaa07f261fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIProwIsLocal</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwIsLocal</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff row is only valid locally </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga0efbf798e1b4612a152c201575ec2b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIProwIsModifiable</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwIsModifiable</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff row is modifiable during node processing (subject to column generation) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gaa6d02abf025be8ccd574bddae53fffa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIProwIsRemovable</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwIsRemovable</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff row is removable from the LP (due to aging or cleanup) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gaf39d207a6033479c7ee279c7835c9e2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1a24aaea07ea0e42ad4b8e6e25a97c5585" kindref="member">SCIP_ROWORIGINTYPE</ref></type>
        <definition>SCIP_ROWORIGINTYPE SCIProwGetOrigintype</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetOrigintype</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns type of origin that created the row </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga853be131817d4dc100ebfd15af04e48a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref> *</type>
        <definition>SCIP_CONSHDLR* SCIProwGetOriginCons</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetOriginCons</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns origin constraint handler that created the row (NULL if not available) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga227f024bdc463e768ef2f08d75e87c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__sepa_8h_1ae4de65cedc0a319c15935cce113c833a" kindref="member">SCIP_SEPA</ref> *</type>
        <definition>SCIP_SEPA* SCIProwGetOriginSepa</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetOriginSepa</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns origin separator that created the row (NULL if not available) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga54571516b18483fe94128e3e4e4fe77f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIProwIsInGlobalCutpool</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwIsInGlobalCutpool</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff row is member of the global cut pool </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga801782a69e9e78029d8cd98698557c3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIProwGetLPPos</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetLPPos</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets position of row in current LP, or -1 if it is not in LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1ga28d5a7bf188451877d64571b9cb43fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIProwGetLPDepth</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwGetLPDepth</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets depth in the tree where the row entered the LP, or -1 if it is not in LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gae0a474274028cc639f4e5d647f286613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIProwIsInLP</definition>
        <argsstring>(SCIP_ROW *row)</argsstring>
        <name>SCIProwIsInLP</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff row is member of current LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__RowMethods_1gaca07b300e8cf56a22c9c9433921089fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIProwChgRank</definition>
        <argsstring>(SCIP_ROW *row, int rank)</argsstring>
        <name>SCIProwChgRank</name>
        <param>
          <type><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref> *</type>
          <declname>row</declname>
          <briefdescription><para>LP row </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>rank</declname>
          <briefdescription><para>new value for rank </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes the rank of LP row </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h" line="466" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>public methods for LP management </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Tobias Achterberg </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>program<sp/>and<sp/>library<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIP<sp/>---<sp/>Solving<sp/>Constraint<sp/>Integer<sp/>Programs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2002-2014<sp/>Konrad-Zuse-Zentrum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fuer<sp/>Informationstechnik<sp/>Berlin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>SCIP<sp/>is<sp/>distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>along<sp/>with<sp/>SCIP;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/>If<sp/>not<sp/>email<sp/>to<sp/>scip@zib.de.<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">/**@file<sp/><sp/><sp/>pub_lp.h</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>PUBLICMETHODS</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/>public<sp/>methods<sp/>for<sp/>LP<sp/>management</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@author<sp/>Tobias<sp/>Achterberg</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SCIP_PUB_LP_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SCIP_PUB_LP_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="def_8h" kindref="compound">scip/def.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blockmemshell/memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__set_8h" kindref="compound">scip/type_set.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__stat_8h" kindref="compound">scip/type_stat.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__lp_8h" kindref="compound">scip/type_lp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__var_8h" kindref="compound">scip/type_var.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__sol_8h" kindref="compound">scip/type_sol.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__sepa_8h" kindref="compound">scip/type_sepa.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__misc_8h" kindref="compound">scip/type_misc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lpi/type_lpi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;scip/struct_lp.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**@defgroup<sp/>ColumnMethods<sp/>Column<sp/>methods</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">/**<sp/>sorts<sp/>column<sp/>entries<sp/>such<sp/>that<sp/>LP<sp/>rows<sp/>precede<sp/>non-LP<sp/>rows<sp/>and<sp/>inside<sp/>both<sp/>parts<sp/>lower<sp/>row<sp/>indices<sp/>precede<sp/>higher<sp/>ones</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ColumnMethods_1ga9280fc67dc5f3384c3fb2b609cba1f49" kindref="member">SCIPcolSort</ref>(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>to<sp/>be<sp/>sorted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">/**<sp/>gets<sp/>objective<sp/>value<sp/>of<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__ColumnMethods_1ga60e8cc2149d3713998ce665e7ab26dba" kindref="member">SCIPcolGetObj</ref>(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**<sp/>gets<sp/>lower<sp/>bound<sp/>of<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__ColumnMethods_1gaa52fb121ea929652cabd1f106bc237b8" kindref="member">SCIPcolGetLb</ref>(</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">/**<sp/>gets<sp/>upper<sp/>bound<sp/>of<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__ColumnMethods_1gaae55f446379f772ff2fde480b16d4fe3" kindref="member">SCIPcolGetUb</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**<sp/>gets<sp/>best<sp/>bound<sp/>of<sp/>column<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>objective<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__ColumnMethods_1ga99493443fa15a7e69b29de402f83ef65" kindref="member">SCIPcolGetBestBound</ref>(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>primal<sp/>LP<sp/>solution<sp/>of<sp/>a<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__ColumnMethods_1gaad8dfe4530e50dcace40973f53bcb2d8" kindref="member">SCIPcolGetPrimsol</ref>(</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>minimal<sp/>LP<sp/>solution<sp/>value,<sp/>this<sp/>column<sp/>ever<sp/>assumed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__ColumnMethods_1ga1b82154dd7c59d7e86ab15230291a30f" kindref="member">SCIPcolGetMinPrimsol</ref>(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>maximal<sp/>LP<sp/>solution<sp/>value,<sp/>this<sp/>column<sp/>ever<sp/>assumed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__ColumnMethods_1gaf388065f45fe597b72454523efb2587d" kindref="member">SCIPcolGetMaxPrimsol</ref>(</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>basis<sp/>status<sp/>of<sp/>a<sp/>column<sp/>in<sp/>the<sp/>LP<sp/>solution;<sp/>only<sp/>valid<sp/>for<sp/>LPs<sp/>with<sp/>status<sp/>SCIP_LPSOLSTAT_OPTIMAL</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>with<sp/>SCIPisLPSolBasic(scip)<sp/>==<sp/>TRUE;<sp/>returns<sp/>SCIP_BASESTAT_ZERO<sp/>for<sp/>columns<sp/>not<sp/>in<sp/>the<sp/>current<sp/>SCIP_LP</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">SCIP_BASESTAT<sp/><ref refid="group__ColumnMethods_1gadb8546b57618b5cca7c70b7fa1d32192" kindref="member">SCIPcolGetBasisStatus</ref>(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">/**<sp/>gets<sp/>variable<sp/>this<sp/>column<sp/>represents<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><ref refid="group__ColumnMethods_1gae94430cb664027be0dd4534f2dc87147" kindref="member">SCIPcolGetVar</ref>(</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="118"><highlight class="comment">/**<sp/>gets<sp/>unique<sp/>index<sp/>of<sp/>col<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ColumnMethods_1ga9794af9c00858606285e18b8b5085cbc" kindref="member">SCIPcolGetIndex</ref>(</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>col<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="124"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>associated<sp/>variable<sp/>is<sp/>of<sp/>integral<sp/>type<sp/>(binary,<sp/>integer,<sp/>implicit<sp/>integer)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="group__ColumnMethods_1ga3e350bcbe852993a8d166d66a15fcd81" kindref="member">SCIPcolIsIntegral</ref>(</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>column<sp/>is<sp/>removable<sp/>from<sp/>the<sp/>LP<sp/>(due<sp/>to<sp/>aging<sp/>or<sp/>cleanup)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="group__ColumnMethods_1ga2e6a046236d3af0b0d4752114d89888b" kindref="member">SCIPcolIsRemovable</ref>(</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**<sp/>gets<sp/>position<sp/>of<sp/>column<sp/>in<sp/>current<sp/>LP,<sp/>or<sp/>-1<sp/>if<sp/>it<sp/>is<sp/>not<sp/>in<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ColumnMethods_1ga26d319bbff50575ce36abf598f108a35" kindref="member">SCIPcolGetLPPos</ref>(</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">/**<sp/>gets<sp/>depth<sp/>in<sp/>the<sp/>tree<sp/>where<sp/>the<sp/>column<sp/>entered<sp/>the<sp/>LP,<sp/>or<sp/>-1<sp/>if<sp/>it<sp/>is<sp/>not<sp/>in<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ColumnMethods_1gad0233da25643a27180d04e1568655d48" kindref="member">SCIPcolGetLPDepth</ref>(</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>column<sp/>is<sp/>member<sp/>of<sp/>current<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="group__ColumnMethods_1gac396a6cdc07f780aa8132555922778a5" kindref="member">SCIPcolIsInLP</ref>(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">/**<sp/>get<sp/>number<sp/>of<sp/>nonzero<sp/>entries<sp/>in<sp/>column<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ColumnMethods_1ga68a6d090a09fb49728514c911c9a0f42" kindref="member">SCIPcolGetNNonz</ref>(</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment">/**<sp/>get<sp/>number<sp/>of<sp/>nonzero<sp/>entries<sp/>in<sp/>column<sp/>vector,<sp/>that<sp/>correspond<sp/>to<sp/>rows<sp/>currently<sp/>in<sp/>the<sp/>SCIP_LP;</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>@warning<sp/>This<sp/>method<sp/>is<sp/>only<sp/>applicable<sp/>on<sp/>columns,<sp/>that<sp/>are<sp/>completely<sp/>linked<sp/>to<sp/>their<sp/>rows<sp/>(e.g.<sp/>a<sp/>column</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/>that<sp/>is<sp/>in<sp/>the<sp/>current<sp/>LP<sp/>and<sp/>the<sp/>LP<sp/>was<sp/>solved,<sp/>or<sp/>a<sp/>column<sp/>that<sp/>was<sp/>in<sp/>a<sp/>solved<sp/>LP<sp/>and<sp/>didn&apos;t<sp/>change<sp/>afterwards</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ColumnMethods_1gabe411088770afcdc19a58b78e7cab426" kindref="member">SCIPcolGetNLPNonz</ref>(</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>rows<sp/>of<sp/>nonzero<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>**<sp/><ref refid="group__ColumnMethods_1ga78725376bb4d4742fd6e10387d745e88" kindref="member">SCIPcolGetRows</ref>(</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>coefficients<sp/>of<sp/>nonzero<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="group__ColumnMethods_1gaaae6a87005ee5bc57e4d0d413148243d" kindref="member">SCIPcolGetVals</ref>(</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment">/**<sp/>gets<sp/>node<sp/>number<sp/>of<sp/>the<sp/>last<sp/>node<sp/>in<sp/>current<sp/>branch<sp/>and<sp/>bound<sp/>run,<sp/>where<sp/>strong<sp/>branching<sp/>was<sp/>used<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>given<sp/>column,<sp/>or<sp/>-1<sp/>if<sp/>strong<sp/>branching<sp/>was<sp/>never<sp/>applied<sp/>to<sp/>the<sp/>column<sp/>in<sp/>current<sp/>run</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><ref refid="def_8h_1a1e6171040084cc1f39f88e386238ee10" kindref="member">SCIP_Longint</ref><sp/><ref refid="group__ColumnMethods_1gab484986a7593c61bc7fb72968e80c3a9" kindref="member">SCIPcolGetStrongbranchNode</ref>(</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="190"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>times,<sp/>strong<sp/>branching<sp/>was<sp/>applied<sp/>in<sp/>current<sp/>run<sp/>on<sp/>the<sp/>given<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__ColumnMethods_1gac0ef7353bffa2053bd47d84d5bbd521a" kindref="member">SCIPcolGetNStrongbranchs</ref>(</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="comment">/**<sp/>gets<sp/>opposite<sp/>bound<sp/>type<sp/>of<sp/>given<sp/>bound<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref><sp/><ref refid="group__ColumnMethods_1gaeffe67ec8bab6c3e621f75c616042ea5" kindref="member">SCIPboundtypeOpposite</ref>(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundtype<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>type<sp/>of<sp/>bound<sp/>(lower<sp/>or<sp/>upper)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>optimized<sp/>mode,<sp/>the<sp/>function<sp/>calls<sp/>are<sp/>overwritten<sp/>by<sp/>defines<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>function<sp/>calls<sp/>and</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>speed<sp/>up<sp/>the<sp/>algorithms.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetObj(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;obj</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetLb(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;lb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetUb(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;ub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetBestBound(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((col)-&gt;obj<sp/>&gt;=<sp/>0.0<sp/>?<sp/>(col)-&gt;lb<sp/>:<sp/>(col)-&gt;ub)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetPrimsol(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((col)-&gt;lppos<sp/>&gt;=<sp/>0<sp/>?<sp/>(col)-&gt;primsol<sp/>:<sp/>0.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetMinPrimsol(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((col)-&gt;minprimsol)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetMaxPrimsol(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((col)-&gt;maxprimsol)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetBasisStatus(col)<sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_BASESTAT)(col)-&gt;basisstatus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetVar(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetIndex(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolIsIntegral(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolIsRemovable(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;removable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetLPPos(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;lppos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetLPDepth(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;lpdepth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolIsInLP(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((col)-&gt;lppos<sp/>&gt;=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetNNonz(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;len</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetNLPNonz(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;nlprows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetRows(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetVals(col)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(col)-&gt;vals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetStrongbranchNode(col)<sp/>(col)-&gt;sbnode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPcolGetNStrongbranchs(col)<sp/><sp/><sp/>(col)-&gt;nsbcalls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPboundtypeOpposite(boundtype)<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/>((boundtype)<sp/>==<sp/>SCIP_BOUNDTYPE_LOWER<sp/>?<sp/>SCIP_BOUNDTYPE_UPPER<sp/>:<sp/>SCIP_BOUNDTYPE_LOWER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment">/**@defgroup<sp/>RowMethods<sp/>Row<sp/>methods</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment">/**<sp/>comparison<sp/>method<sp/>for<sp/>sorting<sp/>rows<sp/>by<sp/>non-decreasing<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="group__RowMethods_1gab2d1441c7477d08b18fc922b91178256" kindref="member">SCIP_DECL_SORTPTRCOMP</ref>(SCIProwComp);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**<sp/>locks<sp/>an<sp/>unmodifiable<sp/>row,<sp/>which<sp/>forbids<sp/>further<sp/>changes;<sp/>has<sp/>no<sp/>effect<sp/>on<sp/>modifiable<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1gaa35d3025a3738c05ccdb24032fe83506" kindref="member">SCIProwLock</ref>(</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment">/**<sp/>unlocks<sp/>a<sp/>lock<sp/>of<sp/>an<sp/>unmodifiable<sp/>row;<sp/>a<sp/>row<sp/>with<sp/>no<sp/>sealed<sp/>lock<sp/>may<sp/>be<sp/>modified;<sp/>has<sp/>no<sp/>effect<sp/>on<sp/>modifiable<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1gaab40ea4ee2b87d8669176b7c78832447" kindref="member">SCIProwUnlock</ref>(</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>scalar<sp/>product<sp/>of<sp/>the<sp/>coefficient<sp/>vectors<sp/>of<sp/>the<sp/>two<sp/>given<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__RowMethods_1ga210e47e1ef0847b71ed99bef762aac94" kindref="member">SCIProwGetScalarProduct</ref>(</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>degree<sp/>of<sp/>parallelism<sp/>between<sp/>the<sp/>hyperplanes<sp/>defined<sp/>by<sp/>the<sp/>two<sp/>row<sp/>vectors<sp/>v,<sp/>w:</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>p<sp/>=<sp/>|v*w|/(|v|*|w|);</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>hyperplanes<sp/>are<sp/>parallel,<sp/>iff<sp/>p<sp/>=<sp/>1,<sp/>they<sp/>are<sp/>orthogonal,<sp/>iff<sp/>p<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__RowMethods_1ga3e6d355bb8bcca14c6cfd5a3c5c2194e" kindref="member">SCIProwGetParallelism</ref>(</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orthofunc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>function<sp/>used<sp/>for<sp/>calc.<sp/>scalar<sp/>prod.<sp/>(&apos;e&apos;uclidean,<sp/>&apos;d&apos;iscrete)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>degree<sp/>of<sp/>orthogonality<sp/>between<sp/>the<sp/>hyperplanes<sp/>defined<sp/>by<sp/>the<sp/>two<sp/>row<sp/>vectors<sp/>v,<sp/>w:</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/><sp/>o<sp/>=<sp/>1<sp/>-<sp/>|v*w|/(|v|*|w|);</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>hyperplanes<sp/>are<sp/>orthogonal,<sp/>iff<sp/>p<sp/>=<sp/>1,<sp/>they<sp/>are<sp/>parallel,<sp/>iff<sp/>p<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__RowMethods_1ga1da290281a2143a814cec5a36b439417" kindref="member">SCIProwGetOrthogonality</ref>(</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orthofunc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>function<sp/>used<sp/>for<sp/>calc.<sp/>scalar<sp/>prod.<sp/>(&apos;e&apos;uclidean,<sp/>&apos;d&apos;iscrete)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="288"><highlight class="comment">/**<sp/>sorts<sp/>row<sp/>entries<sp/>such<sp/>that<sp/>LP<sp/>columns<sp/>precede<sp/>non-LP<sp/>columns<sp/>and<sp/>inside<sp/>both<sp/>parts<sp/>lower<sp/>column<sp/>indices<sp/>precede</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/><sp/>higher<sp/>ones</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1ga01e2f5babc7d250aab1d195b228af56b" kindref="member">SCIProwSort</ref>(</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>to<sp/>be<sp/>sorted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">/**<sp/>get<sp/>number<sp/>of<sp/>nonzero<sp/>entries<sp/>in<sp/>row<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1ga4bbbf624eade774dee24d0c489c7d435" kindref="member">SCIProwGetNNonz</ref>(</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="302"><highlight class="comment">/**<sp/>get<sp/>number<sp/>of<sp/>nonzero<sp/>entries<sp/>in<sp/>row<sp/>vector,<sp/>that<sp/>correspond<sp/>to<sp/>columns<sp/>currently<sp/>in<sp/>the<sp/>SCIP_LP;</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/><sp/>@warning<sp/>This<sp/>method<sp/>is<sp/>only<sp/>applicable<sp/>on<sp/>rows,<sp/>that<sp/>are<sp/>completely<sp/>linked<sp/>to<sp/>their<sp/>columns<sp/>(e.g.<sp/>a<sp/>row</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/><sp/>that<sp/>is<sp/>in<sp/>the<sp/>current<sp/>LP<sp/>and<sp/>the<sp/>LP<sp/>was<sp/>solved,<sp/>or<sp/>a<sp/>row<sp/>that<sp/>was<sp/>in<sp/>a<sp/>solved<sp/>LP<sp/>and<sp/>didn&apos;t<sp/>change<sp/>afterwards</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1ga7b035934338a39447a0612291d389a4c" kindref="member">SCIProwGetNLPNonz</ref>(</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="312"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>columns<sp/>of<sp/>nonzero<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><ref refid="type__lp_8h_1a9fbe1dac436203f1fcab0ef7bbc7044a" kindref="member">SCIP_COL</ref>**<sp/><ref refid="group__RowMethods_1gae7bce0efc6e4a007f7d50f6f93b38c69" kindref="member">SCIProwGetCols</ref>(</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>coefficients<sp/>of<sp/>nonzero<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="group__RowMethods_1ga6bdc0a46ccec39f94e8d09f205dc0191" kindref="member">SCIProwGetVals</ref>(</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="324"><highlight class="comment">/**<sp/>gets<sp/>constant<sp/>shift<sp/>of<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__RowMethods_1gacf6752903a7ed39e049f259957433f0e" kindref="member">SCIProwGetConstant</ref>(</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment">/**<sp/>gets<sp/>Euclidean<sp/>norm<sp/>of<sp/>row<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__RowMethods_1ga7d29e684cea78b9ef37bd56ec1b14ae8" kindref="member">SCIProwGetNorm</ref>(</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="336"><highlight class="comment">/**<sp/>gets<sp/>sum<sp/>norm<sp/>of<sp/>row<sp/>vector<sp/>(sum<sp/>of<sp/>absolute<sp/>values<sp/>of<sp/>coefficients)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__RowMethods_1gaab46833330d62c0e6daa82eb1566c27f" kindref="member">SCIProwGetSumNorm</ref>(</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="342"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>left<sp/>hand<sp/>side<sp/>of<sp/>the<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__RowMethods_1ga0a8911ae1d2af432cef8e29e794d3c3c" kindref="member">SCIProwGetLhs</ref>(</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="348"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>right<sp/>hand<sp/>side<sp/>of<sp/>the<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__RowMethods_1ga68fba35b3a070fe4b08d39dde3e44f20" kindref="member">SCIProwGetRhs</ref>(</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="354"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>dual<sp/>LP<sp/>solution<sp/>of<sp/>a<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__RowMethods_1gae8bbb1d51edf13ff67d505b95f1bb0e3" kindref="member">SCIProwGetDualsol</ref>(</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="360"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>dual<sp/>Farkas<sp/>coefficient<sp/>of<sp/>a<sp/>row<sp/>in<sp/>an<sp/>infeasible<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="group__RowMethods_1gac28481db594a2070bf9e9b0cb72dc23d" kindref="member">SCIProwGetDualfarkas</ref>(</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="366"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>basis<sp/>status<sp/>of<sp/>a<sp/>row<sp/>in<sp/>the<sp/>LP<sp/>solution;<sp/>only<sp/>valid<sp/>for<sp/>LPs<sp/>with<sp/>status<sp/>SCIP_LPSOLSTAT_OPTIMAL</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>with<sp/>SCIPisLPSolBasic(scip)<sp/>==<sp/>TRUE;<sp/>returns<sp/>SCIP_BASESTAT_BASIC<sp/>for<sp/>rows<sp/>not<sp/>in<sp/>the<sp/>current<sp/>SCIP_LP</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">SCIP_BASESTAT<sp/><ref refid="group__RowMethods_1gaf3c45c4b08cb081f56efc7b125368517" kindref="member">SCIProwGetBasisStatus</ref>(</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="374"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>name<sp/>of<sp/>the<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="group__RowMethods_1ga221966d7fe396296f24e35e85d2a43b9" kindref="member">SCIProwGetName</ref>(</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="380"><highlight class="comment">/**<sp/>gets<sp/>unique<sp/>index<sp/>of<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1gac7cab1ce5f56af4a19f945b8471d151f" kindref="member">SCIProwGetIndex</ref>(</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment">/**<sp/>gets<sp/>age<sp/>of<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1ga799938b3c4fd09ba65b020a20cf07d07" kindref="member">SCIProwGetAge</ref>(</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="392"><highlight class="comment">/**<sp/>gets<sp/>rank<sp/>of<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1gabd02a834d00e21620c5b3fb6897eea9f" kindref="member">SCIProwGetRank</ref>(</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="398"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>the<sp/>activity<sp/>of<sp/>the<sp/>row<sp/>(without<sp/>the<sp/>row&apos;s<sp/>constant)<sp/>is<sp/>always<sp/>integral<sp/>in<sp/>a<sp/>feasible<sp/>solution<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="group__RowMethods_1ga01bc0fcf1d610b60e8a241521bc74697" kindref="member">SCIProwIsIntegral</ref>(</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="404"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>row<sp/>is<sp/>only<sp/>valid<sp/>locally<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="group__RowMethods_1ga8d12128cf2298b27d57bcaaa07f261fc" kindref="member">SCIProwIsLocal</ref>(</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>row<sp/>is<sp/>modifiable<sp/>during<sp/>node<sp/>processing<sp/>(subject<sp/>to<sp/>column<sp/>generation)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="group__RowMethods_1ga0efbf798e1b4612a152c201575ec2b0f" kindref="member">SCIProwIsModifiable</ref>(</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="416"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>row<sp/>is<sp/>removable<sp/>from<sp/>the<sp/>LP<sp/>(due<sp/>to<sp/>aging<sp/>or<sp/>cleanup)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="group__RowMethods_1gaa6d02abf025be8ccd574bddae53fffa2" kindref="member">SCIProwIsRemovable</ref>(</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="422"><highlight class="comment">/**<sp/>returns<sp/>type<sp/>of<sp/>origin<sp/>that<sp/>created<sp/>the<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><ref refid="type__lp_8h_1a24aaea07ea0e42ad4b8e6e25a97c5585" kindref="member">SCIP_ROWORIGINTYPE</ref><sp/><ref refid="group__RowMethods_1gaf39d207a6033479c7ee279c7835c9e2e" kindref="member">SCIProwGetOrigintype</ref>(</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment">/**<sp/>returns<sp/>origin<sp/>constraint<sp/>handler<sp/>that<sp/>created<sp/>the<sp/>row<sp/>(NULL<sp/>if<sp/>not<sp/>available)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><ref refid="type__cons_8h_1ab396d8cbfe68a15f3c59d130e4ed0f90" kindref="member">SCIP_CONSHDLR</ref>*<sp/><ref refid="group__RowMethods_1ga853be131817d4dc100ebfd15af04e48a" kindref="member">SCIProwGetOriginCons</ref>(</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="434"><highlight class="comment">/**<sp/>returns<sp/>origin<sp/>separator<sp/>that<sp/>created<sp/>the<sp/>row<sp/>(NULL<sp/>if<sp/>not<sp/>available)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><ref refid="type__sepa_8h_1ae4de65cedc0a319c15935cce113c833a" kindref="member">SCIP_SEPA</ref>*<sp/><ref refid="group__RowMethods_1ga227f024bdc463e768ef2f08d75e87c68" kindref="member">SCIProwGetOriginSepa</ref>(</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="440"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>row<sp/>is<sp/>member<sp/>of<sp/>the<sp/>global<sp/>cut<sp/>pool<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="group__RowMethods_1ga54571516b18483fe94128e3e4e4fe77f" kindref="member">SCIProwIsInGlobalCutpool</ref>(</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="446"><highlight class="comment">/**<sp/>gets<sp/>position<sp/>of<sp/>row<sp/>in<sp/>current<sp/>LP,<sp/>or<sp/>-1<sp/>if<sp/>it<sp/>is<sp/>not<sp/>in<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1ga801782a69e9e78029d8cd98698557c3b" kindref="member">SCIProwGetLPPos</ref>(</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="452"><highlight class="comment">/**<sp/>gets<sp/>depth<sp/>in<sp/>the<sp/>tree<sp/>where<sp/>the<sp/>row<sp/>entered<sp/>the<sp/>LP,<sp/>or<sp/>-1<sp/>if<sp/>it<sp/>is<sp/>not<sp/>in<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1ga28d5a7bf188451877d64571b9cb43fd5" kindref="member">SCIProwGetLPDepth</ref>(</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="458"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>row<sp/>is<sp/>member<sp/>of<sp/>current<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="group__RowMethods_1gae0a474274028cc639f4e5d647f286613" kindref="member">SCIProwIsInLP</ref>(</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="464"><highlight class="comment">/**<sp/>changes<sp/>the<sp/>rank<sp/>of<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__RowMethods_1gaca07b300e8cf56a22c9c9433921089fb" kindref="member">SCIProwChgRank</ref>(</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1a032f27315b19f63ad9fd77077d865adc" kindref="member">SCIP_ROW</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>value<sp/>for<sp/>rank<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>optimized<sp/>mode,<sp/>the<sp/>function<sp/>calls<sp/>are<sp/>overwritten<sp/>by<sp/>defines<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>function<sp/>calls<sp/>and</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>speed<sp/>up<sp/>the<sp/>algorithms.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetNNonz(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;len</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetNLPNonz(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;nlpcols</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetCols(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;cols</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetVals(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;vals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetConstant(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetNorm(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqrt((row)-&gt;sqrnorm)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetSumNorm(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;sumnorm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetLhs(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;lhs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetRhs(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;rhs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetDualsol(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((row)-&gt;lppos<sp/>&gt;=<sp/>0<sp/>?<sp/>(row)-&gt;dualsol<sp/>:<sp/>0.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetDualfarkas(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((row)-&gt;lppos<sp/>&gt;=<sp/>0<sp/>?<sp/>(row)-&gt;dualfarkas<sp/>:<sp/>0.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetBasisStatus(row)<sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_BASESTAT)<sp/>(row)-&gt;basisstatus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetName(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetIndex(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetAge(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;age</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetRank(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwIsIntegral(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwIsLocal(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwIsModifiable(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;modifiable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwIsRemovable(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;removable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetOrigintype(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;origintype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetOriginCons(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_CONSHDLR*)<sp/>((SCIP_ROWORIGINTYPE)<sp/>row-&gt;origintype<sp/>==<sp/>SCIP_ROWORIGINTYPE_CONS<sp/>?<sp/>(row)-&gt;origin<sp/>:<sp/>NULL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetOriginSepa(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_SEPA*)<sp/>((SCIP_ROWORIGINTYPE)<sp/>row-&gt;origintype<sp/>==<sp/>SCIP_ROWORIGINTYPE_SEPA<sp/>?<sp/>(row)-&gt;origin<sp/>:<sp/>NULL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwIsInGlobalCutpool(row)<sp/><sp/><sp/>(row)-&gt;inglobalcutpool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetLPPos(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;lppos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwGetLPDepth(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row)-&gt;lpdepth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwIsInLP(row)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((row)-&gt;lppos<sp/>&gt;=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIProwChgRank(row,<sp/>cutrank)<sp/><sp/><sp/><sp/>((row)-&gt;rank<sp/>=<sp/>(cutrank))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="508"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="510"><highlight class="comment">/**@defgroup<sp/>LPMethods<sp/>LP<sp/>methods</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="515"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/pub_lp.h"/>
  </compounddef>
</doxygen>
