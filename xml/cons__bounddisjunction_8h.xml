<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="cons__bounddisjunction_8h" kind="file">
    <compoundname>cons_bounddisjunction.h</compoundname>
    <includes refid="scip_8h" local="yes">scip/scip.h</includes>
    <includedby refid="scipdefplugins_8h" local="yes">scipdefplugins.h</includedby>
    <incdepgraph>
      <node id="986">
        <label>scip/type_conflict.h</label>
        <link refid="type__conflict_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
      </node>
      <node id="970">
        <label>stdarg.h</label>
      </node>
      <node id="1035">
        <label>scip/intervalarith.h</label>
      </node>
      <node id="981">
        <label>scip/type_nlp.h</label>
        <link refid="type__nlp_8h"/>
      </node>
      <node id="988">
        <label>scip/type_sol.h</label>
        <link refid="type__sol_8h"/>
      </node>
      <node id="961">
        <label>scip/scip.h</label>
        <link refid="scip_8h"/>
        <childnode refid="962" relation="include">
        </childnode>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="972" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="974" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="980" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
        <childnode refid="984" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
        <childnode refid="991" relation="include">
        </childnode>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="993" relation="include">
        </childnode>
        <childnode refid="994" relation="include">
        </childnode>
        <childnode refid="995" relation="include">
        </childnode>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
        <childnode refid="998" relation="include">
        </childnode>
        <childnode refid="999" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
        <childnode refid="1002" relation="include">
        </childnode>
        <childnode refid="1003" relation="include">
        </childnode>
        <childnode refid="1004" relation="include">
        </childnode>
        <childnode refid="1005" relation="include">
        </childnode>
        <childnode refid="1007" relation="include">
        </childnode>
        <childnode refid="1008" relation="include">
        </childnode>
        <childnode refid="1009" relation="include">
        </childnode>
        <childnode refid="1010" relation="include">
        </childnode>
        <childnode refid="1012" relation="include">
        </childnode>
        <childnode refid="1013" relation="include">
        </childnode>
        <childnode refid="1014" relation="include">
        </childnode>
        <childnode refid="1016" relation="include">
        </childnode>
        <childnode refid="1020" relation="include">
        </childnode>
        <childnode refid="969" relation="include">
        </childnode>
        <childnode refid="1021" relation="include">
        </childnode>
        <childnode refid="1022" relation="include">
        </childnode>
        <childnode refid="1023" relation="include">
        </childnode>
        <childnode refid="1024" relation="include">
        </childnode>
        <childnode refid="1025" relation="include">
        </childnode>
        <childnode refid="1026" relation="include">
        </childnode>
        <childnode refid="1027" relation="include">
        </childnode>
        <childnode refid="1028" relation="include">
        </childnode>
        <childnode refid="1029" relation="include">
        </childnode>
        <childnode refid="1030" relation="include">
        </childnode>
        <childnode refid="1031" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1033" relation="include">
        </childnode>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
      </node>
      <node id="1003">
        <label>scip/pub_conflict.h</label>
        <link refid="pub__conflict_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
      </node>
      <node id="978">
        <label>scip/type_paramset.h</label>
        <link refid="type__paramset_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="967">
        <label>assert.h</label>
      </node>
      <node id="993">
        <label>scip/type_nodesel.h</label>
        <link refid="type__nodesel_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="984" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="1036">
        <label>nlpi/type_exprinterpret.h</label>
        <link refid="type__exprinterpret_8h"/>
      </node>
      <node id="966">
        <label>float.h</label>
      </node>
      <node id="984">
        <label>scip/type_tree.h</label>
        <link refid="type__tree_8h"/>
      </node>
      <node id="995">
        <label>scip/type_pricer.h</label>
        <link refid="type__pricer_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="982">
        <label>scip/type_var.h</label>
        <link refid="type__var_8h"/>
      </node>
      <node id="1012">
        <label>scip/pub_heur.h</label>
        <link refid="pub__heur_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="991" relation="include">
        </childnode>
      </node>
      <node id="1006">
        <label>scip/type_cutpool.h</label>
        <link refid="type__cutpool_8h"/>
      </node>
      <node id="974">
        <label>scip/type_clock.h</label>
        <link refid="type__clock_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
      </node>
      <node id="985">
        <label>scip/type_branch.h</label>
        <link refid="type__branch_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="989">
        <label>scip/type_dialog.h</label>
        <link refid="type__dialog_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="1032">
        <label>scip/pub_var.h</label>
        <link refid="pub__var_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="1015" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
      </node>
      <node id="1016">
        <label>scip/pub_lp.h</label>
        <link refid="pub__lp_8h"/>
        <childnode refid="962" relation="include">
        </childnode>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="972" relation="include">
        </childnode>
        <childnode refid="1017" relation="include">
        </childnode>
        <childnode refid="1018" relation="include">
        </childnode>
        <childnode refid="980" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
        <childnode refid="998" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="1019" relation="include">
        </childnode>
      </node>
      <node id="1013">
        <label>scip/pub_history.h</label>
        <link refid="pub__history_8h"/>
      </node>
      <node id="973">
        <label>scip/type_result.h</label>
        <link refid="type__result_8h"/>
      </node>
      <node id="1019">
        <label>lpi/type_lpi.h</label>
      </node>
      <node id="1005">
        <label>scip/pub_cutpool.h</label>
        <link refid="pub__cutpool_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="1006" relation="include">
        </childnode>
      </node>
      <node id="1009">
        <label>scip/pub_event.h</label>
        <link refid="pub__event_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
        <childnode refid="984" relation="include">
        </childnode>
      </node>
      <node id="980">
        <label>scip/type_lp.h</label>
        <link refid="type__lp_8h"/>
      </node>
      <node id="1025">
        <label>scip/pub_pricer.h</label>
        <link refid="pub__pricer_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="995" relation="include">
        </childnode>
      </node>
      <node id="1010">
        <label>scip/pub_fileio.h</label>
        <link refid="pub__fileio_8h"/>
        <childnode refid="1011" relation="include">
        </childnode>
        <childnode refid="963" relation="include">
        </childnode>
      </node>
      <node id="1011">
        <label>stddef.h</label>
      </node>
      <node id="1014">
        <label>scip/pub_implics.h</label>
        <link refid="pub__implics_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="1015" relation="include">
        </childnode>
      </node>
      <node id="1033">
        <label>lpi/lpi.h</label>
      </node>
      <node id="983">
        <label>scip/type_prob.h</label>
        <link refid="type__prob_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="1015">
        <label>scip/type_implics.h</label>
        <link refid="type__implics_8h"/>
      </node>
      <node id="1021">
        <label>scip/pub_misc.h</label>
        <link refid="pub__misc_8h"/>
        <childnode refid="964" relation="include">
        </childnode>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="972" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="971" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
      </node>
      <node id="1031">
        <label>scip/pub_tree.h</label>
        <link refid="pub__tree_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="984" relation="include">
        </childnode>
      </node>
      <node id="965">
        <label>limits.h</label>
      </node>
      <node id="1018">
        <label>scip/type_stat.h</label>
        <link refid="type__stat_8h"/>
      </node>
      <node id="977">
        <label>scip/type_scip.h</label>
        <link refid="type__scip_8h"/>
      </node>
      <node id="987">
        <label>scip/type_cons.h</label>
        <link refid="type__cons_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="976" relation="include">
        </childnode>
      </node>
      <node id="1028">
        <label>scip/pub_sepa.h</label>
        <link refid="pub__sepa_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="998" relation="include">
        </childnode>
      </node>
      <node id="971">
        <label>scip/type_message.h</label>
        <link refid="type__message_8h"/>
        <childnode refid="962" relation="include">
        </childnode>
      </node>
      <node id="975">
        <label>scip/type_misc.h</label>
        <link refid="type__misc_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
      </node>
      <node id="1037">
        <label>scip/presolve.h</label>
      </node>
      <node id="1000">
        <label>nlpi/type_nlpi.h</label>
        <link refid="type__nlpi_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="971" relation="include">
        </childnode>
        <childnode refid="972" relation="include">
        </childnode>
        <childnode refid="1001" relation="include">
        </childnode>
      </node>
      <node id="997">
        <label>scip/type_relax.h</label>
        <link refid="type__relax_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="1017">
        <label>scip/type_set.h</label>
        <link refid="type__set_8h"/>
      </node>
      <node id="1002">
        <label>scip/pub_branch.h</label>
        <link refid="pub__branch_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
      </node>
      <node id="969">
        <label>scip/pub_message.h</label>
        <link refid="pub__message_8h"/>
        <childnode refid="970" relation="include">
        </childnode>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="971" relation="include">
        </childnode>
      </node>
      <node id="1029">
        <label>scip/pub_prop.h</label>
        <link refid="pub__prop_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="999" relation="include">
        </childnode>
      </node>
      <node id="998">
        <label>scip/type_sepa.h</label>
        <link refid="type__sepa_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="976">
        <label>scip/type_timing.h</label>
        <link refid="type__timing_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="968">
        <label>scip/type_retcode.h</label>
        <link refid="type__retcode_8h"/>
      </node>
      <node id="990">
        <label>scip/type_disp.h</label>
        <link refid="type__disp_8h"/>
        <childnode refid="962" relation="include">
        </childnode>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="1001">
        <label>nlpi/type_expr.h</label>
        <link refid="type__expr_8h"/>
      </node>
      <node id="979">
        <label>scip/type_event.h</label>
        <link refid="type__event_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="994">
        <label>scip/type_presol.h</label>
        <link refid="type__presol_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="1008">
        <label>scip/pub_disp.h</label>
        <link refid="pub__disp_8h"/>
        <childnode refid="962" relation="include">
        </childnode>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="1034">
        <label>nlpi/pub_expr.h</label>
        <link refid="pub__expr_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="969" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="972" relation="include">
        </childnode>
        <childnode refid="1001" relation="include">
        </childnode>
        <childnode refid="1036" relation="include">
        </childnode>
      </node>
      <node id="964">
        <label>math.h</label>
      </node>
      <node id="1020">
        <label>scip/pub_nlp.h</label>
        <link refid="pub__nlp_8h"/>
        <childnode refid="962" relation="include">
        </childnode>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="971" relation="include">
        </childnode>
        <childnode refid="972" relation="include">
        </childnode>
        <childnode refid="1017" relation="include">
        </childnode>
        <childnode refid="1018" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
        <childnode refid="1001" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
      </node>
      <node id="972">
        <label>blockmemshell/memory.h</label>
      </node>
      <node id="991">
        <label>scip/type_heur.h</label>
        <link refid="type__heur_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="976" relation="include">
        </childnode>
      </node>
      <node id="1030">
        <label>scip/pub_sol.h</label>
        <link refid="pub__sol_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
        <childnode refid="991" relation="include">
        </childnode>
      </node>
      <node id="1027">
        <label>scip/pub_relax.h</label>
        <link refid="pub__relax_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
      </node>
      <node id="996">
        <label>scip/type_reader.h</label>
        <link refid="type__reader_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="992">
        <label>scip/type_history.h</label>
        <link refid="type__history_8h"/>
      </node>
      <node id="963">
        <label>scip/def.h</label>
        <link refid="def_8h"/>
        <childnode refid="962" relation="include">
        </childnode>
        <childnode refid="964" relation="include">
        </childnode>
        <childnode refid="965" relation="include">
        </childnode>
        <childnode refid="966" relation="include">
        </childnode>
        <childnode refid="967" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="969" relation="include">
        </childnode>
      </node>
      <node id="1007">
        <label>scip/pub_dialog.h</label>
        <link refid="pub__dialog_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
      </node>
      <node id="1022">
        <label>scip/pub_nodesel.h</label>
        <link refid="pub__nodesel_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="993" relation="include">
        </childnode>
      </node>
      <node id="999">
        <label>scip/type_prop.h</label>
        <link refid="type__prop_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="976" relation="include">
        </childnode>
      </node>
      <node id="1023">
        <label>scip/pub_paramset.h</label>
        <link refid="pub__paramset_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="1026">
        <label>scip/pub_reader.h</label>
        <link refid="pub__reader_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="996" relation="include">
        </childnode>
      </node>
      <node id="1024">
        <label>scip/pub_presol.h</label>
        <link refid="pub__presol_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="994" relation="include">
        </childnode>
      </node>
      <node id="962">
        <label>stdio.h</label>
      </node>
      <node id="960">
        <label>cons_bounddisjunction.h</label>
        <link refid="cons_bounddisjunction.h"/>
        <childnode refid="961" relation="include">
        </childnode>
      </node>
      <node id="1004">
        <label>scip/pub_cons.h</label>
        <link refid="pub__cons_8h"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1039">
        <label>scipdefplugins.h</label>
        <link refid="scipdefplugins_8h"/>
      </node>
      <node id="1038">
        <label>cons_bounddisjunction.h</label>
        <link refid="cons_bounddisjunction.h"/>
        <childnode refid="1039" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="cons__bounddisjunction_8h_1a05e8c9c71fd15cef320dd7887e42fc62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPincludeConshdlrBounddisjunction</definition>
        <argsstring>(SCIP *scip)</argsstring>
        <name>SCIPincludeConshdlrBounddisjunction</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates the handler for bound disjunction constraints and includes it in SCIP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/cons_bounddisjunction.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__bounddisjunction_8h_1a4ea716f692db1c03f213b26a6ab6761b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPcreateConsBounddisjunction</definition>
        <argsstring>(SCIP *scip, SCIP_CONS **cons, const char *name, int nvars, SCIP_VAR **vars, SCIP_BOUNDTYPE *boundtypes, SCIP_Real *bounds, SCIP_Bool initial, SCIP_Bool separate, SCIP_Bool enforce, SCIP_Bool check, SCIP_Bool propagate, SCIP_Bool local, SCIP_Bool modifiable, SCIP_Bool dynamic, SCIP_Bool removable, SCIP_Bool stickingatnode)</argsstring>
        <name>SCIPcreateConsBounddisjunction</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> **</type>
          <declname>cons</declname>
          <briefdescription><para>pointer to hold the created constraint </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <briefdescription><para>name of constraint </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nvars</declname>
          <briefdescription><para>number of variables in the constraint </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
          <declname>vars</declname>
          <briefdescription><para>variables of the literals in the constraint </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref> *</type>
          <declname>boundtypes</declname>
          <briefdescription><para>types of bounds of the literals (lower or upper bounds) </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>bounds</declname>
          <briefdescription><para>bounds of the literals </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>initial</declname>
          <briefdescription><para>should the LP relaxation of constraint be in the initial LP? Usually set to TRUE. Set to FALSE for &apos;lazy constraints&apos;. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>separate</declname>
          <briefdescription><para>should the constraint be separated during LP processing? Usually set to TRUE. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>enforce</declname>
          <briefdescription><para>should the constraint be enforced during node processing? TRUE for model constraints, FALSE for additional, redundant constraints. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>check</declname>
          <briefdescription><para>should the constraint be checked for feasibility? TRUE for model constraints, FALSE for additional, redundant constraints. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>propagate</declname>
          <briefdescription><para>should the constraint be propagated during node processing? Usually set to TRUE. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>local</declname>
          <briefdescription><para>is constraint only valid locally? Usually set to FALSE. Has to be set to TRUE, e.g., for branching constraints. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>modifiable</declname>
          <briefdescription><para>is constraint modifiable (subject to column generation)? Usually set to FALSE. In column generation applications, set to TRUE if pricing adds coefficients to this constraint. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>dynamic</declname>
          <briefdescription><para>is constraint subject to aging? Usually set to FALSE. Set to TRUE for own cuts which are separated as constraints. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>removable</declname>
          <briefdescription><para>should the relaxation be removed from the LP due to aging or cleanup? Usually set to FALSE. Set to TRUE for &apos;lazy constraints&apos; and &apos;user cuts&apos;. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>stickingatnode</declname>
          <briefdescription><para>should the constraint always be kept at the node where it was added, even if it may be moved to a more global node? Usually set to FALSE. Set to TRUE to for constraints that represent node data. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates and captures a bound disjunction constraint</para><para><simplesect kind="note"><para>the constraint gets captured, hence at one point you have to release it using the method <ref refid="scip_8h_1ae7055a40bc1c895c4acb118bcb8de4de" kindref="member">SCIPreleaseCons()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/cons_bounddisjunction.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__bounddisjunction_8h_1a42b2029ef1daef352ec69f9c6aa00d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPcreateConsBasicBounddisjunction</definition>
        <argsstring>(SCIP *scip, SCIP_CONS **cons, const char *name, int nvars, SCIP_VAR **vars, SCIP_BOUNDTYPE *boundtypes, SCIP_Real *bounds)</argsstring>
        <name>SCIPcreateConsBasicBounddisjunction</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> **</type>
          <declname>cons</declname>
          <briefdescription><para>pointer to hold the created constraint </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <briefdescription><para>name of constraint </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nvars</declname>
          <briefdescription><para>number of variables in the constraint </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
          <declname>vars</declname>
          <briefdescription><para>variables of the literals in the constraint </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref> *</type>
          <declname>boundtypes</declname>
          <briefdescription><para>types of bounds of the literals (lower or upper bounds) </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>bounds</declname>
          <briefdescription><para>bounds of the literals </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates and captures an and constraint in its most basic version, i. e., all constraint flags are set to their basic value as explained for the method <ref refid="cons__bounddisjunction_8h_1a4ea716f692db1c03f213b26a6ab6761b" kindref="member">SCIPcreateConsBounddisjunction()</ref>; all flags can be set via SCIPsetConsFLAGNAME-methods in <ref refid="scip_8h" kindref="compound">scip.h</ref></para><para><simplesect kind="see"><para><ref refid="cons__bounddisjunction_8h_1a4ea716f692db1c03f213b26a6ab6761b" kindref="member">SCIPcreateConsBounddisjunction()</ref> for information about the basic constraint flag configuration</para></simplesect>
<simplesect kind="note"><para>the constraint gets captured, hence at one point you have to release it using the method <ref refid="scip_8h_1ae7055a40bc1c895c4acb118bcb8de4de" kindref="member">SCIPreleaseCons()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/cons_bounddisjunction.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__bounddisjunction_8h_1a5f146f87f4634590d1e44330d0606ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPgetNVarsBounddisjunction</definition>
        <argsstring>(SCIP *scip, SCIP_CONS *cons)</argsstring>
        <name>SCIPgetNVarsBounddisjunction</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> *</type>
          <declname>cons</declname>
          <briefdescription><para>constraint data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of variables in bound disjunction constraint </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/cons_bounddisjunction.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__bounddisjunction_8h_1a21f4a8bb5c143c23f56b90268bd51402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
        <definition>SCIP_VAR** SCIPgetVarsBounddisjunction</definition>
        <argsstring>(SCIP *scip, SCIP_CONS *cons)</argsstring>
        <name>SCIPgetVarsBounddisjunction</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> *</type>
          <declname>cons</declname>
          <briefdescription><para>constraint data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array of variables in bound disjunction constraint </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/cons_bounddisjunction.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__bounddisjunction_8h_1add4341869101c8dbcea80d1aa6c99e0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref> *</type>
        <definition>SCIP_BOUNDTYPE* SCIPgetBoundtypesBounddisjunction</definition>
        <argsstring>(SCIP *scip, SCIP_CONS *cons)</argsstring>
        <name>SCIPgetBoundtypesBounddisjunction</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> *</type>
          <declname>cons</declname>
          <briefdescription><para>constraint data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array of bound types in bound disjunction constraint </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/cons_bounddisjunction.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__bounddisjunction_8h_1ad4e3521d4a238b48f0f62737e5f1cfd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPgetBoundsBounddisjunction</definition>
        <argsstring>(SCIP *scip, SCIP_CONS *cons)</argsstring>
        <name>SCIPgetBoundsBounddisjunction</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> *</type>
          <declname>cons</declname>
          <briefdescription><para>constraint data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array of bounds in bound disjunction constraint </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/cons_bounddisjunction.h" line="127" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>constraint handler for bound disjunction constraints <formula id="22">$(x_1 \{\leq,\geq\} b_1) \vee \ldots \vee (x_n \{\leq,\geq\} b_n)$</formula> </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Tobias Achterberg</para></simplesect>
This constraint handler handles bound disjunction constraints of the form <formula id="23">\[ (x_1 \{\leq,\geq\} b_1) \vee \ldots \vee (x_n \{\leq,\geq\} b_n) \]</formula> with bounds <formula id="24">$b_i \in Q$</formula>, decision variables <formula id="14">$x_i$</formula>, which can be of any type, and bound types <formula id="25">$\leq$</formula> or <formula id="26">$\geq$</formula>. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>program<sp/>and<sp/>library<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIP<sp/>---<sp/>Solving<sp/>Constraint<sp/>Integer<sp/>Programs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2002-2014<sp/>Konrad-Zuse-Zentrum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fuer<sp/>Informationstechnik<sp/>Berlin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>SCIP<sp/>is<sp/>distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>along<sp/>with<sp/>SCIP;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/>If<sp/>not<sp/>email<sp/>to<sp/>scip@zib.de.<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">/**@file<sp/><sp/><sp/>cons_bounddisjunction.h</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>CONSHDLRS</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/>constraint<sp/>handler<sp/>for<sp/>bound<sp/>disjunction<sp/>constraints<sp/>\f$(x_1<sp/>\{\leq,\geq\}<sp/>b_1)<sp/>\vee<sp/>\ldots<sp/>\vee<sp/>(x_n<sp/>\{\leq,\geq\}<sp/>b_n)\f$</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@author<sp/>Tobias<sp/>Achterberg</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>This<sp/>constraint<sp/>handler<sp/>handles<sp/>bound<sp/>disjunction<sp/>constraints<sp/>of<sp/>the<sp/>form</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>\f[</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(x_1<sp/>\{\leq,\geq\}<sp/>b_1)<sp/>\vee<sp/>\ldots<sp/>\vee<sp/>(x_n<sp/>\{\leq,\geq\}<sp/>b_n)</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>\f]</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>with<sp/>bounds<sp/>\f$b_i<sp/>\in<sp/>Q\f$,<sp/>decision<sp/>variables<sp/>\f$x_i\f$,<sp/>which<sp/>can<sp/>be<sp/>of<sp/>any<sp/>type,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>and<sp/>bound<sp/>types<sp/>\f$\leq\f$<sp/>or<sp/>\f$\geq\f$.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SCIP_CONS_BOUNDDISJUNCTION_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SCIP_CONS_BOUNDDISJUNCTION_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scip_8h" kindref="compound">scip/scip.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment">/**<sp/>creates<sp/>the<sp/>handler<sp/>for<sp/>bound<sp/>disjunction<sp/>constraints<sp/>and<sp/>includes<sp/>it<sp/>in<sp/>SCIP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="cons__bounddisjunction_8h_1a05e8c9c71fd15cef320dd7887e42fc62" kindref="member">SCIPincludeConshdlrBounddisjunction</ref>(</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">/**<sp/>creates<sp/>and<sp/>captures<sp/>a<sp/>bound<sp/>disjunction<sp/>constraint</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>the<sp/>constraint<sp/>gets<sp/>captured,<sp/>hence<sp/>at<sp/>one<sp/>point<sp/>you<sp/>have<sp/>to<sp/>release<sp/>it<sp/>using<sp/>the<sp/>method<sp/>SCIPreleaseCons()</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="cons__bounddisjunction_8h_1a4ea716f692db1c03f213b26a6ab6761b" kindref="member">SCIPcreateConsBounddisjunction</ref>(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>hold<sp/>the<sp/>created<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>name<sp/>of<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>variables<sp/>of<sp/>the<sp/>literals<sp/>in<sp/>the<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundtypes,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>types<sp/>of<sp/>bounds<sp/>of<sp/>the<sp/>literals<sp/>(lower<sp/>or<sp/>upper<sp/>bounds)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bounds<sp/>of<sp/>the<sp/>literals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>LP<sp/>relaxation<sp/>of<sp/>constraint<sp/>be<sp/>in<sp/>the<sp/>initial<sp/>LP?</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>TRUE.<sp/>Set<sp/>to<sp/>FALSE<sp/>for<sp/>&apos;lazy<sp/>constraints&apos;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separate,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>separated<sp/>during<sp/>LP<sp/>processing?</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>TRUE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enforce,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>enforced<sp/>during<sp/>node<sp/>processing?</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>TRUE<sp/>for<sp/>model<sp/>constraints,<sp/>FALSE<sp/>for<sp/>additional,<sp/>redundant<sp/>constraints.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>checked<sp/>for<sp/>feasibility?</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>TRUE<sp/>for<sp/>model<sp/>constraints,<sp/>FALSE<sp/>for<sp/>additional,<sp/>redundant<sp/>constraints.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>propagate,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>propagated<sp/>during<sp/>node<sp/>processing?</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>TRUE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>is<sp/>constraint<sp/>only<sp/>valid<sp/>locally?</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>FALSE.<sp/>Has<sp/>to<sp/>be<sp/>set<sp/>to<sp/>TRUE,<sp/>e.g.,<sp/>for<sp/>branching<sp/>constraints.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modifiable,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>is<sp/>constraint<sp/>modifiable<sp/>(subject<sp/>to<sp/>column<sp/>generation)?</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>FALSE.<sp/>In<sp/>column<sp/>generation<sp/>applications,<sp/>set<sp/>to<sp/>TRUE<sp/>if<sp/>pricing</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>adds<sp/>coefficients<sp/>to<sp/>this<sp/>constraint.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>is<sp/>constraint<sp/>subject<sp/>to<sp/>aging?</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>FALSE.<sp/>Set<sp/>to<sp/>TRUE<sp/>for<sp/>own<sp/>cuts<sp/>which</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>are<sp/>separated<sp/>as<sp/>constraints.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removable,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>relaxation<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>LP<sp/>due<sp/>to<sp/>aging<sp/>or<sp/>cleanup?</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>FALSE.<sp/>Set<sp/>to<sp/>TRUE<sp/>for<sp/>&apos;lazy<sp/>constraints&apos;<sp/>and<sp/>&apos;user<sp/>cuts&apos;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stickingatnode<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>constraint<sp/>always<sp/>be<sp/>kept<sp/>at<sp/>the<sp/>node<sp/>where<sp/>it<sp/>was<sp/>added,<sp/>even</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>if<sp/>it<sp/>may<sp/>be<sp/>moved<sp/>to<sp/>a<sp/>more<sp/>global<sp/>node?</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>FALSE.<sp/>Set<sp/>to<sp/>TRUE<sp/>to<sp/>for<sp/>constraints<sp/>that<sp/>represent<sp/>node<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">/**<sp/>creates<sp/>and<sp/>captures<sp/>an<sp/>and<sp/>constraint</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>its<sp/>most<sp/>basic<sp/>version,<sp/>i.<sp/>e.,<sp/>all<sp/>constraint<sp/>flags<sp/>are<sp/>set<sp/>to<sp/>their<sp/>basic<sp/>value<sp/>as<sp/>explained<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>method<sp/>SCIPcreateConsBounddisjunction();<sp/>all<sp/>flags<sp/>can<sp/>be<sp/>set<sp/>via<sp/>SCIPsetConsFLAGNAME-methods<sp/>in<sp/>scip.h</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/>@see<sp/>SCIPcreateConsBounddisjunction()<sp/>for<sp/>information<sp/>about<sp/>the<sp/>basic<sp/>constraint<sp/>flag<sp/>configuration</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>the<sp/>constraint<sp/>gets<sp/>captured,<sp/>hence<sp/>at<sp/>one<sp/>point<sp/>you<sp/>have<sp/>to<sp/>release<sp/>it<sp/>using<sp/>the<sp/>method<sp/>SCIPreleaseCons()</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="cons__bounddisjunction_8h_1a42b2029ef1daef352ec69f9c6aa00d55" kindref="member">SCIPcreateConsBasicBounddisjunction</ref>(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>hold<sp/>the<sp/>created<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>name<sp/>of<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>variables<sp/>of<sp/>the<sp/>literals<sp/>in<sp/>the<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundtypes,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>types<sp/>of<sp/>bounds<sp/>of<sp/>the<sp/>literals<sp/>(lower<sp/>or<sp/>upper<sp/>bounds)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bounds<sp/>of<sp/>the<sp/>literals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>variables<sp/>in<sp/>bound<sp/>disjunction<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cons__bounddisjunction_8h_1a5f146f87f4634590d1e44330d0606ff9" kindref="member">SCIPgetNVarsBounddisjunction</ref>(</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constraint<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>of<sp/>variables<sp/>in<sp/>bound<sp/>disjunction<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><ref refid="cons__bounddisjunction_8h_1a21f4a8bb5c143c23f56b90268bd51402" kindref="member">SCIPgetVarsBounddisjunction</ref>(</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constraint<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="118"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>of<sp/>bound<sp/>types<sp/>in<sp/>bound<sp/>disjunction<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="type__lp_8h_1ad1f370d06c5f9eece4ab657efa945dbb" kindref="member">SCIP_BOUNDTYPE</ref>*<sp/><ref refid="cons__bounddisjunction_8h_1add4341869101c8dbcea80d1aa6c99e0d" kindref="member">SCIPgetBoundtypesBounddisjunction</ref>(</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constraint<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>of<sp/>bounds<sp/>in<sp/>bound<sp/>disjunction<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="cons__bounddisjunction_8h_1ad4e3521d4a238b48f0f62737e5f1cfd5" kindref="member">SCIPgetBoundsBounddisjunction</ref>(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constraint<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/scip/cons_bounddisjunction.h"/>
  </compounddef>
</doxygen>
