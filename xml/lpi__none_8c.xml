<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="lpi__none_8c" kind="file" language="C++">
    <compoundname>lpi_none.c</compoundname>
    <includes local="no">assert.h</includes>
    <includes refid="lpi_8h" local="yes">lpi/lpi.h</includes>
    <includes refid="pub__message_8h" local="yes">scip/pub_message.h</includes>
    <incdepgraph>
      <node id="7872">
        <label>stdarg.h</label>
      </node>
      <node id="7862">
        <label>assert.h</label>
      </node>
      <node id="7869">
        <label>float.h</label>
      </node>
      <node id="7866">
        <label>stdint.h</label>
      </node>
      <node id="7864">
        <label>scip/def.h</label>
        <link refid="def_8h"/>
        <childnode refid="7865" relation="include">
        </childnode>
        <childnode refid="7866" relation="include">
        </childnode>
        <childnode refid="7867" relation="include">
        </childnode>
        <childnode refid="7868" relation="include">
        </childnode>
        <childnode refid="7869" relation="include">
        </childnode>
        <childnode refid="7862" relation="include">
        </childnode>
        <childnode refid="7870" relation="include">
        </childnode>
        <childnode refid="7871" relation="include">
        </childnode>
      </node>
      <node id="7868">
        <label>limits.h</label>
      </node>
      <node id="7867">
        <label>math.h</label>
      </node>
      <node id="7874">
        <label>blockmemshell/memory.h</label>
      </node>
      <node id="7870">
        <label>scip/type_retcode.h</label>
        <link refid="type__retcode_8h"/>
      </node>
      <node id="7875">
        <label>lpi/type_lpi.h</label>
        <link refid="type__lpi_8h"/>
      </node>
      <node id="7871">
        <label>scip/pub_message.h</label>
        <link refid="pub__message_8h"/>
        <childnode refid="7872" relation="include">
        </childnode>
        <childnode refid="7864" relation="include">
        </childnode>
        <childnode refid="7873" relation="include">
        </childnode>
      </node>
      <node id="7873">
        <label>scip/type_message.h</label>
        <link refid="type__message_8h"/>
        <childnode refid="7865" relation="include">
        </childnode>
      </node>
      <node id="7865">
        <label>stdio.h</label>
      </node>
      <node id="7863">
        <label>lpi/lpi.h</label>
        <link refid="lpi_8h"/>
        <childnode refid="7864" relation="include">
        </childnode>
        <childnode refid="7874" relation="include">
        </childnode>
        <childnode refid="7870" relation="include">
        </childnode>
        <childnode refid="7875" relation="include">
        </childnode>
      </node>
      <node id="7861">
        <label>lpi_none.c</label>
        <link refid="lpi_none.c"/>
        <childnode refid="7862" relation="include">
        </childnode>
        <childnode refid="7863" relation="include">
        </childnode>
        <childnode refid="7871" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>Miscellaneous Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1aed7c57c93675aae2562abab53b487ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SCIPlpiGetSolverName</definition>
        <argsstring>(void)</argsstring>
        <name>SCIPlpiGetSolverName</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets name and version of LP solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="82" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="82" bodyend="87"/>
        <references refid="lpi__none_8c_1a58be1127a66dd66fd311c112b7c469bc" compoundref="lpi__none_8c" startline="29">LPINAME</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a6cfc10a9902214c1ac825998bebdea19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SCIPlpiGetSolverDesc</definition>
        <argsstring>(void)</argsstring>
        <name>SCIPlpiGetSolverDesc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets description of LP solver (developer, webpage, ...) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="90" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="90" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ac8b0874105d4a69fd4e35455d488edb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* SCIPlpiGetSolverPointer</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiGetSolverPointer</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>pointer to an LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets pointer for LP solver - use only with great care </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="98" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="98" bodyend="103"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>LPI Creation and Destruction Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1ae522c0e79b2f2c7d185e6b6cafec1a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiCreate</definition>
        <argsstring>(SCIP_LPI **lpi, SCIP_MESSAGEHDLR *messagehdlr, const char *name, SCIP_OBJSEN objsen)</argsstring>
        <name>SCIPlpiCreate</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> **</type>
          <declname>lpi</declname>
          <briefdescription><para>pointer to an LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref> *</type>
          <declname>messagehdlr</declname>
          <briefdescription><para>message handler to use for printing messages, or NULL </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <briefdescription><para>problem name </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref></type>
          <declname>objsen</declname>
          <briefdescription><para>objective sense </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an LP problem object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="117" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="117" bodyend="134"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a7695e892dc456d85a3654eb158976921" compoundref="def_8h" startline="274">SCIP_ALLOC</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a6dfadd74b4f72eea58d0946ec9ea6f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiFree</definition>
        <argsstring>(SCIP_LPI **lpi)</argsstring>
        <name>SCIPlpiFree</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> **</type>
          <declname>lpi</declname>
          <briefdescription><para>pointer to an LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deletes an LP problem object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="137" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="137" bodyend="147"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modification Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1ae23bc1c98c8547a0ba03682d100365dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiLoadColLP</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_OBJSEN objsen, int ncols, const SCIP_Real *obj, const SCIP_Real *lb, const SCIP_Real *ub, char **colnames, int nrows, const SCIP_Real *lhs, const SCIP_Real *rhs, char **rownames, int nnonz, const int *beg, const int *ind, const SCIP_Real *val)</argsstring>
        <name>SCIPlpiLoadColLP</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref></type>
          <declname>objsen</declname>
          <briefdescription><para>objective sense </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>obj</declname>
          <briefdescription><para>objective function values of columns </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lb</declname>
          <briefdescription><para>lower bounds of columns </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ub</declname>
          <briefdescription><para>upper bounds of columns </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>colnames</declname>
          <briefdescription><para>column names, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nrows</declname>
          <briefdescription><para>number of rows </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lhs</declname>
          <briefdescription><para>left hand sides of rows </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>rhs</declname>
          <briefdescription><para>right hand sides of rows </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>rownames</declname>
          <briefdescription><para>row names, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nnonz</declname>
          <briefdescription><para>number of nonzero elements in the constraint matrix </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>beg</declname>
          <briefdescription><para>start index of each column in ind- and val-array </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>ind</declname>
          <briefdescription><para>row indices of constraint matrix entries </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>values of constraint matrix entries </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copies LP data with column matrix into LP solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="162" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="162" bodyend="188"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1add77293153dc03295e1782af22921906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiAddCols</definition>
        <argsstring>(SCIP_LPI *lpi, int ncols, const SCIP_Real *obj, const SCIP_Real *lb, const SCIP_Real *ub, char **colnames, int nnonz, const int *beg, const int *ind, const SCIP_Real *val)</argsstring>
        <name>SCIPlpiAddCols</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns to be added </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>obj</declname>
          <briefdescription><para>objective function values of new columns </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lb</declname>
          <briefdescription><para>lower bounds of new columns </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ub</declname>
          <briefdescription><para>upper bounds of new columns </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>colnames</declname>
          <briefdescription><para>column names, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nnonz</declname>
          <briefdescription><para>number of nonzero elements to be added to the constraint matrix </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>beg</declname>
          <briefdescription><para>start index of each column in ind- and val-array, or NULL if nnonz == 0 </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>ind</declname>
          <briefdescription><para>row indices of constraint matrix entries, or NULL if nnonz == 0 </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>values of constraint matrix entries, or NULL if nnonz == 0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds columns to the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="191" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="191" bodyend="210"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1af651ff93b2be704cacb27c13b24ab311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiDelCols</definition>
        <argsstring>(SCIP_LPI *lpi, int firstcol, int lastcol)</argsstring>
        <name>SCIPlpiDelCols</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
          <briefdescription><para>first column to be deleted </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastcol</declname>
          <briefdescription><para>last column to be deleted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deletes all columns in the given range from LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="213" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="213" bodyend="226"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ac93976edb5a40906de3c2163b2fafec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiDelColset</definition>
        <argsstring>(SCIP_LPI *lpi, int *dstat)</argsstring>
        <name>SCIPlpiDelColset</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>dstat</declname>
          <briefdescription><para>deletion status of columns input: 1 if column should be deleted, 0 if not output: new position of column, -1 if column was deleted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deletes columns from SCIP_LP; the new position of a column must not be greater that its old position </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="229" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="229" bodyend="257"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a2bad82670d46254daf3e923898c404d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiAddRows</definition>
        <argsstring>(SCIP_LPI *lpi, int nrows, const SCIP_Real *lhs, const SCIP_Real *rhs, char **rownames, int nnonz, const int *beg, const int *ind, const SCIP_Real *val)</argsstring>
        <name>SCIPlpiAddRows</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nrows</declname>
          <briefdescription><para>number of rows to be added </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lhs</declname>
          <briefdescription><para>left hand sides of new rows </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>rhs</declname>
          <briefdescription><para>right hand sides of new rows </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>rownames</declname>
          <briefdescription><para>row names, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nnonz</declname>
          <briefdescription><para>number of nonzero elements to be added to the constraint matrix </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>beg</declname>
          <briefdescription><para>start index of each row in ind- and val-array, or NULL if nnonz == 0 </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>ind</declname>
          <briefdescription><para>column indices of constraint matrix entries, or NULL if nnonz == 0 </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>values of constraint matrix entries, or NULL if nnonz == 0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds rows to the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="260" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="260" bodyend="278"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a95a88cc92b9c3061762849aeb2edc9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiDelRows</definition>
        <argsstring>(SCIP_LPI *lpi, int firstrow, int lastrow)</argsstring>
        <name>SCIPlpiDelRows</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstrow</declname>
          <briefdescription><para>first row to be deleted </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastrow</declname>
          <briefdescription><para>last row to be deleted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deletes all rows in the given range from LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="281" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="281" bodyend="294"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1af7385b74de163f5ae25b77e99c7bdc1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiDelRowset</definition>
        <argsstring>(SCIP_LPI *lpi, int *dstat)</argsstring>
        <name>SCIPlpiDelRowset</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>dstat</declname>
          <briefdescription><para>deletion status of rows input: 1 if row should be deleted, 0 if not output: new position of row, -1 if row was deleted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>deletes rows from SCIP_LP; the new position of a row must not be greater that its old position </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="297" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="297" bodyend="325"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a18664e9f784a12522aa9ec6e775e5a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiClear</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiClear</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clears the whole LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="328" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="328" bodyend="340"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a69472179ed0e902cb865b8bd3941c461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiChgBounds</definition>
        <argsstring>(SCIP_LPI *lpi, int ncols, const int *ind, const SCIP_Real *lb, const SCIP_Real *ub)</argsstring>
        <name>SCIPlpiChgBounds</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns to change bounds for </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>ind</declname>
          <briefdescription><para>column indices </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lb</declname>
          <briefdescription><para>values for the new lower bounds </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ub</declname>
          <briefdescription><para>values for the new upper bounds </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes lower and upper bounds of columns </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="343" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="343" bodyend="352"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a00fa12a201791dbba7d4b17a75fe7ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiChgSides</definition>
        <argsstring>(SCIP_LPI *lpi, int nrows, const int *ind, const SCIP_Real *lhs, const SCIP_Real *rhs)</argsstring>
        <name>SCIPlpiChgSides</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nrows</declname>
          <briefdescription><para>number of rows to change sides for </para></briefdescription>
        </param>
        <param>
          <type>const int *</type>
          <declname>ind</declname>
          <briefdescription><para>row indices </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lhs</declname>
          <briefdescription><para>new values for left hand sides </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>rhs</declname>
          <briefdescription><para>new values for right hand sides </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes left and right hand sides of rows </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="355" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="355" bodyend="364"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1aff2b648673b8baac9903c236a97c267b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiChgCoef</definition>
        <argsstring>(SCIP_LPI *lpi, int row, int col, SCIP_Real newval)</argsstring>
        <name>SCIPlpiChgCoef</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
          <briefdescription><para>row number of coefficient to change </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column number of coefficient to change </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>newval</declname>
          <briefdescription><para>new value of coefficient </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes a single coefficient </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="367" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="367" bodyend="375"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a0d794ce162ec1c45eb776baa2ffdc79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiChgObjsen</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_OBJSEN objsen)</argsstring>
        <name>SCIPlpiChgObjsen</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref></type>
          <declname>objsen</declname>
          <briefdescription><para>new objective sense </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes the objective sense </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="378" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="378" bodyend="384"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a8f18465d14a5d1116c1dc8ea6cf90ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiChgObj</definition>
        <argsstring>(SCIP_LPI *lpi, int ncols, int *ind, SCIP_Real *obj)</argsstring>
        <name>SCIPlpiChgObj</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns to change objective value for </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ind</declname>
          <briefdescription><para>column indices to change objective value for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>obj</declname>
          <briefdescription><para>new objective values for columns </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes objective values of columns in the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="387" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="387" bodyend="395"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1af94ca6a608b8e0be96158d78270b2715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiScaleRow</definition>
        <argsstring>(SCIP_LPI *lpi, int row, SCIP_Real scaleval)</argsstring>
        <name>SCIPlpiScaleRow</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
          <briefdescription><para>row number to scale </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>scaleval</declname>
          <briefdescription><para>scaling multiplier </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>multiplies a row with a non-zero scalar; for negative scalars, the row&apos;s sense is switched accordingly </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="398" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="398" bodyend="405"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a598ccc37a344e88c584b37691f162432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiScaleCol</definition>
        <argsstring>(SCIP_LPI *lpi, int col, SCIP_Real scaleval)</argsstring>
        <name>SCIPlpiScaleCol</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column number to scale </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>scaleval</declname>
          <briefdescription><para>scaling multiplier </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>multiplies a column with a non-zero scalar; the objective value is multiplied with the scalar, and the bounds are divided by the scalar; for negative scalars, the column&apos;s bounds are switched </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="410" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="410" bodyend="417"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Data Accessing Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1afc4ba497c8fef592df0c5bf7745bf9d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetNRows</definition>
        <argsstring>(SCIP_LPI *lpi, int *nrows)</argsstring>
        <name>SCIPlpiGetNRows</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nrows</declname>
          <briefdescription><para>pointer to store the number of rows </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the number of rows in the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="432" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="432" bodyend="444"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1af0f0eab6882439ab9e263d6754c102f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetNCols</definition>
        <argsstring>(SCIP_LPI *lpi, int *ncols)</argsstring>
        <name>SCIPlpiGetNCols</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ncols</declname>
          <briefdescription><para>pointer to store the number of cols </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the number of columns in the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="447" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="447" bodyend="459"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a4e84473a9742d228d1112cf94e0337e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetNNonz</definition>
        <argsstring>(SCIP_LPI *lpi, int *nnonz)</argsstring>
        <name>SCIPlpiGetNNonz</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nnonz</declname>
          <briefdescription><para>pointer to store the number of nonzeros </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the number of nonzero elements in the LP constraint matrix </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="462" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="462" bodyend="470"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a9b718ef73cb5d6544472fb05f2193d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetCols</definition>
        <argsstring>(SCIP_LPI *lpi, int firstcol, int lastcol, SCIP_Real *lb, SCIP_Real *ub, int *nnonz, int *beg, int *ind, SCIP_Real *val)</argsstring>
        <name>SCIPlpiGetCols</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
          <briefdescription><para>first column to get from LP </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastcol</declname>
          <briefdescription><para>last column to get from LP </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lb</declname>
          <briefdescription><para>buffer to store the lower bound vector, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ub</declname>
          <briefdescription><para>buffer to store the upper bound vector, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nnonz</declname>
          <briefdescription><para>pointer to store the number of nonzero elements returned, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>beg</declname>
          <briefdescription><para>buffer to store start index of each column in ind- and val-array, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ind</declname>
          <briefdescription><para>buffer to store column indices of constraint matrix entries, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store values of constraint matrix entries, or NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets columns from LP problem object; the arrays have to be large enough to store all values Either both, lb and ub, have to be NULL, or both have to be non-NULL, either nnonz, beg, ind, and val have to be NULL, or all of them have to be non-NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="476" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="476" bodyend="490"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1aa925f44c4f2e5640b79ff87f8166d92e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetRows</definition>
        <argsstring>(SCIP_LPI *lpi, int firstrow, int lastrow, SCIP_Real *lhs, SCIP_Real *rhs, int *nnonz, int *beg, int *ind, SCIP_Real *val)</argsstring>
        <name>SCIPlpiGetRows</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstrow</declname>
          <briefdescription><para>first row to get from LP </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastrow</declname>
          <briefdescription><para>last row to get from LP </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lhs</declname>
          <briefdescription><para>buffer to store left hand side vector, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>rhs</declname>
          <briefdescription><para>buffer to store right hand side vector, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nnonz</declname>
          <briefdescription><para>pointer to store the number of nonzero elements returned, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>beg</declname>
          <briefdescription><para>buffer to store start index of each row in ind- and val-array, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ind</declname>
          <briefdescription><para>buffer to store row indices of constraint matrix entries, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store values of constraint matrix entries, or NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets rows from LP problem object; the arrays have to be large enough to store all values. Either both, lhs and rhs, have to be NULL, or both have to be non-NULL, either nnonz, beg, ind, and val have to be NULL, or all of them have to be non-NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="496" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="496" bodyend="510"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1aa01800088106fccc11758d86646a1933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetColNames</definition>
        <argsstring>(SCIP_LPI *lpi, int firstcol, int lastcol, char **colnames, char *namestorage, int namestoragesize, int *storageleft)</argsstring>
        <name>SCIPlpiGetColNames</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
          <briefdescription><para>first column to get name from LP </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastcol</declname>
          <briefdescription><para>last column to get name from LP </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>colnames</declname>
          <briefdescription><para>pointers to column names (of size at least lastcol-firstcol+1) </para></briefdescription>
        </param>
        <param>
          <type>char *</type>
          <declname>namestorage</declname>
          <briefdescription><para>storage for col names </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>namestoragesize</declname>
          <briefdescription><para>size of namestorage (if 0, storageleft returns the storage needed) </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>storageleft</declname>
          <briefdescription><para>amount of storage left (if &lt; 0 the namestorage was not big enough) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets column names </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="513" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="513" bodyend="525"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ab84a1811166e562112166eeddafe5f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetRowNames</definition>
        <argsstring>(SCIP_LPI *lpi, int firstrow, int lastrow, char **rownames, char *namestorage, int namestoragesize, int *storageleft)</argsstring>
        <name>SCIPlpiGetRowNames</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstrow</declname>
          <briefdescription><para>first row to get name from LP </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastrow</declname>
          <briefdescription><para>last row to get name from LP </para></briefdescription>
        </param>
        <param>
          <type>char **</type>
          <declname>rownames</declname>
          <briefdescription><para>pointers to row names (of size at least lastrow-firstrow+1) </para></briefdescription>
        </param>
        <param>
          <type>char *</type>
          <declname>namestorage</declname>
          <briefdescription><para>storage for row names </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>namestoragesize</declname>
          <briefdescription><para>size of namestorage (if 0, -storageleft returns the storage needed) </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>storageleft</declname>
          <briefdescription><para>amount of storage left (if &lt; 0 the namestorage was not big enough) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets row names </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="528" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="528" bodyend="540"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1aee46b15c0fa3d6d86be4e3bf741f34b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetObjsen</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_OBJSEN *objsen)</argsstring>
        <name>SCIPlpiGetObjsen</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref> *</type>
          <declname>objsen</declname>
          <briefdescription><para>pointer to store objective sense </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the objective sense of the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="543" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="543" bodyend="550"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1accf7c7a0ba8f375dbfa9bce872586951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetObj</definition>
        <argsstring>(SCIP_LPI *lpi, int firstcol, int lastcol, SCIP_Real *vals)</argsstring>
        <name>SCIPlpiGetObj</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
          <briefdescription><para>first column to get objective coefficient for </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastcol</declname>
          <briefdescription><para>last column to get objective coefficient for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>vals</declname>
          <briefdescription><para>array to store objective coefficients </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets objective coefficients from LP problem object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="553" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="553" bodyend="562"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a534fd30b49c755aea9b96a0365ee41b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBounds</definition>
        <argsstring>(SCIP_LPI *lpi, int firstcol, int lastcol, SCIP_Real *lbs, SCIP_Real *ubs)</argsstring>
        <name>SCIPlpiGetBounds</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstcol</declname>
          <briefdescription><para>first column to get bounds for </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastcol</declname>
          <briefdescription><para>last column to get bounds for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lbs</declname>
          <briefdescription><para>array to store lower bound values, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ubs</declname>
          <briefdescription><para>array to store upper bound values, or NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets current bounds from LP problem object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="565" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="565" bodyend="575"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1abd761e9fb6a1dd346a08c94a50192d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetSides</definition>
        <argsstring>(SCIP_LPI *lpi, int firstrow, int lastrow, SCIP_Real *lhss, SCIP_Real *rhss)</argsstring>
        <name>SCIPlpiGetSides</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>firstrow</declname>
          <briefdescription><para>first row to get sides for </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>lastrow</declname>
          <briefdescription><para>last row to get sides for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lhss</declname>
          <briefdescription><para>array to store left hand side values, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>rhss</declname>
          <briefdescription><para>array to store right hand side values, or NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets current row sides from LP problem object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="578" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="578" bodyend="589"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a7ae0750d24c1e5ad1c719ca4a601b511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetCoef</definition>
        <argsstring>(SCIP_LPI *lpi, int row, int col, SCIP_Real *val)</argsstring>
        <name>SCIPlpiGetCoef</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>row</declname>
          <briefdescription><para>row number of coefficient </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column number of coefficient </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>pointer to store the value of the coefficient </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets a single coefficient </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="592" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="592" bodyend="601"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Solving Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1adff9cd01f05724d2e00808ebd09c8e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSolvePrimal</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiSolvePrimal</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calls primal simplex to solve the LP </para>        </detaileddescription>
        <inbodydescription>
<para>startFinishOptions - bits 1 - do not delete work areas and factorization at end 2 - use old factorization if same number of rows 4 - skip as much initialization of work areas as possible (work in progress)</para><para>4 does not seem to work.</para><para>Primal algorithm </para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="616" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="616" bodyend="622"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ad87b0da429ef0a5ef34ccdd01cc2309d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSolveDual</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiSolveDual</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calls dual simplex to solve the LP </para>        </detaileddescription>
        <inbodydescription>
<para>startFinishOptions - bits 1 - do not delete work areas and factorization at end 2 - use old factorization if same number of rows 4 - skip as much initialization of work areas as possible (work in progress)</para><para>4 does not seem to work.</para><para>Dual algorithm </para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="625" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="625" bodyend="631"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1aaed3d89975ea9d3a6a79f03c1361d9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSolveBarrier</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Bool crossover)</argsstring>
        <name>SCIPlpiSolveBarrier</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>crossover</declname>
          <briefdescription><para>perform crossover </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calls barrier or interior point algorithm to solve the LP with crossover to simplex basis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="634" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="634" bodyend="641"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a61eb2de700a5b2ca02c55a6f206af5df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiStartStrongbranch</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiStartStrongbranch</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>start strong branching - call before any strong branching </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="644" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="644" bodyend="650"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1abb4fffe6db4fc82590ffb3231a4e314c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiEndStrongbranch</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiEndStrongbranch</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>end strong branching - call after any strong branching </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="653" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="653" bodyend="659"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a4b3e0e444fa2cba71360126834df07b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiStrongbranchFrac</definition>
        <argsstring>(SCIP_LPI *lpi, int col, SCIP_Real psol, int itlim, SCIP_Real *down, SCIP_Real *up, SCIP_Bool *downvalid, SCIP_Bool *upvalid, int *iter)</argsstring>
        <name>SCIPlpiStrongbranchFrac</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column to apply strong branching on </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>psol</declname>
          <briefdescription><para>fractional current primal solution value of column </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>itlim</declname>
          <briefdescription><para>iteration limit for strong branchings </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>down</declname>
          <briefdescription><para>stores dual bound after branching column down </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>up</declname>
          <briefdescription><para>stores dual bound after branching column up </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>downvalid</declname>
          <briefdescription><para>stores whether the returned down value is a valid dual bound; otherwise, it can only be used as an estimate value </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>upvalid</declname>
          <briefdescription><para>stores whether the returned up value is a valid dual bound; otherwise, it can only be used as an estimate value </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
          <briefdescription><para>stores total number of strong branching iterations, or -1; may be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>performs strong branching iterations on one <bold>fractional</bold> candidate </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="662" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="662" bodyend="682"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a7aa759face9cb33420e56984df7b6557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiStrongbranchesFrac</definition>
        <argsstring>(SCIP_LPI *lpi, int *cols, int ncols, SCIP_Real *psols, int itlim, SCIP_Real *down, SCIP_Real *up, SCIP_Bool *downvalid, SCIP_Bool *upvalid, int *iter)</argsstring>
        <name>SCIPlpiStrongbranchesFrac</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>cols</declname>
          <briefdescription><para>columns to apply strong branching on </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>psols</declname>
          <briefdescription><para>fractional current primal solution values of columns </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>itlim</declname>
          <briefdescription><para>iteration limit for strong branchings </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>down</declname>
          <briefdescription><para>stores dual bounds after branching columns down </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>up</declname>
          <briefdescription><para>stores dual bounds after branching columns up </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>downvalid</declname>
          <briefdescription><para>stores whether the returned down values are valid dual bounds; otherwise, they can only be used as an estimate values </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>upvalid</declname>
          <briefdescription><para>stores whether the returned up values are a valid dual bounds; otherwise, they can only be used as an estimate values </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
          <briefdescription><para>stores total number of strong branching iterations, or -1; may be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>performs strong branching iterations on given <bold>fractional</bold> candidates </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="685" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="685" bodyend="708"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a5172db5f9ebd4ad8b1da84ce8c00bff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiStrongbranchInt</definition>
        <argsstring>(SCIP_LPI *lpi, int col, SCIP_Real psol, int itlim, SCIP_Real *down, SCIP_Real *up, SCIP_Bool *downvalid, SCIP_Bool *upvalid, int *iter)</argsstring>
        <name>SCIPlpiStrongbranchInt</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
          <briefdescription><para>column to apply strong branching on </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>psol</declname>
          <briefdescription><para>current integral primal solution value of column </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>itlim</declname>
          <briefdescription><para>iteration limit for strong branchings </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>down</declname>
          <briefdescription><para>stores dual bound after branching column down </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>up</declname>
          <briefdescription><para>stores dual bound after branching column up </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>downvalid</declname>
          <briefdescription><para>stores whether the returned down value is a valid dual bound; otherwise, it can only be used as an estimate value </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>upvalid</declname>
          <briefdescription><para>stores whether the returned up value is a valid dual bound; otherwise, it can only be used as an estimate value </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
          <briefdescription><para>stores total number of strong branching iterations, or -1; may be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>performs strong branching iterations on one candidate with <bold>integral</bold> value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="711" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="711" bodyend="731"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1abdfa4cbbbfc871eb382b8090167f715e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiStrongbranchesInt</definition>
        <argsstring>(SCIP_LPI *lpi, int *cols, int ncols, SCIP_Real *psols, int itlim, SCIP_Real *down, SCIP_Real *up, SCIP_Bool *downvalid, SCIP_Bool *upvalid, int *iter)</argsstring>
        <name>SCIPlpiStrongbranchesInt</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>cols</declname>
          <briefdescription><para>columns to apply strong branching on </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncols</declname>
          <briefdescription><para>number of columns </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>psols</declname>
          <briefdescription><para>current integral primal solution values of columns </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>itlim</declname>
          <briefdescription><para>iteration limit for strong branchings </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>down</declname>
          <briefdescription><para>stores dual bounds after branching columns down </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>up</declname>
          <briefdescription><para>stores dual bounds after branching columns up </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>downvalid</declname>
          <briefdescription><para>stores whether the returned down values are valid dual bounds; otherwise, they can only be used as an estimate values </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>upvalid</declname>
          <briefdescription><para>stores whether the returned up values are a valid dual bounds; otherwise, they can only be used as an estimate values </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iter</declname>
          <briefdescription><para>stores total number of strong branching iterations, or -1; may be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>performs strong branching iterations on given candidates with <bold>integral</bold> values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="734" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="734" bodyend="757"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Solution Information Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1aaa0c5c0be2bd96fce205e68f7d051abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiWasSolved</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiWasSolved</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether a solve method was called after the last modification of the LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="771" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="771" bodyend="777"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a61efb09a57b1279d91619c36cad3d597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetSolFeasibility</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Bool *primalfeasible, SCIP_Bool *dualfeasible)</argsstring>
        <name>SCIPlpiGetSolFeasibility</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>primalfeasible</declname>
          <briefdescription><para>stores primal feasibility status </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>dualfeasible</declname>
          <briefdescription><para>stores dual feasibility status </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets information about primal and dual feasibility of the current LP solution </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="780" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="780" bodyend="790"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a2562db03b64bf6ef2789e4edf3cc31a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiExistsPrimalRay</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiExistsPrimalRay</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to have a primal unbounded ray (but not necessary a primal feasible point); this does not necessarily mean, that the solver knows and can return the primal ray </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="795" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="795" bodyend="801"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a91cb0382fe11412dfa127df4cc9f8e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiHasPrimalRay</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiHasPrimalRay</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to have a primal unbounded ray (but not necessary a primal feasible point), and the solver knows and can return the primal ray </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="806" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="806" bodyend="812"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a698fec903ce3546e8066a3988ee906ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsPrimalUnbounded</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsPrimalUnbounded</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be primal unbounded </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="815" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="815" bodyend="821"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ad2c1ad0f846c5827b5a2050ab13eba0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsPrimalInfeasible</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsPrimalInfeasible</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be primal infeasible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="824" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="824" bodyend="830"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a824080a74642700e0919806405d4dd69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsPrimalFeasible</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsPrimalFeasible</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be primal feasible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="833" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="833" bodyend="839"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a21939ccf03835cce5a9a449b6c43665b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiExistsDualRay</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiExistsDualRay</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to have a dual unbounded ray (but not necessary a dual feasible point); this does not necessarily mean, that the solver knows and can return the dual ray </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="844" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="844" bodyend="850"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ac6738fca43ff0cbb9027560f18bd764c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiHasDualRay</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiHasDualRay</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to have a dual unbounded ray (but not necessary a dual feasible point), and the solver knows and can return the dual ray </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="855" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="855" bodyend="861"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ae2cd5f0afa5f5940c9d7bab6f04b184e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsDualUnbounded</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsDualUnbounded</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be dual unbounded </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="864" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="864" bodyend="870"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a348c42072a5aad88210e9d688b4d6a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsDualInfeasible</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsDualInfeasible</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be dual infeasible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="873" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="873" bodyend="879"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a8457b3a26f7595f3390f7b34ab443fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsDualFeasible</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsDualFeasible</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP is proven to be dual feasible </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="882" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="882" bodyend="888"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ab66f1eae0b448c155f0feaffa7bdda57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsOptimal</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsOptimal</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff LP was solved to optimality </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="891" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="891" bodyend="897"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1af04aa49d1337f5007cc0d78625d2dd4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsStable</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsStable</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff current LP basis is stable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="900" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="900" bodyend="906"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a0d4fca883c08a32af088280a78ca3ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsObjlimExc</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsObjlimExc</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff the objective limit was reached </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="909" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="909" bodyend="915"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a689c99183c7e0779c50f9aef63c79123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsIterlimExc</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsIterlimExc</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff the iteration limit was reached </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="918" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="918" bodyend="924"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a8ac20384dbd857173c8dfe0dc37f7d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsTimelimExc</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiIsTimelimExc</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns TRUE iff the time limit was reached </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="927" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="927" bodyend="933"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a5fbb9e1f86a8425b85760f01692f85aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPlpiGetInternalStatus</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiGetInternalStatus</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the internal solution status of the solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="936" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="936" bodyend="942"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a6b24f7dd3dfac27d08f1cfc777e56a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiIgnoreInstability</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Bool *success)</argsstring>
        <name>SCIPlpiIgnoreInstability</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>success</declname>
          <briefdescription><para>pointer to store, whether the instability could be ignored </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tries to reset the internal status of the LP solver in order to ignore an instability of the last solving call </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="945" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="945" bodyend="953"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a5548fcdd7c4e4a3f6d542cd51da27c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetObjval</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Real *objval)</argsstring>
        <name>SCIPlpiGetObjval</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>objval</declname>
          <briefdescription><para>stores the objective value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets objective value of solution </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="956" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="956" bodyend="964"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ac5a2315c14e99b919626de4170687227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetSol</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Real *objval, SCIP_Real *primsol, SCIP_Real *dualsol, SCIP_Real *activity, SCIP_Real *redcost)</argsstring>
        <name>SCIPlpiGetSol</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>objval</declname>
          <briefdescription><para>stores the objective value, may be NULL if not needed </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>primsol</declname>
          <briefdescription><para>primal solution vector, may be NULL if not needed </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>dualsol</declname>
          <briefdescription><para>dual solution vector, may be NULL if not needed </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>activity</declname>
          <briefdescription><para>row activity vector, may be NULL if not needed </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>redcost</declname>
          <briefdescription><para>reduced cost vector, may be NULL if not needed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets primal and dual solution vectors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="967" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="967" bodyend="978"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a2d3ab14c33312daf6f0c51e7eba4ae95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetPrimalRay</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Real *ray)</argsstring>
        <name>SCIPlpiGetPrimalRay</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>ray</declname>
          <briefdescription><para>primal ray </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets primal ray for unbounded LPs </para>        </detaileddescription>
        <inbodydescription>
<para>Unbounded ray (NULL returned if none/wrong). Up to user to use delete [] on these arrays. </para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="981" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="981" bodyend="988"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a54ee13d012fb992394c0828166c2fea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetDualfarkas</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Real *dualfarkas)</argsstring>
        <name>SCIPlpiGetDualfarkas</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>dualfarkas</declname>
          <briefdescription><para>dual Farkas row multipliers </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets dual Farkas proof for infeasibility </para>        </detaileddescription>
        <inbodydescription>
<para>Infeasibility ray (NULL returned if none/wrong). Up to user to use delete [] on these arrays. </para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="991" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="991" bodyend="999"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ae37bfbea024ddb8232827aeedc84afe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetIterations</definition>
        <argsstring>(SCIP_LPI *lpi, int *iterations)</argsstring>
        <name>SCIPlpiGetIterations</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>iterations</declname>
          <briefdescription><para>pointer to store the number of iterations of the last solve call </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets the number of LP iterations of the last solve call </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1002" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1002" bodyend="1010"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a83ddb586c09a37eea2e411f1271a32f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetRealSolQuality</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPSOLQUALITY qualityindicator, SCIP_Real *quality)</argsstring>
        <name>SCIPlpiGetRealSolQuality</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1ad43906673a9a8a661c5c454138207fc9" kindref="member">SCIP_LPSOLQUALITY</ref></type>
          <declname>qualityindicator</declname>
          <briefdescription><para>indicates which quality should be returned </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>quality</declname>
          <briefdescription><para>pointer to store quality number </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets information about the quality of an LP solution</para><para>Such information is usually only available, if also a (maybe not optimal) solution is available. The LPI should return SCIP_INVALID for <computeroutput>quality</computeroutput>, if the requested quantity is not available. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1017" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1017" bodyend="1029"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1a5e26fa263b7982578f3d3e3e8e876bbc" compoundref="def_8h" startline="144">SCIP_INVALID</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>LP Basis Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1a258aa72f3b645b140c543f0fc7f3f37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBase</definition>
        <argsstring>(SCIP_LPI *lpi, int *cstat, int *rstat)</argsstring>
        <name>SCIPlpiGetBase</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>cstat</declname>
          <briefdescription><para>array to store column basis status, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>rstat</declname>
          <briefdescription><para>array to store row basis status, or NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets current basis status for columns and rows; arrays must be large enough to store the basis status </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1044" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1044" bodyend="1052"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a7d9cb745987d79fb87f60739a423c833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSetBase</definition>
        <argsstring>(SCIP_LPI *lpi, int *cstat, int *rstat)</argsstring>
        <name>SCIPlpiSetBase</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>cstat</declname>
          <briefdescription><para>array with column basis status </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>rstat</declname>
          <briefdescription><para>array with row basis status </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets current basis status for columns and rows </para>        </detaileddescription>
        <inbodydescription>
<para>Whats changed since last solve. Is only used when startFinishOptions used in dual or primal. Bit 1 - number of rows/columns has not changed (so work arrays valid) 2 - matrix has not changed 4 - if matrix has changed only by adding rows 8 - if matrix has changed only by adding columns 16 - row lbs not changed 32 - row ubs not changed 64 - column objective not changed 128 - column lbs not changed 256 - column ubs not changed 512 - basis not changed (up to user to set this to 0) top bits may be used internally</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1055" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1055" bodyend="1065"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ae40a43f062d28623d57653ddb4719fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBasisInd</definition>
        <argsstring>(SCIP_LPI *lpi, int *bind)</argsstring>
        <name>SCIPlpiGetBasisInd</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>bind</declname>
          <briefdescription><para>pointer to store basis indices ready to keep number of rows entries </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the indices of the basic columns and rows; basic column n gives value n, basic row m gives value -1-m </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1068" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1068" bodyend="1075"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a9315c551e92d2caa54d42750f1f048cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBInvRow</definition>
        <argsstring>(SCIP_LPI *lpi, int r, SCIP_Real *coef, int *inds, int *ninds)</argsstring>
        <name>SCIPlpiGetBInvRow</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
          <briefdescription><para>row number </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coef</declname>
          <briefdescription><para>pointer to store the coefficients of the row </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>inds</declname>
          <briefdescription><para>array to store the non-zero indices, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ninds</declname>
          <briefdescription><para>pointer to store the number of non-zero indices, or NULL (-1: if we do not store sparsity informations) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get dense row of inverse basis matrix B^-1</para><para><simplesect kind="note"><para>The LP interface defines slack variables to have coefficient +1. This means that if, internally, the LP solver uses a -1 coefficient, then rows associated with slacks variables whose coefficient is -1, should be negated; see also the explanation in <ref refid="lpi_8h" kindref="compound">lpi.h</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1083" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1083" bodyend="1094"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a9dda3c2147cbb647cfb0b5d198407525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBInvCol</definition>
        <argsstring>(SCIP_LPI *lpi, int c, SCIP_Real *coef, int *inds, int *ninds)</argsstring>
        <name>SCIPlpiGetBInvCol</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
          <briefdescription><para>column number of B^-1; this is NOT the number of the column in the LP; you have to call <ref refid="lpi__none_8c_1ae40a43f062d28623d57653ddb4719fca" kindref="member">SCIPlpiGetBasisInd()</ref> to get the array which links the B^-1 column numbers to the row and column numbers of the LP! c must be between 0 and nrows-1, since the basis has the size nrows * nrows </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coef</declname>
          <briefdescription><para>pointer to store the coefficients of the column </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>inds</declname>
          <briefdescription><para>array to store the non-zero indices, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ninds</declname>
          <briefdescription><para>pointer to store the number of non-zero indices, or NULL (-1: if we do not store sparsity informations) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get dense column of inverse basis matrix B^-1</para><para><simplesect kind="note"><para>The LP interface defines slack variables to have coefficient +1. This means that if, internally, the LP solver uses a -1 coefficient, then rows associated with slacks variables whose coefficient is -1, should be negated; see also the explanation in <ref refid="lpi_8h" kindref="compound">lpi.h</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1102" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1102" bodyend="1117"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1aa516aed02ad9b303b0d51eb0c7a66f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBInvARow</definition>
        <argsstring>(SCIP_LPI *lpi, int r, const SCIP_Real *binvrow, SCIP_Real *coef, int *inds, int *ninds)</argsstring>
        <name>SCIPlpiGetBInvARow</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
          <briefdescription><para>row number </para></briefdescription>
        </param>
        <param>
          <type>const <ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>binvrow</declname>
          <briefdescription><para>row in (A_B)^-1 from prior call to <ref refid="lpi__none_8c_1a9315c551e92d2caa54d42750f1f048cb" kindref="member">SCIPlpiGetBInvRow()</ref>, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coef</declname>
          <briefdescription><para>vector to return coefficients </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>inds</declname>
          <briefdescription><para>array to store the non-zero indices, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ninds</declname>
          <briefdescription><para>pointer to store the number of non-zero indices, or NULL (-1: if we do not store sparsity informations) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get dense row of inverse basis matrix times constraint matrix B^-1 * A</para><para><simplesect kind="note"><para>The LP interface defines slack variables to have coefficient +1. This means that if, internally, the LP solver uses a -1 coefficient, then rows associated with slacks variables whose coefficient is -1, should be negated; see also the explanation in <ref refid="lpi_8h" kindref="compound">lpi.h</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1125" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1125" bodyend="1137"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a015f424e442e74e4526ca62bdab54de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetBInvACol</definition>
        <argsstring>(SCIP_LPI *lpi, int c, SCIP_Real *coef, int *inds, int *ninds)</argsstring>
        <name>SCIPlpiGetBInvACol</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
          <briefdescription><para>column number </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coef</declname>
          <briefdescription><para>vector to return coefficients </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>inds</declname>
          <briefdescription><para>array to store the non-zero indices, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ninds</declname>
          <briefdescription><para>pointer to store the number of non-zero indices, or NULL (-1: if we do not store sparsity informations) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get dense column of inverse basis matrix times constraint matrix B^-1 * A</para><para><simplesect kind="note"><para>The LP interface defines slack variables to have coefficient +1. This means that if, internally, the LP solver uses a -1 coefficient, then rows associated with slacks variables whose coefficient is -1, should be negated; see also the explanation in <ref refid="lpi_8h" kindref="compound">lpi.h</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1145" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1145" bodyend="1156"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>LP State Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1afe1bc961d0f91cad7222870724175e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetState</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPISTATE **lpistate)</argsstring>
        <name>SCIPlpiGetState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> **</type>
          <declname>lpistate</declname>
          <briefdescription><para>pointer to LPi state information (like basis information) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stores LPi state (like basis information) into lpistate object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1171" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1171" bodyend="1181"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a74e8e33e89ab5d8d4b490fe3c4a88c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSetState</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPISTATE *lpistate)</argsstring>
        <name>SCIPlpiSetState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> *</type>
          <declname>lpistate</declname>
          <briefdescription><para>LPi state information (like basis information) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>loads LPi state (like basis information) into solver; note that the LP might have been extended with additional columns and rows since the state was stored with <ref refid="lpi__none_8c_1afe1bc961d0f91cad7222870724175e21" kindref="member">SCIPlpiGetState()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1186" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1186" bodyend="1195"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a1d56087500813e24687787cb90da5d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiClearState</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiClearState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>clears current LPi state (like basis information) of the solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1198" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1198" bodyend="1204"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1acfee2d2ea719f54192a11c1e80f5e61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiFreeState</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPISTATE **lpistate)</argsstring>
        <name>SCIPlpiFreeState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> **</type>
          <declname>lpistate</declname>
          <briefdescription><para>pointer to LPi state information (like basis information) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees LPi state information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1207" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1207" bodyend="1214"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a8cf134c068da15fe85dfad3d3d0aae2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiHasStateBasis</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPISTATE *lpistate)</argsstring>
        <name>SCIPlpiHasStateBasis</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref> *</type>
          <declname>lpistate</declname>
          <briefdescription><para>LP state information (like basis information) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks, whether the given LP state contains simplex basis information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1217" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1217" bodyend="1224"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a29c773d7e7763517c0952b9eee9ed7ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiReadState</definition>
        <argsstring>(SCIP_LPI *lpi, const char *fname)</argsstring>
        <name>SCIPlpiReadState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
          <briefdescription><para>file name </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reads LP state (like basis information from a file </para>        </detaileddescription>
        <inbodydescription>
<para>Read a basis from the given filename, returns -1 on file error, 0 if no values, 1 if values</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1227" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1227" bodyend="1234"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a6b360b8eb706948179cc3b46fa4df372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiWriteState</definition>
        <argsstring>(SCIP_LPI *lpi, const char *fname)</argsstring>
        <name>SCIPlpiWriteState</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
          <briefdescription><para>file name </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>writes LP state (like basis information) to a file </para>        </detaileddescription>
        <inbodydescription>
<para>Write the basis in MPS format to the specified file. If writeValues true, writes values of structurals (and adds VALUES to end of NAME card)</para><para>parameters:<itemizedlist>
<listitem><para>filename</para></listitem><listitem><para>bool writeValues</para></listitem><listitem><para>int formatType (0 - normal, 1 - extra accuracy, 2 - IEEE hex)</para></listitem></itemizedlist>
</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1237" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1237" bodyend="1244"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>LP Pricing Norms Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1a868706bb40dc3fdeb76e81c56c1c4d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetNorms</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPINORMS **lpinorms)</argsstring>
        <name>SCIPlpiGetNorms</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1abb3fe4ccfb87fa50adfa0631ff0d5531" kindref="member">SCIP_LPINORMS</ref> **</type>
          <declname>lpinorms</declname>
          <briefdescription><para>pointer to LPi pricing norms information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stores LPi pricing norms information  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1261" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1261" bodyend="1269"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1ad619ad2a4e65223449f5ab635985b70b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSetNorms</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPINORMS *lpinorms)</argsstring>
        <name>SCIPlpiSetNorms</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1abb3fe4ccfb87fa50adfa0631ff0d5531" kindref="member">SCIP_LPINORMS</ref> *</type>
          <declname>lpinorms</declname>
          <briefdescription><para>LPi pricing norms information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>loads LPi pricing norms into solver; note that the LP might have been extended with additional columns and rows since the state was stored with <ref refid="lpi__none_8c_1a868706bb40dc3fdeb76e81c56c1c4d31" kindref="member">SCIPlpiGetNorms()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1274" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1274" bodyend="1282"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a640477b756ddb94827c1a4e5e3721d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiFreeNorms</definition>
        <argsstring>(SCIP_LPI *lpi, BMS_BLKMEM *blkmem, SCIP_LPINORMS **lpinorms)</argsstring>
        <name>SCIPlpiFreeNorms</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1abb3fe4ccfb87fa50adfa0631ff0d5531" kindref="member">SCIP_LPINORMS</ref> **</type>
          <declname>lpinorms</declname>
          <briefdescription><para>pointer to LPi pricing norms information </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees pricing norms information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1285" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1285" bodyend="1293"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Parameter Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1a2d82a67789be908b161295f41d02ba8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetIntpar</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPPARAM type, int *ival)</argsstring>
        <name>SCIPlpiGetIntpar</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref></type>
          <declname>type</declname>
          <briefdescription><para>parameter number </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>ival</declname>
          <briefdescription><para>buffer to store the parameter value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets integer parameter of LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1308" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1308" bodyend="1316"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" compoundref="type__retcode_8h" startline="46">SCIP_PARAMETERUNKNOWN</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a8dac6dec76901acef9c18397582c5e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSetIntpar</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPPARAM type, int ival)</argsstring>
        <name>SCIPlpiSetIntpar</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref></type>
          <declname>type</declname>
          <briefdescription><para>parameter number </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ival</declname>
          <briefdescription><para>parameter value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets integer parameter of LP </para>        </detaileddescription>
        <inbodydescription>
<para>Amount of print out: 0 - none 1 - just final 2 - just factorizations 3 - as 2 plus a bit more 4 - verbose above that 8,16,32 etc just for selective SCIPdebug</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1319" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1319" bodyend="1326"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" compoundref="type__retcode_8h" startline="46">SCIP_PARAMETERUNKNOWN</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a07259db5fb0599d063fa4973dc3d5d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiGetRealpar</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPPARAM type, SCIP_Real *dval)</argsstring>
        <name>SCIPlpiGetRealpar</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref></type>
          <declname>type</declname>
          <briefdescription><para>parameter number </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>dval</declname>
          <briefdescription><para>buffer to store the parameter value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets floating point parameter of LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1329" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1329" bodyend="1337"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" compoundref="type__retcode_8h" startline="46">SCIP_PARAMETERUNKNOWN</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a468d983f0e77aa23e9563d4c1c1e3db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiSetRealpar</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_LPPARAM type, SCIP_Real dval)</argsstring>
        <name>SCIPlpiSetRealpar</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref></type>
          <declname>type</declname>
          <briefdescription><para>parameter number </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>dval</declname>
          <briefdescription><para>parameter value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets floating point parameter of LP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1340" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1340" bodyend="1347"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" compoundref="type__retcode_8h" startline="46">SCIP_PARAMETERUNKNOWN</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Numerical Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1a0b732c1d334aa020a4745e550adad4a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPlpiInfinity</definition>
        <argsstring>(SCIP_LPI *lpi)</argsstring>
        <name>SCIPlpiInfinity</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns value treated as infinity in the LP solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1359" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1359" bodyend="1364"/>
        <references refid="lpi__none_8c_1ac6db33602b64d29282acc04b4733b868" compoundref="lpi__none_8c" startline="30">LPIINFINITY</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a1773cc8c068cde1f8bb0b8ba99277878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPlpiIsInfinity</definition>
        <argsstring>(SCIP_LPI *lpi, SCIP_Real val)</argsstring>
        <name>SCIPlpiIsInfinity</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>val</declname>
          <briefdescription><para>value to be checked for infinity </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks if given value is treated as infinity in the LP solver </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1367" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1367" bodyend="1375"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="lpi__none_8c_1ac6db33602b64d29282acc04b4733b868" compoundref="lpi__none_8c" startline="30">LPIINFINITY</references>
        <references refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="def_8h" startline="52">TRUE</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>File Interface Methods</header>
      <memberdef kind="function" id="lpi__none_8c_1a83b58a451300ba484bb9314b35edc63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiReadLP</definition>
        <argsstring>(SCIP_LPI *lpi, const char *fname)</argsstring>
        <name>SCIPlpiReadLP</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
          <briefdescription><para>file name </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reads LP from a file </para>        </detaileddescription>
        <inbodydescription>
<para>read file in MPS format parameters: filename bool keepNames bool ignoreErrors</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1390" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1390" bodyend="1397"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a311a14142841041e24d522b281124f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPlpiWriteLP</definition>
        <argsstring>(SCIP_LPI *lpi, const char *fname)</argsstring>
        <name>SCIPlpiWriteLP</name>
        <param>
          <type><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref> *</type>
          <declname>lpi</declname>
          <briefdescription><para>LP interface structure </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
          <briefdescription><para>file name </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>writes LP to a file </para>        </detaileddescription>
        <inbodydescription>
<para>write file in MPS format parameters: filename int formatType (0 - normal, 1 - extra accuracy, 2 - IEEE hex) int numberAcross (1 or 2 values should be specified on every data line in the MPS file) double objSense</para>        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="1400" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="1400" bodyend="1407"/>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" compoundref="type__retcode_8h" startline="45">SCIP_PLUGINNOTFOUND</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="lpi__none_8c_1a58be1127a66dd66fd311c112b7c469bc" prot="public" static="no">
        <name>LPINAME</name>
        <initializer>&quot;NONE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name of the LPI interface </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="29" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="29" bodyend="-1"/>
        <referencedby refid="lpi__none_8c_1aed7c57c93675aae2562abab53b487ce7" compoundref="lpi__none_8c" startline="82" endline="87">SCIPlpiGetSolverName</referencedby>
      </memberdef>
      <memberdef kind="define" id="lpi__none_8c_1ac6db33602b64d29282acc04b4733b868" prot="public" static="no">
        <name>LPIINFINITY</name>
        <initializer>1e20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>infinity value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="30" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="30" bodyend="-1"/>
        <referencedby refid="lpi__none_8c_1a0b732c1d334aa020a4745e550adad4a5" compoundref="lpi__none_8c" startline="1359" endline="1364">SCIPlpiInfinity</referencedby>
        <referencedby refid="lpi__none_8c_1a1773cc8c068cde1f8bb0b8ba99277878" compoundref="lpi__none_8c" startline="1367" endline="1375">SCIPlpiIsInfinity</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lpi__none_8c_1a689146feff0c57e2093e74364c69d691" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void errorMessageAbort</definition>
        <argsstring>(void)</argsstring>
        <name>errorMessageAbort</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>error handling method </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="50" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="lpi__none_8c_1a12d0a498ef8b12b9e2935abde0ec94fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void errorMessage</definition>
        <argsstring>(void)</argsstring>
        <name>errorMessage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>error handling method </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" line="61" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c" bodystart="61" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>dummy interface for the case no LP solver is needed </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Stefan Heinz </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>program<sp/>and<sp/>library<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIP<sp/>---<sp/>Solving<sp/>Constraint<sp/>Integer<sp/>Programs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2002-2015<sp/>Konrad-Zuse-Zentrum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fuer<sp/>Informationstechnik<sp/>Berlin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>SCIP<sp/>is<sp/>distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>along<sp/>with<sp/>SCIP;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/>If<sp/>not<sp/>email<sp/>to<sp/>scip@zib.de.<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">/**@file<sp/><sp/><sp/>lpi_none.c</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>LPIS</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/>dummy<sp/>interface<sp/>for<sp/>the<sp/>case<sp/>no<sp/>LP<sp/>solver<sp/>is<sp/>needed</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@author<sp/>Stefan<sp/>Heinz</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*--+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lpi_8h" kindref="compound">lpi/lpi.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pub__message_8h" kindref="compound">scip/pub_message.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="lpi__none_8c_1a58be1127a66dd66fd311c112b7c469bc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LPINAME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NONE&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>name<sp/>of<sp/>the<sp/>LPI<sp/>interface<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="lpi__none_8c_1ac6db33602b64d29282acc04b4733b868" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LPIINFINITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1e20<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>infinity<sp/>value<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment">/**<sp/>LP<sp/>interface</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>Store<sp/>several<sp/>statistic<sp/>values<sp/>about<sp/>the<sp/>LP.<sp/>These<sp/>values<sp/>are<sp/>only<sp/>needed<sp/>in<sp/>order<sp/>to<sp/>provide<sp/>a<sp/>rudimentary</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>communication,<sp/>e.g.,<sp/>there<sp/>are<sp/>asserts<sp/>that<sp/>check<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>and<sp/>columns.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SCIP_LPi</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>Local<sp/>Methods</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment">/**<sp/>error<sp/>handling<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>errorMessageAbort(</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>LP<sp/>solver<sp/>available<sp/>(LPS=none).\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;Ensure<sp/>&lt;lp/solvefreq<sp/>=<sp/>-1&gt;;<sp/>note<sp/>that<sp/>continuous<sp/>variables<sp/>might<sp/>require<sp/>an<sp/>LP-solver.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1ad8669395a2a82ed74b9b364f4a310c56" kindref="member">SCIPABORT</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>error<sp/>handling<sp/>method<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>errorMessage(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>LP<sp/>solver<sp/>available<sp/>(LPS=none).\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a354566c209c3a7fe5c870d4ee8c07bc5" kindref="member">SCIPerrorMessage</ref>(</highlight><highlight class="stringliteral">&quot;Ensure<sp/>&lt;lp/solvefreq<sp/>=<sp/>-1&gt;;<sp/>note<sp/>that<sp/>continuous<sp/>variables<sp/>might<sp/>require<sp/>an<sp/>LP-solver.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>LP<sp/>Interface<sp/>Methods</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>Miscellaneous<sp/>Methods</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment">/**@name<sp/>Miscellaneous<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment">/**<sp/>gets<sp/>name<sp/>and<sp/>version<sp/>of<sp/>LP<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="lpi__none_8c_1aed7c57c93675aae2562abab53b487ce7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lpi__none_8c_1aed7c57c93675aae2562abab53b487ce7" kindref="member">SCIPlpiGetSolverName</ref>(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lpi__none_8c_1a58be1127a66dd66fd311c112b7c469bc" kindref="member">LPINAME</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment">/**<sp/>gets<sp/>description<sp/>of<sp/>LP<sp/>solver<sp/>(developer,<sp/>webpage,<sp/>...)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="lpi__none_8c_1a6cfc10a9902214c1ac825998bebdea19" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lpi__none_8c_1a6cfc10a9902214c1ac825998bebdea19" kindref="member">SCIPlpiGetSolverDesc</ref>(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;dummy<sp/>LP<sp/>solver<sp/>interface<sp/>which<sp/>solely<sp/>purpose<sp/>is<sp/>to<sp/>resolve<sp/>references<sp/>at<sp/>linking&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment">/**<sp/>gets<sp/>pointer<sp/>for<sp/>LP<sp/>solver<sp/>-<sp/>use<sp/>only<sp/>with<sp/>great<sp/>care<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="lpi__none_8c_1ac8b0874105d4a69fd4e35455d488edb3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="lpi__none_8c_1ac8b0874105d4a69fd4e35455d488edb3" kindref="member">SCIPlpiGetSolverPointer</ref>(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>an<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>LPI<sp/>Creation<sp/>and<sp/>Destruction<sp/>Methods</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**@name<sp/>LPI<sp/>Creation<sp/>and<sp/>Destruction<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>LP<sp/>problem<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="lpi__none_8c_1ae522c0e79b2f2c7d185e6b6cafec1a3d" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1ae522c0e79b2f2c7d185e6b6cafec1a3d" kindref="member">SCIPlpiCreate</ref>(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>an<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref>*<sp/><sp/><sp/><sp/><sp/>messagehdlr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>message<sp/>handler<sp/>to<sp/>use<sp/>for<sp/>printing<sp/>messages,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>problem<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objsen<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>objective<sp/>sense<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;SCIPlpiCreate()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;Note<sp/>that<sp/>there<sp/>is<sp/>no<sp/>LP<sp/>solver<sp/>linked<sp/>to<sp/>the<sp/>binary\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>empty<sp/>LPI<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7695e892dc456d85a3654eb158976921" kindref="member">SCIP_ALLOC</ref>(<sp/>BMSallocMemory(lpi)<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;nrows<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/>(*lpi)-&gt;ncols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**<sp/>deletes<sp/>an<sp/>LP<sp/>problem<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="lpi__none_8c_1a6dfadd74b4f72eea58d0946ec9ea6f60" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a6dfadd74b4f72eea58d0946ec9ea6f60" kindref="member">SCIPlpiFree</ref>(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>an<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;SCIPlpiFree()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemory(lpi);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>Modification<sp/>Methods</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**@name<sp/>Modification<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="161"><highlight class="comment">/**<sp/>copies<sp/>LP<sp/>data<sp/>with<sp/>column<sp/>matrix<sp/>into<sp/>LP<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="lpi__none_8c_1ae23bc1c98c8547a0ba03682d100365dd" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1ae23bc1c98c8547a0ba03682d100365dd" kindref="member">SCIPlpiLoadColLP</ref>(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objsen,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>objective<sp/>sense<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>obj,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>objective<sp/>function<sp/>values<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>lower<sp/>bounds<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>ub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>upper<sp/>bounds<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colnames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>names,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>left<sp/>hand<sp/>sides<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>rhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>right<sp/>hand<sp/>sides<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rownames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>names,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>in<sp/>the<sp/>constraint<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>start<sp/>index<sp/>of<sp/>each<sp/>column<sp/>in<sp/>ind-<sp/>and<sp/>val-array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>indices<sp/>of<sp/>constraint<sp/>matrix<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>constraint<sp/>matrix<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;nrows<sp/>=<sp/>nrows;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;ncols<sp/>=<sp/>ncols;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;nrows<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;ncols<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="190"><highlight class="comment">/**<sp/>adds<sp/>columns<sp/>to<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="lpi__none_8c_1add77293153dc03295e1782af22921906" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1add77293153dc03295e1782af22921906" kindref="member">SCIPlpiAddCols</ref>(</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>to<sp/>be<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>obj,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>objective<sp/>function<sp/>values<sp/>of<sp/>new<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>lower<sp/>bounds<sp/>of<sp/>new<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>ub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>upper<sp/>bounds<sp/>of<sp/>new<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colnames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>names,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the<sp/>constraint<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>start<sp/>index<sp/>of<sp/>each<sp/>column<sp/>in<sp/>ind-<sp/>and<sp/>val-array,<sp/>or<sp/>NULL<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>indices<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>NULL<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>NULL<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;ncols<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;ncols<sp/>+=<sp/>ncols;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment">/**<sp/>deletes<sp/>all<sp/>columns<sp/>in<sp/>the<sp/>given<sp/>range<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="lpi__none_8c_1af651ff93b2be704cacb27c13b24ab311" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1af651ff93b2be704cacb27c13b24ab311" kindref="member">SCIPlpiDelCols</ref>(</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>column<sp/>to<sp/>be<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastcol<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>column<sp/>to<sp/>be<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;ncols<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;ncols<sp/>-=<sp/>lastcol<sp/>-<sp/>firstcol<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;ncols<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment">/**<sp/>deletes<sp/>columns<sp/>from<sp/>SCIP_LP;<sp/>the<sp/>new<sp/>position<sp/>of<sp/>a<sp/>column<sp/>must<sp/>not<sp/>be<sp/>greater<sp/>that<sp/>its<sp/>old<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="lpi__none_8c_1ac93976edb5a40906de3c2163b2fafec0" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1ac93976edb5a40906de3c2163b2fafec0" kindref="member">SCIPlpiDelColset</ref>(</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>deletion<sp/>status<sp/>of<sp/>columns</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>input:<sp/><sp/>1<sp/>if<sp/>column<sp/>should<sp/>be<sp/>deleted,<sp/>0<sp/>if<sp/>not</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>output:<sp/>new<sp/>position<sp/>of<sp/>column,<sp/>-1<sp/>if<sp/>column<sp/>was<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>dstat<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;ncols<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>lpi-&gt;ncols;<sp/>++j)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dstat[j]<sp/>)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cnt;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat[j]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat[j]<sp/>=<sp/>cnt;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;ncols<sp/>-=<sp/>cnt;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;ncols<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment">/**<sp/>adds<sp/>rows<sp/>to<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="lpi__none_8c_1a2bad82670d46254daf3e923898c404d5" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a2bad82670d46254daf3e923898c404d5" kindref="member">SCIPlpiAddRows</ref>(</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>to<sp/>be<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>left<sp/>hand<sp/>sides<sp/>of<sp/>new<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>rhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>right<sp/>hand<sp/>sides<sp/>of<sp/>new<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rownames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>names,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>to<sp/>be<sp/>added<sp/>to<sp/>the<sp/>constraint<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>start<sp/>index<sp/>of<sp/>each<sp/>row<sp/>in<sp/>ind-<sp/>and<sp/>val-array,<sp/>or<sp/>NULL<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>indices<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>NULL<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>NULL<sp/>if<sp/>nnonz<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;nrows<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;nrows<sp/>+=<sp/>nrows;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="280"><highlight class="comment">/**<sp/>deletes<sp/>all<sp/>rows<sp/>in<sp/>the<sp/>given<sp/>range<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="lpi__none_8c_1a95a88cc92b9c3061762849aeb2edc9ff" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a95a88cc92b9c3061762849aeb2edc9ff" kindref="member">SCIPlpiDelRows</ref>(</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>row<sp/>to<sp/>be<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastrow<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>row<sp/>to<sp/>be<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;nrows<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;nrows<sp/>-=<sp/>lastrow<sp/>-<sp/>firstrow<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;nrows<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">/**<sp/>deletes<sp/>rows<sp/>from<sp/>SCIP_LP;<sp/>the<sp/>new<sp/>position<sp/>of<sp/>a<sp/>row<sp/>must<sp/>not<sp/>be<sp/>greater<sp/>that<sp/>its<sp/>old<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="lpi__none_8c_1af7385b74de163f5ae25b77e99c7bdc1a" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1af7385b74de163f5ae25b77e99c7bdc1a" kindref="member">SCIPlpiDelRowset</ref>(</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>deletion<sp/>status<sp/>of<sp/>rows</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>input:<sp/><sp/>1<sp/>if<sp/>row<sp/>should<sp/>be<sp/>deleted,<sp/>0<sp/>if<sp/>not</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>output:<sp/>new<sp/>position<sp/>of<sp/>row,<sp/>-1<sp/>if<sp/>row<sp/>was<sp/>deleted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>dstat<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;nrows<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lpi-&gt;nrows;<sp/>++i)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dstat[i]<sp/>)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cnt;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstat[i]<sp/>=<sp/>cnt;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;nrows<sp/>-=<sp/>cnt;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;nrows<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="327"><highlight class="comment">/**<sp/>clears<sp/>the<sp/>whole<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="lpi__none_8c_1a18664e9f784a12522aa9ec6e775e5a15" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a18664e9f784a12522aa9ec6e775e5a15" kindref="member">SCIPlpiClear</ref>(</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;nrows<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;ncols<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;nrows<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/>lpi-&gt;ncols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="342"><highlight class="comment">/**<sp/>changes<sp/>lower<sp/>and<sp/>upper<sp/>bounds<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="lpi__none_8c_1a69472179ed0e902cb865b8bd3941c461" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a69472179ed0e902cb865b8bd3941c461" kindref="member">SCIPlpiChgBounds</ref>(</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>to<sp/>change<sp/>bounds<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>the<sp/>new<sp/>lower<sp/>bounds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>ub<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>the<sp/>new<sp/>upper<sp/>bounds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="354"><highlight class="comment">/**<sp/>changes<sp/>left<sp/>and<sp/>right<sp/>hand<sp/>sides<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="lpi__none_8c_1a00fa12a201791dbba7d4b17a75fe7ae2" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a00fa12a201791dbba7d4b17a75fe7ae2" kindref="member">SCIPlpiChgSides</ref>(</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>to<sp/>change<sp/>sides<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>values<sp/>for<sp/>left<sp/>hand<sp/>sides<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>rhs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>values<sp/>for<sp/>right<sp/>hand<sp/>sides<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="366"><highlight class="comment">/**<sp/>changes<sp/>a<sp/>single<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="lpi__none_8c_1aff2b648673b8baac9903c236a97c267b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1aff2b648673b8baac9903c236a97c267b" kindref="member">SCIPlpiChgCoef</ref>(</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>number<sp/>of<sp/>coefficient<sp/>to<sp/>change<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>number<sp/>of<sp/>coefficient<sp/>to<sp/>change<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>value<sp/>of<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="377"><highlight class="comment">/**<sp/>changes<sp/>the<sp/>objective<sp/>sense<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="lpi__none_8c_1a0d794ce162ec1c45eb776baa2ffdc79c" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a0d794ce162ec1c45eb776baa2ffdc79c" kindref="member">SCIPlpiChgObjsen</ref>(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objsen<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>objective<sp/>sense<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment">/**<sp/>changes<sp/>objective<sp/>values<sp/>of<sp/>columns<sp/>in<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="lpi__none_8c_1a8f18465d14a5d1116c1dc8ea6cf90ddb" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a8f18465d14a5d1116c1dc8ea6cf90ddb" kindref="member">SCIPlpiChgObj</ref>(</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>to<sp/>change<sp/>objective<sp/>value<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>indices<sp/>to<sp/>change<sp/>objective<sp/>value<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>objective<sp/>values<sp/>for<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="397"><highlight class="comment">/**<sp/>multiplies<sp/>a<sp/>row<sp/>with<sp/>a<sp/>non-zero<sp/>scalar;<sp/>for<sp/>negative<sp/>scalars,<sp/>the<sp/>row&apos;s<sp/>sense<sp/>is<sp/>switched<sp/>accordingly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="lpi__none_8c_1af94ca6a608b8e0be96158d78270b2715" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1af94ca6a608b8e0be96158d78270b2715" kindref="member">SCIPlpiScaleRow</ref>(</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>number<sp/>to<sp/>scale<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaleval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>scaling<sp/>multiplier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="407"><highlight class="comment">/**<sp/>multiplies<sp/>a<sp/>column<sp/>with<sp/>a<sp/>non-zero<sp/>scalar;<sp/>the<sp/>objective<sp/>value<sp/>is<sp/>multiplied<sp/>with<sp/>the<sp/>scalar,<sp/>and<sp/>the<sp/>bounds</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/><sp/>are<sp/>divided<sp/>by<sp/>the<sp/>scalar;<sp/>for<sp/>negative<sp/>scalars,<sp/>the<sp/>column&apos;s<sp/>bounds<sp/>are<sp/>switched</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="lpi__none_8c_1a598ccc37a344e88c584b37691f162432" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a598ccc37a344e88c584b37691f162432" kindref="member">SCIPlpiScaleCol</ref>(</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>number<sp/>to<sp/>scale<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaleval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>scaling<sp/>multiplier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="419"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>Data<sp/>Accessing<sp/>Methods</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment">/**@name<sp/>Data<sp/>Accessing<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="429"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="431"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="lpi__none_8c_1afc4ba497c8fef592df0c5bf7745bf9d8" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1afc4ba497c8fef592df0c5bf7745bf9d8" kindref="member">SCIPlpiGetNRows</ref>(</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrows<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>nrows<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;nrows<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/>*nrows<sp/>=<sp/>lpi-&gt;nrows;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="446"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="lpi__none_8c_1af0f0eab6882439ab9e263d6754c102f3" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1af0f0eab6882439ab9e263d6754c102f3" kindref="member">SCIPlpiGetNCols</ref>(</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>cols<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>ncols<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi-&gt;ncols<sp/>&gt;=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/>*ncols<sp/>=<sp/>lpi-&gt;ncols;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="461"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>in<sp/>the<sp/>LP<sp/>constraint<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="lpi__none_8c_1a4e84473a9742d228d1112cf94e0337e7" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a4e84473a9742d228d1112cf94e0337e7" kindref="member">SCIPlpiGetNNonz</ref>(</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>nonzeros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="466"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/>assert(nnonz<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="472"><highlight class="comment">/**<sp/>gets<sp/>columns<sp/>from<sp/>LP<sp/>problem<sp/>object;<sp/>the<sp/>arrays<sp/>have<sp/>to<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>store<sp/>all<sp/>values</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/><sp/>Either<sp/>both,<sp/>lb<sp/>and<sp/>ub,<sp/>have<sp/>to<sp/>be<sp/>NULL,<sp/>or<sp/>both<sp/>have<sp/>to<sp/>be<sp/>non-NULL,</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/><sp/>either<sp/>nnonz,<sp/>beg,<sp/>ind,<sp/>and<sp/>val<sp/>have<sp/>to<sp/>be<sp/>NULL,<sp/>or<sp/>all<sp/>of<sp/>them<sp/>have<sp/>to<sp/>be<sp/>non-NULL.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="lpi__none_8c_1a9b718ef73cb5d6544472fb05f2193d37" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a9b718ef73cb5d6544472fb05f2193d37" kindref="member">SCIPlpiGetCols</ref>(</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>column<sp/>to<sp/>get<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>column<sp/>to<sp/>get<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>lower<sp/>bound<sp/>vector,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>upper<sp/>bound<sp/>vector,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>returned,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>start<sp/>index<sp/>of<sp/>each<sp/>column<sp/>in<sp/>ind-<sp/>and<sp/>val-array,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>column<sp/>indices<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>values<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="492"><highlight class="comment">/**<sp/>gets<sp/>rows<sp/>from<sp/>LP<sp/>problem<sp/>object;<sp/>the<sp/>arrays<sp/>have<sp/>to<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>store<sp/>all<sp/>values.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/><sp/>Either<sp/>both,<sp/>lhs<sp/>and<sp/>rhs,<sp/>have<sp/>to<sp/>be<sp/>NULL,<sp/>or<sp/>both<sp/>have<sp/>to<sp/>be<sp/>non-NULL,</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/><sp/>either<sp/>nnonz,<sp/>beg,<sp/>ind,<sp/>and<sp/>val<sp/>have<sp/>to<sp/>be<sp/>NULL,<sp/>or<sp/>all<sp/>of<sp/>them<sp/>have<sp/>to<sp/>be<sp/>non-NULL.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="lpi__none_8c_1aa925f44c4f2e5640b79ff87f8166d92e" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1aa925f44c4f2e5640b79ff87f8166d92e" kindref="member">SCIPlpiGetRows</ref>(</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>row<sp/>to<sp/>get<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>row<sp/>to<sp/>get<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>left<sp/>hand<sp/>side<sp/>vector,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>right<sp/>hand<sp/>side<sp/>vector,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnonz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>nonzero<sp/>elements<sp/>returned,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>start<sp/>index<sp/>of<sp/>each<sp/>row<sp/>in<sp/>ind-<sp/>and<sp/>val-array,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>row<sp/>indices<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>values<sp/>of<sp/>constraint<sp/>matrix<sp/>entries,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="512"><highlight class="comment">/**<sp/>gets<sp/>column<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513" refid="lpi__none_8c_1aa01800088106fccc11758d86646a1933" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1aa01800088106fccc11758d86646a1933" kindref="member">SCIPlpiGetColNames</ref>(</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>column<sp/>to<sp/>get<sp/>name<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>column<sp/>to<sp/>get<sp/>name<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colnames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointers<sp/>to<sp/>column<sp/>names<sp/>(of<sp/>size<sp/>at<sp/>least<sp/>lastcol-firstcol+1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namestorage,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>storage<sp/>for<sp/>col<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namestoragesize,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>size<sp/>of<sp/>namestorage<sp/>(if<sp/>0,<sp/>storageleft<sp/>returns<sp/>the<sp/>storage<sp/>needed)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storageleft<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>amount<sp/>of<sp/>storage<sp/>left<sp/>(if<sp/>&lt;<sp/>0<sp/>the<sp/>namestorage<sp/>was<sp/>not<sp/>big<sp/>enough)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="527"><highlight class="comment">/**<sp/>gets<sp/>row<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="lpi__none_8c_1ab84a1811166e562112166eeddafe5f08" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1ab84a1811166e562112166eeddafe5f08" kindref="member">SCIPlpiGetRowNames</ref>(</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>row<sp/>to<sp/>get<sp/>name<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>row<sp/>to<sp/>get<sp/>name<sp/>from<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rownames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointers<sp/>to<sp/>row<sp/>names<sp/>(of<sp/>size<sp/>at<sp/>least<sp/>lastrow-firstrow+1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namestorage,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>storage<sp/>for<sp/>row<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namestoragesize,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>size<sp/>of<sp/>namestorage<sp/>(if<sp/>0,<sp/>-storageleft<sp/>returns<sp/>the<sp/>storage<sp/>needed)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storageleft<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>amount<sp/>of<sp/>storage<sp/>left<sp/>(if<sp/>&lt;<sp/>0<sp/>the<sp/>namestorage<sp/>was<sp/>not<sp/>big<sp/>enough)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="542"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>objective<sp/>sense<sp/>of<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="lpi__none_8c_1aee46b15c0fa3d6d86be4e3bf741f34b7" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1aee46b15c0fa3d6d86be4e3bf741f34b7" kindref="member">SCIPlpiGetObjsen</ref>(</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1afa3d076f8e5d2a8a31bf662ab24797cf" kindref="member">SCIP_OBJSEN</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objsen<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>objective<sp/>sense<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="547"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="552"><highlight class="comment">/**<sp/>gets<sp/>objective<sp/>coefficients<sp/>from<sp/>LP<sp/>problem<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553" refid="lpi__none_8c_1accf7c7a0ba8f375dbfa9bce872586951" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1accf7c7a0ba8f375dbfa9bce872586951" kindref="member">SCIPlpiGetObj</ref>(</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>column<sp/>to<sp/>get<sp/>objective<sp/>coefficient<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>column<sp/>to<sp/>get<sp/>objective<sp/>coefficient<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>objective<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="564"><highlight class="comment">/**<sp/>gets<sp/>current<sp/>bounds<sp/>from<sp/>LP<sp/>problem<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565" refid="lpi__none_8c_1a534fd30b49c755aea9b96a0365ee41b0" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a534fd30b49c755aea9b96a0365ee41b0" kindref="member">SCIPlpiGetBounds</ref>(</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>column<sp/>to<sp/>get<sp/>bounds<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastcol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>column<sp/>to<sp/>get<sp/>bounds<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lbs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>lower<sp/>bound<sp/>values,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ubs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>upper<sp/>bound<sp/>values,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="577"><highlight class="comment">/**<sp/>gets<sp/>current<sp/>row<sp/>sides<sp/>from<sp/>LP<sp/>problem<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="lpi__none_8c_1abd761e9fb6a1dd346a08c94a50192d8b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1abd761e9fb6a1dd346a08c94a50192d8b" kindref="member">SCIPlpiGetSides</ref>(</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>row<sp/>to<sp/>get<sp/>sides<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>last<sp/>row<sp/>to<sp/>get<sp/>sides<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>left<sp/>hand<sp/>side<sp/>values,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhss<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>right<sp/>hand<sp/>side<sp/>values,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/>assert(firstrow<sp/>&lt;=<sp/>lastrow);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="591"><highlight class="comment">/**<sp/>gets<sp/>a<sp/>single<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592" refid="lpi__none_8c_1a7ae0750d24c1e5ad1c719ca4a601b511" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a7ae0750d24c1e5ad1c719ca4a601b511" kindref="member">SCIPlpiGetCoef</ref>(</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>number<sp/>of<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>number<sp/>of<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>value<sp/>of<sp/>the<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="598"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="603"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/>Solving<sp/>Methods</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="612"><highlight class="comment">/**@name<sp/>Solving<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="613"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="615"><highlight class="comment">/**<sp/>calls<sp/>primal<sp/>simplex<sp/>to<sp/>solve<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616" refid="lpi__none_8c_1adff9cd01f05724d2e00808ebd09c8e93" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1adff9cd01f05724d2e00808ebd09c8e93" kindref="member">SCIPlpiSolvePrimal</ref>(</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="619"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="624"><highlight class="comment">/**<sp/>calls<sp/>dual<sp/>simplex<sp/>to<sp/>solve<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="lpi__none_8c_1ad87b0da429ef0a5ef34ccdd01cc2309d" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1ad87b0da429ef0a5ef34ccdd01cc2309d" kindref="member">SCIPlpiSolveDual</ref>(</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="633"><highlight class="comment">/**<sp/>calls<sp/>barrier<sp/>or<sp/>interior<sp/>point<sp/>algorithm<sp/>to<sp/>solve<sp/>the<sp/>LP<sp/>with<sp/>crossover<sp/>to<sp/>simplex<sp/>basis<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634" refid="lpi__none_8c_1aaed3d89975ea9d3a6a79f03c1361d9b5" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1aaed3d89975ea9d3a6a79f03c1361d9b5" kindref="member">SCIPlpiSolveBarrier</ref>(</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crossover<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>perform<sp/>crossover<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="643"><highlight class="comment">/**<sp/>start<sp/>strong<sp/>branching<sp/>-<sp/>call<sp/>before<sp/>any<sp/>strong<sp/>branching<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644" refid="lpi__none_8c_1a61eb2de700a5b2ca02c55a6f206af5df" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a61eb2de700a5b2ca02c55a6f206af5df" kindref="member">SCIPlpiStartStrongbranch</ref>(</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="647"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="652"><highlight class="comment">/**<sp/>end<sp/>strong<sp/>branching<sp/>-<sp/>call<sp/>after<sp/>any<sp/>strong<sp/>branching<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653" refid="lpi__none_8c_1abb4fffe6db4fc82590ffb3231a4e314c" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1abb4fffe6db4fc82590ffb3231a4e314c" kindref="member">SCIPlpiEndStrongbranch</ref>(</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="656"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="661"><highlight class="comment">/**<sp/>performs<sp/>strong<sp/>branching<sp/>iterations<sp/>on<sp/>one<sp/>@b<sp/>fractional<sp/>candidate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="lpi__none_8c_1a4b3e0e444fa2cba71360126834df07b4" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a4b3e0e444fa2cba71360126834df07b4" kindref="member">SCIPlpiStrongbranchFrac</ref>(</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>to<sp/>apply<sp/>strong<sp/>branching<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>fractional<sp/>current<sp/>primal<sp/>solution<sp/>value<sp/>of<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itlim,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>iteration<sp/>limit<sp/>for<sp/>strong<sp/>branchings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bound<sp/>after<sp/>branching<sp/>column<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bound<sp/>after<sp/>branching<sp/>column<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>down<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>dual<sp/>bound;</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>up<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>dual<sp/>bound;</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>total<sp/>number<sp/>of<sp/>strong<sp/>branching<sp/>iterations,<sp/>or<sp/>-1;<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="675"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>down<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>up<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>downvalid<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>upvalid<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="684"><highlight class="comment">/**<sp/>performs<sp/>strong<sp/>branching<sp/>iterations<sp/>on<sp/>given<sp/>@b<sp/>fractional<sp/>candidates<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685" refid="lpi__none_8c_1a7aa759face9cb33420e56984df7b6557" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a7aa759face9cb33420e56984df7b6557" kindref="member">SCIPlpiStrongbranchesFrac</ref>(</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>columns<sp/>to<sp/>apply<sp/>strong<sp/>branching<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>fractional<sp/>current<sp/>primal<sp/>solution<sp/>values<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itlim,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>iteration<sp/>limit<sp/>for<sp/>strong<sp/>branchings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bounds<sp/>after<sp/>branching<sp/>columns<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bounds<sp/>after<sp/>branching<sp/>columns<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>down<sp/>values<sp/>are<sp/>valid<sp/>dual<sp/>bounds;</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>they<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>up<sp/>values<sp/>are<sp/>a<sp/>valid<sp/>dual<sp/>bounds;</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>they<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>total<sp/>number<sp/>of<sp/>strong<sp/>branching<sp/>iterations,<sp/>or<sp/>-1;<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="699"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>cols<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>psols<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>down<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>up<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>downvalid<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>upvalid<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="710"><highlight class="comment">/**<sp/>performs<sp/>strong<sp/>branching<sp/>iterations<sp/>on<sp/>one<sp/>candidate<sp/>with<sp/>@b<sp/>integral<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711" refid="lpi__none_8c_1a5172db5f9ebd4ad8b1da84ce8c00bff7" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a5172db5f9ebd4ad8b1da84ce8c00bff7" kindref="member">SCIPlpiStrongbranchInt</ref>(</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>to<sp/>apply<sp/>strong<sp/>branching<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>current<sp/>integral<sp/>primal<sp/>solution<sp/>value<sp/>of<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itlim,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>iteration<sp/>limit<sp/>for<sp/>strong<sp/>branchings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bound<sp/>after<sp/>branching<sp/>column<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bound<sp/>after<sp/>branching<sp/>column<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>down<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>dual<sp/>bound;</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>up<sp/>value<sp/>is<sp/>a<sp/>valid<sp/>dual<sp/>bound;</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>it<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>total<sp/>number<sp/>of<sp/>strong<sp/>branching<sp/>iterations,<sp/>or<sp/>-1;<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="724"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>down<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>up<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>downvalid<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>upvalid<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="733"><highlight class="comment">/**<sp/>performs<sp/>strong<sp/>branching<sp/>iterations<sp/>on<sp/>given<sp/>candidates<sp/>with<sp/>@b<sp/>integral<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734" refid="lpi__none_8c_1abdfa4cbbbfc871eb382b8090167f715e" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1abdfa4cbbbfc871eb382b8090167f715e" kindref="member">SCIPlpiStrongbranchesInt</ref>(</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>columns<sp/>to<sp/>apply<sp/>strong<sp/>branching<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psols,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>current<sp/>integral<sp/>primal<sp/>solution<sp/>values<sp/>of<sp/>columns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itlim,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>iteration<sp/>limit<sp/>for<sp/>strong<sp/>branchings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bounds<sp/>after<sp/>branching<sp/>columns<sp/>down<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>bounds<sp/>after<sp/>branching<sp/>columns<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>down<sp/>values<sp/>are<sp/>valid<sp/>dual<sp/>bounds;</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>they<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upvalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>whether<sp/>the<sp/>returned<sp/>up<sp/>values<sp/>are<sp/>a<sp/>valid<sp/>dual<sp/>bounds;</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise,<sp/>they<sp/>can<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>estimate<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>total<sp/>number<sp/>of<sp/>strong<sp/>branching<sp/>iterations,<sp/>or<sp/>-1;<sp/>may<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="748"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>cols<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>psols<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>down<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>up<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>downvalid<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>upvalid<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="758"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*<sp/>Solution<sp/>Information<sp/>Methods</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="767"><highlight class="comment">/**@name<sp/>Solution<sp/>Information<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="768"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="770"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>a<sp/>solve<sp/>method<sp/>was<sp/>called<sp/>after<sp/>the<sp/>last<sp/>modification<sp/>of<sp/>the<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771" refid="lpi__none_8c_1aaa0c5c0be2bd96fce205e68f7d051abe" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1aaa0c5c0be2bd96fce205e68f7d051abe" kindref="member">SCIPlpiWasSolved</ref>(</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="774"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment">/**<sp/>gets<sp/>information<sp/>about<sp/>primal<sp/>and<sp/>dual<sp/>feasibility<sp/>of<sp/>the<sp/>current<sp/>LP<sp/>solution<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780" refid="lpi__none_8c_1a61efb09a57b1279d91619c36cad3d597" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a61efb09a57b1279d91619c36cad3d597" kindref="member">SCIPlpiGetSolFeasibility</ref>(</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primalfeasible,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>primal<sp/>feasibility<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dualfeasible<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>dual<sp/>feasibility<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="785"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/>assert(primalfeasible<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/>assert(dualfeasible<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="792"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>have<sp/>a<sp/>primal<sp/>unbounded<sp/>ray<sp/>(but<sp/>not<sp/>necessary<sp/>a<sp/>primal<sp/>feasible<sp/>point);</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>does<sp/>not<sp/>necessarily<sp/>mean,<sp/>that<sp/>the<sp/>solver<sp/>knows<sp/>and<sp/>can<sp/>return<sp/>the<sp/>primal<sp/>ray</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795" refid="lpi__none_8c_1a2562db03b64bf6ef2789e4edf3cc31a3" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a2562db03b64bf6ef2789e4edf3cc31a3" kindref="member">SCIPlpiExistsPrimalRay</ref>(</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="803"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>have<sp/>a<sp/>primal<sp/>unbounded<sp/>ray<sp/>(but<sp/>not<sp/>necessary<sp/>a<sp/>primal<sp/>feasible<sp/>point),</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>the<sp/>solver<sp/>knows<sp/>and<sp/>can<sp/>return<sp/>the<sp/>primal<sp/>ray</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806" refid="lpi__none_8c_1a91cb0382fe11412dfa127df4cc9f8e9a" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a91cb0382fe11412dfa127df4cc9f8e9a" kindref="member">SCIPlpiHasPrimalRay</ref>(</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="809"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="814"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>primal<sp/>unbounded<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815" refid="lpi__none_8c_1a698fec903ce3546e8066a3988ee906ee" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a698fec903ce3546e8066a3988ee906ee" kindref="member">SCIPlpiIsPrimalUnbounded</ref>(</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="818"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="823"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>primal<sp/>infeasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824" refid="lpi__none_8c_1ad2c1ad0f846c5827b5a2050ab13eba0f" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1ad2c1ad0f846c5827b5a2050ab13eba0f" kindref="member">SCIPlpiIsPrimalInfeasible</ref>(</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="827"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="832"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>primal<sp/>feasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833" refid="lpi__none_8c_1a824080a74642700e0919806405d4dd69" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a824080a74642700e0919806405d4dd69" kindref="member">SCIPlpiIsPrimalFeasible</ref>(</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="836"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="841"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>have<sp/>a<sp/>dual<sp/>unbounded<sp/>ray<sp/>(but<sp/>not<sp/>necessary<sp/>a<sp/>dual<sp/>feasible<sp/>point);</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>does<sp/>not<sp/>necessarily<sp/>mean,<sp/>that<sp/>the<sp/>solver<sp/>knows<sp/>and<sp/>can<sp/>return<sp/>the<sp/>dual<sp/>ray</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844" refid="lpi__none_8c_1a21939ccf03835cce5a9a449b6c43665b" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a21939ccf03835cce5a9a449b6c43665b" kindref="member">SCIPlpiExistsDualRay</ref>(</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="847"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="852"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>have<sp/>a<sp/>dual<sp/>unbounded<sp/>ray<sp/>(but<sp/>not<sp/>necessary<sp/>a<sp/>dual<sp/>feasible<sp/>point),</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>the<sp/>solver<sp/>knows<sp/>and<sp/>can<sp/>return<sp/>the<sp/>dual<sp/>ray</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855" refid="lpi__none_8c_1ac6738fca43ff0cbb9027560f18bd764c" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1ac6738fca43ff0cbb9027560f18bd764c" kindref="member">SCIPlpiHasDualRay</ref>(</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="858"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="863"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>dual<sp/>unbounded<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864" refid="lpi__none_8c_1ae2cd5f0afa5f5940c9d7bab6f04b184e" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1ae2cd5f0afa5f5940c9d7bab6f04b184e" kindref="member">SCIPlpiIsDualUnbounded</ref>(</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="872"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>dual<sp/>infeasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873" refid="lpi__none_8c_1a348c42072a5aad88210e9d688b4d6a1c" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a348c42072a5aad88210e9d688b4d6a1c" kindref="member">SCIPlpiIsDualInfeasible</ref>(</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="876"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="881"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>is<sp/>proven<sp/>to<sp/>be<sp/>dual<sp/>feasible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882" refid="lpi__none_8c_1a8457b3a26f7595f3390f7b34ab443fd4" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a8457b3a26f7595f3390f7b34ab443fd4" kindref="member">SCIPlpiIsDualFeasible</ref>(</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="885"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="890"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>LP<sp/>was<sp/>solved<sp/>to<sp/>optimality<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="lpi__none_8c_1ab66f1eae0b448c155f0feaffa7bdda57" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1ab66f1eae0b448c155f0feaffa7bdda57" kindref="member">SCIPlpiIsOptimal</ref>(</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="894"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="899"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>current<sp/>LP<sp/>basis<sp/>is<sp/>stable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900" refid="lpi__none_8c_1af04aa49d1337f5007cc0d78625d2dd4d" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1af04aa49d1337f5007cc0d78625d2dd4d" kindref="member">SCIPlpiIsStable</ref>(</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="903"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="908"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>the<sp/>objective<sp/>limit<sp/>was<sp/>reached<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909" refid="lpi__none_8c_1a0d4fca883c08a32af088280a78ca3ef2" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a0d4fca883c08a32af088280a78ca3ef2" kindref="member">SCIPlpiIsObjlimExc</ref>(</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="912"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="917"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>the<sp/>iteration<sp/>limit<sp/>was<sp/>reached<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918" refid="lpi__none_8c_1a689c99183c7e0779c50f9aef63c79123" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a689c99183c7e0779c50f9aef63c79123" kindref="member">SCIPlpiIsIterlimExc</ref>(</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="921"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="926"><highlight class="comment">/**<sp/>returns<sp/>TRUE<sp/>iff<sp/>the<sp/>time<sp/>limit<sp/>was<sp/>reached<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927" refid="lpi__none_8c_1a8ac20384dbd857173c8dfe0dc37f7d6a" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a8ac20384dbd857173c8dfe0dc37f7d6a" kindref="member">SCIPlpiIsTimelimExc</ref>(</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="930"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="935"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>internal<sp/>solution<sp/>status<sp/>of<sp/>the<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936" refid="lpi__none_8c_1a5fbb9e1f86a8425b85760f01692f85aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lpi__none_8c_1a5fbb9e1f86a8425b85760f01692f85aa" kindref="member">SCIPlpiGetInternalStatus</ref>(</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="939"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="944"><highlight class="comment">/**<sp/>tries<sp/>to<sp/>reset<sp/>the<sp/>internal<sp/>status<sp/>of<sp/>the<sp/>LP<sp/>solver<sp/>in<sp/>order<sp/>to<sp/>ignore<sp/>an<sp/>instability<sp/>of<sp/>the<sp/>last<sp/>solving<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945" refid="lpi__none_8c_1a6b24f7dd3dfac27d08f1cfc777e56a8b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a6b24f7dd3dfac27d08f1cfc777e56a8b" kindref="member">SCIPlpiIgnoreInstability</ref>(</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store,<sp/>whether<sp/>the<sp/>instability<sp/>could<sp/>be<sp/>ignored<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="949"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/>assert(success<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="955"><highlight class="comment">/**<sp/>gets<sp/>objective<sp/>value<sp/>of<sp/>solution<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956" refid="lpi__none_8c_1a5548fcdd7c4e4a3f6d542cd51da27c82" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a5548fcdd7c4e4a3f6d542cd51da27c82" kindref="member">SCIPlpiGetObjval</ref>(</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>the<sp/>objective<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="960"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/>assert(objval<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="966"><highlight class="comment">/**<sp/>gets<sp/>primal<sp/>and<sp/>dual<sp/>solution<sp/>vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967" refid="lpi__none_8c_1ac5a2315c14e99b919626de4170687227" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1ac5a2315c14e99b919626de4170687227" kindref="member">SCIPlpiGetSol</ref>(</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objval,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>stores<sp/>the<sp/>objective<sp/>value,<sp/>may<sp/>be<sp/>NULL<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primsol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>primal<sp/>solution<sp/>vector,<sp/>may<sp/>be<sp/>NULL<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dualsol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>dual<sp/>solution<sp/>vector,<sp/>may<sp/>be<sp/>NULL<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>activity<sp/>vector,<sp/>may<sp/>be<sp/>NULL<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>redcost<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>reduced<sp/>cost<sp/>vector,<sp/>may<sp/>be<sp/>NULL<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="975"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="980"><highlight class="comment">/**<sp/>gets<sp/>primal<sp/>ray<sp/>for<sp/>unbounded<sp/>LPs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981" refid="lpi__none_8c_1a2d3ab14c33312daf6f0c51e7eba4ae95" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a2d3ab14c33312daf6f0c51e7eba4ae95" kindref="member">SCIPlpiGetPrimalRay</ref>(</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ray<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>primal<sp/>ray<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="985"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="990"><highlight class="comment">/**<sp/>gets<sp/>dual<sp/>Farkas<sp/>proof<sp/>for<sp/>infeasibility<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991" refid="lpi__none_8c_1a54ee13d012fb992394c0828166c2fea3" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a54ee13d012fb992394c0828166c2fea3" kindref="member">SCIPlpiGetDualfarkas</ref>(</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dualfarkas<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>dual<sp/>Farkas<sp/>row<sp/>multipliers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="995"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/>assert(dualfarkas<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1001"><highlight class="comment">/**<sp/>gets<sp/>the<sp/>number<sp/>of<sp/>LP<sp/>iterations<sp/>of<sp/>the<sp/>last<sp/>solve<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002" refid="lpi__none_8c_1ae37bfbea024ddb8232827aeedc84afe0" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1ae37bfbea024ddb8232827aeedc84afe0" kindref="member">SCIPlpiGetIterations</ref>(</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>iterations<sp/>of<sp/>the<sp/>last<sp/>solve<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/>assert(iterations<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1012"><highlight class="comment">/**<sp/>gets<sp/>information<sp/>about<sp/>the<sp/>quality<sp/>of<sp/>an<sp/>LP<sp/>solution</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/>*<sp/><sp/>Such<sp/>information<sp/>is<sp/>usually<sp/>only<sp/>available,<sp/>if<sp/>also<sp/>a<sp/>(maybe<sp/>not<sp/>optimal)<sp/>solution<sp/>is<sp/>available.</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>LPI<sp/>should<sp/>return<sp/>SCIP_INVALID<sp/>for<sp/>@p<sp/>quality,<sp/>if<sp/>the<sp/>requested<sp/>quantity<sp/>is<sp/>not<sp/>available.</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017" refid="lpi__none_8c_1a83ddb586c09a37eea2e411f1271a32f6" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a83ddb586c09a37eea2e411f1271a32f6" kindref="member">SCIPlpiGetRealSolQuality</ref>(</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1ad43906673a9a8a661c5c454138207fc9" kindref="member">SCIP_LPSOLQUALITY</ref><sp/><sp/><sp/><sp/><sp/>qualityindicator,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>which<sp/>quality<sp/>should<sp/>be<sp/>returned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quality<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>quality<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/>assert(quality<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/>*quality<sp/>=<sp/><ref refid="def_8h_1a5e26fa263b7982578f3d3e3e8e876bbc" kindref="member">SCIP_INVALID</ref>;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1031"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/>*<sp/>LP<sp/>Basis<sp/>Methods</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1040"><highlight class="comment">/**@name<sp/>LP<sp/>Basis<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1041"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1043"><highlight class="comment">/**<sp/>gets<sp/>current<sp/>basis<sp/>status<sp/>for<sp/>columns<sp/>and<sp/>rows;<sp/>arrays<sp/>must<sp/>be<sp/>large<sp/>enough<sp/>to<sp/>store<sp/>the<sp/>basis<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044" refid="lpi__none_8c_1a258aa72f3b645b140c543f0fc7f3f37a" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a258aa72f3b645b140c543f0fc7f3f37a" kindref="member">SCIPlpiGetBase</ref>(</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>column<sp/>basis<sp/>status,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>row<sp/>basis<sp/>status,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1054"><highlight class="comment">/**<sp/>sets<sp/>current<sp/>basis<sp/>status<sp/>for<sp/>columns<sp/>and<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055" refid="lpi__none_8c_1a7d9cb745987d79fb87f60739a423c833" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a7d9cb745987d79fb87f60739a423c833" kindref="member">SCIPlpiSetBase</ref>(</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cstat,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>with<sp/>column<sp/>basis<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rstat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>with<sp/>row<sp/>basis<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/>assert(cstat<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/>assert(rstat<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1067"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>indices<sp/>of<sp/>the<sp/>basic<sp/>columns<sp/>and<sp/>rows;<sp/>basic<sp/>column<sp/>n<sp/>gives<sp/>value<sp/>n,<sp/>basic<sp/>row<sp/>m<sp/>gives<sp/>value<sp/>-1-m<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068" refid="lpi__none_8c_1ae40a43f062d28623d57653ddb4719fca" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1ae40a43f062d28623d57653ddb4719fca" kindref="member">SCIPlpiGetBasisInd</ref>(</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bind<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>basis<sp/>indices<sp/>ready<sp/>to<sp/>keep<sp/>number<sp/>of<sp/>rows<sp/>entries<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1077"><highlight class="comment">/**<sp/>get<sp/>dense<sp/>row<sp/>of<sp/>inverse<sp/>basis<sp/>matrix<sp/>B^-1</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>The<sp/>LP<sp/>interface<sp/>defines<sp/>slack<sp/>variables<sp/>to<sp/>have<sp/>coefficient<sp/>+1.<sp/>This<sp/>means<sp/>that<sp/>if,<sp/>internally,<sp/>the<sp/>LP<sp/>solver</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>a<sp/>-1<sp/>coefficient,<sp/>then<sp/>rows<sp/>associated<sp/>with<sp/>slacks<sp/>variables<sp/>whose<sp/>coefficient<sp/>is<sp/>-1,<sp/>should<sp/>be<sp/>negated;</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>also<sp/>the<sp/>explanation<sp/>in<sp/>lpi.h.</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083" refid="lpi__none_8c_1a9315c551e92d2caa54d42750f1f048cb" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a9315c551e92d2caa54d42750f1f048cb" kindref="member">SCIPlpiGetBInvRow</ref>(</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>coefficients<sp/>of<sp/>the<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>the<sp/>non-zero<sp/>indices,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ninds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>indices,<sp/>or<sp/>NULL</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>(-1:<sp/>if<sp/>we<sp/>do<sp/>not<sp/>store<sp/>sparsity<sp/>informations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1096"><highlight class="comment">/**<sp/>get<sp/>dense<sp/>column<sp/>of<sp/>inverse<sp/>basis<sp/>matrix<sp/>B^-1</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>The<sp/>LP<sp/>interface<sp/>defines<sp/>slack<sp/>variables<sp/>to<sp/>have<sp/>coefficient<sp/>+1.<sp/>This<sp/>means<sp/>that<sp/>if,<sp/>internally,<sp/>the<sp/>LP<sp/>solver</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>a<sp/>-1<sp/>coefficient,<sp/>then<sp/>rows<sp/>associated<sp/>with<sp/>slacks<sp/>variables<sp/>whose<sp/>coefficient<sp/>is<sp/>-1,<sp/>should<sp/>be<sp/>negated;</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>also<sp/>the<sp/>explanation<sp/>in<sp/>lpi.h.</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102" refid="lpi__none_8c_1a9dda3c2147cbb647cfb0b5d198407525" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a9dda3c2147cbb647cfb0b5d198407525" kindref="member">SCIPlpiGetBInvCol</ref>(</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>number<sp/>of<sp/>B^-1;<sp/>this<sp/>is<sp/>NOT<sp/>the<sp/>number<sp/>of<sp/>the<sp/>column<sp/>in<sp/>the<sp/>LP;</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>you<sp/>have<sp/>to<sp/>call<sp/>SCIPlpiGetBasisInd()<sp/>to<sp/>get<sp/>the<sp/>array<sp/>which<sp/>links<sp/>the</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>B^-1<sp/>column<sp/>numbers<sp/>to<sp/>the<sp/>row<sp/>and<sp/>column<sp/>numbers<sp/>of<sp/>the<sp/>LP!</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>c<sp/>must<sp/>be<sp/>between<sp/>0<sp/>and<sp/>nrows-1,<sp/>since<sp/>the<sp/>basis<sp/>has<sp/>the<sp/>size</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>nrows<sp/>*<sp/>nrows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>coefficients<sp/>of<sp/>the<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>the<sp/>non-zero<sp/>indices,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ninds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>indices,<sp/>or<sp/>NULL</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>(-1:<sp/>if<sp/>we<sp/>do<sp/>not<sp/>store<sp/>sparsity<sp/>informations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1119"><highlight class="comment">/**<sp/>get<sp/>dense<sp/>row<sp/>of<sp/>inverse<sp/>basis<sp/>matrix<sp/>times<sp/>constraint<sp/>matrix<sp/>B^-1<sp/>*<sp/>A</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>The<sp/>LP<sp/>interface<sp/>defines<sp/>slack<sp/>variables<sp/>to<sp/>have<sp/>coefficient<sp/>+1.<sp/>This<sp/>means<sp/>that<sp/>if,<sp/>internally,<sp/>the<sp/>LP<sp/>solver</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>a<sp/>-1<sp/>coefficient,<sp/>then<sp/>rows<sp/>associated<sp/>with<sp/>slacks<sp/>variables<sp/>whose<sp/>coefficient<sp/>is<sp/>-1,<sp/>should<sp/>be<sp/>negated;</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>also<sp/>the<sp/>explanation<sp/>in<sp/>lpi.h.</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125" refid="lpi__none_8c_1aa516aed02ad9b303b0d51eb0c7a66f5e" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1aa516aed02ad9b303b0d51eb0c7a66f5e" kindref="member">SCIPlpiGetBInvARow</ref>(</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>binvrow,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>row<sp/>in<sp/>(A_B)^-1<sp/>from<sp/>prior<sp/>call<sp/>to<sp/>SCIPlpiGetBInvRow(),<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>return<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>the<sp/>non-zero<sp/>indices,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ninds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>indices,<sp/>or<sp/>NULL</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>(-1:<sp/>if<sp/>we<sp/>do<sp/>not<sp/>store<sp/>sparsity<sp/>informations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1139"><highlight class="comment">/**<sp/>get<sp/>dense<sp/>column<sp/>of<sp/>inverse<sp/>basis<sp/>matrix<sp/>times<sp/>constraint<sp/>matrix<sp/>B^-1<sp/>*<sp/>A</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>The<sp/>LP<sp/>interface<sp/>defines<sp/>slack<sp/>variables<sp/>to<sp/>have<sp/>coefficient<sp/>+1.<sp/>This<sp/>means<sp/>that<sp/>if,<sp/>internally,<sp/>the<sp/>LP<sp/>solver</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>a<sp/>-1<sp/>coefficient,<sp/>then<sp/>rows<sp/>associated<sp/>with<sp/>slacks<sp/>variables<sp/>whose<sp/>coefficient<sp/>is<sp/>-1,<sp/>should<sp/>be<sp/>negated;</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>also<sp/>the<sp/>explanation<sp/>in<sp/>lpi.h.</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145" refid="lpi__none_8c_1a015f424e442e74e4526ca62bdab54de1" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a015f424e442e74e4526ca62bdab54de1" kindref="member">SCIPlpiGetBInvACol</ref>(</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>column<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>return<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>the<sp/>non-zero<sp/>indices,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ninds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>indices,<sp/>or<sp/>NULL</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>(-1:<sp/>if<sp/>we<sp/>do<sp/>not<sp/>store<sp/>sparsity<sp/>informations)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1158"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1164"><highlight class="comment"><sp/>*<sp/>LP<sp/>State<sp/>Methods</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1167"><highlight class="comment">/**@name<sp/>LP<sp/>State<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1168"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1170"><highlight class="comment">/**<sp/>stores<sp/>LPi<sp/>state<sp/>(like<sp/>basis<sp/>information)<sp/>into<sp/>lpistate<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171" refid="lpi__none_8c_1afe1bc961d0f91cad7222870724175e21" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1afe1bc961d0f91cad7222870724175e21" kindref="member">SCIPlpiGetState</ref>(</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>state<sp/>information<sp/>(like<sp/>basis<sp/>information)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/>assert(blkmem<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/>assert(lpistate<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1183"><highlight class="comment">/**<sp/>loads<sp/>LPi<sp/>state<sp/>(like<sp/>basis<sp/>information)<sp/>into<sp/>solver;<sp/>note<sp/>that<sp/>the<sp/>LP<sp/>might<sp/>have<sp/>been<sp/>extended<sp/>with<sp/>additional</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/>*<sp/><sp/>columns<sp/>and<sp/>rows<sp/>since<sp/>the<sp/>state<sp/>was<sp/>stored<sp/>with<sp/>SCIPlpiGetState()</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186" refid="lpi__none_8c_1a74e8e33e89ab5d8d4b490fe3c4a88c98" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a74e8e33e89ab5d8d4b490fe3c4a88c98" kindref="member">SCIPlpiSetState</ref>(</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LPi<sp/>state<sp/>information<sp/>(like<sp/>basis<sp/>information)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/>assert(blkmem<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1197"><highlight class="comment">/**<sp/>clears<sp/>current<sp/>LPi<sp/>state<sp/>(like<sp/>basis<sp/>information)<sp/>of<sp/>the<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198" refid="lpi__none_8c_1a1d56087500813e24687787cb90da5d93" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a1d56087500813e24687787cb90da5d93" kindref="member">SCIPlpiClearState</ref>(</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/>assert(lpi<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1206"><highlight class="comment">/**<sp/>frees<sp/>LPi<sp/>state<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207" refid="lpi__none_8c_1acfee2d2ea719f54192a11c1e80f5e61e" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1acfee2d2ea719f54192a11c1e80f5e61e" kindref="member">SCIPlpiFreeState</ref>(</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>state<sp/>information<sp/>(like<sp/>basis<sp/>information)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1216"><highlight class="comment">/**<sp/>checks,<sp/>whether<sp/>the<sp/>given<sp/>LP<sp/>state<sp/>contains<sp/>simplex<sp/>basis<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217" refid="lpi__none_8c_1a8cf134c068da15fe85dfad3d3d0aae2b" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a8cf134c068da15fe85dfad3d3d0aae2b" kindref="member">SCIPlpiHasStateBasis</ref>(</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a90d877c948164ab5e3beb0f3e1070693" kindref="member">SCIP_LPISTATE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpistate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>state<sp/>information<sp/>(like<sp/>basis<sp/>information)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/>errorMessageAbort();</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1226"><highlight class="comment">/**<sp/>reads<sp/>LP<sp/>state<sp/>(like<sp/>basis<sp/>information<sp/>from<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227" refid="lpi__none_8c_1a29c773d7e7763517c0952b9eee9ed7ec" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a29c773d7e7763517c0952b9eee9ed7ec" kindref="member">SCIPlpiReadState</ref>(</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1236"><highlight class="comment">/**<sp/>writes<sp/>LP<sp/>state<sp/>(like<sp/>basis<sp/>information)<sp/>to<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237" refid="lpi__none_8c_1a6b360b8eb706948179cc3b46fa4df372" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a6b360b8eb706948179cc3b46fa4df372" kindref="member">SCIPlpiWriteState</ref>(</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1246"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/>*<sp/>LP<sp/>Pricing<sp/>Norms<sp/>Methods</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1255"><highlight class="comment">/**@name<sp/>LP<sp/>Pricing<sp/>Norms<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1256"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1258"><highlight class="comment">/**<sp/>stores<sp/>LPi<sp/>pricing<sp/>norms<sp/>information</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>should<sp/>we<sp/>store<sp/>norm<sp/>information?</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261" refid="lpi__none_8c_1a868706bb40dc3fdeb76e81c56c1c4d31" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a868706bb40dc3fdeb76e81c56c1c4d31" kindref="member">SCIPlpiGetNorms</ref>(</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><ref refid="structSCIP__LPiNorms" kindref="compound">SCIP_LPINORMS</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpinorms<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>pricing<sp/>norms<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1271"><highlight class="comment">/**<sp/>loads<sp/>LPi<sp/>pricing<sp/>norms<sp/>into<sp/>solver;<sp/>note<sp/>that<sp/>the<sp/>LP<sp/>might<sp/>have<sp/>been<sp/>extended<sp/>with<sp/>additional</highlight></codeline>
<codeline lineno="1272"><highlight class="comment"><sp/>*<sp/><sp/>columns<sp/>and<sp/>rows<sp/>since<sp/>the<sp/>state<sp/>was<sp/>stored<sp/>with<sp/>SCIPlpiGetNorms()</highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274" refid="lpi__none_8c_1ad619ad2a4e65223449f5ab635985b70b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1ad619ad2a4e65223449f5ab635985b70b" kindref="member">SCIPlpiSetNorms</ref>(</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><ref refid="structSCIP__LPiNorms" kindref="compound">SCIP_LPINORMS</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpinorms<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LPi<sp/>pricing<sp/>norms<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1284"><highlight class="comment">/**<sp/>frees<sp/>pricing<sp/>norms<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285" refid="lpi__none_8c_1a640477b756ddb94827c1a4e5e3721d38" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a640477b756ddb94827c1a4e5e3721d38" kindref="member">SCIPlpiFreeNorms</ref>(</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><ref refid="structSCIP__LPiNorms" kindref="compound">SCIP_LPINORMS</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpinorms<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>LPi<sp/>pricing<sp/>norms<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1295"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/>*<sp/>Parameter<sp/>Methods</highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1304"><highlight class="comment">/**@name<sp/>Parameter<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1305"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1307"><highlight class="comment">/**<sp/>gets<sp/>integer<sp/>parameter<sp/>of<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308" refid="lpi__none_8c_1a2d82a67789be908b161295f41d02ba8b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a2d82a67789be908b161295f41d02ba8b" kindref="member">SCIPlpiGetIntpar</ref>(</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>parameter<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/>assert(ival<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" kindref="member">SCIP_PARAMETERUNKNOWN</ref>;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1318"><highlight class="comment">/**<sp/>sets<sp/>integer<sp/>parameter<sp/>of<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319" refid="lpi__none_8c_1a8dac6dec76901acef9c18397582c5e9a" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a8dac6dec76901acef9c18397582c5e9a" kindref="member">SCIPlpiSetIntpar</ref>(</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" kindref="member">SCIP_PARAMETERUNKNOWN</ref>;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1328"><highlight class="comment">/**<sp/>gets<sp/>floating<sp/>point<sp/>parameter<sp/>of<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329" refid="lpi__none_8c_1a07259db5fb0599d063fa4973dc3d5d8e" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a07259db5fb0599d063fa4973dc3d5d8e" kindref="member">SCIPlpiGetRealpar</ref>(</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>parameter<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/>assert(dval<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" kindref="member">SCIP_PARAMETERUNKNOWN</ref>;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1339"><highlight class="comment">/**<sp/>sets<sp/>floating<sp/>point<sp/>parameter<sp/>of<sp/>LP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340" refid="lpi__none_8c_1a468d983f0e77aa23e9563d4c1c1e3db8" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a468d983f0e77aa23e9563d4c1c1e3db8" kindref="member">SCIPlpiSetRealpar</ref>(</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a845842b094eba8ce0cf0821e82b4d67a" kindref="member">SCIP_LPPARAM</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>parameter<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da60ca3960305c3dc0d3c141448cbed401" kindref="member">SCIP_PARAMETERUNKNOWN</ref>;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1349"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1352"><highlight class="comment"><sp/>*<sp/>Numerical<sp/>Methods</highlight></codeline>
<codeline lineno="1353"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1355"><highlight class="comment">/**@name<sp/>Numerical<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1356"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1358"><highlight class="comment">/**<sp/>returns<sp/>value<sp/>treated<sp/>as<sp/>infinity<sp/>in<sp/>the<sp/>LP<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359" refid="lpi__none_8c_1a0b732c1d334aa020a4745e550adad4a5" refkind="member"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="lpi__none_8c_1a0b732c1d334aa020a4745e550adad4a5" kindref="member">SCIPlpiInfinity</ref>(</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lpi__none_8c_1ac6db33602b64d29282acc04b4733b868" kindref="member">LPIINFINITY</ref>;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1366"><highlight class="comment">/**<sp/>checks<sp/>if<sp/>given<sp/>value<sp/>is<sp/>treated<sp/>as<sp/>infinity<sp/>in<sp/>the<sp/>LP<sp/>solver<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367" refid="lpi__none_8c_1a1773cc8c068cde1f8bb0b8ba99277878" refkind="member"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="lpi__none_8c_1a1773cc8c068cde1f8bb0b8ba99277878" kindref="member">SCIPlpiIsInfinity</ref>(</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>to<sp/>be<sp/>checked<sp/>for<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1371"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>val<sp/>&gt;=<sp/><ref refid="lpi__none_8c_1ac6db33602b64d29282acc04b4733b868" kindref="member">LPIINFINITY</ref><sp/>)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1377"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1383"><highlight class="comment"><sp/>*<sp/>File<sp/>Interface<sp/>Methods</highlight></codeline>
<codeline lineno="1384"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1386"><highlight class="comment">/**@name<sp/>File<sp/>Interface<sp/>Methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1387"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1389"><highlight class="comment">/**<sp/>reads<sp/>LP<sp/>from<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390" refid="lpi__none_8c_1a83b58a451300ba484bb9314b35edc63f" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a83b58a451300ba484bb9314b35edc63f" kindref="member">SCIPlpiReadLP</ref>(</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1394"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1399"><highlight class="comment">/**<sp/>writes<sp/>LP<sp/>to<sp/>a<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400" refid="lpi__none_8c_1a311a14142841041e24d522b281124f57" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="lpi__none_8c_1a311a14142841041e24d522b281124f57" kindref="member">SCIPlpiWriteLP</ref>(</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__lpi_8h_1a95450814c277697516678287134c5e8e" kindref="member">SCIP_LPI</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LP<sp/>interface<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fname<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>name<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/>errorMessage();</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da5a46da6c17a8705ac5f302826d4267ab" kindref="member">SCIP_PLUGINNOTFOUND</ref>;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1409"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/lpi/lpi_none.c"/>
  </compounddef>
</doxygen>
