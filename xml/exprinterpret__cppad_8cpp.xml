<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="exprinterpret__cppad_8cpp" kind="file" language="C++">
    <compoundname>exprinterpret_cppad.cpp</compoundname>
    <includes refid="def_8h" local="yes">scip/def.h</includes>
    <includes local="yes">blockmemshell/memory.h</includes>
    <includes refid="pub__expr_8h" local="yes">nlpi/pub_expr.h</includes>
    <includes refid="exprinterpret_8h" local="yes">nlpi/exprinterpret.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">vector</includes>
    <includes local="yes">nlpi/intervalarithext.h</includes>
    <includes local="no">cppad/cppad.hpp</includes>
    <includes local="no">cppad/error_handler.hpp</includes>
    <includes local="no">pthread.h</includes>
    <incdepgraph>
      <node id="3872">
        <label>stdarg.h</label>
      </node>
      <node id="3876">
        <label>scip/intervalarith.h</label>
      </node>
      <node id="3862">
        <label>exprinterpret_cppad.cpp</label>
        <link refid="exprinterpret_cppad.cpp"/>
        <childnode refid="3863" relation="include">
        </childnode>
        <childnode refid="3874" relation="include">
        </childnode>
        <childnode refid="3875" relation="include">
        </childnode>
        <childnode refid="3879" relation="include">
        </childnode>
        <childnode refid="3880" relation="include">
        </childnode>
        <childnode refid="3881" relation="include">
        </childnode>
        <childnode refid="3882" relation="include">
        </childnode>
        <childnode refid="3883" relation="include">
        </childnode>
        <childnode refid="3884" relation="include">
        </childnode>
        <childnode refid="3885" relation="include">
        </childnode>
      </node>
      <node id="3869">
        <label>assert.h</label>
      </node>
      <node id="3868">
        <label>float.h</label>
      </node>
      <node id="3865">
        <label>stdint.h</label>
      </node>
      <node id="3880">
        <label>cmath</label>
      </node>
      <node id="3883">
        <label>cppad/cppad.hpp</label>
      </node>
      <node id="3884">
        <label>cppad/error_handler.hpp</label>
      </node>
      <node id="3863">
        <label>scip/def.h</label>
        <link refid="def_8h"/>
        <childnode refid="3864" relation="include">
        </childnode>
        <childnode refid="3865" relation="include">
        </childnode>
        <childnode refid="3866" relation="include">
        </childnode>
        <childnode refid="3867" relation="include">
        </childnode>
        <childnode refid="3868" relation="include">
        </childnode>
        <childnode refid="3869" relation="include">
        </childnode>
        <childnode refid="3870" relation="include">
        </childnode>
        <childnode refid="3871" relation="include">
        </childnode>
      </node>
      <node id="3867">
        <label>limits.h</label>
      </node>
      <node id="3879">
        <label>nlpi/exprinterpret.h</label>
        <link refid="exprinterpret_8h"/>
        <childnode refid="3863" relation="include">
        </childnode>
        <childnode refid="3874" relation="include">
        </childnode>
        <childnode refid="3877" relation="include">
        </childnode>
        <childnode refid="3878" relation="include">
        </childnode>
        <childnode refid="3876" relation="include">
        </childnode>
      </node>
      <node id="3877">
        <label>nlpi/type_expr.h</label>
        <link refid="type__expr_8h"/>
      </node>
      <node id="3885">
        <label>pthread.h</label>
      </node>
      <node id="3881">
        <label>vector</label>
      </node>
      <node id="3875">
        <label>nlpi/pub_expr.h</label>
        <link refid="pub__expr_8h"/>
        <childnode refid="3863" relation="include">
        </childnode>
        <childnode refid="3871" relation="include">
        </childnode>
        <childnode refid="3876" relation="include">
        </childnode>
        <childnode refid="3874" relation="include">
        </childnode>
        <childnode refid="3877" relation="include">
        </childnode>
        <childnode refid="3878" relation="include">
        </childnode>
      </node>
      <node id="3882">
        <label>nlpi/intervalarithext.h</label>
      </node>
      <node id="3878">
        <label>nlpi/type_exprinterpret.h</label>
        <link refid="type__exprinterpret_8h"/>
      </node>
      <node id="3866">
        <label>math.h</label>
      </node>
      <node id="3874">
        <label>blockmemshell/memory.h</label>
      </node>
      <node id="3870">
        <label>scip/type_retcode.h</label>
        <link refid="type__retcode_8h"/>
      </node>
      <node id="3871">
        <label>scip/pub_message.h</label>
        <link refid="pub__message_8h"/>
        <childnode refid="3872" relation="include">
        </childnode>
        <childnode refid="3863" relation="include">
        </childnode>
        <childnode refid="3873" relation="include">
        </childnode>
      </node>
      <node id="3873">
        <label>scip/type_message.h</label>
        <link refid="type__message_8h"/>
        <childnode refid="3864" relation="include">
        </childnode>
      </node>
      <node id="3864">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classatomic__posintpower" prot="public">atomic_posintpower</innerclass>
    <innerclass refid="classatomic__signpower" prot="public">atomic_signpower</innerclass>
    <innerclass refid="classatomic__signpower_3_01SCIPInterval_01_4" prot="public">atomic_signpower&lt; SCIPInterval &gt;</innerclass>
    <innerclass refid="classatomic__userexpr" prot="public">atomic_userexpr</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="exprinterpret__cppad_8cpp_1a8c5ff70b6b28cd0157c50a22406f92c4" prot="public" static="no">
        <name>SIGN</name>
        <param><defname>x</defname></param>
        <initializer>((x) &gt;= 0.0 ? 1.0 : -1.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sign of a value (-1 or +1)</para><para>0.0 has sign +1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="56" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="exprinterpret__cppad_8cpp_1ac553d3acdc14013d2464ff17bdf09918" prot="public" static="no">
        <name>SCIPInterval_NAMESPACE</name>
        <initializer>CppAD</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="60" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="exprinterpret__cppad_8cpp_1a3b5d9a3ffec073d12687214dbe2e4bda" prot="public" static="no">
        <name>CPPAD_MAX_NUM_THREADS</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="71" column="9" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="exprinterpret__cppad_8cpp_1a37d9501b3456091a80579e6e49824592" prot="public" static="yes" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>pthread_mutex_t cppadmutex</definition>
        <argsstring></argsstring>
        <name>cppadmutex</name>
        <initializer>= PTHREAD_MUTEX_INITIALIZER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>mutex for locking in pthread case </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="108" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="exprinterpret__cppad_8cpp_1a813face7d6a82fa11d41ab0738e7b4f1" prot="public" static="yes" mutable="no">
        <type>pthread_key_t</type>
        <definition>pthread_key_t thread_specific_key</definition>
        <argsstring></argsstring>
        <name>thread_specific_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>key for accessing thread specific information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="111" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="exprinterpret__cppad_8cpp_1a302faf5d74cb325eb1bd7d577cf159c2" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t ncurthreads</definition>
        <argsstring></argsstring>
        <name>ncurthreads</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>currently registered number of threads </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="114" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="exprinterpret__cppad_8cpp_1ae262f9957eefe8ae208eaa3f05cf42be" prot="public" static="yes" mutable="no">
        <type>char</type>
        <definition>char init_parallel_return</definition>
        <argsstring></argsstring>
        <name>init_parallel_return</name>
        <initializer>= init_parallel()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>a dummy variable that can is initialized to the result of init_parallel</para><para>The purpose is to make sure that init_parallel() is called before any multithreading is started. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="185" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1ac080b7df8fc0916fe0d86b31840b549c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool in_parallel</definition>
        <argsstring>(void)</argsstring>
        <name>in_parallel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CppAD callback function that indicates whether we are running in parallel mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="118" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a2c9e8fa3f9a72701c15b5ec8b4247102" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t thread_num</definition>
        <argsstring>(void)</argsstring>
        <name>thread_num</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CppAD callback function that returns the number of the current thread</para><para>assigns a new number to the thread if new </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="128" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="128" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1aa33c3fc2868c5516041c044210352813" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>static char init_parallel</definition>
        <argsstring>(void)</argsstring>
        <name>init_parallel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets up CppAD&apos;s datastructures for running in multithreading mode</para><para>It must be called once before multithreading is started. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="170" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="170" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1ae821bfe3e7e40674abc319681df0e944" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SCIPInterval</type>
        <definition>SCIPInterval CondExpOp</definition>
        <argsstring>(enum CppAD::CompareOp cop, const SCIPInterval &amp;left, const SCIPInterval &amp;right, const SCIPInterval &amp;trueCase, const SCIPInterval &amp;falseCase)</argsstring>
        <name>CondExpOp</name>
        <param>
          <type>enum CppAD::CompareOp</type>
          <declname>cop</declname>
        </param>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>trueCase</declname>
        </param>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>falseCase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>definition of CondExpOp for SCIPInterval (required by CppAD) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="191" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="191" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a7e581bf436df1ee06426c29b5345bca3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool EqualOpSeq</definition>
        <argsstring>(const SCIPInterval &amp;x, const SCIPInterval &amp;y)</argsstring>
        <name>EqualOpSeq</name>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>x</declname>
          <briefdescription><para>first operand </para></briefdescription>
        </param>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>y</declname>
          <briefdescription><para>second operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>another function that returns whether two intervals are the same (required by CppAD) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="208" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="208" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a346918acbda8013852b333d86e9c6f36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IdenticalPar</definition>
        <argsstring>(const SCIPInterval &amp;x)</argsstring>
        <name>IdenticalPar</name>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>x</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>another function required by CppAD </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="218" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="218" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a87b08dbfb5d5f171325d0978bc7ba128" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IdenticalZero</definition>
        <argsstring>(const SCIPInterval &amp;x)</argsstring>
        <name>IdenticalZero</name>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>x</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the interval equals [0,0] </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="227" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="227" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1ad166d12ff16a3153e9a23bcaf0cd2535" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IdenticalOne</definition>
        <argsstring>(const SCIPInterval &amp;x)</argsstring>
        <name>IdenticalOne</name>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>x</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the interval equals [1,1] </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="236" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a1f191da11f26f8aeed424fc3e46828a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool IdenticalEqualPar</definition>
        <argsstring>(const SCIPInterval &amp;x, const SCIPInterval &amp;y)</argsstring>
        <name>IdenticalEqualPar</name>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>x</declname>
          <briefdescription><para>first operand </para></briefdescription>
        </param>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>y</declname>
          <briefdescription><para>second operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>yet another function that checks whether two intervals are equal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="245" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="245" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1ad24ec6b1ceee23cc00bd3cb4f1b60d31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GreaterThanZero</definition>
        <argsstring>(const SCIPInterval &amp;x)</argsstring>
        <name>GreaterThanZero</name>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>x</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>greater than zero not defined for intervals </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="255" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="255" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a30a2aa3135da3983d707eb6e57cab1aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool GreaterThanOrZero</definition>
        <argsstring>(const SCIPInterval &amp;x)</argsstring>
        <name>GreaterThanOrZero</name>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>x</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>greater than or equal zero not defined for intervals </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="269" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="269" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a96206822b49249fba43d46f60c85f060" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool LessThanZero</definition>
        <argsstring>(const SCIPInterval &amp;x)</argsstring>
        <name>LessThanZero</name>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>x</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>less than not defined for intervals </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="283" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="283" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a1da655f002979b14772f94715f481d5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool LessThanOrZero</definition>
        <argsstring>(const SCIPInterval &amp;x)</argsstring>
        <name>LessThanOrZero</name>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>x</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>less than or equal not defined for intervals </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="297" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="297" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a914cab8d482692a04fce0b31077b6204" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int Integer</definition>
        <argsstring>(const SCIPInterval &amp;x)</argsstring>
        <name>Integer</name>
        <param>
          <type>const SCIPInterval &amp;</type>
          <declname>x</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>conversion to integers not defined for intervals </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="311" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="311" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a2aa292b33a64d3b41bef4cf4fed5c15f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const SCIP_INTERVAL &amp;x)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const SCIP_INTERVAL &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>printing of an interval (required by CppAD) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="325" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="325" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1ac573933ad7bbb31260534e6991b6c2b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool univariate_for_sparse_jac</definition>
        <argsstring>(size_t q, const CppAD::vector&lt; bool &gt; &amp;r, CppAD::vector&lt; bool &gt; &amp;s)</argsstring>
        <name>univariate_for_sparse_jac</name>
        <param>
          <type>size_t</type>
          <declname>q</declname>
          <briefdescription><para>number of columns in R </para></briefdescription>
        </param>
        <param>
          <type>const CppAD::vector&lt; bool &gt; &amp;</type>
          <declname>r</declname>
          <briefdescription><para>sparsity of R, columnwise </para></briefdescription>
        </param>
        <param>
          <type>CppAD::vector&lt; bool &gt; &amp;</type>
          <declname>s</declname>
          <briefdescription><para>vector to store sparsity of S, columnwise </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes sparsity of jacobian for a univariate function during a forward sweep</para><para>For a 1 x q matrix R, we have to return the sparsity pattern of the 1 x q matrix S(x) = f&apos;(x) * R. Since f&apos;(x) is dense, the sparsity of S will be the sparsity of R. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="383" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="383" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a5110a529549895768be3c9eb78fe6e48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool univariate_rev_sparse_jac</definition>
        <argsstring>(size_t q, const CppAD::vector&lt; bool &gt; &amp;r, CppAD::vector&lt; bool &gt; &amp;s)</argsstring>
        <name>univariate_rev_sparse_jac</name>
        <param>
          <type>size_t</type>
          <declname>q</declname>
          <briefdescription><para>number of rows in R </para></briefdescription>
        </param>
        <param>
          <type>const CppAD::vector&lt; bool &gt; &amp;</type>
          <declname>r</declname>
          <briefdescription><para>sparsity of R, rowwise </para></briefdescription>
        </param>
        <param>
          <type>CppAD::vector&lt; bool &gt; &amp;</type>
          <declname>s</declname>
          <briefdescription><para>vector to store sparsity of S, rowwise </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes sparsity of jacobian during a reverse sweep</para><para>For a q x 1 matrix R, we have to return the sparsity pattern of the q x 1 matrix S(x) = R * f&apos;(x). Since f&apos;(x) is dense, the sparsity of S will be the sparsity of R. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="403" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="403" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1ae00072b28a782b832e02ad368e9a4526" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool univariate_rev_sparse_hes</definition>
        <argsstring>(const CppAD::vector&lt; bool &gt; &amp;vx, const CppAD::vector&lt; bool &gt; &amp;s, CppAD::vector&lt; bool &gt; &amp;t, size_t q, const CppAD::vector&lt; bool &gt; &amp;r, const CppAD::vector&lt; bool &gt; &amp;u, CppAD::vector&lt; bool &gt; &amp;v)</argsstring>
        <name>univariate_rev_sparse_hes</name>
        <param>
          <type>const CppAD::vector&lt; bool &gt; &amp;</type>
          <declname>vx</declname>
          <briefdescription><para>indicates whether argument is a variable, or empty vector </para></briefdescription>
        </param>
        <param>
          <type>const CppAD::vector&lt; bool &gt; &amp;</type>
          <declname>s</declname>
          <briefdescription><para>sparsity pattern of S = g&apos;(y) </para></briefdescription>
        </param>
        <param>
          <type>CppAD::vector&lt; bool &gt; &amp;</type>
          <declname>t</declname>
          <briefdescription><para>vector to store sparsity pattern of T(x) = (g(f(x)))&apos; </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>q</declname>
          <briefdescription><para>number of columns in R, U, and V </para></briefdescription>
        </param>
        <param>
          <type>const CppAD::vector&lt; bool &gt; &amp;</type>
          <declname>r</declname>
          <briefdescription><para>sparsity pattern of R </para></briefdescription>
        </param>
        <param>
          <type>const CppAD::vector&lt; bool &gt; &amp;</type>
          <declname>u</declname>
          <briefdescription><para>sparsity pattern of U(x) = g&apos;&apos;(f(x)) f&apos;(x) R </para></briefdescription>
        </param>
        <param>
          <type>CppAD::vector&lt; bool &gt; &amp;</type>
          <declname>v</declname>
          <briefdescription><para>vector to store sparsity pattern of V(x) = (g(f(x)))&apos;&apos; R </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes sparsity of hessian during a reverse sweep</para><para>Assume V(x) = (g(f(x)))&apos;&apos; R with f(x) = x^p for a function g:R-&gt;R and a matrix R. we have to specify the sparsity pattern of V(x) and T(x) = (g(f(x)))&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="423" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="423" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1ac60944b5539bb1cc250207dcc9fdc252" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void posintpower</definition>
        <argsstring>(const vector&lt; Type &gt; &amp;in, vector&lt; Type &gt; &amp;out, size_t exponent)</argsstring>
        <name>posintpower</name>
        <param>
          <type>const vector&lt; Type &gt; &amp;</type>
          <declname>in</declname>
          <briefdescription><para>vector which first argument is base </para></briefdescription>
        </param>
        <param>
          <type>vector&lt; Type &gt; &amp;</type>
          <declname>out</declname>
          <briefdescription><para>vector where to store result in first argument </para></briefdescription>
        </param>
        <param>
          <type>size_t</type>
          <declname>exponent</declname>
          <briefdescription><para>exponent </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>power function with natural exponents </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="682" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="682" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a82d0a7d667c9bc885d497fd38b913c6d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void evalSignPower</definition>
        <argsstring>(Type &amp;resultant, const Type &amp;arg, SCIP_EXPR *expr)</argsstring>
        <name>evalSignPower</name>
        <param>
          <type>Type &amp;</type>
          <declname>resultant</declname>
          <briefdescription><para>resultant </para></briefdescription>
        </param>
        <param>
          <type>const Type &amp;</type>
          <declname>arg</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression that holds the exponent </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>template for evaluation for signpower operator </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1149" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1149" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a7249a011bd8fb4cbd9b07615f61c2c1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE exprEvalUser</definition>
        <argsstring>(SCIP_EXPR *expr, Type *x, Type &amp;funcval, Type *gradient, Type *hessian)</argsstring>
        <name>exprEvalUser</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>Type *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Type &amp;</type>
          <declname>funcval</declname>
        </param>
        <param>
          <type>Type *</type>
          <declname>gradient</declname>
        </param>
        <param>
          <type>Type *</type>
          <declname>hessian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1211" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1211" bodyend="1220"/>
        <references refid="pub__expr_8h_1aa69db41492c7cb0a74cdf1604d7d6620">SCIPexprEvalUser</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a50548a834bc1b1f3f8a3e55176319772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE exprEvalUser</definition>
        <argsstring>(SCIP_EXPR *expr, SCIPInterval *x, SCIPInterval &amp;funcval, SCIPInterval *gradient, SCIPInterval *hessian)</argsstring>
        <name>exprEvalUser</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>SCIPInterval *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>SCIPInterval &amp;</type>
          <declname>funcval</declname>
        </param>
        <param>
          <type>SCIPInterval *</type>
          <declname>gradient</declname>
        </param>
        <param>
          <type>SCIPInterval *</type>
          <declname>hessian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1223" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1223" bodyend="1232"/>
        <references refid="pub__expr_8h_1a367ccd05f678dcdaf5cfe5242fe3e82e">SCIPexprEvalIntUser</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1aa10d900bffe115ebf78077c546c288b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void evalUser</definition>
        <argsstring>(Type &amp;resultant, const Type *args, SCIP_EXPR *expr)</argsstring>
        <name>evalUser</name>
        <param>
          <type>Type &amp;</type>
          <declname>resultant</declname>
          <briefdescription><para>resultant </para></briefdescription>
        </param>
        <param>
          <type>const Type *</type>
          <declname>args</declname>
          <briefdescription><para>operands </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression that holds the user expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1600" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1600" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a63545d991bf97a3d608a6fc181cd8ba4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void evalMin</definition>
        <argsstring>(Type &amp;resultant, const Type &amp;arg1, const Type &amp;arg2)</argsstring>
        <name>evalMin</name>
        <param>
          <type>Type &amp;</type>
          <declname>resultant</declname>
          <briefdescription><para>resultant </para></briefdescription>
        </param>
        <param>
          <type>const Type &amp;</type>
          <declname>arg1</declname>
          <briefdescription><para>first operand </para></briefdescription>
        </param>
        <param>
          <type>const Type &amp;</type>
          <declname>arg2</declname>
          <briefdescription><para>second operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>template for evaluation for minimum operator</para><para>Only implemented for real numbers, thus gives error by default.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1642" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1642" bodyend="1652"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a29d2a2c50c0c8fae2ed312294b9d4872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void evalMin</definition>
        <argsstring>(CppAD::AD&lt; double &gt; &amp;resultant, const CppAD::AD&lt; double &gt; &amp;arg1, const CppAD::AD&lt; double &gt; &amp;arg2)</argsstring>
        <name>evalMin</name>
        <param>
          <type>CppAD::AD&lt; double &gt; &amp;</type>
          <declname>resultant</declname>
          <briefdescription><para>resultant </para></briefdescription>
        </param>
        <param>
          <type>const CppAD::AD&lt; double &gt; &amp;</type>
          <declname>arg1</declname>
          <briefdescription><para>first operand </para></briefdescription>
        </param>
        <param>
          <type>const CppAD::AD&lt; double &gt; &amp;</type>
          <declname>arg2</declname>
          <briefdescription><para>second operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>specialization of minimum evaluation for real numbers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1656" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1656" bodyend="1663"/>
        <references refid="def_8h_1a74e75242132eaabbc1c512488a135926" compoundref="def_8h" startline="175">MIN</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1aa3ac8b60619bb4da0259b7eb6ffa5651" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void evalMax</definition>
        <argsstring>(Type &amp;resultant, const Type &amp;arg1, const Type &amp;arg2)</argsstring>
        <name>evalMax</name>
        <param>
          <type>Type &amp;</type>
          <declname>resultant</declname>
          <briefdescription><para>resultant </para></briefdescription>
        </param>
        <param>
          <type>const Type &amp;</type>
          <declname>arg1</declname>
          <briefdescription><para>first operand </para></briefdescription>
        </param>
        <param>
          <type>const Type &amp;</type>
          <declname>arg2</declname>
          <briefdescription><para>second operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>template for evaluation for maximum operator</para><para>Only implemented for real numbers, thus gives error by default.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1672" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1672" bodyend="1682"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a21cd725b0516cc3639c0bfbf134c96ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void evalMax</definition>
        <argsstring>(CppAD::AD&lt; double &gt; &amp;resultant, const CppAD::AD&lt; double &gt; &amp;arg1, const CppAD::AD&lt; double &gt; &amp;arg2)</argsstring>
        <name>evalMax</name>
        <param>
          <type>CppAD::AD&lt; double &gt; &amp;</type>
          <declname>resultant</declname>
          <briefdescription><para>resultant </para></briefdescription>
        </param>
        <param>
          <type>const CppAD::AD&lt; double &gt; &amp;</type>
          <declname>arg1</declname>
          <briefdescription><para>first operand </para></briefdescription>
        </param>
        <param>
          <type>const CppAD::AD&lt; double &gt; &amp;</type>
          <declname>arg2</declname>
          <briefdescription><para>second operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>specialization of maximum evaluation for real numbers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1686" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1686" bodyend="1693"/>
        <references refid="def_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" compoundref="def_8h" startline="174">MAX</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1ab9598b18fce35ebdc0c5e6bd82bbb071" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void evalSqrt</definition>
        <argsstring>(Type &amp;resultant, const Type &amp;arg)</argsstring>
        <name>evalSqrt</name>
        <param>
          <type>Type &amp;</type>
          <declname>resultant</declname>
          <briefdescription><para>resultant </para></briefdescription>
        </param>
        <param>
          <type>const Type &amp;</type>
          <declname>arg</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>template for evaluation for square-root operator</para><para>Default is to use the standard sqrt-function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1701" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1701" bodyend="1707"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a4b284ac7734521a04bc8ce64bbb2b274" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void evalAbs</definition>
        <argsstring>(Type &amp;resultant, const Type &amp;arg)</argsstring>
        <name>evalAbs</name>
        <param>
          <type>Type &amp;</type>
          <declname>resultant</declname>
          <briefdescription><para>resultant </para></briefdescription>
        </param>
        <param>
          <type>const Type &amp;</type>
          <declname>arg</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>template for evaluation for absolute value operator </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1712" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1712" bodyend="1718"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a483dc283c04314aaaddb6e1b1fbe3fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void evalAbs</definition>
        <argsstring>(CppAD::AD&lt; SCIPInterval &gt; &amp;resultant, const CppAD::AD&lt; SCIPInterval &gt; &amp;arg)</argsstring>
        <name>evalAbs</name>
        <param>
          <type>CppAD::AD&lt; SCIPInterval &gt; &amp;</type>
          <declname>resultant</declname>
          <briefdescription><para>resultant </para></briefdescription>
        </param>
        <param>
          <type>const CppAD::AD&lt; SCIPInterval &gt; &amp;</type>
          <declname>arg</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>specialization of absolute value evaluation for intervals</para><para>Use sqrt(x^2) for now </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1725" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1725" bodyend="1736"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1aa5fe2d8974e2e467246f742158efc158" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void evalIntPower</definition>
        <argsstring>(Type &amp;resultant, const Type &amp;arg, const int exponent)</argsstring>
        <name>evalIntPower</name>
        <param>
          <type>Type &amp;</type>
          <declname>resultant</declname>
          <briefdescription><para>resultant </para></briefdescription>
        </param>
        <param>
          <type>const Type &amp;</type>
          <declname>arg</declname>
          <briefdescription><para>operand </para></briefdescription>
        </param>
        <param>
          <type>const int</type>
          <declname>exponent</declname>
          <briefdescription><para>exponent </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>integer power operation for arbitrary integer exponents </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1741" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1741" bodyend="1783"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a33c3512a1467cfc16c913a113121548d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>static SCIP_RETCODE eval</definition>
        <argsstring>(SCIP_EXPR *expr, const vector&lt; Type &gt; &amp;x, SCIP_Real *param, Type &amp;val)</argsstring>
        <name>eval</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <param>
          <type>const vector&lt; Type &gt; &amp;</type>
          <declname>x</declname>
          <briefdescription><para>values of variables </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>param</declname>
          <briefdescription><para>values of parameters </para></briefdescription>
        </param>
        <param>
          <type>Type &amp;</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store expression value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CppAD compatible evaluation of an expression for given arguments and parameters </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="1788" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="1788" bodyend="2096"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1af3cbe40f252c21e7b7d289efbc48ddc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void analyzeTree</definition>
        <argsstring>(SCIP_EXPRINTDATA *data, SCIP_EXPR *expr)</argsstring>
        <name>analyzeTree</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>analysis an expression tree whether it requires retaping on every evaluation</para><para>This may be the case if the evaluation sequence depends on values of operands (e.g., in case of abs, sign, signpower, ...). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2103" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2103" bodyend="2132"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a8d8642468816f041b3c3da109f43e4ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cppaderrorcallback</definition>
        <argsstring>(bool known, int line, const char *file, const char *cond, const char *msg)</argsstring>
        <name>cppaderrorcallback</name>
        <param>
          <type>bool</type>
          <declname>known</declname>
          <briefdescription><para>is the error from a known source? </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
          <briefdescription><para>line where error occured </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
          <briefdescription><para>file where error occured </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>cond</declname>
          <briefdescription><para>error condition </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
          <briefdescription><para>error message </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>replacement for CppAD&apos;s default error handler</para><para>In debug mode, CppAD gives an error when an evaluation contains a nan. We do not want to stop execution in such a case, since the calling routine should check for nan&apos;s and decide what to do. Since we cannot ignore this particular error, we ignore all.  </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2142" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2142" bodyend="2151"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a4a3026ce1d9ef5e410b63ddf09000315" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CppAD::ErrorHandler</type>
        <definition>static CppAD::ErrorHandler errorhandler</definition>
        <argsstring>(cppaderrorcallback)</argsstring>
        <name>errorhandler</name>
        <param>
          <type>cppaderrorcallback</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1aab5927c86d34c9735d6141e735519a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SCIPexprintGetName</definition>
        <argsstring>(void)</argsstring>
        <name>SCIPexprintGetName</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets name and version of expression interpreter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2157" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2157" bodyend="2160"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a4addf369b73a9b708e099bf7a4e83f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SCIPexprintGetDesc</definition>
        <argsstring>(void)</argsstring>
        <name>SCIPexprintGetDesc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets descriptive text of expression interpreter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2163" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2163" bodyend="2166"/>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a2662183d2706a17532fcee8c04304f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__exprinterpret_8h_1afedb326a7a0e4b9679b737ae4247ddd3" kindref="member">SCIP_EXPRINTCAPABILITY</ref></type>
        <definition>SCIP_EXPRINTCAPABILITY SCIPexprintGetCapability</definition>
        <argsstring>(void)</argsstring>
        <name>SCIPexprintGetCapability</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets capabilities of expression interpreter (using bitflags) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2169" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2169" bodyend="2176"/>
        <references refid="type__exprinterpret_8h_1a4ead23c55590b1d90b2eaa65dbc26bbb" compoundref="type__exprinterpret_8h" startline="36">SCIP_EXPRINTCAPABILITY_FUNCVALUE</references>
        <references refid="type__exprinterpret_8h_1a047556347f5159f61d3179fa3e77a615" compoundref="type__exprinterpret_8h" startline="38">SCIP_EXPRINTCAPABILITY_GRADIENT</references>
        <references refid="type__exprinterpret_8h_1a21627f71ee23f53d9e70af36153c7fe4" compoundref="type__exprinterpret_8h" startline="40">SCIP_EXPRINTCAPABILITY_HESSIAN</references>
        <references refid="type__exprinterpret_8h_1a3debca4ab3ff224b912327c5573de4f3" compoundref="type__exprinterpret_8h" startline="37">SCIP_EXPRINTCAPABILITY_INTFUNCVALUE</references>
        <references refid="type__exprinterpret_8h_1a23564ef7a6465972d67323c687d61125" compoundref="type__exprinterpret_8h" startline="39">SCIP_EXPRINTCAPABILITY_INTGRADIENT</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1afa3d4e74943ca79f00707065f67a50af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintCreate</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRINT **exprint)</argsstring>
        <name>SCIPexprintCreate</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> **</type>
          <declname>exprint</declname>
          <briefdescription><para>buffer to store pointer to expression interpreter </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an expression interpreter object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2179" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2179" bodyend="2193"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da9d99f2bbdf6c09830e6db15bc35d3415" compoundref="type__retcode_8h" startline="35">SCIP_NOMEMORY</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a83ad91aa654a0ecbbdc8093350a15dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintFree</definition>
        <argsstring>(SCIP_EXPRINT **exprint)</argsstring>
        <name>SCIPexprintFree</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> **</type>
          <declname>exprint</declname>
          <briefdescription><para>expression interpreter that should be freed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees an expression interpreter object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2196" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2196" bodyend="2206"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1ad4142b870bae28b64791d55da3ff4706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintCompile</definition>
        <argsstring>(SCIP_EXPRINT *exprint, SCIP_EXPRTREE *tree)</argsstring>
        <name>SCIPexprintCompile</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> *</type>
          <declname>exprint</declname>
          <briefdescription><para>interpreter data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compiles an expression tree and stores compiled data in expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2209" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2209" bodyend="2254"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="pub__expr_8h_1a354f2c4744f18c6c621192558b434106">SCIPexprCopyDeep</references>
        <references refid="pub__expr_8h_1a8a03414e3d699a303f5481810d115de4">SCIPexprFreeDeep</references>
        <references refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331">SCIPexprtreeGetInterpreterData</references>
        <references refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4">SCIPexprtreeGetNVars</references>
        <references refid="pub__expr_8h_1a00b319aec4404887ce8a1cc860a83442">SCIPexprtreeGetRoot</references>
        <references refid="pub__expr_8h_1ad174e4bfd56c2532e0c037f9f8443aef">SCIPexprtreeSetInterpreterData</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1af3821c1215e5a6df4f834fa5b5e293bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__exprinterpret_8h_1afedb326a7a0e4b9679b737ae4247ddd3" kindref="member">SCIP_EXPRINTCAPABILITY</ref></type>
        <definition>SCIP_EXPRINTCAPABILITY SCIPexprintGetExprtreeCapability</definition>
        <argsstring>(SCIP_EXPRINT *exprint, SCIP_EXPRTREE *tree)</argsstring>
        <name>SCIPexprintGetExprtreeCapability</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> *</type>
          <declname>exprint</declname>
          <briefdescription><para>interpreter data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the capability to evaluate an expression by the expression interpreter</para><para>In cases of user-given expressions, higher order derivatives may not be available for the user-expression, even if the expression interpreter could handle these. This method allows to recognize that, e.g., the Hessian for an expression is not available because it contains a user expression that does not provide Hessians. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2264" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2264" bodyend="2275"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331">SCIPexprtreeGetInterpreterData</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1af754d568d223fea54f16d89cedec0071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintFreeData</definition>
        <argsstring>(SCIP_EXPRINTDATA **interpreterdata)</argsstring>
        <name>SCIPexprintFreeData</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref> **</type>
          <declname>interpreterdata</declname>
          <briefdescription><para>interpreter data that should freed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees interpreter data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2278" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2278" bodyend="2292"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__expr_8h_1a8a03414e3d699a303f5481810d115de4">SCIPexprFreeDeep</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a3d4949b971ff0ba837e39c4dc140e6d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintNewParametrization</definition>
        <argsstring>(SCIP_EXPRINT *exprint, SCIP_EXPRTREE *tree)</argsstring>
        <name>SCIPexprintNewParametrization</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> *</type>
          <declname>exprint</declname>
          <briefdescription><para>interpreter data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>notify expression interpreter that a new parameterization is used</para><para>This probably causes retaping by AD algorithms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2298" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2298" bodyend="2314"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331">SCIPexprtreeGetInterpreterData</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintEval</definition>
        <argsstring>(SCIP_EXPRINT *exprint, SCIP_EXPRTREE *tree, SCIP_Real *varvals, SCIP_Real *val)</argsstring>
        <name>SCIPexprintEval</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> *</type>
          <declname>exprint</declname>
          <briefdescription><para>interpreter data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>varvals</declname>
          <briefdescription><para>values of variables </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>evaluates an expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2317" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2317" bodyend="2382"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="pub__expr_8h_1a0c4ad161b828120f5c16d3df89bfc574">SCIPexprtreeEval</references>
        <references refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331">SCIPexprtreeGetInterpreterData</references>
        <references refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4">SCIPexprtreeGetNVars</references>
        <references refid="pub__expr_8h_1a0299ad304998c7041fb4f246844ed119">SCIPexprtreeGetParamVals</references>
        <references refid="pub__expr_8h_1a00b319aec4404887ce8a1cc860a83442">SCIPexprtreeGetRoot</references>
        <referencedby refid="exprinterpret__cppad_8cpp_1a951003903b4819772f2643d0efc5b10a" compoundref="exprinterpret__cppad_8cpp" startline="2451" endline="2495">SCIPexprintGrad</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1abd322fc0556700c1a41144bbbc0f9386" compoundref="exprinterpret__cppad_8cpp" startline="2621" endline="2678">SCIPexprintHessianDense</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a4e3afb5fe90e10cb9e116b66a6a6bede" compoundref="exprinterpret__cppad_8cpp" startline="2548" endline="2615">SCIPexprintHessianSparsityDense</referencedby>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a7dc4aaad187f200f28e8c9345f83007b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintEvalInt</definition>
        <argsstring>(SCIP_EXPRINT *exprint, SCIP_EXPRTREE *tree, SCIP_Real infinity, SCIP_INTERVAL *varvals, SCIP_INTERVAL *val)</argsstring>
        <name>SCIPexprintEvalInt</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> *</type>
          <declname>exprint</declname>
          <briefdescription><para>interpreter data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>infinity</declname>
          <briefdescription><para>value for infinity </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>varvals</declname>
          <briefdescription><para>interval values of variables </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store interval value of expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>evaluates an expression tree on intervals </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2385" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2385" bodyend="2448"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="pub__expr_8h_1a6651f0a87111d63aff16d7d5a3388920">SCIPexprtreeEvalInt</references>
        <references refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331">SCIPexprtreeGetInterpreterData</references>
        <references refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4">SCIPexprtreeGetNVars</references>
        <references refid="pub__expr_8h_1a0299ad304998c7041fb4f246844ed119">SCIPexprtreeGetParamVals</references>
        <references refid="pub__expr_8h_1a00b319aec4404887ce8a1cc860a83442">SCIPexprtreeGetRoot</references>
        <referencedby refid="exprinterpret__cppad_8cpp_1adf40904b5c1ad96ac217d40a9ddd2aa9" compoundref="exprinterpret__cppad_8cpp" startline="2498" endline="2541">SCIPexprintGradInt</referencedby>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a951003903b4819772f2643d0efc5b10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintGrad</definition>
        <argsstring>(SCIP_EXPRINT *exprint, SCIP_EXPRTREE *tree, SCIP_Real *varvals, SCIP_Bool new_varvals, SCIP_Real *val, SCIP_Real *gradient)</argsstring>
        <name>SCIPexprintGrad</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> *</type>
          <declname>exprint</declname>
          <briefdescription><para>interpreter data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>varvals</declname>
          <briefdescription><para>values of variables, can be NULL if new_varvals is FALSE </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>new_varvals</declname>
          <briefdescription><para>have variable values changed since last call to a point evaluation routine? </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store expression value </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>gradient</declname>
          <briefdescription><para>buffer to store expression gradient, need to have length at least SCIPexprtreeGetNVars(tree) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes value and gradient of an expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2451" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2451" bodyend="2495"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" compoundref="exprinterpret__cppad_8cpp" startline="2317" endline="2382">SCIPexprintEval</references>
        <references refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331">SCIPexprtreeGetInterpreterData</references>
        <references refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4">SCIPexprtreeGetNVars</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1adf40904b5c1ad96ac217d40a9ddd2aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintGradInt</definition>
        <argsstring>(SCIP_EXPRINT *exprint, SCIP_EXPRTREE *tree, SCIP_Real infinity, SCIP_INTERVAL *varvals, SCIP_Bool new_varvals, SCIP_INTERVAL *val, SCIP_INTERVAL *gradient)</argsstring>
        <name>SCIPexprintGradInt</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> *</type>
          <declname>exprint</declname>
          <briefdescription><para>interpreter data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>infinity</declname>
          <briefdescription><para>value for infinity </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>varvals</declname>
          <briefdescription><para>interval values of variables, can be NULL if new_varvals is FALSE </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>new_varvals</declname>
          <briefdescription><para>have variable interval values changed since last call to an interval evaluation routine? </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store expression interval value </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>gradient</declname>
          <briefdescription><para>buffer to store expression interval gradient, need to have length at least SCIPexprtreeGetNVars(tree) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes interval value and interval gradient of an expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2498" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2498" bodyend="2541"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="exprinterpret__cppad_8cpp_1a7dc4aaad187f200f28e8c9345f83007b" compoundref="exprinterpret__cppad_8cpp" startline="2385" endline="2448">SCIPexprintEvalInt</references>
        <references refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331">SCIPexprtreeGetInterpreterData</references>
        <references refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4">SCIPexprtreeGetNVars</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1a4e3afb5fe90e10cb9e116b66a6a6bede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintHessianSparsityDense</definition>
        <argsstring>(SCIP_EXPRINT *exprint, SCIP_EXPRTREE *tree, SCIP_Real *varvals, SCIP_Bool *sparsity)</argsstring>
        <name>SCIPexprintHessianSparsityDense</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> *</type>
          <declname>exprint</declname>
          <briefdescription><para>interpreter data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>varvals</declname>
          <briefdescription><para>values of variables </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>sparsity</declname>
          <briefdescription><para>buffer to store sparsity pattern of Hessian, sparsity[i+n*j] indicates whether entry (i,j) is nonzero in the hessian </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives sparsity pattern of hessian</para><para>NOTE: this function might be replaced later by something nicer. Since the AD code might need to do a forward sweep, you should pass variable values in here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2548" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2548" bodyend="2615"/>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" compoundref="def_8h" startline="124">SCIP_Real</references>
        <references refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" compoundref="pub__message_8h" startline="77">SCIPdebugMessage</references>
        <references refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" compoundref="exprinterpret__cppad_8cpp" startline="2317" endline="2382">SCIPexprintEval</references>
        <references refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331">SCIPexprtreeGetInterpreterData</references>
        <references refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4">SCIPexprtreeGetNVars</references>
        <references refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" compoundref="def_8h" startline="52">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="exprinterpret__cppad_8cpp_1abd322fc0556700c1a41144bbbc0f9386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprintHessianDense</definition>
        <argsstring>(SCIP_EXPRINT *exprint, SCIP_EXPRTREE *tree, SCIP_Real *varvals, SCIP_Bool new_varvals, SCIP_Real *val, SCIP_Real *hessian)</argsstring>
        <name>SCIPexprintHessianDense</name>
        <param>
          <type><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref> *</type>
          <declname>exprint</declname>
          <briefdescription><para>interpreter data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>varvals</declname>
          <briefdescription><para>values of variables, can be NULL if new_varvals is FALSE </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>new_varvals</declname>
          <briefdescription><para>have variable values changed since last call to an evaluation routine? </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store function value </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>hessian</declname>
          <briefdescription><para>buffer to store hessian values, need to have size at least n*n </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes value and dense hessian of an expression tree</para><para>The full hessian is computed (lower left and upper right triangle). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" line="2621" column="1" bodyfile="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp" bodystart="2621" bodyend="2678"/>
        <references refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" compoundref="def_8h" startline="53">FALSE</references>
        <references refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="def_8h" startline="190">NULL</references>
        <references refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" compoundref="def_8h" startline="263">SCIP_CALL</references>
        <references refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" compoundref="type__retcode_8h" startline="33">SCIP_OKAY</references>
        <references refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" compoundref="exprinterpret__cppad_8cpp" startline="2317" endline="2382">SCIPexprintEval</references>
        <references refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331">SCIPexprtreeGetInterpreterData</references>
        <references refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4">SCIPexprtreeGetNVars</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>methods to interpret (evaluate) an expression tree &quot;fast&quot; using CppAD </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Stefan Vigerske </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>program<sp/>and<sp/>library<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIP<sp/>---<sp/>Solving<sp/>Constraint<sp/>Integer<sp/>Programs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2002-2015<sp/>Konrad-Zuse-Zentrum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fuer<sp/>Informationstechnik<sp/>Berlin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>SCIP<sp/>is<sp/>distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>along<sp/>with<sp/>SCIP;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/>If<sp/>not<sp/>email<sp/>to<sp/>scip@zib.de.<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">/**@file<sp/><sp/><sp/><sp/>exprinterpret_cppad.cpp</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>methods<sp/>to<sp/>interpret<sp/>(evaluate)<sp/>an<sp/>expression<sp/>tree<sp/>&quot;fast&quot;<sp/>using<sp/>CppAD</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>EXPRINTS</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@author<sp/><sp/>Stefan<sp/>Vigerske</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="def_8h" kindref="compound">scip/def.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blockmemshell/memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pub__expr_8h" kindref="compound">nlpi/pub_expr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exprinterpret_8h" kindref="compound">nlpi/exprinterpret.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Turn<sp/>off<sp/>lint<sp/>warning<sp/>&quot;747:<sp/>Significant<sp/>prototype<sp/>coercion&quot;<sp/>and<sp/>&quot;732:<sp/>Loss<sp/>of<sp/>sign&quot;.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>The<sp/>first<sp/>warning<sp/>is<sp/>generated<sp/>for<sp/>expressions<sp/>like<sp/>t[0],<sp/>where<sp/>t<sp/>is<sp/>a<sp/>vector,<sp/>since<sp/>0<sp/>is<sp/>an<sp/>integer<sp/>constant,<sp/>but<sp/>a</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>size_t<sp/>is<sp/>expected<sp/>(usually<sp/>long<sp/>unsigned).<sp/>The<sp/>second<sp/>is<sp/>generated<sp/>for<sp/>expressions<sp/>like<sp/>t[n],<sp/>where<sp/>n<sp/>is<sp/>an</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>integer.<sp/>Both<sp/>code<sp/>pieces<sp/>are<sp/>likely<sp/>to<sp/>be<sp/>correct.<sp/>It<sp/>seems<sp/>to<sp/>be<sp/>impossible<sp/>to<sp/>inhibit<sp/>these<sp/>messages<sp/>for</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>vector&lt;*&gt;::operator[]<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*lint<sp/>--e{747,732}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Turn<sp/>off<sp/>lint<sp/>info<sp/>&quot;1702<sp/>operator<sp/>&apos;...&apos;<sp/>is<sp/>both<sp/>an<sp/>ordinary<sp/>function<sp/>&apos;CppAD::operator...&apos;<sp/>and<sp/>a<sp/>member<sp/>function<sp/>&apos;CppAD::SCIPInterval::operator...&apos;.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>However,<sp/>the<sp/>functions<sp/>have<sp/>different<sp/>signatures<sp/>(the<sp/>CppAD<sp/>working<sp/>on<sp/>double,<sp/>the<sp/>SCIPInterval<sp/>member</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>function<sp/>working<sp/>on<sp/>SCIPInterval&apos;s.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*lint<sp/>--e{1702}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>defining<sp/>NO_CPPAD_USER_ATOMIC<sp/>disables<sp/>the<sp/>use<sp/>of<sp/>our<sp/>own<sp/>implementation<sp/>of<sp/>derivaties<sp/>of<sp/>power<sp/>operators</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>via<sp/>CppAD&apos;s<sp/>user-atomic<sp/>function<sp/>feature</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>our<sp/>customized<sp/>implementation<sp/>should<sp/>give<sp/>better<sp/>results<sp/>(tighter<sp/>intervals)<sp/>for<sp/>the<sp/>interval<sp/>data<sp/>type</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>NO_CPPAD_USER_ATOMIC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>sign<sp/>of<sp/>a<sp/>value<sp/>(-1<sp/>or<sp/>+1)</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>0.0<sp/>has<sp/>sign<sp/>+1</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="exprinterpret__cppad_8cpp_1a8c5ff70b6b28cd0157c50a22406f92c4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIGN(x)<sp/>((x)<sp/>&gt;=<sp/>0.0<sp/>?<sp/>1.0<sp/>:<sp/>-1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>in<sp/>order<sp/>to<sp/>use<sp/>intervals<sp/>as<sp/>operands<sp/>in<sp/>CppAD,</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>we<sp/>need<sp/>to<sp/>include<sp/>the<sp/>intervalarithext.h<sp/>very<sp/>early<sp/>and<sp/>require<sp/>the<sp/>interval<sp/>operations<sp/>to<sp/>be<sp/>in<sp/>the<sp/>CppAD<sp/>namespace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="exprinterpret__cppad_8cpp_1ac553d3acdc14013d2464ff17bdf09918" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPInterval_NAMESPACE<sp/>CppAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nlpi/intervalarithext.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/>CppAD::SCIPInterval::infinity<sp/>=<sp/><ref refid="def_8h_1a015719a1a2f1f91e6b141e2b4073fc2d" kindref="member">SCIP_DEFAULT_INFINITY</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::SCIPInterval;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CppAD<sp/>needs<sp/>to<sp/>know<sp/>a<sp/>fixed<sp/>upper<sp/>bound<sp/>on<sp/>the<sp/>number<sp/>of<sp/>threads<sp/>at<sp/>compile<sp/>time.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>wise<sp/>to<sp/>set<sp/>it<sp/>to<sp/>a<sp/>power<sp/>of<sp/>2,<sp/>so<sp/>that<sp/>if<sp/>the<sp/>tape<sp/>id<sp/>overflows,<sp/>it<sp/>is<sp/>likely<sp/>to<sp/>start<sp/>at<sp/>0<sp/>again,<sp/>which<sp/>avoids<sp/>difficult<sp/>to<sp/>debug<sp/>errors.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CPPAD_MAX_NUM_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NPARASCIP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="exprinterpret__cppad_8cpp_1a3b5d9a3ffec073d12687214dbe2e4bda" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CPPAD_MAX_NUM_THREADS<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CPPAD_MAX_NUM_THREADS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppad/cppad.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppad/error_handler.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CppAD<sp/>is<sp/>not<sp/>thread-safe<sp/>by<sp/>itself,<sp/>but<sp/>uses<sp/>some<sp/>static<sp/>datastructures</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>To<sp/>run<sp/>it<sp/>in<sp/>a<sp/>multithreading<sp/>environment,<sp/>a<sp/>special<sp/>CppAD<sp/>memory<sp/>allocator<sp/>that<sp/>is<sp/>aware<sp/>of<sp/>the<sp/>multiple<sp/>threads<sp/>has<sp/>to<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>This<sp/>allocator<sp/>requires<sp/>to<sp/>know<sp/>the<sp/>number<sp/>of<sp/>threads<sp/>and<sp/>a<sp/>thread<sp/>number<sp/>for<sp/>each<sp/>thread.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>To<sp/>implement<sp/>this,<sp/>we<sp/>follow<sp/>the<sp/>team_pthread<sp/>example<sp/>of<sp/>CppAD,<sp/>which<sp/>uses<sp/>pthread&apos;s<sp/>thread-specific<sp/>data<sp/>management.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NPARASCIP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>workaround<sp/>error<sp/>message<sp/>regarding<sp/>missing<sp/>implementation<sp/>of<sp/>tanh<sp/>during<sp/>initialization<sp/>of<sp/>static<sp/>variables<sp/>(see<sp/>cppad/local/erf.hpp)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCppAD" kindref="compound">CppAD</ref></highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>SCIPInterval<sp/>erf_template(</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval<sp/><sp/><sp/><sp/>&amp;x</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>CPPAD_ASSERT_FIRST_CALL_NOT_PARALLEL;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCIPInterval();</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>AD&lt;SCIPInterval&gt;<sp/>erf_template(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AD&lt;SCIPInterval&gt;<sp/>&amp;x</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>CPPAD_ASSERT_FIRST_CALL_NOT_PARALLEL;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AD&lt;SCIPInterval&gt;();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment">/**<sp/>mutex<sp/>for<sp/>locking<sp/>in<sp/>pthread<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pthread_mutex_t<sp/>cppadmutex<sp/>=<sp/>PTHREAD_MUTEX_INITIALIZER;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment">/**<sp/>key<sp/>for<sp/>accessing<sp/>thread<sp/>specific<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pthread_key_t<sp/>thread_specific_key;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**<sp/>currently<sp/>registered<sp/>number<sp/>of<sp/>threads<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncurthreads<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**<sp/>CppAD<sp/>callback<sp/>function<sp/>that<sp/>indicates<sp/>whether<sp/>we<sp/>are<sp/>running<sp/>in<sp/>parallel<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_parallel(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ncurthreads<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment">/**<sp/>CppAD<sp/>callback<sp/>function<sp/>that<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>the<sp/>current<sp/>thread</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>assigns<sp/>a<sp/>new<sp/>number<sp/>to<sp/>the<sp/>thread<sp/>if<sp/>new</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>thread_num(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>threadnum;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>specific;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/>specific<sp/>=<sp/>pthread_getspecific(thread_specific_key);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>no<sp/>data<sp/>for<sp/>this<sp/>thread<sp/>yet,<sp/>then<sp/>assign<sp/>a<sp/>new<sp/>thread<sp/>number<sp/>to<sp/>the<sp/>current<sp/>thread</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>we<sp/>store<sp/>the<sp/>thread<sp/>number<sp/>incremented<sp/>by<sp/>one,<sp/>to<sp/>distinguish<sp/>the<sp/>absence<sp/>of<sp/>data<sp/>(=0)<sp/>from<sp/>existing<sp/>data</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>specific<sp/>==<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;cppadmutex);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;Assigning<sp/>thread<sp/>number<sp/>%lu<sp/>to<sp/>thread<sp/>%p.\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ncurthreads,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)pthread_self());</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_setspecific(thread_specific_key,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(ncurthreads<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>threadnum<sp/>=<sp/>ncurthreads;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++ncurthreads;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;cppadmutex);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(pthread_getspecific(thread_specific_key)<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)pthread_getspecific(thread_specific_key)<sp/>==<sp/>threadnum<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>threadnum<sp/>=<sp/>(size_t)(specific)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/>assert(threadnum<sp/>&lt;<sp/>ncurthreads);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>threadnum;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment">/**<sp/>sets<sp/>up<sp/>CppAD&apos;s<sp/>datastructures<sp/>for<sp/>running<sp/>in<sp/>multithreading<sp/>mode</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>must<sp/>be<sp/>called<sp/>once<sp/>before<sp/>multithreading<sp/>is<sp/>started.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>init_parallel(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/>pthread_key_create(&amp;thread_specific_key,<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>CppAD::thread_alloc::parallel_setup(<ref refid="exprinterpret__cppad_8cpp_1a3b5d9a3ffec073d12687214dbe2e4bda" kindref="member">CPPAD_MAX_NUM_THREADS</ref>,<sp/>in_parallel,<sp/>thread_num);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/>CppAD::parallel_ad&lt;double&gt;();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/>CppAD::parallel_ad&lt;SCIPInterval&gt;();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="181"><highlight class="comment">/**<sp/>a<sp/>dummy<sp/>variable<sp/>that<sp/>can<sp/>is<sp/>initialized<sp/>to<sp/>the<sp/>result<sp/>of<sp/>init_parallel</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>purpose<sp/>is<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>init_parallel()<sp/>is<sp/>called<sp/>before<sp/>any<sp/>multithreading<sp/>is<sp/>started.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>init_parallel_return<sp/>=<sp/>init_parallel();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>NPARASCIP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">/**<sp/>definition<sp/>of<sp/>CondExpOp<sp/>for<sp/>SCIPInterval<sp/>(required<sp/>by<sp/>CppAD)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="exprinterpret__cppad_8cpp_1ae821bfe3e7e40674abc319681df0e944" refkind="member"><highlight class="normal">SCIPInterval<sp/><ref refid="exprinterpret__cppad_8cpp_1ae821bfe3e7e40674abc319681df0e944" kindref="member">CondExpOp</ref>(</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>CppAD::CompareOp<sp/>cop,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>left,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>right,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>trueCase,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>falseCase)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/>CppAD::ErrorHandler::Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SCIPInterval<sp/>CondExpOp(...)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>cannot<sp/>use<sp/>CondExp<sp/>with<sp/>an<sp/>interval<sp/>type&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SCIPInterval();</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment">/**<sp/>another<sp/>function<sp/>that<sp/>returns<sp/>whether<sp/>two<sp/>intervals<sp/>are<sp/>the<sp/>same<sp/>(required<sp/>by<sp/>CppAD)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="exprinterpret__cppad_8cpp_1a7e581bf436df1ee06426c29b5345bca3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a7e581bf436df1ee06426c29b5345bca3" kindref="member">EqualOpSeq</ref>(</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>x,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>y;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment">/**<sp/>another<sp/>function<sp/>required<sp/>by<sp/>CppAD<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="exprinterpret__cppad_8cpp_1a346918acbda8013852b333d86e9c6f36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a346918acbda8013852b333d86e9c6f36" kindref="member">IdenticalPar</ref>(</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>interval<sp/>equals<sp/>[0,0]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="exprinterpret__cppad_8cpp_1a87b08dbfb5d5f171325d0978bc7ba128" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a87b08dbfb5d5f171325d0978bc7ba128" kindref="member">IdenticalZero</ref>(</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>0.0);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>interval<sp/>equals<sp/>[1,1]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="exprinterpret__cppad_8cpp_1ad166d12ff16a3153e9a23bcaf0cd2535" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1ad166d12ff16a3153e9a23bcaf0cd2535" kindref="member">IdenticalOne</ref>(</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>1.0);</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment">/**<sp/>yet<sp/>another<sp/>function<sp/>that<sp/>checks<sp/>whether<sp/>two<sp/>intervals<sp/>are<sp/>equal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="exprinterpret__cppad_8cpp_1a1f191da11f26f8aeed424fc3e46828a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a1f191da11f26f8aeed424fc3e46828a4" kindref="member">IdenticalEqualPar</ref>(</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>x,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>y);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment">/**<sp/>greater<sp/>than<sp/>zero<sp/>not<sp/>defined<sp/>for<sp/>intervals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="exprinterpret__cppad_8cpp_1ad24ec6b1ceee23cc00bd3cb4f1b60d31" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1ad24ec6b1ceee23cc00bd3cb4f1b60d31" kindref="member">GreaterThanZero</ref>(</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/>CppAD::ErrorHandler::Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;GreaterThanZero(x)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>cannot<sp/>use<sp/>GreaterThanZero<sp/>with<sp/>interval&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="267"><highlight class="comment">/**<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>zero<sp/>not<sp/>defined<sp/>for<sp/>intervals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="exprinterpret__cppad_8cpp_1a30a2aa3135da3983d707eb6e57cab1aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a30a2aa3135da3983d707eb6e57cab1aa" kindref="member">GreaterThanOrZero</ref>(</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/>CppAD::ErrorHandler::Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__<sp/>,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;GreaterThanOrZero(x)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>cannot<sp/>use<sp/>GreaterThanOrZero<sp/>with<sp/>interval&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment">/**<sp/>less<sp/>than<sp/>not<sp/>defined<sp/>for<sp/>intervals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="exprinterpret__cppad_8cpp_1a96206822b49249fba43d46f60c85f060" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a96206822b49249fba43d46f60c85f060" kindref="member">LessThanZero</ref>(</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/>CppAD::ErrorHandler::Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LessThanZero(x)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>cannot<sp/>use<sp/>LessThanZero<sp/>with<sp/>interval&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="295"><highlight class="comment">/**<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>not<sp/>defined<sp/>for<sp/>intervals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="exprinterpret__cppad_8cpp_1a1da655f002979b14772f94715f481d5e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a1da655f002979b14772f94715f481d5e" kindref="member">LessThanOrZero</ref>(</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/>CppAD::ErrorHandler::Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LessThanOrZero(x)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>cannot<sp/>use<sp/>LessThanOrZero<sp/>with<sp/>interval&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="309"><highlight class="comment">/**<sp/>conversion<sp/>to<sp/>integers<sp/>not<sp/>defined<sp/>for<sp/>intervals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="exprinterpret__cppad_8cpp_1a914cab8d482692a04fce0b31077b6204" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a914cab8d482692a04fce0b31077b6204" kindref="member">Integer</ref>(</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIPInterval&amp;<sp/><sp/><sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/>CppAD::ErrorHandler::Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Integer(x)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>cannot<sp/>use<sp/>Integer<sp/>with<sp/>interval&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment">/**<sp/>printing<sp/>of<sp/>an<sp/>interval<sp/>(required<sp/>by<sp/>CppAD)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="exprinterpret__cppad_8cpp_1a2aa292b33a64d3b41bef4cf4fed5c15f" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="exprinterpret__cppad_8cpp_1a2aa292b33a64d3b41bef4cf4fed5c15f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SCIP_INTERVAL&amp;<sp/>x)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.inf<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x.sup<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::AD;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment">/**<sp/>expression<sp/>interpreter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SCIP_ExprInt</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">};</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="339"><highlight class="comment">/**<sp/>expression<sp/>specific<sp/>interpreter<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SCIP_ExprIntData</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>constructor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>SCIP_ExprIntData()</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>val(0.0),<sp/>need_retape(true),<sp/>int_need_retape(true),<sp/>need_retape_always(false),<sp/>userevalcapability(<ref refid="type__exprinterpret_8h_1a630b1715f0e26d4834609647a3345413" kindref="member">SCIP_EXPRINTCAPABILITY_ALL</ref>),<sp/>blkmem(<ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>),<sp/>root(<ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>destructor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/>~SCIP_ExprIntData()</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>{<sp/>}</highlight><highlight class="comment">/*lint<sp/>--e{1540}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/>vector&lt;<sp/>AD&lt;double&gt;<sp/>&gt;<sp/><sp/>X;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>of<sp/>dependent<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/>vector&lt;<sp/>AD&lt;double&gt;<sp/>&gt;<sp/><sp/>Y;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>result<sp/>vector<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/>CppAD::ADFun&lt;double&gt;<sp/><sp/>f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>the<sp/>function<sp/>to<sp/>evaluate<sp/>as<sp/>CppAD<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/>vector&lt;double&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>current<sp/>values<sp/>of<sp/>dependent<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>current<sp/>function<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>need_retape;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>will<sp/>retaping<sp/>be<sp/>required<sp/>for<sp/>the<sp/>next<sp/>point<sp/>evaluation?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/>vector&lt;<sp/>AD&lt;SCIPInterval&gt;<sp/>&gt;<sp/>int_X;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interval<sp/>vector<sp/>of<sp/>dependent<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/>vector&lt;<sp/>AD&lt;SCIPInterval&gt;<sp/>&gt;<sp/>int_Y;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interval<sp/>result<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/>CppAD::ADFun&lt;SCIPInterval&gt;<sp/>int_f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>the<sp/>function<sp/>to<sp/>evaluate<sp/>on<sp/>intervals<sp/>as<sp/>CppAD<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/>vector&lt;SCIPInterval&gt;<sp/><sp/>int_x;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>current<sp/>interval<sp/>values<sp/>of<sp/>dependent<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/>SCIPInterval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_val;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>current<sp/>interval<sp/>function<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_need_retape;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>will<sp/>retaping<sp/>be<sp/>required<sp/>for<sp/>the<sp/>next<sp/>interval<sp/>evaluation?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>need_retape_always;<sp/></highlight><highlight class="comment">/**&lt;<sp/>will<sp/>retaping<sp/>be<sp/>always<sp/>required?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1afedb326a7a0e4b9679b737ae4247ddd3" kindref="member">SCIP_EXPRINTCAPABILITY</ref><sp/>userevalcapability;<sp/></highlight><highlight class="comment">/**&lt;<sp/>(intersection<sp/>of)<sp/>capabilities<sp/>of<sp/>evaluation<sp/>rountines<sp/>of<sp/>user<sp/>expressions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>used<sp/>to<sp/>allocate<sp/>expresstion<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>copy<sp/>of<sp/>expression<sp/>tree;<sp/>@todo<sp/>we<sp/>should<sp/>not<sp/>need<sp/>to<sp/>make<sp/>a<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">};</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_CPPAD_USER_ATOMIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="377"><highlight class="comment">/**<sp/>computes<sp/>sparsity<sp/>of<sp/>jacobian<sp/>for<sp/>a<sp/>univariate<sp/>function<sp/>during<sp/>a<sp/>forward<sp/>sweep</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/><sp/>For<sp/>a<sp/>1<sp/>x<sp/>q<sp/>matrix<sp/>R,<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>the<sp/>1<sp/>x<sp/>q<sp/>matrix<sp/>S(x)<sp/>=<sp/>f&apos;(x)<sp/>*<sp/>R.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*<sp/><sp/>Since<sp/>f&apos;(x)<sp/>is<sp/>dense,<sp/>the<sp/>sparsity<sp/>of<sp/>S<sp/>will<sp/>be<sp/>the<sp/>sparsity<sp/>of<sp/>R.</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>univariate_for_sparse_jac(</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>of<sp/>R,<sp/>columnwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>of<sp/>S,<sp/>columnwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/>assert(r.size()<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/>assert(s.size()<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="397"><highlight class="comment">/**<sp/>Computes<sp/>sparsity<sp/>of<sp/>jacobian<sp/>during<sp/>a<sp/>reverse<sp/>sweep</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/><sp/>For<sp/>a<sp/>q<sp/>x<sp/>1<sp/>matrix<sp/>R,<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>the<sp/>q<sp/>x<sp/>1<sp/>matrix<sp/>S(x)<sp/>=<sp/>R<sp/>*<sp/>f&apos;(x).</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/><sp/>Since<sp/>f&apos;(x)<sp/>is<sp/>dense,<sp/>the<sp/>sparsity<sp/>of<sp/>S<sp/>will<sp/>be<sp/>the<sp/>sparsity<sp/>of<sp/>R.</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>univariate_rev_sparse_jac(</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>of<sp/>R,<sp/>rowwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>of<sp/>S,<sp/>rowwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/>assert(r.size()<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/>assert(s.size()<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment">/**<sp/>computes<sp/>sparsity<sp/>of<sp/>hessian<sp/>during<sp/>a<sp/>reverse<sp/>sweep</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/><sp/>Assume<sp/>V(x)<sp/>=<sp/>(g(f(x)))&apos;&apos;<sp/>R<sp/><sp/>with<sp/>f(x)<sp/>=<sp/>x^p<sp/>for<sp/>a<sp/>function<sp/>g:R-&gt;R<sp/>and<sp/>a<sp/>matrix<sp/>R.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/><sp/>we<sp/>have<sp/>to<sp/>specify<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>V(x)<sp/>and<sp/>T(x)<sp/>=<sp/>(g(f(x)))&apos;.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>univariate_rev_sparse_hes(</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>vx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>whether<sp/>argument<sp/>is<sp/>a<sp/>variable,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>S<sp/>=<sp/>g&apos;(y)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/>t,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>T(x)<sp/>=<sp/>(g(f(x)))&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>R,<sp/>U,<sp/>and<sp/>V<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>u,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>U(x)<sp/>=<sp/>g&apos;&apos;(f(x))<sp/>f&apos;(x)<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/>v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>V(x)<sp/>=<sp/>(g(f(x)))&apos;&apos;<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{439,715}*/</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@todo<sp/>take<sp/>vx<sp/>into<sp/>account<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/>assert(r.size()<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/>assert(s.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/>assert(t.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/>assert(u.size()<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/>assert(v.size()<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T(x)<sp/>=<sp/>g&apos;(f(x))<sp/>*<sp/>f&apos;(x)<sp/>=<sp/>S<sp/>*<sp/>f&apos;(x),<sp/>and<sp/>f&apos;<sp/>is<sp/>not<sp/>identically<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/>t[0]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V(x)<sp/>=<sp/>g&apos;&apos;(f(x))<sp/>f&apos;(x)<sp/>f&apos;(x)<sp/>R<sp/>+<sp/>g&apos;(f(x))<sp/>f&apos;&apos;(x)<sp/>R466</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>f&apos;(x)<sp/>U<sp/>+<sp/>S<sp/>f&apos;&apos;(x)<sp/>R,<sp/>with<sp/>f&apos;(x)<sp/>and<sp/>f&apos;&apos;(x)<sp/>not<sp/>identically<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/>v<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s[0]<sp/>)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>q;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>r[j]<sp/>)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[j]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="454"><highlight class="comment">/**<sp/>Automatic<sp/>differentiation<sp/>of<sp/>x<sp/>-&gt;<sp/>x^p,<sp/>p&gt;=2<sp/>integer,<sp/>as<sp/>CppAD<sp/>user-atomic<sp/>function.</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>class<sp/>implements<sp/>forward<sp/>and<sp/>reverse<sp/>operations<sp/>for<sp/>the<sp/>function<sp/>x<sp/>-&gt;<sp/>x^p<sp/>for<sp/>use<sp/>within<sp/>CppAD.</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*<sp/><sp/>While<sp/>CppAD<sp/>would<sp/>implement<sp/>integer<sp/>powers<sp/>as<sp/>a<sp/>recursion<sp/>of<sp/>multiplications,<sp/>we<sp/>still<sp/>use<sp/>pow<sp/>functions<sp/>as<sp/>they<sp/>allow<sp/>us<sp/>to<sp/>avoid<sp/>overestimation<sp/>in<sp/>interval<sp/>arithmetics.</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>treat<sp/>the<sp/>exponent<sp/>as<sp/>a<sp/>(variable)<sp/>argument<sp/>to<sp/>the<sp/>function,<sp/>with<sp/>the<sp/>assumption<sp/>that<sp/>we<sp/>never<sp/>differentiate<sp/>w.r.t.<sp/>it<sp/>(this<sp/>should<sp/>make<sp/>the<sp/>approach<sp/>threadsafe<sp/>again)</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="462" refid="classatomic__posintpower" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classatomic__posintpower" kindref="compound">atomic_posintpower</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="465" refid="classatomic__posintpower_1a118f90eb677eb5c0fc5e9fca2e002ba2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="classatomic__posintpower_1a118f90eb677eb5c0fc5e9fca2e002ba2" kindref="member">atomic_posintpower</ref>()</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/>:<sp/><ref refid="namespaceCppAD" kindref="compound">CppAD</ref>::atomic_base&lt;Type&gt;(</highlight><highlight class="stringliteral">&quot;posintpower&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>exponent(0)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>indicate<sp/>that<sp/>we<sp/>want<sp/>to<sp/>use<sp/>bool-based<sp/>sparsity<sp/>pattern<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;option(CppAD::atomic_base&lt;Type&gt;::bool_sparsity_enum);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>exponent<sp/>value<sp/>for<sp/>next<sp/>call<sp/>to<sp/>forward<sp/>or<sp/>reverse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>stores<sp/>exponent<sp/>value<sp/>corresponding<sp/>to<sp/>next<sp/>call<sp/>to<sp/>forward<sp/>or<sp/>reverse</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>how<sp/>is<sp/>this<sp/>supposed<sp/>to<sp/>be<sp/>threadsafe?<sp/>(we<sp/>use<sp/>only<sp/>one<sp/>global<sp/>instantiation<sp/>of<sp/>this<sp/>class)</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_id(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>=<sp/>(int)<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>forward<sp/>sweep<sp/>of<sp/>positive<sp/>integer<sp/>power</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Given<sp/>the<sp/>taylor<sp/>coefficients<sp/>for<sp/>x,<sp/>we<sp/>have<sp/>to<sp/>compute<sp/>the<sp/>taylor<sp/>coefficients<sp/>for<sp/>f(x),</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>that<sp/>is,<sp/>given<sp/>tx<sp/>=<sp/>(x,<sp/>x&apos;,<sp/>x&apos;&apos;,<sp/>...),<sp/>we<sp/>compute<sp/>the<sp/>coefficients<sp/>ty<sp/>=<sp/>(y,<sp/>y&apos;,<sp/>y&apos;&apos;,<sp/>...)</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>taylor<sp/>expansion<sp/>of<sp/>f(x)<sp/>=<sp/>x^p.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Thus,<sp/>y<sp/><sp/><sp/>=<sp/>x^p</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>tx[0]^p,</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>y&apos;<sp/><sp/>=<sp/>p<sp/>*<sp/>x^(p-1)<sp/>*<sp/>x&apos;</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>p<sp/>*<sp/>tx[0]^(p-1)<sp/>*<sp/>tx[1],</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>y&apos;&apos;<sp/>=<sp/>1/2<sp/>*<sp/>p<sp/>*<sp/>(p-1)<sp/>*<sp/>x^(p-2)<sp/>*<sp/>x&apos;^2<sp/>+<sp/>p<sp/>*<sp/>x^(p-1)<sp/>*<sp/>x&apos;&apos;</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1/2<sp/>*<sp/>p<sp/>*<sp/>(p-1)<sp/>*<sp/>tx[0]^(p-2)<sp/>*<sp/>tx[1]^2<sp/>+<sp/>p<sp/>*<sp/>tx[0]^(p-1)<sp/>*<sp/>tx[2]</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forward(</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>lowest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>highest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>vx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>whether<sp/>argument<sp/>is<sp/>a<sp/>variable,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vy,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>which<sp/>function<sp/>values<sp/>depend<sp/>on<sp/>variables,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/>tx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>taylor<sp/>coefficients<sp/>of<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(exponent<sp/>&gt;<sp/>1);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(tx.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ty.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(q<sp/>&lt;=<sp/>p);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vx.size()<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(vx.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(vy.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(p<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vy[0]<sp/>=<sp/>vx[0];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>==<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>q<sp/>&lt;=<sp/>0<sp/>&amp;&amp;<sp/>0<sp/>&lt;=<sp/>p<sp/>*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[0]<sp/>=<sp/>CppAD::pow(tx[0],<sp/>exponent);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>&lt;=<sp/>1<sp/>&amp;&amp;<sp/>1<sp/>&lt;=<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[1]<sp/>=<sp/>CppAD::pow(tx[0],<sp/>exponent-1)<sp/>*<sp/>tx[1];</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[1]<sp/>*=<sp/>double(exponent);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>&lt;=<sp/>2<sp/>&amp;&amp;<sp/>2<sp/>&lt;=<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>&gt;<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ty[2]<sp/>=<sp/>1/2<sp/>*<sp/>exponent<sp/>*<sp/>(exponent-1)<sp/>*<sp/>pow(tx[0],<sp/>exponent-2)<sp/>*<sp/>tx[1]<sp/>*<sp/>tx[1]<sp/>+<sp/>exponent<sp/>*<sp/>pow(tx[0],<sp/>exponent-1)<sp/>*<sp/>tx[2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/><sp/>=<sp/>CppAD::pow(tx[0],<sp/>exponent-2)<sp/>*<sp/>tx[1]<sp/>*<sp/>tx[1];</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>*=<sp/>(exponent-1)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>+=<sp/>CppAD::pow(tx[0],<sp/>exponent-1)<sp/>*<sp/>tx[2];</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(exponent<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ty[2]<sp/>=<sp/>1/2<sp/>*<sp/>exponent<sp/>*<sp/>tx[1]<sp/>*<sp/>tx[1]<sp/>+<sp/>exponent<sp/>*<sp/>tx[0]<sp/>*<sp/>tx[2];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/><sp/>=<sp/>tx[1]<sp/>*<sp/>tx[1]<sp/>+<sp/>2.0<sp/>*<sp/>tx[0]<sp/>*<sp/>tx[2];</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>higher<sp/>order<sp/>derivatives<sp/>not<sp/>implemented<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p<sp/>&gt;<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>reverse<sp/>sweep<sp/>of<sp/>positive<sp/>integer<sp/>power</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Assume<sp/>y(x)<sp/>is<sp/>a<sp/>function<sp/>of<sp/>the<sp/>taylor<sp/>coefficients<sp/>of<sp/>f(x)<sp/>=<sp/>x^p<sp/>for<sp/>x,<sp/>i.e.,</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>y(x)<sp/>=<sp/>[<sp/>x^p,<sp/>p<sp/>*<sp/>x^(p-1)<sp/>*<sp/>x&apos;,<sp/>p<sp/>*<sp/>(p-1)<sp/>*<sp/>x^(p-2)<sp/>*<sp/>x&apos;^2<sp/>+<sp/>p<sp/>*<sp/>x^(p-1)<sp/>*<sp/>x&apos;&apos;,<sp/>...<sp/>].</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Then<sp/>in<sp/>the<sp/>reverse<sp/>sweep<sp/>we<sp/>have<sp/>to<sp/>compute<sp/>the<sp/>elements<sp/>of<sp/>\f$\partial<sp/>h<sp/>/<sp/>\partial<sp/>x^[l],<sp/>l<sp/>=<sp/>0,<sp/>...,<sp/>k,\f$</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>where<sp/>x^[l]<sp/>is<sp/>the<sp/>l&apos;th<sp/>taylor<sp/>coefficient<sp/>(x,<sp/>x&apos;,<sp/>x&apos;&apos;,<sp/>...)<sp/>and<sp/>h(x)<sp/>=<sp/>g(y(x))<sp/>for<sp/>some<sp/>function<sp/>g:R^k<sp/>-&gt;<sp/>R.</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>That<sp/>is,<sp/>we<sp/>have<sp/>to<sp/>compute</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/><sp/>*\f$</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>px[l]<sp/>=<sp/>\partial<sp/>h<sp/>/<sp/>\partial<sp/>x^[l]<sp/>=<sp/>(\partial<sp/>g<sp/>/<sp/>\partial<sp/>y)<sp/>*<sp/>(\partial<sp/>y<sp/>/<sp/>\partial<sp/>x^[l])</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>\sum_{i=0}^k<sp/>(\partial<sp/>g<sp/>/<sp/>\partial<sp/>y_i)<sp/>*<sp/>(\partial<sp/>y_i<sp/>/<sp/>\partial<sp/>x^[l])</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>\sum_{i=0}^k<sp/>py[i]<sp/>*<sp/>(\partial<sp/>y_i<sp/>/<sp/>\partial<sp/>x^[l])</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f$</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>k<sp/>=<sp/>0,<sp/>this<sp/>means</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/><sp/>*\f$</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>y_0<sp/>/<sp/>\partial<sp/>x^[0])</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>x^p<sp/>/<sp/>\partial<sp/>x)</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>p<sp/>*<sp/>tx[0]^(p-1)</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/><sp/><sp/><sp/>*\f$</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>k<sp/>=<sp/>1,<sp/>this<sp/>means</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f$</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>y_0<sp/>/<sp/>\partial<sp/>x^[0])<sp/>+<sp/>py[1]<sp/>*<sp/>(\partial<sp/>y_1<sp/>/<sp/>\partial<sp/>x^[0])</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>x^p<sp/>/<sp/>\partial<sp/>x)<sp/><sp/><sp/><sp/><sp/>+<sp/>py[1]<sp/>*<sp/>(\partial<sp/>(p<sp/>*<sp/>x^(p-1)<sp/>*<sp/>x&apos;)<sp/>/<sp/>\partial<sp/>x)</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>p<sp/>*<sp/>tx[0]^(p-1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>py[1]<sp/>*<sp/>p<sp/>*<sp/>(p-1)<sp/>*<sp/>tx[0]^(p-2)<sp/>*<sp/>tx[1]</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>px[1]<sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>y_0<sp/>/<sp/>\partial<sp/>x^[1])<sp/>+<sp/>py[1]<sp/>*<sp/>(\partial<sp/>y_1<sp/>/<sp/>\partial<sp/>x^[1])</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>x^p<sp/>/<sp/>\partial<sp/>x&apos;)<sp/><sp/><sp/><sp/>+<sp/>py[1]<sp/>*<sp/>(\partial<sp/>(p<sp/>*<sp/>x^(p-1)<sp/>x&apos;)<sp/>/<sp/>\partial<sp/>x&apos;)</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>py[1]<sp/>*<sp/>p<sp/>*<sp/>tx[0]^(p-1)</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f$</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reverse(</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>highest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/>tx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/>ty,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>px,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>partial<sp/>derivatives<sp/>of<sp/>h(x)<sp/>=<sp/>g(y(x))<sp/>w.r.t.<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/>py<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>partial<sp/>derivatives<sp/>of<sp/>g(x)<sp/>w.r.t.<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(exponent<sp/>&gt;<sp/>1);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(px.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(py.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(tx.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>exponent<sp/>*<sp/>pow(tx[0],<sp/>exponent-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/><sp/>=<sp/>py[0]<sp/>*<sp/>CppAD::pow(tx[0],<sp/>exponent-1);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>exponent<sp/>*<sp/>pow(tx[0],<sp/>exponent-1)<sp/>+<sp/>py[1]<sp/>*<sp/>exponent<sp/>*<sp/>(exponent-1)<sp/>*<sp/>pow(tx[0],<sp/>exponent-2)<sp/>*<sp/>tx[1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/><sp/>=<sp/>py[1]<sp/>*<sp/>tx[1]<sp/>*<sp/>CppAD::pow(tx[0],<sp/>exponent-2);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>exponent-1;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>+=<sp/>py[0]<sp/>*<sp/>CppAD::pow(tx[0],<sp/>exponent-1);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[1]<sp/>=<sp/>py[1]<sp/>*<sp/>exponent<sp/>*<sp/>pow(tx[0],<sp/>exponent-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[1]<sp/><sp/>=<sp/>py[1]<sp/>*<sp/>CppAD::pow(tx[0],<sp/>exponent-1);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[1]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;::for_sparse_jac;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>jacobian<sp/>during<sp/>a<sp/>forward<sp/>sweep</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>a<sp/>1<sp/>x<sp/>q<sp/>matrix<sp/>R,<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>the<sp/>1<sp/>x<sp/>q<sp/>matrix<sp/>S(x)<sp/>=<sp/>f&apos;(x)<sp/>*<sp/>R.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Since<sp/>f&apos;(x)<sp/>is<sp/>dense,<sp/>the<sp/>sparsity<sp/>of<sp/>S<sp/>will<sp/>be<sp/>the<sp/>sparsity<sp/>of<sp/>R.</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>for_sparse_jac(</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>of<sp/>R,<sp/>columnwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>of<sp/>S,<sp/>columnwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>univariate_for_sparse_jac(q,<sp/>r,<sp/>s);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;::rev_sparse_jac;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>jacobian<sp/>during<sp/>a<sp/>reverse<sp/>sweep</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>For<sp/>a<sp/>q<sp/>x<sp/>1<sp/>matrix<sp/>R,<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>the<sp/>q<sp/>x<sp/>1<sp/>matrix<sp/>S(x)<sp/>=<sp/>R<sp/>*<sp/>f&apos;(x).</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>Since<sp/>f&apos;(x)<sp/>is<sp/>dense,<sp/>the<sp/>sparsity<sp/>of<sp/>S<sp/>will<sp/>be<sp/>the<sp/>sparsity<sp/>of<sp/>R.</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rev_sparse_jac(</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>of<sp/>R,<sp/>rowwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>of<sp/>S,<sp/>rowwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>univariate_rev_sparse_jac(q,<sp/>r,<sp/>s);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;::rev_sparse_hes;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>hessian<sp/>during<sp/>a<sp/>reverse<sp/>sweep</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>Assume<sp/>V(x)<sp/>=<sp/>(g(f(x)))&apos;&apos;<sp/>R<sp/><sp/>with<sp/>f(x)<sp/>=<sp/>x^p<sp/>for<sp/>a<sp/>function<sp/>g:R-&gt;R<sp/>and<sp/>a<sp/>matrix<sp/>R.</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>we<sp/>have<sp/>to<sp/>specify<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>V(x)<sp/>and<sp/>T(x)<sp/>=<sp/>(g(f(x)))&apos;.</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rev_sparse_hes(</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/>vx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>whether<sp/>argument<sp/>is<sp/>a<sp/>variable,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/>s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>S<sp/>=<sp/>g&apos;(y)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>T(x)<sp/>=<sp/>(g(f(x)))&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>R,<sp/>U,<sp/>and<sp/>V<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/>u,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>U(x)<sp/>=<sp/>g&apos;&apos;(f(x))<sp/>f&apos;(x)<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>V(x)<sp/>=<sp/>(g(f(x)))&apos;&apos;<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>univariate_rev_sparse_hes(vx,<sp/>s,<sp/>t,<sp/>q,<sp/>r,<sp/>u,<sp/>v);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal">};</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="679"><highlight class="comment">/**<sp/>power<sp/>function<sp/>with<sp/>natural<sp/>exponents<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>posintpower(</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;Type&gt;&amp;<sp/><sp/><sp/>in,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>which<sp/>first<sp/>argument<sp/>is<sp/>base<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/>vector&lt;Type&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>where<sp/>to<sp/>store<sp/>result<sp/>in<sp/>first<sp/>argument<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>exponent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classatomic__posintpower" kindref="compound">atomic_posintpower&lt;typename Type::value_type&gt;</ref><sp/>pip;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/>pip(in,<sp/>out,<sp/>exponent);</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="694"><highlight class="comment">/**<sp/>power<sp/>function<sp/>with<sp/>natural<sp/>exponents<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>posintpower(</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;Type&gt;&amp;<sp/><sp/><sp/>in,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>which<sp/>first<sp/>argument<sp/>is<sp/>base<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/>vector&lt;Type&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>where<sp/>to<sp/>store<sp/>result<sp/>in<sp/>first<sp/>argument<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>exponent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/>out[0]<sp/>=<sp/>pow(in[0],<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)exponent);</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_CPPAD_USER_ATOMIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="710"><highlight class="comment">/**<sp/>Automatic<sp/>differentiation<sp/>of<sp/>x<sp/>-&gt;<sp/>sign(x)abs(x)^p,<sp/>p&gt;=1,<sp/>as<sp/>CppAD<sp/>user-atomic<sp/>function.</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>class<sp/>implements<sp/>forward<sp/>and<sp/>reverse<sp/>operations<sp/>for<sp/>the<sp/>function<sp/>x<sp/>-&gt;<sp/>sign(x)abs(x)^p<sp/>for<sp/>use<sp/>within<sp/>CppAD.</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*<sp/><sp/>While<sp/>we<sp/>otherwise<sp/>would<sp/>have<sp/>to<sp/>use<sp/>discontinuous<sp/>sign<sp/>and<sp/>abs<sp/>functions,<sp/>our<sp/>own<sp/>implementation<sp/>allows<sp/>to<sp/>provide</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>continuously<sp/>differentiable<sp/>function.</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>treat<sp/>the<sp/>exponent<sp/>as<sp/>a<sp/>(variable)<sp/>argument<sp/>to<sp/>the<sp/>function,<sp/>with<sp/>the<sp/>assumption<sp/>that<sp/>we<sp/>never<sp/>differentiate<sp/>w.r.t.<sp/>it<sp/>(this<sp/>should<sp/>make<sp/>the<sp/>approach<sp/>threadsafe<sp/>again)</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="719" refid="classatomic__signpower" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classatomic__signpower" kindref="compound">atomic_signpower</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;</highlight></codeline>
<codeline lineno="720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="722" refid="classatomic__signpower_1a78c4e87eac36363b75bdb905eb409490" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="classatomic__signpower_1a78c4e87eac36363b75bdb905eb409490" kindref="member">atomic_signpower</ref>()</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/>:<sp/><ref refid="namespaceCppAD" kindref="compound">CppAD</ref>::atomic_base&lt;Type&gt;(</highlight><highlight class="stringliteral">&quot;signpower&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>exponent(0.0)</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>indicate<sp/>that<sp/>we<sp/>want<sp/>to<sp/>use<sp/>bool-based<sp/>sparsity<sp/>pattern<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;option(CppAD::atomic_base&lt;Type&gt;::bool_sparsity_enum);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>exponent<sp/>for<sp/>use<sp/>in<sp/>next<sp/>call<sp/>to<sp/>forward<sp/>or<sp/>reverse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/>exponent;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>stores<sp/>exponent<sp/>corresponding<sp/>to<sp/>next<sp/>call<sp/>to<sp/>forward<sp/>or<sp/>reverse</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>How<sp/>is<sp/>this<sp/>supposed<sp/>to<sp/>be<sp/>threadsafe?<sp/>(we<sp/>use<sp/>only<sp/>one<sp/>global<sp/>instantiation<sp/>of<sp/>this<sp/>class)</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_id(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>=<sp/><ref refid="pub__expr_8h_1ad445226afacd0925a35a786d6c8280d6" kindref="member">SCIPexprGetSignPowerExponent</ref>((<ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>forward<sp/>sweep<sp/>of<sp/>signpower</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Given<sp/>the<sp/>taylor<sp/>coefficients<sp/>for<sp/>x,<sp/>we<sp/>have<sp/>to<sp/>compute<sp/>the<sp/>taylor<sp/>coefficients<sp/>for<sp/>f(x),</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>that<sp/>is,<sp/>given<sp/>tx<sp/>=<sp/>(x,<sp/>x&apos;,<sp/>x&apos;&apos;,<sp/>...),<sp/>we<sp/>compute<sp/>the<sp/>coefficients<sp/>ty<sp/>=<sp/>(y,<sp/>y&apos;,<sp/>y&apos;&apos;,<sp/>...)</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>taylor<sp/>expansion<sp/>of<sp/>f(x)<sp/>=<sp/>sign(x)abs(x)^p.</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Thus,<sp/>y<sp/><sp/><sp/>=<sp/>sign(x)abs(x)^p</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sign(tx[0])abs(tx[0])^p,</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>y&apos;<sp/><sp/>=<sp/>p<sp/>*<sp/>abs(x)^(p-1)<sp/>*<sp/>x&apos;</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>p<sp/>*<sp/>abs(tx[0])^(p-1)<sp/>*<sp/>tx[1],</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>y&apos;&apos;<sp/>=<sp/>1/2<sp/>*<sp/>p<sp/>*<sp/>(p-1)<sp/>*<sp/>sign(x)<sp/>*<sp/>abs(x)^(p-2)<sp/>*<sp/>x&apos;^2<sp/>+<sp/>p<sp/>*<sp/>abs(x)^(p-1)<sp/>*<sp/>x&apos;&apos;</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1/2<sp/>*<sp/>p<sp/>*<sp/>(p-1)<sp/>*<sp/>sign(tx[0])<sp/>*<sp/>abs(tx[0])^(p-2)<sp/>*<sp/>tx[1]^2<sp/>+<sp/>p<sp/>*<sp/>abs(tx[0])^(p-1)<sp/>*<sp/>tx[2]</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forward(</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>lowest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>highest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/>vx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>whether<sp/>argument<sp/>is<sp/>a<sp/>variable,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vy,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>which<sp/>function<sp/>values<sp/>depend<sp/>on<sp/>variables,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/>tx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>taylor<sp/>coefficients<sp/>of<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(exponent<sp/>&gt;<sp/>0.0);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(tx.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ty.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(q<sp/>&lt;=<sp/>p);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vx.size()<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(vx.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(vy.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(p<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vy[0]<sp/>=<sp/>vx[0];</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>==<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>q<sp/>&lt;=<sp/>0<sp/>&amp;&amp;<sp/>0<sp/>&lt;=<sp/>p<sp/>*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[0]<sp/>=<sp/><ref refid="exprinterpret__cppad_8cpp_1a8c5ff70b6b28cd0157c50a22406f92c4" kindref="member">SIGN</ref>(tx[0])<sp/>*<sp/>pow(<ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0]),<sp/>exponent);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>&lt;=<sp/>1<sp/>&amp;&amp;<sp/>1<sp/>&lt;=<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[1]<sp/>=<sp/>pow(<ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0]),<sp/>exponent<sp/>-<sp/>1.0)<sp/>*<sp/>tx[1];</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[1]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>&lt;=<sp/>2<sp/>&amp;&amp;<sp/>2<sp/>&lt;=<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>!=<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/><sp/>=<sp/><ref refid="exprinterpret__cppad_8cpp_1a8c5ff70b6b28cd0157c50a22406f92c4" kindref="member">SIGN</ref>(tx[0])<sp/>*<sp/>pow(<ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0]),<sp/>exponent<sp/>-<sp/>2.0)<sp/>*<sp/>tx[1]<sp/>*<sp/>tx[1];</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>*=<sp/>(exponent<sp/>-<sp/>1.0)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>+=<sp/>pow(<ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0]),<sp/>exponent<sp/>-<sp/>1.0)<sp/>*<sp/>tx[2];</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y&apos;&apos;<sp/>=<sp/>2<sp/>(1/2<sp/>*<sp/>sign(x)<sp/>*<sp/>x&apos;^2<sp/>+<sp/>|x|*x&apos;&apos;)<sp/>=<sp/>sign(tx[0])<sp/>*<sp/>tx[1]^2<sp/>+<sp/>2<sp/>*<sp/>abs(tx[0])<sp/>*<sp/>tx[2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/><sp/>=<sp/><ref refid="exprinterpret__cppad_8cpp_1a8c5ff70b6b28cd0157c50a22406f92c4" kindref="member">SIGN</ref>(tx[0])<sp/>*<sp/>tx[1]<sp/>*<sp/>tx[1];</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>+=<sp/>2.0<sp/>*<sp/><ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0])<sp/>*<sp/>tx[2];</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>higher<sp/>order<sp/>derivatives<sp/>not<sp/>implemented<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p<sp/>&gt;<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>reverse<sp/>sweep<sp/>of<sp/>signpower</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Assume<sp/>y(x)<sp/>is<sp/>a<sp/>function<sp/>of<sp/>the<sp/>taylor<sp/>coefficients<sp/>of<sp/>f(x)<sp/>=<sp/>sign(x)|x|^p<sp/>for<sp/>x,<sp/>i.e.,</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>y(x)<sp/>=<sp/>[<sp/>f(x),<sp/>f&apos;(x),<sp/>f&apos;&apos;(x),<sp/>...<sp/>].</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Then<sp/>in<sp/>the<sp/>reverse<sp/>sweep<sp/>we<sp/>have<sp/>to<sp/>compute<sp/>the<sp/>elements<sp/>of<sp/>\f$\partial<sp/>h<sp/>/<sp/>\partial<sp/>x^[l],<sp/>l<sp/>=<sp/>0,<sp/>...,<sp/>k,\f$</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>where<sp/>x^[l]<sp/>is<sp/>the<sp/>l&apos;th<sp/>taylor<sp/>coefficient<sp/>(x,<sp/>x&apos;,<sp/>x&apos;&apos;,<sp/>...)<sp/>and<sp/>h(x)<sp/>=<sp/>g(y(x))<sp/>for<sp/>some<sp/>function<sp/>g:R^k<sp/>-&gt;<sp/>R.</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>That<sp/>is,<sp/>we<sp/>have<sp/>to<sp/>compute</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/><sp/>*\f$</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>px[l]<sp/>=<sp/>\partial<sp/>h<sp/>/<sp/>\partial<sp/>x^[l]<sp/>=<sp/>(\partial<sp/>g<sp/>/<sp/>\partial<sp/>y)<sp/>*<sp/>(\partial<sp/>y<sp/>/<sp/>\partial<sp/>x^[l])</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>\sum_{i=0}^k<sp/>(\partial<sp/>g<sp/>/<sp/>\partial<sp/>y_i)<sp/>*<sp/>(\partial<sp/>y_i<sp/>/<sp/>\partial<sp/>x^[l])</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>\sum_{i=0}^k<sp/>py[i]<sp/>*<sp/>(\partial<sp/>y_i<sp/>/<sp/>\partial<sp/>x^[l])</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/><sp/>*\f$</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>k<sp/>=<sp/>0,<sp/>this<sp/>means</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/><sp/><sp/>*\f$</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>y_0<sp/>/<sp/>\partial<sp/>x^[0])</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>f(x)<sp/>/<sp/>\partial<sp/>x)</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>p<sp/>*<sp/>abs(tx[0])^(p-1)</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f$</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>k<sp/>=<sp/>1,<sp/>this<sp/>means</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/><sp/>*\f$</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>y_0<sp/><sp/>/<sp/>\partial<sp/>x^[0])<sp/>+<sp/>py[1]<sp/>*<sp/>(\partial<sp/>y_1<sp/><sp/><sp/>/<sp/>\partial<sp/>x^[0])</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>f(x)<sp/>/<sp/>\partial<sp/>x)<sp/><sp/><sp/><sp/><sp/>+<sp/>py[1]<sp/>*<sp/>(\partial<sp/>f&apos;(x)<sp/>/<sp/>\partial<sp/>x)</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>p<sp/>*<sp/>abs(tx[0])^(p-1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>py[1]<sp/>*<sp/>p<sp/>*<sp/>(p-1)<sp/>*<sp/>abs(tx[0])^(p-2)<sp/>*<sp/>sign(tx[0])<sp/>*<sp/>tx[1]</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>px[1]<sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>y_0<sp/><sp/>/<sp/>\partial<sp/>x^[1])<sp/>+<sp/>py[1]<sp/>*<sp/>(\partial<sp/>y_1<sp/>/<sp/>\partial<sp/>x^[1])</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>(\partial<sp/>f(x)<sp/>/<sp/>\partial<sp/>x&apos;)<sp/><sp/><sp/><sp/>+<sp/>py[1]<sp/>*<sp/>(\partial<sp/>f&apos;(x)<sp/>/<sp/>\partial<sp/>x&apos;)</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>py[1]<sp/>*<sp/>p<sp/>*<sp/>abs(tx[0])^(p-1)</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f$</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reverse(</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>highest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/>tx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/>ty,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>partial<sp/>derivatives<sp/>of<sp/>h(x)<sp/>=<sp/>g(y(x))<sp/>w.r.t.<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/>py<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>partial<sp/>derivatives<sp/>of<sp/>g(x)<sp/>w.r.t.<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(exponent<sp/>&gt;<sp/>1);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(px.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(py.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(tx.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>p<sp/>*<sp/>pow(abs(tx[0]),<sp/>p-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/><sp/>=<sp/>py[0]<sp/>*<sp/>pow(<ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0]),<sp/>exponent<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>p;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>!=<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>p<sp/>*<sp/>abs(tx[0])^(p-1)<sp/>+<sp/>py[1]<sp/>*<sp/>p<sp/>*<sp/>(p-1)<sp/>*<sp/>abs(tx[0])^(p-2)<sp/>*<sp/>sign(tx[0])<sp/>*<sp/>tx[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/><sp/>=<sp/>py[1]<sp/>*<sp/>tx[1]<sp/>*<sp/>pow(<ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0]),<sp/>exponent<sp/>-<sp/>2.0)<sp/>*<sp/><ref refid="exprinterpret__cppad_8cpp_1a8c5ff70b6b28cd0157c50a22406f92c4" kindref="member">SIGN</ref>(tx[0]);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>exponent<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>+=<sp/>py[0]<sp/>*<sp/>pow(<ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0]),<sp/>exponent<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[1]<sp/>=<sp/>py[1]<sp/>*<sp/>p<sp/>*<sp/>abs(tx[0])^(p-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[1]<sp/><sp/>=<sp/>py[1]<sp/>*<sp/>pow(<ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0]),<sp/>exponent<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[1]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>2.0<sp/>*<sp/>abs(tx[0])<sp/>+<sp/>py[1]<sp/>*<sp/>2.0<sp/>*<sp/>sign(tx[0])<sp/>*<sp/>tx[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/><sp/>=<sp/>py[1]<sp/>*<sp/>tx[1]<sp/>*<sp/><ref refid="exprinterpret__cppad_8cpp_1a8c5ff70b6b28cd0157c50a22406f92c4" kindref="member">SIGN</ref>(tx[0]);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>+=<sp/>py[0]<sp/>*<sp/><ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0]);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>2.0;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[1]<sp/>=<sp/>py[1]<sp/>*<sp/>2.0<sp/>*<sp/>abs(tx[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[1]<sp/><sp/>=<sp/>py[1]<sp/>*<sp/><ref refid="def_8h_1add08ff5d5df711242962dc12240f968e" kindref="member">REALABS</ref>(tx[0]);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[1]<sp/>*=<sp/>2.0;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;::for_sparse_jac;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>jacobian<sp/>during<sp/>a<sp/>forward<sp/>sweep</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>a<sp/>1<sp/>x<sp/>q<sp/>matrix<sp/>R,<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>the<sp/>1<sp/>x<sp/>q<sp/>matrix<sp/>S(x)<sp/>=<sp/>f&apos;(x)<sp/>*<sp/>R.</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Since<sp/>f&apos;(x)<sp/>is<sp/>dense,<sp/>the<sp/>sparsity<sp/>of<sp/>S<sp/>will<sp/>be<sp/>the<sp/>sparsity<sp/>of<sp/>R.</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>for_sparse_jac(</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>of<sp/>R,<sp/>columnwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>of<sp/>S,<sp/>columnwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>univariate_for_sparse_jac(q,<sp/>r,<sp/>s);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;::rev_sparse_jac;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>jacobian<sp/>during<sp/>a<sp/>reverse<sp/>sweep</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>For<sp/>a<sp/>q<sp/>x<sp/>1<sp/>matrix<sp/>R,<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>the<sp/>q<sp/>x<sp/>1<sp/>matrix<sp/>S(x)<sp/>=<sp/>R<sp/>*<sp/>f&apos;(x).</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>Since<sp/>f&apos;(x)<sp/>is<sp/>dense,<sp/>the<sp/>sparsity<sp/>of<sp/>S<sp/>will<sp/>be<sp/>the<sp/>sparsity<sp/>of<sp/>R.</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rev_sparse_jac(</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>of<sp/>R,<sp/>rowwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>of<sp/>S,<sp/>rowwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>univariate_rev_sparse_jac(q,<sp/>r,<sp/>s);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;::rev_sparse_hes;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>hessian<sp/>during<sp/>a<sp/>reverse<sp/>sweep</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Assume<sp/>V(x)<sp/>=<sp/>(g(f(x)))&apos;&apos;<sp/>R<sp/><sp/>with<sp/>f(x)<sp/>=<sp/>sign(x)abs(x)^p<sp/>for<sp/>a<sp/>function<sp/>g:R-&gt;R<sp/>and<sp/>a<sp/>matrix<sp/>R.</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>we<sp/>have<sp/>to<sp/>specify<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>V(x)<sp/>and<sp/>T(x)<sp/>=<sp/>(g(f(x)))&apos;.</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rev_sparse_hes(</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>vx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>whether<sp/>argument<sp/>is<sp/>a<sp/>variable,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>S<sp/>=<sp/>g&apos;(y)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>t,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>T(x)<sp/>=<sp/>(g(f(x)))&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>S<sp/>and<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>u,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>U(x)<sp/>=<sp/>g&apos;&apos;(f(x))<sp/>f&apos;(x)<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>V(x)<sp/>=<sp/>(g(f(x)))&apos;&apos;<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>univariate_rev_sparse_hes(vx,<sp/>s,<sp/>t,<sp/>q,<sp/>r,<sp/>u,<sp/>v);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal">};</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="949"><highlight class="comment">/**<sp/>Specialization<sp/>of<sp/>atomic_signpower<sp/>template<sp/>for<sp/>intervals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="951" refid="classatomic__signpower_3_01SCIPInterval_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classatomic__signpower" kindref="compound">atomic_signpower</ref>&lt;SCIPInterval&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;SCIPInterval&gt;</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="954" refid="classatomic__signpower_3_01SCIPInterval_01_4_1a8782c6a9e72fe35a5ec60b8b2332e25d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="classatomic__signpower_3_01SCIPInterval_01_4_1a8782c6a9e72fe35a5ec60b8b2332e25d" kindref="member">atomic_signpower</ref>()</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/>:<sp/><ref refid="namespaceCppAD" kindref="compound">CppAD</ref>::atomic_base&lt;SCIPInterval&gt;(</highlight><highlight class="stringliteral">&quot;signpowerint&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>exponent(0.0)</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>indicate<sp/>that<sp/>we<sp/>want<sp/>to<sp/>use<sp/>bool-based<sp/>sparsity<sp/>pattern<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;option(CppAD::atomic_base&lt;SCIPInterval&gt;::bool_sparsity_enum);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>exponent<sp/>for<sp/>use<sp/>in<sp/>next<sp/>call<sp/>to<sp/>forward<sp/>or<sp/>reverse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/>exponent;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>stores<sp/>exponent<sp/>corresponding<sp/>to<sp/>next<sp/>call<sp/>to<sp/>forward<sp/>or<sp/>reverse</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>How<sp/>is<sp/>this<sp/>supposed<sp/>to<sp/>be<sp/>threadsafe?<sp/>(we<sp/>use<sp/>only<sp/>one<sp/>global<sp/>instantiation<sp/>of<sp/>this<sp/>class)</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_id(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>=<sp/><ref refid="pub__expr_8h_1ad445226afacd0925a35a786d6c8280d6" kindref="member">SCIPexprGetSignPowerExponent</ref>((<ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>specialization<sp/>of<sp/>atomic_signpower::forward<sp/>template<sp/>for<sp/>SCIPinterval</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>@todo<sp/>try<sp/>to<sp/>compute<sp/>tighter<sp/>resultants</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forward(</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>lowest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>highest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vx,<sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>whether<sp/>argument<sp/>is<sp/>a<sp/>variable,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vy,<sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>which<sp/>function<sp/>values<sp/>depend<sp/>on<sp/>variables,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;SCIPInterval&gt;&amp;<sp/>tx,<sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;SCIPInterval&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>taylor<sp/>coefficients<sp/>of<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(exponent<sp/>&gt;<sp/>0.0);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(tx.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ty.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(q<sp/>&lt;=<sp/>p);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vx.size()<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(vx.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(vy.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(p<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vy[0]<sp/>=<sp/>vx[0];</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>==<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>q<sp/>&lt;=<sp/>0<sp/>&amp;&amp;<sp/>0<sp/>&lt;=<sp/>p<sp/>*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[0]<sp/>=<sp/>CppAD::signpow(tx[0],<sp/>exponent);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>&lt;=<sp/>1<sp/>&amp;&amp;<sp/>1<sp/>&lt;=<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[1]<sp/>=<sp/>CppAD::pow(CppAD::abs(tx[0]),<sp/>exponent<sp/>-<sp/>1.0)<sp/>*<sp/>tx[1];</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[1]<sp/>*=<sp/>p;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>&lt;=<sp/>2<sp/>&amp;&amp;<sp/>2<sp/>&lt;=<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>!=<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/><sp/>=<sp/>CppAD::signpow(tx[0],<sp/>exponent<sp/>-<sp/>2.0)<sp/>*<sp/>CppAD::square(tx[1]);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>*=<sp/>(exponent<sp/>-<sp/>1.0)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>+=<sp/>CppAD::pow(CppAD::abs(tx[0]),<sp/>exponent<sp/>-<sp/>1.0)<sp/>*<sp/>tx[2];</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y&apos;&apos;<sp/>=<sp/>2<sp/>(1/2<sp/>*<sp/>sign(x)<sp/>*<sp/>x&apos;^2<sp/>+<sp/>|x|*x&apos;&apos;)<sp/>=<sp/>sign(tx[0])<sp/>*<sp/>tx[1]^2<sp/>+<sp/>2<sp/>*<sp/>abs(tx[0])<sp/>*<sp/>tx[2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/><sp/>=<sp/>CppAD::sign(tx[0])<sp/>*<sp/>CppAD::square(tx[1]);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>+=<sp/>2.0<sp/>*<sp/>CppAD::abs(tx[0])<sp/>*<sp/>tx[2];</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>higher<sp/>order<sp/>derivatives<sp/>not<sp/>implemented<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p<sp/>&gt;<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>specialization<sp/>of<sp/>atomic_signpower::reverse<sp/>template<sp/>for<sp/>SCIPinterval</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>@todo<sp/>try<sp/>to<sp/>compute<sp/>tighter<sp/>resultants</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reverse(</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>highest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;SCIPInterval&gt;&amp;<sp/>tx,<sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;SCIPInterval&gt;&amp;<sp/>ty,<sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;SCIPInterval&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>px,<sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>partial<sp/>derivatives<sp/>of<sp/>h(x)<sp/>=<sp/>g(y(x))<sp/>w.r.t.<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;SCIPInterval&gt;&amp;<sp/>py<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>partial<sp/>derivatives<sp/>of<sp/>g(x)<sp/>w.r.t.<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(exponent<sp/>&gt;<sp/>1);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(px.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(py.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(tx.size()<sp/>&gt;=<sp/>p+1);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>p<sp/>*<sp/>pow(abs(tx[0]),<sp/>p-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/><sp/>=<sp/>py[0]<sp/>*<sp/>CppAD::pow(CppAD::abs(tx[0]),<sp/>exponent<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>!=<sp/>2.0<sp/>)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>p<sp/>*<sp/>abs(tx[0])^(p-1)<sp/>+<sp/>py[1]<sp/>*<sp/>p<sp/>*<sp/>(p-1)<sp/>*<sp/>abs(tx[0])^(p-2)<sp/>*<sp/>sign(tx[0])<sp/>*<sp/>tx[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/><sp/>=<sp/>py[1]<sp/>*<sp/>tx[1]<sp/>*<sp/>CppAD::signpow(tx[0],<sp/>exponent<sp/>-<sp/>2.0);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>exponent<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>+=<sp/>py[0]<sp/>*<sp/>CppAD::pow(CppAD::abs(tx[0]),<sp/>exponent<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[1]<sp/>=<sp/>py[1]<sp/>*<sp/>p<sp/>*<sp/>abs(tx[0])^(p-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[1]<sp/><sp/>=<sp/>py[1]<sp/>*<sp/>CppAD::pow(CppAD::abs(tx[0]),<sp/>exponent<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[1]<sp/>*=<sp/>exponent;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[0]<sp/>=<sp/>py[0]<sp/>*<sp/>2.0<sp/>*<sp/>abs(tx[0])<sp/>+<sp/>py[1]<sp/>*<sp/>2.0<sp/>*<sp/>sign(tx[0])<sp/>*<sp/>tx[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/><sp/>=<sp/>py[1]<sp/>*<sp/>tx[1]<sp/>*<sp/>CppAD::sign(tx[0]);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>+=<sp/>py[0]<sp/>*<sp/>CppAD::abs(tx[0]);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[0]<sp/>*=<sp/>2.0;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[1]<sp/>=<sp/>py[1]<sp/>*<sp/>2.0<sp/>*<sp/>abs(tx[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[1]<sp/><sp/>=<sp/>py[1]<sp/>*<sp/>CppAD::abs(tx[0]);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[1]<sp/>*=<sp/>2.0;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;SCIPInterval&gt;::for_sparse_jac;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>jacobian<sp/>during<sp/>a<sp/>forward<sp/>sweep</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>a<sp/>1<sp/>x<sp/>q<sp/>matrix<sp/>R,<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>the<sp/>1<sp/>x<sp/>q<sp/>matrix<sp/>S(x)<sp/>=<sp/>f&apos;(x)<sp/>*<sp/>R.</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Since<sp/>f&apos;(x)<sp/>is<sp/>dense,<sp/>the<sp/>sparsity<sp/>of<sp/>S<sp/>will<sp/>be<sp/>the<sp/>sparsity<sp/>of<sp/>R.</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>for_sparse_jac(</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>of<sp/>R,<sp/>columnwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>of<sp/>S,<sp/>columnwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>univariate_for_sparse_jac(q,<sp/>r,<sp/>s);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;SCIPInterval&gt;::rev_sparse_jac;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>jacobian<sp/>during<sp/>a<sp/>reverse<sp/>sweep</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>For<sp/>a<sp/>q<sp/>x<sp/>1<sp/>matrix<sp/>R,<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>the<sp/>q<sp/>x<sp/>1<sp/>matrix<sp/>S(x)<sp/>=<sp/>R<sp/>*<sp/>f&apos;(x).</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>Since<sp/>f&apos;(x)<sp/>is<sp/>dense,<sp/>the<sp/>sparsity<sp/>of<sp/>S<sp/>will<sp/>be<sp/>the<sp/>sparsity<sp/>of<sp/>R.</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rev_sparse_jac(</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>of<sp/>R,<sp/>rowwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>of<sp/>S,<sp/>rowwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>univariate_rev_sparse_jac(q,<sp/>r,<sp/>s);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;SCIPInterval&gt;::rev_sparse_hes;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>hessian<sp/>during<sp/>a<sp/>reverse<sp/>sweep</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Assume<sp/>V(x)<sp/>=<sp/>(g(f(x)))&apos;&apos;<sp/>R<sp/><sp/>with<sp/>f(x)<sp/>=<sp/>sign(x)abs(x)^p<sp/>for<sp/>a<sp/>function<sp/>g:R-&gt;R<sp/>and<sp/>a<sp/>matrix<sp/>R.</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>we<sp/>have<sp/>to<sp/>specify<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>V(x)<sp/>and<sp/>T(x)<sp/>=<sp/>(g(f(x)))&apos;.</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rev_sparse_hes(</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>vx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>whether<sp/>argument<sp/>is<sp/>a<sp/>variable,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>S<sp/>=<sp/>g&apos;(y)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>t,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>T(x)<sp/>=<sp/>(g(f(x)))&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>S<sp/>and<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>u,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>U(x)<sp/>=<sp/>g&apos;&apos;(f(x))<sp/>f&apos;(x)<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>V(x)<sp/>=<sp/>(g(f(x)))&apos;&apos;<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>univariate_rev_sparse_hes(vx,<sp/>s,<sp/>t,<sp/>q,<sp/>r,<sp/>u,<sp/>v);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1146"><highlight class="comment">/**<sp/>template<sp/>for<sp/>evaluation<sp/>for<sp/>signpower<sp/>operator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>evalSignPower(</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>that<sp/>holds<sp/>the<sp/>exponent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/>vector&lt;Type&gt;<sp/>in(1,<sp/>arg);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/>vector&lt;Type&gt;<sp/>out(1);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classatomic__signpower" kindref="compound">atomic_signpower&lt;typename Type::value_type&gt;</ref><sp/>sp;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/>sp(in,<sp/>out,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)expr);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/>resultant<sp/>=<sp/>out[0];</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1167"><highlight class="comment">/**<sp/>template<sp/>for<sp/>evaluation<sp/>for<sp/>signpower<sp/>operator</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/>*<sp/><sp/>Only<sp/>implemented<sp/>for<sp/>real<sp/>numbers,<sp/>thus<sp/>gives<sp/>error<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>evalSignPower(</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>that<sp/>holds<sp/>the<sp/>exponent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/>CppAD::ErrorHandler::Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;evalSignPower()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>SignPower<sp/>not<sp/>implemented<sp/>for<sp/>this<sp/>value<sp/>type&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1185"><highlight class="comment">/**<sp/>specialization<sp/>of<sp/>signpower<sp/>evaluation<sp/>for<sp/>real<sp/>numbers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>evalSignPower(</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/>CppAD::AD&lt;double&gt;&amp;<sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::AD&lt;double&gt;&amp;<sp/>arg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>that<sp/>holds<sp/>the<sp/>exponent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/>exponent;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/>exponent<sp/>=<sp/><ref refid="pub__expr_8h_1ad445226afacd0925a35a786d6c8280d6" kindref="member">SCIPexprGetSignPowerExponent</ref>(expr);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>arg<sp/>==<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultant<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>arg<sp/>&gt;<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultant<sp/>=<sp/><sp/>pow(<sp/>arg,<sp/>exponent);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultant<sp/>=<sp/>-pow(-arg,<sp/>exponent);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_CPPAD_USER_ATOMIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1211" refid="exprinterpret__cppad_8cpp_1a7249a011bd8fb4cbd9b07615f61c2c1c" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1a7249a011bd8fb4cbd9b07615f61c2c1c" kindref="member">exprEvalUser</ref>(</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/>expr,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/>Type*<sp/>x,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/>funcval,</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/>Type*<sp/>gradient,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/>Type*<sp/>hessian</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1aa69db41492c7cb0a74cdf1604d7d6620" kindref="member">SCIPexprEvalUser</ref>(expr,<sp/>x,<sp/>&amp;funcval,<sp/>gradient,<sp/>hessian);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1223" refid="exprinterpret__cppad_8cpp_1a50548a834bc1b1f3f8a3e55176319772" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1a7249a011bd8fb4cbd9b07615f61c2c1c" kindref="member">exprEvalUser</ref>(</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/>expr,</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/>SCIPInterval*<sp/>x,</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/>SCIPInterval&amp;<sp/>funcval,</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/>SCIPInterval*<sp/>gradient,</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/>SCIPInterval*<sp/>hessian</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a367ccd05f678dcdaf5cfe5242fe3e82e" kindref="member">SCIPexprEvalIntUser</ref>(expr,<sp/>SCIPInterval::infinity,<sp/>x,<sp/>&amp;funcval,<sp/>gradient,<sp/>hessian);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1234"><highlight class="comment">/**<sp/>Automatic<sp/>differentiation<sp/>of<sp/>user<sp/>expression<sp/>as<sp/>CppAD<sp/>user-atomic<sp/>function.</highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1236"><highlight class="comment"><sp/>*<sp/>This<sp/>class<sp/>implements<sp/>forward<sp/>and<sp/>reverse<sp/>operations<sp/>for<sp/>a<sp/>function<sp/>given<sp/>by<sp/>a<sp/>user<sp/>expression<sp/>for<sp/>use<sp/>within<sp/>CppAD.</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1239" refid="classatomic__userexpr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classatomic__userexpr" kindref="compound">atomic_userexpr</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1242" refid="classatomic__userexpr_1a6d0358688523f4d3a91a42ca29a2d684" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="classatomic__userexpr_1a6d0358688523f4d3a91a42ca29a2d684" kindref="member">atomic_userexpr</ref>()</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/>:<sp/><ref refid="namespaceCppAD" kindref="compound">CppAD</ref>::atomic_base&lt;Type&gt;(</highlight><highlight class="stringliteral">&quot;userexpr&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>expr(<ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>indicate<sp/>that<sp/>we<sp/>want<sp/>to<sp/>use<sp/>bool-based<sp/>sparsity<sp/>pattern<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;option(CppAD::atomic_base&lt;Type&gt;::bool_sparsity_enum);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>user<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/>expr;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1254"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>stores<sp/>user<sp/>expression<sp/>corresponding<sp/>to<sp/>next<sp/>call<sp/>to<sp/>forward<sp/>or<sp/>reverse</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>how<sp/>is<sp/>this<sp/>supposed<sp/>to<sp/>be<sp/>threadsafe?<sp/>(we<sp/>use<sp/>only<sp/>one<sp/>global<sp/>instantiation<sp/>of<sp/>this<sp/>class)</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_id(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>=<sp/>(<ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)id;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="pub__expr_8h_1a0fc57c277df5a8999f286180f7d23552" kindref="member">SCIPexprGetOperator</ref>(expr)<sp/>==<sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a3211384a0836696f41c6480c10856a53" kindref="member">SCIP_EXPR_USER</ref>);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1264"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>forward<sp/>sweep<sp/>of<sp/>userexpr</highlight></codeline>
<codeline lineno="1265"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1266"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>We<sp/>follow<sp/>http://www.coin-or.org/CppAD/Doc/atomic_forward.xml</highlight></codeline>
<codeline lineno="1267"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Note,<sp/>that<sp/>p<sp/>and<sp/>q<sp/>are<sp/>interchanged!</highlight></codeline>
<codeline lineno="1268"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>a<sp/>scalar<sp/>variable<sp/>t,<sp/>let</highlight></codeline>
<codeline lineno="1270"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Y(t)<sp/>=<sp/>f(X(t))</highlight></codeline>
<codeline lineno="1271"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>X(t)<sp/>=<sp/>x^0<sp/>+<sp/>x^1<sp/>t^1<sp/>+<sp/>...<sp/>+<sp/>x^p<sp/>t^p</highlight></codeline>
<codeline lineno="1272"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>where<sp/>for<sp/>x^i<sp/>the<sp/>i<sp/>an<sp/>index,<sp/>while<sp/>for<sp/>t^i<sp/>the<sp/>i<sp/>is<sp/>an<sp/>exponent.</highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Thus,<sp/>x^k<sp/>=<sp/>1/k!<sp/>X^(k)<sp/>(0),<sp/><sp/><sp/>where<sp/>X^(k)(.)<sp/>denotes<sp/>the<sp/>k-th<sp/>derivative.</highlight></codeline>
<codeline lineno="1274"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1275"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Next,<sp/>let<sp/>y^k<sp/>=<sp/>1/k!<sp/>Y^(k)(0)<sp/>be<sp/>the<sp/>k&apos;th<sp/>taylor<sp/>coefficient<sp/>of<sp/>Y.<sp/>Thus,</highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>y^0<sp/>=<sp/>Y^(0)(0)<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><sp/><sp/>Y(0)<sp/><sp/><sp/>=<sp/>f(X(0))<sp/>=<sp/>f(x^0)</highlight></codeline>
<codeline lineno="1277"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>y^1<sp/>=<sp/>Y^(1)(0)<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><sp/><sp/>Y&apos;(0)<sp/><sp/>=<sp/>f&apos;(X(0))<sp/>*<sp/>X&apos;(0)<sp/>=<sp/>f&apos;(x^0)<sp/>*<sp/>x^1</highlight></codeline>
<codeline lineno="1278"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>y^2<sp/>=<sp/>1/2<sp/>Y^(2)(0)<sp/>=<sp/>1/2<sp/>Y&apos;&apos;(0)<sp/>=<sp/>1/2<sp/>X&apos;(0)<sp/>*<sp/>f&apos;&apos;(X(0))<sp/>X&apos;(0)<sp/>+<sp/>1/2<sp/>*<sp/>f&apos;(X(0))<sp/>*<sp/>X&apos;&apos;(0)<sp/>=<sp/>1/2<sp/>x^1<sp/>*<sp/>f&apos;&apos;(x^0)<sp/>*<sp/>x^1<sp/>+<sp/>f&apos;(x^0)<sp/>*<sp/>x^2</highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1280"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>As<sp/>x^k<sp/>=<sp/>(tx[k],<sp/>tx[(p+1)+k],<sp/>tx[2*(p+1)+k],<sp/>...,<sp/>tx[n*(p+1)+k],<sp/>we<sp/>get</highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>ty[0]<sp/>=<sp/>y^0<sp/>=<sp/>f(x^0)<sp/>=<sp/>f(tx[{1..n}*(p+1)])</highlight></codeline>
<codeline lineno="1282"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>ty[1]<sp/>=<sp/>y^1<sp/>=<sp/>f&apos;(x^0)<sp/>*<sp/>tx[{1..n}*(p+1)+1]<sp/>=<sp/>sum(i=1..n,<sp/>grad[i]<sp/>*<sp/>tx[i*(p+1)+1]),<sp/><sp/>where<sp/>grad<sp/>=<sp/>f&apos;(x^0)</highlight></codeline>
<codeline lineno="1283"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>ty[2]<sp/>=<sp/>1/2<sp/>sum(i,j=1..n,<sp/>x[i*(p+1)+1]<sp/>*<sp/>x[j*(p+1)+q]<sp/>*<sp/>hessian[i,j])<sp/>+<sp/>sum(i=1..n,<sp/>grad[i]<sp/>*<sp/>x[i*(p+1)+2])</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forward(</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>lowest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>highest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/>vx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>whether<sp/>argument<sp/>is<sp/>a<sp/>variable,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vy,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>which<sp/>function<sp/>values<sp/>depend<sp/>on<sp/>variables,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/>tx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>taylor<sp/>coefficients<sp/>of<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(expr<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(ty.size()<sp/>==<sp/>p+1);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(q<sp/>&lt;=<sp/>p);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>tx.size()<sp/>/<sp/>(p+1);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(n<sp/>==<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr));<sp/></highlight><highlight class="comment">/*lint<sp/>!e571*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(n<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vx.size()<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(vx.size()<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(vy.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(p<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y_0<sp/>is<sp/>a<sp/>variable<sp/>if<sp/>at<sp/>least<sp/>one<sp/>of<sp/>the<sp/>x_i<sp/>is<sp/>a<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vy[0]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>vx[i]<sp/>)</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vy[0]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type*<sp/>x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Type[n];</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type*<sp/>gradient<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type*<sp/>hessian<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>&lt;=<sp/>2<sp/>&amp;&amp;<sp/>1<sp/>&lt;=<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradient<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Type[n];</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>q<sp/>&lt;=<sp/>2<sp/>&amp;&amp;<sp/>2<sp/>&lt;=<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hessian<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Type[n*n];</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>tx[i<sp/>*<sp/>(p+1)<sp/>+<sp/>0];<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e835*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="exprinterpret__cppad_8cpp_1a7249a011bd8fb4cbd9b07615f61c2c1c" kindref="member">exprEvalUser</ref>(expr,<sp/>x,<sp/>ty[0],<sp/>gradient,<sp/>hessian)<sp/>!=<sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref><sp/>)</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>x;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>gradient;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>hessian;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>gradient<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[1]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[1]<sp/>+=<sp/>gradient[i]<sp/>*<sp/>tx[i<sp/>*<sp/>(p+1)<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>hessian<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(gradient<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>+=<sp/>0.5<sp/>*<sp/>hessian[i*n+j]<sp/>*<sp/>tx[i<sp/>*<sp/>(p+1)<sp/>+<sp/>1]<sp/>*<sp/>tx[j<sp/>*<sp/>(p+1)<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty[2]<sp/>+=<sp/>gradient[i]<sp/>*<sp/>tx[i<sp/>*<sp/>(p+1)<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>x;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>gradient;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>hessian;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>higher<sp/>order<sp/>derivatives<sp/>not<sp/>implemented<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p<sp/>&gt;<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1370"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>reverse<sp/>sweep<sp/>of<sp/>userexpr</highlight></codeline>
<codeline lineno="1371"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1372"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>We<sp/>follow<sp/>http://www.coin-or.org/CppAD/Doc/atomic_reverse.xml</highlight></codeline>
<codeline lineno="1373"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Note,<sp/>that<sp/>there<sp/>q<sp/>is<sp/>our<sp/>p.</highlight></codeline>
<codeline lineno="1374"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1375"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>a<sp/>scalar<sp/>variable<sp/>t,<sp/>let</highlight></codeline>
<codeline lineno="1376"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Y(t)<sp/>=<sp/>f(X(t))</highlight></codeline>
<codeline lineno="1377"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>X(t)<sp/>=<sp/>x^0<sp/>+<sp/>x^1<sp/>t^1<sp/>+<sp/>...<sp/>+<sp/>x^p<sp/>t^p</highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>where<sp/>for<sp/>x^i<sp/>the<sp/>i<sp/>an<sp/>index,<sp/>while<sp/>for<sp/>t^i<sp/>the<sp/>i<sp/>is<sp/>an<sp/>exponent.</highlight></codeline>
<codeline lineno="1379"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Thus,<sp/>x^k<sp/>=<sp/>1/k!<sp/>X^(k)<sp/>(0),<sp/><sp/><sp/>where<sp/>X^(k)(.)<sp/>denotes<sp/>the<sp/>k-th<sp/>derivative.</highlight></codeline>
<codeline lineno="1380"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1381"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Next,<sp/>let<sp/>y^k<sp/>=<sp/>1/k!<sp/>Y^(k)(0)<sp/>be<sp/>the<sp/>k&apos;th<sp/>taylor<sp/>coefficient<sp/>of<sp/>Y.<sp/>Thus,</highlight></codeline>
<codeline lineno="1382"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Y(t)<sp/>=<sp/>y^0<sp/>+<sp/>y^1<sp/>t^1<sp/>+<sp/>y^2<sp/>t^2<sp/>+<sp/>...</highlight></codeline>
<codeline lineno="1383"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>y^0,<sp/>y^1,<sp/>...<sp/>are<sp/>the<sp/>taylor<sp/>coefficients<sp/>of<sp/>f(x).</highlight></codeline>
<codeline lineno="1384"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1385"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Further,<sp/>let<sp/>F(x^0,..,x^p)<sp/>by<sp/>given<sp/>as<sp/>F^k(x)<sp/>=<sp/>y^k.<sp/>Thus,</highlight></codeline>
<codeline lineno="1386"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>F^0(x)<sp/>=<sp/>y^0<sp/>=<sp/>Y^(0)(0)<sp/><sp/><sp/>=<sp/>f(x^0)</highlight></codeline>
<codeline lineno="1387"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>F^1(x)<sp/>=<sp/>y^1<sp/>=<sp/>Y^(1)(0)<sp/><sp/><sp/>=<sp/>f&apos;(x^0)<sp/>*<sp/>x^1</highlight></codeline>
<codeline lineno="1388"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>F^2(x)<sp/>=<sp/>y^2<sp/>=<sp/>1/2<sp/>Y&apos;&apos;(0)<sp/>=<sp/>1/2<sp/>x^1<sp/>f&apos;&apos;(x^0)<sp/>x^1<sp/>+<sp/>f&apos;(x^0)<sp/>x^2</highlight></codeline>
<codeline lineno="1389"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1390"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Given<sp/>functions<sp/>G:<sp/>R^(p+1)<sp/>-&gt;<sp/>R<sp/>and<sp/>H:<sp/>R^(n*(p+1))<sp/>-&gt;<sp/>R,<sp/>where<sp/>H(x^0,<sp/>x^1,<sp/>..,<sp/>x^p)<sp/>=<sp/>G(F(x^0,..,x^p)),</highlight></codeline>
<codeline lineno="1391"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>value<sp/>of<sp/>\f$\partial<sp/>H<sp/>/<sp/>\partial<sp/>x^l,<sp/>l<sp/>=<sp/>0..p,\f$<sp/>in<sp/>px.<sp/>Therefor,</highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f$</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>px^l<sp/>=<sp/>\partial<sp/>H<sp/>/<sp/>\partial<sp/>x^l</highlight></codeline>
<codeline lineno="1394"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sum(k=0..p,<sp/>(\partial<sp/>G<sp/>/<sp/>\partial<sp/>y^k)<sp/>*<sp/>(\partial<sp/>y^k<sp/>/<sp/>\partial<sp/>x^l)</highlight></codeline>
<codeline lineno="1395"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sum(k=0..p,<sp/>py[k]<sp/>*<sp/>(\partial<sp/>F^k<sp/>/<sp/>\partial<sp/>x^l)</highlight></codeline>
<codeline lineno="1396"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f$</highlight></codeline>
<codeline lineno="1397"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1398"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>p<sp/>=<sp/>0,<sp/>this<sp/>means</highlight></codeline>
<codeline lineno="1399"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f$</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>px^0<sp/>=<sp/>py[0]<sp/>*<sp/>\partial<sp/>F^0<sp/>/<sp/>\partial<sp/>x^0</highlight></codeline>
<codeline lineno="1401"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>\partial<sp/>f(x^0)<sp/>/<sp/>\partial<sp/>x^0</highlight></codeline>
<codeline lineno="1402"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>f&apos;(x^0)</highlight></codeline>
<codeline lineno="1403"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f$</highlight></codeline>
<codeline lineno="1404"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1405"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>p<sp/>=<sp/>1,<sp/>this<sp/>means<sp/>(for<sp/>l<sp/>=<sp/>0):</highlight></codeline>
<codeline lineno="1406"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f[</highlight></codeline>
<codeline lineno="1407"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>px^0<sp/>=<sp/>py[0]<sp/>*<sp/>\partial<sp/>F^0<sp/><sp/><sp/><sp/>/<sp/>\partial<sp/>x^0<sp/>+<sp/>py[1]<sp/>*<sp/>\partial<sp/>F^1<sp/>/<sp/>\partial<sp/>x^0</highlight></codeline>
<codeline lineno="1408"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>\partial<sp/>f(x^0)<sp/>/<sp/>\partial<sp/>x^0<sp/>+<sp/>py[1]<sp/>*<sp/>\partial<sp/>(f&apos;(x^0)<sp/>*<sp/>x^1)<sp/>/<sp/>\partial<sp/>x^0</highlight></codeline>
<codeline lineno="1409"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>f&apos;(x^0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>py[1]<sp/>*<sp/>f&apos;&apos;(x^0)<sp/>*<sp/>x^1</highlight></codeline>
<codeline lineno="1410"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f]</highlight></codeline>
<codeline lineno="1411"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>and<sp/>(for<sp/>l=1):</highlight></codeline>
<codeline lineno="1412"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\[</highlight></codeline>
<codeline lineno="1413"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/>px^1<sp/>=<sp/>py[0]<sp/>*<sp/>\partial<sp/>F^0<sp/><sp/><sp/><sp/>/<sp/>\partial<sp/>x^1<sp/>+<sp/>py[1]<sp/>*<sp/>\partial<sp/>F^1<sp/>/<sp/>\partial<sp/>x^1</highlight></codeline>
<codeline lineno="1414"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>\partial<sp/>f(x^0)<sp/>/<sp/>\partial<sp/>x^1<sp/>+<sp/>py[1]<sp/>*<sp/>\partial<sp/>(f&apos;(x^0)<sp/>*<sp/>x^1)<sp/>/<sp/>\partial<sp/>x^0</highlight></codeline>
<codeline lineno="1415"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>py[0]<sp/>*<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>py[1]<sp/>*<sp/>f&apos;(x^0)</highlight></codeline>
<codeline lineno="1416"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>\f]</highlight></codeline>
<codeline lineno="1417"><highlight class="comment"><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1418"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>As<sp/>x^k<sp/>=<sp/>(tx[k],<sp/>tx[(p+1)+k],<sp/>tx[2*(p+1)+k],<sp/>...,<sp/>tx[n*(p+1)+k]<sp/>and</highlight></codeline>
<codeline lineno="1419"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>px^k<sp/>=<sp/>(px[k],<sp/>px[(p+1)+k],<sp/>px[2*(p+1)+k],<sp/>...,<sp/>px[n*(p+1)+k],<sp/>we<sp/>get</highlight></codeline>
<codeline lineno="1420"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>for<sp/>p<sp/>=<sp/>0:</highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>px[i]<sp/>=<sp/>(px^0)_i<sp/>=<sp/>py[0]<sp/>*<sp/>grad[i]</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>for<sp/>p<sp/>=<sp/>1:</highlight></codeline>
<codeline lineno="1423"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>px[i*2+0]<sp/>=<sp/>(px^0)_i<sp/>=<sp/>py[0]<sp/>*<sp/>grad[i]<sp/>+<sp/>py[1]<sp/>*<sp/>sum(j,<sp/>hessian[j,i]<sp/>*<sp/>tx[j*2+1])</highlight></codeline>
<codeline lineno="1424"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>px[i*2+1]<sp/>=<sp/>(px^1)_i<sp/>=<sp/>py[1]<sp/>*<sp/>grad[i]</highlight></codeline>
<codeline lineno="1425"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reverse(</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>highest<sp/>order<sp/>Taylor<sp/>coefficient<sp/>that<sp/>we<sp/>are<sp/>evaluating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/>tx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/>ty,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>taylor<sp/>coefficients<sp/>of<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>partial<sp/>derivatives<sp/>of<sp/>h(x)<sp/>=<sp/>g(y(x))<sp/>w.r.t.<sp/>x<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;Type&gt;&amp;<sp/><sp/>py<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>partial<sp/>derivatives<sp/>of<sp/>g(x)<sp/>w.r.t.<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(expr<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(px.size()<sp/>==<sp/>tx.size());</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(py.size()<sp/>==<sp/>p+1);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>tx.size()<sp/>/<sp/>(p+1);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(n<sp/>==<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr));<sp/></highlight><highlight class="comment">/*lint<sp/>!e571*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(n<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type*<sp/>x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Type[n];</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>funcval;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type*<sp/>gradient<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Type[n];</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type*<sp/>hessian<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hessian<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Type[n*n];</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>tx[i<sp/>*<sp/>(p+1)<sp/>+<sp/>0];<sp/></highlight><highlight class="comment">/*lint<sp/>!e835*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="exprinterpret__cppad_8cpp_1a7249a011bd8fb4cbd9b07615f61c2c1c" kindref="member">exprEvalUser</ref>(expr,<sp/>x,<sp/>funcval,<sp/>gradient,<sp/>hessian)<sp/>!=<sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref><sp/>)</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>x;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>gradient;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>hessian;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>px[j]<sp/>=<sp/>(px^0)_j<sp/>=<sp/>py[0]<sp/>*<sp/>grad[j]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[i]<sp/>=<sp/>py[0]<sp/>*<sp/>gradient[i];</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>px[i*2+0]<sp/>=<sp/>(px^0)_i<sp/>=<sp/>py[0]<sp/>*<sp/>grad[i]<sp/>+<sp/>py[1]<sp/>*<sp/>sum(j,<sp/>hessian[j,i]<sp/>*<sp/>tx[j*2+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>px[i*2+1]<sp/>=<sp/>(px^1)_i<sp/>=<sp/>py[1]<sp/>*<sp/>grad[i]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(hessian<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[i*2+0]<sp/>=<sp/>py[0]<sp/>*<sp/>gradient[i];<sp/></highlight><highlight class="comment">/*lint<sp/>!e835*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[i*2+0]<sp/>+=<sp/>py[1]<sp/>*<sp/>hessian[i+n*j]<sp/>*<sp/>tx[j*2+1];<sp/></highlight><highlight class="comment">/*lint<sp/>!e835*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px[i*2+1]<sp/>=<sp/>py[1]<sp/>*<sp/>gradient[i];</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e715*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;::for_sparse_jac;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1492"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>jacobian<sp/>during<sp/>a<sp/>forward<sp/>sweep</highlight></codeline>
<codeline lineno="1493"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>a<sp/>1<sp/>x<sp/>q<sp/>matrix<sp/>R,<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>the<sp/>1<sp/>x<sp/>q<sp/>matrix<sp/>S(x)<sp/>=<sp/>f&apos;(x)<sp/>*<sp/>R.</highlight></codeline>
<codeline lineno="1494"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Since<sp/>we<sp/>assume<sp/>f&apos;(x)<sp/>to<sp/>be<sp/>dense,<sp/>the<sp/>sparsity<sp/>of<sp/>S<sp/>will<sp/>be<sp/>the<sp/>sparsity<sp/>of<sp/>R.</highlight></codeline>
<codeline lineno="1495"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>for_sparse_jac(</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>of<sp/>R,<sp/>columnwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>of<sp/>S,<sp/>columnwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(expr<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(s.size()<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>r.size()<sp/>/<sp/>q;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(n<sp/>==<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr));<sp/></highlight><highlight class="comment">/*lint<sp/>!e571*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sparsity<sp/>for<sp/>S(x)<sp/>=<sp/>f&apos;(x)<sp/>*<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>q;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[j]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[j]<sp/>|=<sp/>r[i<sp/>*<sp/>q<sp/>+<sp/>j];<sp/></highlight><highlight class="comment">/*lint<sp/>!e1786*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;::rev_sparse_jac;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>jacobian<sp/>during<sp/>a<sp/>reverse<sp/>sweep</highlight></codeline>
<codeline lineno="1522"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>For<sp/>a<sp/>q<sp/>x<sp/>1<sp/>matrix<sp/>S,<sp/>we<sp/>have<sp/>to<sp/>return<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>the<sp/>q<sp/>x<sp/>1<sp/>matrix<sp/>R(x)<sp/>=<sp/>S<sp/>*<sp/>f&apos;(x).</highlight></codeline>
<codeline lineno="1523"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Since<sp/>we<sp/>assume<sp/>f&apos;(x)<sp/>to<sp/>be<sp/>dense,<sp/>the<sp/>sparsity<sp/>of<sp/>R<sp/>will<sp/>be<sp/>the<sp/>sparsity<sp/>of<sp/>S.</highlight></codeline>
<codeline lineno="1524"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rev_sparse_jac(</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>rt,<sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>of<sp/>R,<sp/>rowwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>st<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>of<sp/>S,<sp/>rowwise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(expr<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(rt.size()<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>st.size()<sp/>/<sp/>q;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(n<sp/>==<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr));</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sparsity<sp/>for<sp/>S(x)^T<sp/>=<sp/>f&apos;(x)^T<sp/>*<sp/>R^T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>q;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st[i<sp/>*<sp/>q<sp/>+<sp/>j]<sp/>=<sp/>rt[j];</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CppAD::atomic_base&lt;Type&gt;::rev_sparse_hes;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1547"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>computes<sp/>sparsity<sp/>of<sp/>hessian<sp/>during<sp/>a<sp/>reverse<sp/>sweep</highlight></codeline>
<codeline lineno="1548"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Assume<sp/>V(x)<sp/>=<sp/>(g(f(x)))&apos;&apos;<sp/>R<sp/><sp/>for<sp/>a<sp/>function<sp/>g:R-&gt;R<sp/>and<sp/>a<sp/>matrix<sp/>R.</highlight></codeline>
<codeline lineno="1549"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>we<sp/>have<sp/>to<sp/>specify<sp/>the<sp/>sparsity<sp/>pattern<sp/>of<sp/>V(x)<sp/>and<sp/>T(x)<sp/>=<sp/>(g(f(x)))&apos;.</highlight></codeline>
<codeline lineno="1550"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rev_sparse_hes(</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vx,<sp/></highlight><highlight class="comment">/**&lt;<sp/>indicates<sp/>whether<sp/>argument<sp/>is<sp/>a<sp/>variable,<sp/>or<sp/>empty<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>S<sp/>=<sp/>g&apos;(y)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>T(x)<sp/>=<sp/>(g(f(x)))&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>columns<sp/>in<sp/>S<sp/>and<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>r,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/>u,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>sparsity<sp/>pattern<sp/>of<sp/>U(x)<sp/>=<sp/>g&apos;&apos;(f(x))<sp/>f&apos;(x)<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::vector&lt;bool&gt;&amp;<sp/><sp/><sp/><sp/><sp/><sp/>v<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>vector<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>V(x)<sp/>=<sp/>(g(f(x)))&apos;&apos;<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(expr<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>vx.size();</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr)<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(s.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(t.size()<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(r.size()<sp/>==<sp/>n<sp/>*<sp/>q);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(u.size()<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(v.size()<sp/>==<sp/>n<sp/>*<sp/>q);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sparsity<sp/>for<sp/>T(x)<sp/>=<sp/>S(x)<sp/>*<sp/>f&apos;(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t[i]<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V(x)<sp/>=<sp/>f&apos;(x)^T<sp/>*<sp/>g&apos;&apos;(y)<sp/>*<sp/>f&apos;(x)<sp/>*<sp/>R<sp/><sp/>+<sp/><sp/>g&apos;(y)<sp/>*<sp/>f&apos;&apos;(x)<sp/>*<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>U(x)<sp/>=<sp/>g&apos;&apos;(y)<sp/>*<sp/>f&apos;(x)<sp/>*<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>S(x)<sp/>=<sp/>g&apos;(y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>back<sp/>propagate<sp/>the<sp/>sparsity<sp/>for<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>q;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>i<sp/>*<sp/>q<sp/>+<sp/>j]<sp/>=<sp/>u[j];</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>include<sp/>forward<sp/>Jacobian<sp/>sparsity<sp/>in<sp/>Hessian<sp/>sparsity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sparsity<sp/>for<sp/>g&apos;(y)<sp/>*<sp/>f&apos;&apos;(x)<sp/>*<sp/>R<sp/><sp/>(Note<sp/>f&apos;&apos;(x)<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>dense)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>s[0]<sp/>)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>q;<sp/>j++<sp/>)</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k<sp/>)</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>i<sp/>*<sp/>q<sp/>+<sp/>j]<sp/>|=<sp/>r[<sp/>k<sp/>*<sp/>q<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>evalUser(</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operands<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>that<sp/>holds<sp/>the<sp/>user<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>args<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/>vector&lt;Type&gt;<sp/>in(args,<sp/>args<sp/>+<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr));</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/>vector&lt;Type&gt;<sp/>out(1);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classatomic__userexpr" kindref="compound">atomic_userexpr&lt;typename Type::value_type&gt;</ref><sp/>u;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/>u(in,<sp/>out,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)expr);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/>resultant<sp/>=<sp/>out[0];</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>evalUser(</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operands<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>that<sp/>holds<sp/>the<sp/>user<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/>CppAD::ErrorHandler::Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;evalUser()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>user<sp/>expressions<sp/>in<sp/>CppAD<sp/>not<sp/>possible<sp/>without<sp/>CppAD<sp/>user<sp/>atomic<sp/>facility&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1635"><highlight class="comment">/**<sp/>template<sp/>for<sp/>evaluation<sp/>for<sp/>minimum<sp/>operator</highlight></codeline>
<codeline lineno="1636"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1637"><highlight class="comment"><sp/>*<sp/><sp/>Only<sp/>implemented<sp/>for<sp/>real<sp/>numbers,<sp/>thus<sp/>gives<sp/>error<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="1638"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>implement<sp/>own<sp/>userad<sp/>function</highlight></codeline>
<codeline lineno="1639"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a29d2a2c50c0c8fae2ed312294b9d4872" kindref="member">evalMin</ref>(</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1647"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715,1764}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/>CppAD::ErrorHandler::Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;evalMin()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Min<sp/>not<sp/>implemented<sp/>for<sp/>this<sp/>value<sp/>type&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1654"><highlight class="comment">/**<sp/>specialization<sp/>of<sp/>minimum<sp/>evaluation<sp/>for<sp/>real<sp/>numbers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1656" refid="exprinterpret__cppad_8cpp_1a29d2a2c50c0c8fae2ed312294b9d4872" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a29d2a2c50c0c8fae2ed312294b9d4872" kindref="member">evalMin</ref>(</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/>CppAD::AD&lt;double&gt;&amp;<sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::AD&lt;double&gt;&amp;<sp/>arg1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::AD&lt;double&gt;&amp;<sp/>arg2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/>resultant<sp/>=<sp/><ref refid="def_8h_1a74e75242132eaabbc1c512488a135926" kindref="member">MIN</ref>(arg1,<sp/>arg2);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1665"><highlight class="comment">/**<sp/>template<sp/>for<sp/>evaluation<sp/>for<sp/>maximum<sp/>operator</highlight></codeline>
<codeline lineno="1666"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1667"><highlight class="comment"><sp/>*<sp/><sp/>Only<sp/>implemented<sp/>for<sp/>real<sp/>numbers,<sp/>thus<sp/>gives<sp/>error<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="1668"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>implement<sp/>own<sp/>userad<sp/>function</highlight></codeline>
<codeline lineno="1669"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a21cd725b0516cc3639c0bfbf134c96ee" kindref="member">evalMax</ref>(</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1677"><highlight class="normal">{<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e{715,1764}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/>CppAD::ErrorHandler::Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>__LINE__,<sp/>__FILE__,</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;evalMax()&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>Max<sp/>not<sp/>implemented<sp/>for<sp/>this<sp/>value<sp/>type&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1684"><highlight class="comment">/**<sp/>specialization<sp/>of<sp/>maximum<sp/>evaluation<sp/>for<sp/>real<sp/>numbers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1686" refid="exprinterpret__cppad_8cpp_1a21cd725b0516cc3639c0bfbf134c96ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a21cd725b0516cc3639c0bfbf134c96ee" kindref="member">evalMax</ref>(</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/>CppAD::AD&lt;double&gt;&amp;<sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::AD&lt;double&gt;&amp;<sp/>arg1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::AD&lt;double&gt;&amp;<sp/>arg2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/>resultant<sp/>=<sp/><ref refid="def_8h_1aacc3ee1a7f283f8ef65cea31f4436a95" kindref="member">MAX</ref>(arg1,<sp/>arg2);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1695"><highlight class="comment">/**<sp/>template<sp/>for<sp/>evaluation<sp/>for<sp/>square-root<sp/>operator</highlight></codeline>
<codeline lineno="1696"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1697"><highlight class="comment"><sp/>*<sp/><sp/>Default<sp/>is<sp/>to<sp/>use<sp/>the<sp/>standard<sp/>sqrt-function.</highlight></codeline>
<codeline lineno="1698"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>evalSqrt(</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/>resultant<sp/>=<sp/>sqrt(arg);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1709"><highlight class="comment">/**<sp/>template<sp/>for<sp/>evaluation<sp/>for<sp/>absolute<sp/>value<sp/>operator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a483dc283c04314aaaddb6e1b1fbe3fea" kindref="member">evalAbs</ref>(</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/>resultant<sp/>=<sp/>abs(arg);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1720"><highlight class="comment">/**<sp/>specialization<sp/>of<sp/>absolute<sp/>value<sp/>evaluation<sp/>for<sp/>intervals</highlight></codeline>
<codeline lineno="1721"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1722"><highlight class="comment"><sp/>*<sp/><sp/>Use<sp/>sqrt(x^2)<sp/>for<sp/>now<sp/>@todo<sp/>implement<sp/>own<sp/>userad<sp/>function.</highlight></codeline>
<codeline lineno="1723"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1725" refid="exprinterpret__cppad_8cpp_1a483dc283c04314aaaddb6e1b1fbe3fea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="exprinterpret__cppad_8cpp_1a483dc283c04314aaaddb6e1b1fbe3fea" kindref="member">evalAbs</ref>(</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/>CppAD::AD&lt;SCIPInterval&gt;&amp;<sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CppAD::AD&lt;SCIPInterval&gt;&amp;<sp/>arg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1729"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/>vector&lt;CppAD::AD&lt;SCIPInterval&gt;<sp/>&gt;<sp/>in(1,<sp/>arg);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/>vector&lt;CppAD::AD&lt;SCIPInterval&gt;<sp/>&gt;<sp/>out(1);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/>posintpower(in,<sp/>out,<sp/>2);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/>resultant<sp/>=<sp/>sqrt(out[0]);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1738"><highlight class="comment">/**<sp/>integer<sp/>power<sp/>operation<sp/>for<sp/>arbitrary<sp/>integer<sp/>exponents<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>evalIntPower(</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>resultant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>exponent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Type&gt;<sp/>in(1,<sp/>arg);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Type&gt;<sp/>out(1);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>posintpower(in,<sp/>out,<sp/>exponent);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultant<sp/>=<sp/>out[0];</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>&lt;<sp/>-1<sp/>)</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Type&gt;<sp/>in(1,<sp/>arg);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Type&gt;<sp/>out(1);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>posintpower(in,<sp/>out,<sp/>-exponent);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultant<sp/>=<sp/>Type(1.0)/out[0];</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultant<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultant<sp/>=<sp/>Type(1.0);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/>assert(exponent<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/>resultant<sp/>=<sp/>Type(1.0)/arg;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1785"><highlight class="comment">/**<sp/>CppAD<sp/>compatible<sp/>evaluation<sp/>of<sp/>an<sp/>expression<sp/>for<sp/>given<sp/>arguments<sp/>and<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/>eval(</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;Type&gt;&amp;<sp/><sp/><sp/>x,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/>Type&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/>Type*<sp/>buf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/>assert(expr<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>todo<sp/>use<sp/>SCIP_MAXCHILD_ESTIMATE<sp/>as<sp/>in<sp/>expression.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr)<sp/>)</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>BMSallocMemoryArray(&amp;buf,<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr))<sp/>==<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e666*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da9d99f2bbdf6c09830e6db15bc35d3415" kindref="member">SCIP_NOMEMORY</ref>;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr);<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>eval(<ref refid="pub__expr_8h_1a5bf46444b29de80b56547c3ea29c2b32" kindref="member">SCIPexprGetChildren</ref>(expr)[i],<sp/>x,<sp/>param,<sp/>buf[i])<sp/>);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<ref refid="pub__expr_8h_1a0fc57c277df5a8999f286180f7d23552" kindref="member">SCIPexprGetOperator</ref>(expr))</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a08c0b7f855a1a9a23be28cf84f0877f3" kindref="member">SCIP_EXPR_VARIDX</ref>:</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="pub__expr_8h_1af09996e9175416dae554e76427d3bb93" kindref="member">SCIPexprGetOpIndex</ref>(expr)<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)x.size());</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>x[<ref refid="pub__expr_8h_1af09996e9175416dae554e76427d3bb93" kindref="member">SCIPexprGetOpIndex</ref>(expr)];</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a9441632adf0da0060161635f50e33a0e" kindref="member">SCIP_EXPR_CONST</ref>:</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/><ref refid="pub__expr_8h_1a30db4adf5a04ae548b55c27490a1a4b5" kindref="member">SCIPexprGetOpReal</ref>(expr);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a0e707f276bb20287cd14910fc288b9ed" kindref="member">SCIP_EXPR_PARAM</ref>:</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(param<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>param[<ref refid="pub__expr_8h_1af09996e9175416dae554e76427d3bb93" kindref="member">SCIPexprGetOpIndex</ref>(expr)];</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a990b7f90a7293e5827073b45523325cf" kindref="member">SCIP_EXPR_PLUS</ref>:</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>buf[0]<sp/>+<sp/>buf[1];</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a5ca0f1ab17e01867adc90b774585c08a" kindref="member">SCIP_EXPR_MINUS</ref>:</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>buf[0]<sp/>-<sp/>buf[1];</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a4d8bc475f5a122e94e0635f585dcba1e" kindref="member">SCIP_EXPR_MUL</ref>:</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>buf[0]<sp/>*<sp/>buf[1];</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a01a211c3350555b45adc0a945d852d66" kindref="member">SCIP_EXPR_DIV</ref>:</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>buf[0]<sp/>/<sp/>buf[1];</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7ae7a9db96f656ea49c0a7beb2baa3c4ed" kindref="member">SCIP_EXPR_SQUARE</ref>:</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>evalIntPower(val,<sp/>buf[0],<sp/>2);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a34ab5e73e2b4e5259498df7e05542680" kindref="member">SCIP_EXPR_SQRT</ref>:</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>evalSqrt(val,<sp/>buf[0]);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7aa45dd1610fb2677d120070eb0442f09d" kindref="member">SCIP_EXPR_REALPOWER</ref>:</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>CppAD::pow(buf[0],<sp/><ref refid="pub__expr_8h_1ab654b47eb34b1109ba455c0196bf10e8" kindref="member">SCIPexprGetRealPowerExponent</ref>(expr));</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7ad5481685f6fabfc42b325f2a01a84de8" kindref="member">SCIP_EXPR_INTPOWER</ref>:</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>evalIntPower(val,<sp/>buf[0],<sp/><ref refid="pub__expr_8h_1a4f54dbfc15691b82db07f76b33cd078f" kindref="member">SCIPexprGetIntPowerExponent</ref>(expr));</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a6e0f90d79105cdcf80561ea9a00778f4" kindref="member">SCIP_EXPR_SIGNPOWER</ref>:</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>evalSignPower(val,<sp/>buf[0],<sp/>expr);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7aaed3aafb02368338b8af40a40813e8ff" kindref="member">SCIP_EXPR_EXP</ref>:</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>exp(buf[0]);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a9bdeca11a6e94e4d286a548b6f0143a7" kindref="member">SCIP_EXPR_LOG</ref>:</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>log(buf[0]);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a2f9acf2ad39b3d2f9aea629507c2d577" kindref="member">SCIP_EXPR_SIN</ref>:</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>sin(buf[0]);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7adc0bbc2202eb4b0151270fe86c624fdb" kindref="member">SCIP_EXPR_COS</ref>:</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>cos(buf[0]);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a69d04d8993454e7df3f0c4d41dc87be2" kindref="member">SCIP_EXPR_TAN</ref>:</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>tan(buf[0]);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SCIP_DISABLED_CODE<sp/></highlight><highlight class="comment">/*<sp/>these<sp/>operators<sp/>are<sp/>currently<sp/>disabled<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SCIP_EXPR_ERF:</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>erf(buf[0]);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SCIP_EXPR_ERFI:</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dae720b7ff5b19aabbca969eb41598368a" kindref="member">SCIP_ERROR</ref>;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a116cfaa8fb90a0263d60f99b8ce25fac" kindref="member">SCIP_EXPR_MIN</ref>:</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="exprinterpret__cppad_8cpp_1a29d2a2c50c0c8fae2ed312294b9d4872" kindref="member">evalMin</ref>(val,<sp/>buf[0],<sp/>buf[1]);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7aef4c071e227bd1c849b70fc57efe1c7b" kindref="member">SCIP_EXPR_MAX</ref>:</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="exprinterpret__cppad_8cpp_1a21cd725b0516cc3639c0bfbf134c96ee" kindref="member">evalMax</ref>(val,<sp/>buf[0],<sp/>buf[1]);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a8b861f16bee429f870d529cc7098fc0c" kindref="member">SCIP_EXPR_ABS</ref>:</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="exprinterpret__cppad_8cpp_1a483dc283c04314aaaddb6e1b1fbe3fea" kindref="member">evalAbs</ref>(val,<sp/>buf[0]);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7aa70a4ab0af7ba2932f985c46dc6f0afb" kindref="member">SCIP_EXPR_SIGN</ref>:</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>sign(buf[0]);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7af49c66890f39ac93534204930e41926b" kindref="member">SCIP_EXPR_SUM</ref>:</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr);<sp/>++i)</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>buf[i];</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7acf10c3cf355f0342155ea3b4b229e605" kindref="member">SCIP_EXPR_PRODUCT</ref>:</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr);<sp/>++i)</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>*=<sp/>buf[i];</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a962e2e2ff2373911fb0bc45c1e1907b3" kindref="member">SCIP_EXPR_LINEAR</ref>:</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/>coefs;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>coefs<sp/>=<sp/><ref refid="pub__expr_8h_1a3622b0e8b3f42225474447d2a5d52452" kindref="member">SCIPexprGetLinearCoefs</ref>(expr);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(coefs<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/><ref refid="pub__expr_8h_1a6d5b654b0f5d330ea5d95c308f545d19" kindref="member">SCIPexprGetLinearConstant</ref>(expr);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr);<sp/>++i)</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>coefs[i]<sp/>*<sp/>buf[i];<sp/></highlight><highlight class="comment">/*lint<sp/>!e613*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7aa776829b397361337bd88514aea2461f" kindref="member">SCIP_EXPR_QUADRATIC</ref>:</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/>lincoefs;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref>*<sp/>quadelems;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nquadelems;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/>sqrcoef;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>lincoef;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Type&gt;<sp/>in(1);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Type&gt;<sp/>out(1);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lincoefs<sp/><sp/><sp/>=<sp/><ref refid="pub__expr_8h_1a7196ac7fec3f5c38531e73faab66138c" kindref="member">SCIPexprGetQuadLinearCoefs</ref>(expr);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nquadelems<sp/>=<sp/><ref refid="pub__expr_8h_1a95b96513dec722d7084d81b800511006" kindref="member">SCIPexprGetNQuadElements</ref>(expr);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quadelems<sp/><sp/>=<sp/><ref refid="pub__expr_8h_1a086c11beaf74e9b931286930ccc45d25" kindref="member">SCIPexprGetQuadElements</ref>(expr);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(quadelems<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>nquadelems<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__expr_8h_1a7448839a1f4d853210f0aec3c3965fd1" kindref="member">SCIPexprSortQuadElems</ref>(expr);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/><ref refid="pub__expr_8h_1abe9b1d1a3184ebd6de047b3a7d76ac01" kindref="member">SCIPexprGetQuadConstant</ref>(expr);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>each<sp/>argument,<sp/>we<sp/>collect<sp/>it&apos;s<sp/>linear<sp/>index<sp/>from<sp/>lincoefs,<sp/>it&apos;s<sp/>square<sp/>coefficients<sp/>and<sp/>all<sp/>factors<sp/>from<sp/>bilinear<sp/>terms</highlight></codeline>
<codeline lineno="1976"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>then<sp/>we<sp/>compute<sp/>the<sp/>interval<sp/>sqrcoef*x^2<sp/>+<sp/>lincoef*x<sp/>and<sp/>add<sp/>it<sp/>to<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argidx<sp/>=<sp/>0;<sp/>argidx<sp/>&lt;<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr);<sp/>++argidx<sp/>)</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>i<sp/>==<sp/>nquadelems<sp/>||<sp/>quadelems[i].idx1<sp/>&gt;<sp/>argidx<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e613*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>there<sp/>are<sp/>no<sp/>quadratic<sp/>terms<sp/>with<sp/>argidx<sp/>in<sp/>its<sp/>first<sp/>argument,<sp/>that<sp/>should<sp/>be<sp/>easy<sp/>to<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lincoefs<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>lincoefs[argidx]<sp/>*<sp/>buf[argidx];</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqrcoef<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lincoef<sp/>=<sp/>lincoefs<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>?<sp/>lincoefs[argidx]<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(i<sp/>&lt;<sp/>nquadelems<sp/>&amp;&amp;<sp/>quadelems[i].idx1<sp/>==<sp/>argidx);<sp/></highlight><highlight class="comment">/*lint<sp/>!e613*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>quadelems[i].idx2<sp/>==<sp/>argidx<sp/>)<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e613*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqrcoef<sp/>+=<sp/>quadelems[i].coef;<sp/></highlight><highlight class="comment">/*lint<sp/>!e613*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lincoef<sp/>+=<sp/>quadelems[i].coef<sp/>*<sp/>buf[quadelems[i].idx2];<sp/></highlight><highlight class="comment">/*lint<sp/>!e613*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>i<sp/>&lt;<sp/>nquadelems<sp/>&amp;&amp;<sp/>quadelems[i].idx1<sp/>==<sp/>argidx<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e613*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(i<sp/>==<sp/>nquadelems<sp/>||<sp/>quadelems[i].idx1<sp/>&gt;<sp/>argidx);<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e613*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>not<sp/>as<sp/>good<sp/>as<sp/>what<sp/>we<sp/>can<sp/>get<sp/>from<sp/>SCIPintervalQuad,<sp/>but<sp/>easy<sp/>to<sp/>implement<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>sqrcoef<sp/>!=<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in[0]<sp/>=<sp/>buf[argidx];</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posintpower(in,<sp/>out,<sp/>2);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>sqrcoef<sp/>*<sp/>out[0];</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>lincoef<sp/>*<sp/>buf[argidx];</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(i<sp/>==<sp/>nquadelems);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7acb1c26bcb406e864a223ba2833736475" kindref="member">SCIP_EXPR_POLYNOMIAL</ref>:</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>**<sp/>monomials;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>childval;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>monomialval;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/>exponent;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nmonomials;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfactors;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>childidxs;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/>exponents;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>buf<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/><ref refid="pub__expr_8h_1a282b396d13f3f93d16e31f022f3f552f" kindref="member">SCIPexprGetPolynomialConstant</ref>(expr);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nmonomials<sp/>=<sp/><ref refid="pub__expr_8h_1a41df92174e44481bb10b60474388cbec" kindref="member">SCIPexprGetNMonomials</ref>(expr);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>monomials<sp/><sp/>=<sp/><ref refid="pub__expr_8h_1ae330fef00b656b46a3a82c05e4bbd405" kindref="member">SCIPexprGetMonomials</ref>(expr);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nmonomials;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfactors<sp/><sp/>=<sp/><ref refid="pub__expr_8h_1a8a71af77c61048760e0fe7001aa668dd" kindref="member">SCIPexprGetMonomialNFactors</ref>(monomials[i]);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childidxs<sp/>=<sp/><ref refid="pub__expr_8h_1a9fd82050183d79a9749bfed43dbb48a9" kindref="member">SCIPexprGetMonomialChildIndices</ref>(monomials[i]);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponents<sp/>=<sp/><ref refid="pub__expr_8h_1af62d25255b598db8d4a41193659c9d24" kindref="member">SCIPexprGetMonomialExponents</ref>(monomials[i]);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>monomialval<sp/><sp/>=<sp/><ref refid="pub__expr_8h_1ac4f7893af3baf86dc0445c842947821a" kindref="member">SCIPexprGetMonomialCoef</ref>(monomials[i]);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nfactors;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(childidxs[j]<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(childidxs[j]<sp/>&lt;<sp/><sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr));</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childval<sp/>=<sp/>buf[childidxs[j]];</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>=<sp/>exponents[j];</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>cover<sp/>some<sp/>special<sp/>exponents<sp/>separately<sp/>to<sp/>avoid<sp/>calling<sp/>expensive<sp/>pow<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>==<sp/>0.0<sp/>)</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>==<sp/>1.0<sp/>)</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>monomialval<sp/>*=<sp/>childval;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)exponent<sp/>==<sp/>exponent<sp/>)</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>tmp;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evalIntPower(tmp,<sp/>childval,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)exponent);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>monomialval<sp/>*=<sp/>tmp;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>exponent<sp/>==<sp/>0.5<sp/>)</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>tmp;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evalSqrt(tmp,<sp/>childval);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>monomialval<sp/>*=<sp/>tmp;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>monomialval<sp/>*=<sp/>pow(childval,<sp/>exponent);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>monomialval;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a3211384a0836696f41c6480c10856a53" kindref="member">SCIP_EXPR_USER</ref>:</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>evalUser(val,<sp/>buf,<sp/>expr);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a730461fc3ebac6558f4e527dc1978a4c" kindref="member">SCIP_EXPR_LAST</ref>:</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BMSfreeMemoryArrayNull(&amp;buf);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dae720b7ff5b19aabbca969eb41598368a" kindref="member">SCIP_ERROR</ref>;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemoryArrayNull(&amp;buf);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2098"><highlight class="comment">/**<sp/>analysis<sp/>an<sp/>expression<sp/>tree<sp/>whether<sp/>it<sp/>requires<sp/>retaping<sp/>on<sp/>every<sp/>evaluation</highlight></codeline>
<codeline lineno="2099"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2100"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>may<sp/>be<sp/>the<sp/>case<sp/>if<sp/>the<sp/>evaluation<sp/>sequence<sp/>depends<sp/>on<sp/>values<sp/>of<sp/>operands<sp/>(e.g.,<sp/>in<sp/>case<sp/>of<sp/>abs,<sp/>sign,<sp/>signpower,<sp/>...).</highlight></codeline>
<codeline lineno="2101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>analyzeTree(</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/>data,</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/>assert(expr<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/>assert(<ref refid="pub__expr_8h_1a5bf46444b29de80b56547c3ea29c2b32" kindref="member">SCIPexprGetChildren</ref>(expr)<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(expr);<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>analyzeTree(data,<sp/><ref refid="pub__expr_8h_1a5bf46444b29de80b56547c3ea29c2b32" kindref="member">SCIPexprGetChildren</ref>(expr)[i]);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/><ref refid="pub__expr_8h_1a0fc57c277df5a8999f286180f7d23552" kindref="member">SCIPexprGetOperator</ref>(expr)<sp/>)</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a116cfaa8fb90a0263d60f99b8ce25fac" kindref="member">SCIP_EXPR_MIN</ref>:</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7aef4c071e227bd1c849b70fc57efe1c7b" kindref="member">SCIP_EXPR_MAX</ref>:</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a8b861f16bee429f870d529cc7098fc0c" kindref="member">SCIP_EXPR_ABS</ref>:</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NO_CPPAD_USER_ATOMIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a6e0f90d79105cdcf80561ea9a00778f4" kindref="member">SCIP_EXPR_SIGNPOWER</ref>:</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;need_retape_always<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="type__expr_8h_1af1319cefde4a913a4e9a5a0ebfa6ded7a3211384a0836696f41c6480c10856a53" kindref="member">SCIP_EXPR_USER</ref>:</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;userevalcapability<sp/>&amp;=<sp/><ref refid="pub__expr_8h_1aa27ab747055af674cc7cfcdade43cf3b" kindref="member">SCIPexprGetUserEvalCapability</ref>(expr);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e788*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2134"><highlight class="comment">/**<sp/>replacement<sp/>for<sp/>CppAD&apos;s<sp/>default<sp/>error<sp/>handler</highlight></codeline>
<codeline lineno="2135"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2136"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>debug<sp/>mode,<sp/>CppAD<sp/>gives<sp/>an<sp/>error<sp/>when<sp/>an<sp/>evaluation<sp/>contains<sp/>a<sp/>nan.</highlight></codeline>
<codeline lineno="2137"><highlight class="comment"><sp/>*<sp/><sp/>We<sp/>do<sp/>not<sp/>want<sp/>to<sp/>stop<sp/>execution<sp/>in<sp/>such<sp/>a<sp/>case,<sp/>since<sp/>the<sp/>calling<sp/>routine<sp/>should<sp/>check<sp/>for<sp/>nan&apos;s<sp/>and<sp/>decide<sp/>what<sp/>to<sp/>do.</highlight></codeline>
<codeline lineno="2138"><highlight class="comment"><sp/>*<sp/><sp/>Since<sp/>we<sp/>cannot<sp/>ignore<sp/>this<sp/>particular<sp/>error,<sp/>we<sp/>ignore<sp/>all.</highlight></codeline>
<codeline lineno="2139"><highlight class="comment"><sp/>*<sp/><sp/>@todo<sp/>find<sp/>a<sp/>way<sp/>to<sp/>check<sp/>whether<sp/>the<sp/>error<sp/>corresponds<sp/>to<sp/>a<sp/>nan<sp/>and<sp/>communicate<sp/>this<sp/>back</highlight></codeline>
<codeline lineno="2140"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cppaderrorcallback(</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>known,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>is<sp/>the<sp/>error<sp/>from<sp/>a<sp/>known<sp/>source?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>line<sp/>where<sp/>error<sp/>occured<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>where<sp/>error<sp/>occured<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cond,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>error<sp/>condition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>error<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;ignore<sp/>CppAD<sp/>error<sp/>from<sp/>%sknown<sp/>source<sp/>%s:%d:<sp/>msg:<sp/>%s<sp/>exp:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>known<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;un&quot;</highlight><highlight class="normal">,<sp/>file,<sp/>line,<sp/>msg,<sp/>cond);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>install<sp/>our<sp/>error<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CppAD::ErrorHandler<sp/>errorhandler(cppaderrorcallback);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2156"><highlight class="comment">/**<sp/>gets<sp/>name<sp/>and<sp/>version<sp/>of<sp/>expression<sp/>interpreter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157" refid="exprinterpret__cppad_8cpp_1aab5927c86d34c9735d6141e735519a67" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="exprinterpret__cppad_8cpp_1aab5927c86d34c9735d6141e735519a67" kindref="member">SCIPexprintGetName</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CPPAD_PACKAGE_STRING;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2162"><highlight class="comment">/**<sp/>gets<sp/>descriptive<sp/>text<sp/>of<sp/>expression<sp/>interpreter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163" refid="exprinterpret__cppad_8cpp_1a4addf369b73a9b708e099bf7a4e83f93" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="exprinterpret__cppad_8cpp_1a4addf369b73a9b708e099bf7a4e83f93" kindref="member">SCIPexprintGetDesc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Algorithmic<sp/>Differentiation<sp/>of<sp/>C++<sp/>algorithms<sp/>developed<sp/>by<sp/>B.<sp/>Bell<sp/>(www.coin-or.org/CppAD)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2168"><highlight class="comment">/**<sp/>gets<sp/>capabilities<sp/>of<sp/>expression<sp/>interpreter<sp/>(using<sp/>bitflags)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169" refid="exprinterpret__cppad_8cpp_1a2662183d2706a17532fcee8c04304f1c" refkind="member"><highlight class="normal"><ref refid="type__exprinterpret_8h_1afedb326a7a0e4b9679b737ae4247ddd3" kindref="member">SCIP_EXPRINTCAPABILITY</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1a2662183d2706a17532fcee8c04304f1c" kindref="member">SCIPexprintGetCapability</ref>(</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__exprinterpret_8h_1a4ead23c55590b1d90b2eaa65dbc26bbb" kindref="member">SCIP_EXPRINTCAPABILITY_FUNCVALUE</ref><sp/>|<sp/><ref refid="type__exprinterpret_8h_1a3debca4ab3ff224b912327c5573de4f3" kindref="member">SCIP_EXPRINTCAPABILITY_INTFUNCVALUE</ref><sp/>|</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a047556347f5159f61d3179fa3e77a615" kindref="member">SCIP_EXPRINTCAPABILITY_GRADIENT</ref><sp/>|<sp/><ref refid="type__exprinterpret_8h_1a23564ef7a6465972d67323c687d61125" kindref="member">SCIP_EXPRINTCAPABILITY_INTGRADIENT</ref><sp/>|</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a21627f71ee23f53d9e70af36153c7fe4" kindref="member">SCIP_EXPRINTCAPABILITY_HESSIAN</ref>;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2178"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>expression<sp/>interpreter<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179" refid="exprinterpret__cppad_8cpp_1afa3d4e74943ca79f00707065f67a50af" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1afa3d4e74943ca79f00707065f67a50af" kindref="member">SCIPexprintCreate</ref>(</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>pointer<sp/>to<sp/>expression<sp/>interpreter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/>assert(blkmem<sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/>assert(exprint<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>BMSallocMemory(exprint)<sp/>==<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5da9d99f2bbdf6c09830e6db15bc35d3415" kindref="member">SCIP_NOMEMORY</ref>;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/>(*exprint)-&gt;blkmem<sp/>=<sp/>blkmem;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2195"><highlight class="comment">/**<sp/>frees<sp/>an<sp/>expression<sp/>interpreter<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196" refid="exprinterpret__cppad_8cpp_1a83ad91aa654a0ecbbdc8093350a15dca" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1a83ad91aa654a0ecbbdc8093350a15dca" kindref="member">SCIPexprintFree</ref>(</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>interpreter<sp/>that<sp/>should<sp/>be<sp/>freed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>exprint<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/>assert(*exprint<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/>BMSfreeMemory(exprint);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2208"><highlight class="comment">/**<sp/>compiles<sp/>an<sp/>expression<sp/>tree<sp/>and<sp/>stores<sp/>compiled<sp/>data<sp/>in<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209" refid="exprinterpret__cppad_8cpp_1ad4142b870bae28b64791d55da3ff4706" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1ad4142b870bae28b64791d55da3ff4706" kindref="member">SCIPexprintCompile</ref>(</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interpreter<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2213"><highlight class="normal">{<sp/></highlight><highlight class="comment">/*lint<sp/>--e{429}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/>assert(tree<sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/>data<sp/>=<sp/><ref refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" kindref="member">SCIPexprtreeGetInterpreterData</ref>(tree);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data)</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>();</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>data<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__expr_8h_1ad174e4bfd56c2532e0c037f9f8443aef" kindref="member">SCIPexprtreeSetInterpreterData</ref>(tree,<sp/>data);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;set<sp/>interpreter<sp/>data<sp/>in<sp/>tree<sp/>%p<sp/>to<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)tree,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)data);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;need_retape<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;int_need_retape<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" kindref="member">SCIPexprtreeGetNVars</ref>(tree);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/>data-&gt;X.resize(n);</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/>data-&gt;x.resize(n);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/>data-&gt;Y.resize(1);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/>data-&gt;int_X.resize(n);</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/>data-&gt;int_x.resize(n);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/>data-&gt;int_Y.resize(1);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>data-&gt;root<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__expr_8h_1a8a03414e3d699a303f5481810d115de4" kindref="member">SCIPexprFreeDeep</ref>(exprint-&gt;blkmem,<sp/>&amp;data-&gt;root);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/>root<sp/>=<sp/><ref refid="pub__expr_8h_1a00b319aec4404887ce8a1cc860a83442" kindref="member">SCIPexprtreeGetRoot</ref>(tree);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="pub__expr_8h_1a354f2c4744f18c6c621192558b434106" kindref="member">SCIPexprCopyDeep</ref>(exprint-&gt;blkmem,<sp/>&amp;data-&gt;root,<sp/>root)<sp/>);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/>data-&gt;blkmem<sp/>=<sp/>exprint-&gt;blkmem;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/>analyzeTree(data,<sp/>data-&gt;root);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2257"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>capability<sp/>to<sp/>evaluate<sp/>an<sp/>expression<sp/>by<sp/>the<sp/>expression<sp/>interpreter</highlight></codeline>
<codeline lineno="2258"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2259"><highlight class="comment"><sp/>*<sp/>In<sp/>cases<sp/>of<sp/>user-given<sp/>expressions,<sp/>higher<sp/>order<sp/>derivatives<sp/>may<sp/>not<sp/>be<sp/>available<sp/>for<sp/>the<sp/>user-expression,</highlight></codeline>
<codeline lineno="2260"><highlight class="comment"><sp/>*<sp/>even<sp/>if<sp/>the<sp/>expression<sp/>interpreter<sp/>could<sp/>handle<sp/>these.<sp/>This<sp/>method<sp/>allows<sp/>to<sp/>recognize<sp/>that,<sp/>e.g.,<sp/>the</highlight></codeline>
<codeline lineno="2261"><highlight class="comment"><sp/>*<sp/>Hessian<sp/>for<sp/>an<sp/>expression<sp/>is<sp/>not<sp/>available<sp/>because<sp/>it<sp/>contains<sp/>a<sp/>user<sp/>expression<sp/>that<sp/>does<sp/>not<sp/>provide</highlight></codeline>
<codeline lineno="2262"><highlight class="comment"><sp/>*<sp/>Hessians.</highlight></codeline>
<codeline lineno="2263"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264" refid="exprinterpret__cppad_8cpp_1af3821c1215e5a6df4f834fa5b5e293bf" refkind="member"><highlight class="normal"><ref refid="type__exprinterpret_8h_1afedb326a7a0e4b9679b737ae4247ddd3" kindref="member">SCIP_EXPRINTCAPABILITY</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1af3821c1215e5a6df4f834fa5b5e293bf" kindref="member">SCIPexprintGetExprtreeCapability</ref>(</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interpreter<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/>assert(tree<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/>data<sp/>=<sp/><ref refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" kindref="member">SCIPexprtreeGetInterpreterData</ref>(tree);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/>assert(data<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data-&gt;userevalcapability;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal">}</highlight><highlight class="comment">/*lint<sp/>!e715*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2277"><highlight class="comment">/**<sp/>frees<sp/>interpreter<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278" refid="exprinterpret__cppad_8cpp_1af754d568d223fea54f16d89cedec0071" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1af754d568d223fea54f16d89cedec0071" kindref="member">SCIPexprintFreeData</ref>(</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>**<sp/><sp/><sp/><sp/>interpreterdata<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interpreter<sp/>data<sp/>that<sp/>should<sp/>freed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/>assert(<sp/>interpreterdata<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/>assert(*interpreterdata<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(*interpreterdata)-&gt;root<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__expr_8h_1a8a03414e3d699a303f5481810d115de4" kindref="member">SCIPexprFreeDeep</ref>((*interpreterdata)-&gt;blkmem,<sp/>&amp;(*interpreterdata)-&gt;root);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*interpreterdata;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/>*interpreterdata<sp/>=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2294"><highlight class="comment">/**<sp/>notify<sp/>expression<sp/>interpreter<sp/>that<sp/>a<sp/>new<sp/>parameterization<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="2295"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2296"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>probably<sp/>causes<sp/>retaping<sp/>by<sp/>AD<sp/>algorithms.</highlight></codeline>
<codeline lineno="2297"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298" refid="exprinterpret__cppad_8cpp_1a3d4949b971ff0ba837e39c4dc140e6d5" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1a3d4949b971ff0ba837e39c4dc140e6d5" kindref="member">SCIPexprintNewParametrization</ref>(</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interpreter<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/>assert(exprint<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/>assert(tree<sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/>data<sp/>=<sp/><ref refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" kindref="member">SCIPexprtreeGetInterpreterData</ref>(tree);</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>data<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;need_retape<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;int_need_retape<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2316"><highlight class="comment">/**<sp/>evaluates<sp/>an<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2317" refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" kindref="member">SCIPexprintEval</ref>(</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interpreter<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/>data;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/>assert(exprint<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/>assert(tree<sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/>assert(varvals<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/>assert(val<sp/><sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/>data<sp/>=<sp/><ref refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" kindref="member">SCIPexprtreeGetInterpreterData</ref>(tree);</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/>assert(data<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/>assert(<ref refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" kindref="member">SCIPexprtreeGetNVars</ref>(tree)<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)data-&gt;X.size());</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/>assert(<ref refid="pub__expr_8h_1a00b319aec4404887ce8a1cc860a83442" kindref="member">SCIPexprtreeGetRoot</ref>(tree)<sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" kindref="member">SCIPexprtreeGetNVars</ref>(tree);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>n<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="pub__expr_8h_1a0c4ad161b828120f5c16d3df89bfc574" kindref="member">SCIPexprtreeEval</ref>(tree,<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>val)<sp/>);</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>data-&gt;need_retape_always<sp/>||<sp/>data-&gt;need_retape<sp/>)</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;X[i]<sp/>=<sp/>varvals[i];</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;x[i]<sp/>=<sp/>varvals[i];</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::Independent(data-&gt;X);</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>data-&gt;root<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>eval(data-&gt;root,<sp/>data-&gt;X,<sp/><ref refid="pub__expr_8h_1a0299ad304998c7041fb4f246844ed119" kindref="member">SCIPexprtreeGetParamVals</ref>(tree),<sp/>data-&gt;Y[0])<sp/>);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;Y[0]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;f.Dependent(data-&gt;X,<sp/>data-&gt;Y);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;val<sp/>=<sp/>Value(data-&gt;Y[0]);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;Eval<sp/>retaped<sp/>and<sp/>computed<sp/>value<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>data-&gt;val);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>is<sp/>required<sp/>if<sp/>the<sp/>gradient<sp/>shall<sp/>be<sp/>computed<sp/>by<sp/>a<sp/>reverse<sp/>sweep<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data-&gt;val<sp/>=<sp/>data-&gt;f.Forward(0,<sp/>data-&gt;x)[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;need_retape<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)data-&gt;x.size()<sp/>&gt;=<sp/>n);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;x[i]<sp/>=<sp/>varvals[i];</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;val<sp/>=<sp/>data-&gt;f.Forward(0,<sp/>data-&gt;x)[0];<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e1793*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;Eval<sp/>used<sp/>forward<sp/>sweep<sp/>to<sp/>compute<sp/>value<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>data-&gt;val);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/>*val<sp/>=<sp/>data-&gt;val;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2384"><highlight class="comment">/**<sp/>evaluates<sp/>an<sp/>expression<sp/>tree<sp/>on<sp/>intervals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2385" refid="exprinterpret__cppad_8cpp_1a7dc4aaad187f200f28e8c9345f83007b" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1a7dc4aaad187f200f28e8c9345f83007b" kindref="member">SCIPexprintEvalInt</ref>(</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interpreter<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>for<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interval<sp/>values<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>interval<sp/>value<sp/>of<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/>data;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/>assert(exprint<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/>assert(tree<sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/>assert(varvals<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/>assert(val<sp/><sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/>data<sp/>=<sp/><ref refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" kindref="member">SCIPexprtreeGetInterpreterData</ref>(tree);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/>assert(data<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/>assert(<ref refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" kindref="member">SCIPexprtreeGetNVars</ref>(tree)<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)data-&gt;int_X.size());</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/>assert(<ref refid="pub__expr_8h_1a00b319aec4404887ce8a1cc860a83442" kindref="member">SCIPexprtreeGetRoot</ref>(tree)<sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" kindref="member">SCIPexprtreeGetNVars</ref>(tree);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>n<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="pub__expr_8h_1a6651f0a87111d63aff16d7d5a3388920" kindref="member">SCIPexprtreeEvalInt</ref>(tree,<sp/>infinity,<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>val)<sp/>);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/>SCIPInterval::infinity<sp/>=<sp/>infinity;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>data-&gt;int_need_retape<sp/>||<sp/>data-&gt;need_retape_always<sp/>)</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;int_X[i]<sp/>=<sp/>varvals[i];</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;int_x[i]<sp/>=<sp/>varvals[i];</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CppAD::Independent(data-&gt;int_X);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>data-&gt;root<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/>eval(data-&gt;root,<sp/>data-&gt;int_X,<sp/><ref refid="pub__expr_8h_1a0299ad304998c7041fb4f246844ed119" kindref="member">SCIPexprtreeGetParamVals</ref>(tree),<sp/>data-&gt;int_Y[0])<sp/>);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;int_Y[0]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;int_f.Dependent(data-&gt;int_X,<sp/>data-&gt;int_Y);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;int_val<sp/>=<sp/>Value(data-&gt;int_Y[0]);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;int_need_retape<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)data-&gt;int_x.size()<sp/>&gt;=<sp/>n);</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;int_x[i]<sp/>=<sp/>varvals[i];</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;int_val<sp/>=<sp/>data-&gt;int_f.Forward(0,<sp/>data-&gt;int_x)[0];<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e1793*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/>*val<sp/>=<sp/>data-&gt;int_val;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2450"><highlight class="comment">/**<sp/>computes<sp/>value<sp/>and<sp/>gradient<sp/>of<sp/>an<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451" refid="exprinterpret__cppad_8cpp_1a951003903b4819772f2643d0efc5b10a" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1a951003903b4819772f2643d0efc5b10a" kindref="member">SCIPexprintGrad</ref>(</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interpreter<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>variables,<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>new_varvals<sp/>is<sp/>FALSE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>have<sp/>variable<sp/>values<sp/>changed<sp/>since<sp/>last<sp/>call<sp/>to<sp/>a<sp/>point<sp/>evaluation<sp/>routine?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradient<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>gradient,<sp/>need<sp/>to<sp/>have<sp/>length<sp/>at<sp/>least<sp/>SCIPexprtreeGetNVars(tree)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/>assert(exprint<sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/>assert(tree<sp/><sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/>assert(varvals<sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>new_varvals<sp/>==<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>);</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/>assert(val<sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/>assert(gradient<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/>data<sp/>=<sp/><ref refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" kindref="member">SCIPexprtreeGetInterpreterData</ref>(tree);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/>assert(data<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>new_varvals<sp/>)</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" kindref="member">SCIPexprintEval</ref>(exprint,<sp/>tree,<sp/>varvals,<sp/>val)<sp/>);</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*val<sp/>=<sp/>data-&gt;val;</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" kindref="member">SCIPexprtreeGetNVars</ref>(tree);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>n<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/>vector&lt;double&gt;<sp/>jac(data-&gt;f.Jacobian(data-&gt;x));</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gradient[i]<sp/>=<sp/>jac[i];</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>disable<sp/>debug<sp/>output<sp/>since<sp/>we<sp/>have<sp/>no<sp/>message<sp/>handler<sp/>here</highlight></codeline>
<codeline lineno="2487"><highlight class="comment">#ifdef<sp/>SCIP_DEBUG</highlight></codeline>
<codeline lineno="2488"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;Grad<sp/>for<sp/>&quot;);<sp/>SCIPexprtreePrint(tree,<sp/>NULL,<sp/>NULL,<sp/>NULL);<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2489"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;x<sp/><sp/><sp/><sp/>=&quot;);<sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>printf(&quot;\t<sp/>%g&quot;,<sp/>data-&gt;x[i]);<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2490"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;grad<sp/>=&quot;);<sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>printf(&quot;\t<sp/>%g&quot;,<sp/>gradient[i]);<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2491"><highlight class="comment">#endif</highlight></codeline>
<codeline lineno="2492"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2497"><highlight class="comment">/**<sp/>computes<sp/>interval<sp/>value<sp/>and<sp/>interval<sp/>gradient<sp/>of<sp/>an<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498" refid="exprinterpret__cppad_8cpp_1adf40904b5c1ad96ac217d40a9ddd2aa9" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1adf40904b5c1ad96ac217d40a9ddd2aa9" kindref="member">SCIPexprintGradInt</ref>(</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interpreter<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>for<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interval<sp/>values<sp/>of<sp/>variables,<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>new_varvals<sp/>is<sp/>FALSE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>have<sp/>variable<sp/>interval<sp/>values<sp/>changed<sp/>since<sp/>last<sp/>call<sp/>to<sp/>an<sp/>interval<sp/>evaluation<sp/>routine?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>interval<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gradient<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>interval<sp/>gradient,<sp/>need<sp/>to<sp/>have<sp/>length<sp/>at<sp/>least<sp/>SCIPexprtreeGetNVars(tree)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/>assert(exprint<sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/>assert(tree<sp/><sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/>assert(varvals<sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>new_varvals<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/>assert(val<sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/>assert(gradient<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/>data<sp/>=<sp/><ref refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" kindref="member">SCIPexprtreeGetInterpreterData</ref>(tree);</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/>assert(data<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_varvals)</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="exprinterpret__cppad_8cpp_1a7dc4aaad187f200f28e8c9345f83007b" kindref="member">SCIPexprintEvalInt</ref>(exprint,<sp/>tree,<sp/>infinity,<sp/>varvals,<sp/>val)<sp/>);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*val<sp/>=<sp/>data-&gt;int_val;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" kindref="member">SCIPexprtreeGetNVars</ref>(tree);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>n<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/>vector&lt;SCIPInterval&gt;<sp/>jac(data-&gt;int_f.Jacobian(data-&gt;int_x));</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gradient[i]<sp/>=<sp/>jac[i];</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>disable<sp/>debug<sp/>output<sp/>since<sp/>we<sp/>have<sp/>no<sp/>message<sp/>handler<sp/>here</highlight></codeline>
<codeline lineno="2533"><highlight class="comment">#ifdef<sp/>SCIP_DEBUG</highlight></codeline>
<codeline lineno="2534"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;GradInt<sp/>for<sp/>&quot;);<sp/>SCIPexprtreePrint(tree,<sp/>NULL,<sp/>NULL,<sp/>NULL);<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2535"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;x<sp/><sp/><sp/><sp/>=&quot;);<sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>printf(&quot;\t<sp/>[%g,%g]&quot;,<sp/>SCIPintervalGetInf(data-&gt;int_x[i]),<sp/>SCIPintervalGetSup(data-&gt;int_x[i]));<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2536"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;grad<sp/>=&quot;);<sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>printf(&quot;\t<sp/>[%g,%g]&quot;,<sp/>SCIPintervalGetInf(gradient[i]),<sp/>SCIPintervalGetSup(gradient[i]));<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2537"><highlight class="comment">#endif</highlight></codeline>
<codeline lineno="2538"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2543"><highlight class="comment">/**<sp/>gives<sp/>sparsity<sp/>pattern<sp/>of<sp/>hessian</highlight></codeline>
<codeline lineno="2544"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2545"><highlight class="comment"><sp/>*<sp/><sp/>NOTE:<sp/>this<sp/>function<sp/>might<sp/>be<sp/>replaced<sp/>later<sp/>by<sp/>something<sp/>nicer.</highlight></codeline>
<codeline lineno="2546"><highlight class="comment"><sp/>*<sp/><sp/>Since<sp/>the<sp/>AD<sp/>code<sp/>might<sp/>need<sp/>to<sp/>do<sp/>a<sp/>forward<sp/>sweep,<sp/>you<sp/>should<sp/>pass<sp/>variable<sp/>values<sp/>in<sp/>here.</highlight></codeline>
<codeline lineno="2547"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2548" refid="exprinterpret__cppad_8cpp_1a4e3afb5fe90e10cb9e116b66a6a6bede" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1a4e3afb5fe90e10cb9e116b66a6a6bede" kindref="member">SCIPexprintHessianSparsityDense</ref>(</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interpreter<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparsity<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>sparsity<sp/>pattern<sp/>of<sp/>Hessian,<sp/>sparsity[i+n*j]<sp/>indicates<sp/>whether<sp/>entry<sp/>(i,j)<sp/>is<sp/>nonzero<sp/>in<sp/>the<sp/>hessian<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/>assert(exprint<sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/>assert(tree<sp/><sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/>assert(varvals<sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/>assert(sparsity<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/>data<sp/>=<sp/><ref refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" kindref="member">SCIPexprtreeGetInterpreterData</ref>(tree);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/>assert(data<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" kindref="member">SCIPexprtreeGetNVars</ref>(tree);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>n<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nn<sp/>=<sp/>n*n;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>data-&gt;need_retape_always<sp/>)</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@todo<sp/>can<sp/>we<sp/>do<sp/>something<sp/>better<sp/>here,<sp/>e.g.,<sp/>by<sp/>looking<sp/>at<sp/>the<sp/>expression<sp/>tree<sp/>by<sp/>ourself?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nn;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparsity[i]<sp/>=<sp/><ref refid="def_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>disable<sp/>debug<sp/>output<sp/>since<sp/>we<sp/>have<sp/>no<sp/>message<sp/>handler<sp/>here</highlight></codeline>
<codeline lineno="2577"><highlight class="comment">#ifdef<sp/>SCIP_DEBUG</highlight></codeline>
<codeline lineno="2578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>SCIPdebugMessage(&quot;HessianSparsityDense<sp/>for<sp/>&quot;);<sp/>SCIPexprtreePrint(tree,<sp/>NULL,<sp/>NULL,<sp/>NULL);<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>SCIPdebugMessage(&quot;sparsity<sp/>=<sp/>all<sp/>elements,<sp/>due<sp/>to<sp/>discontinuouities\n&quot;);</highlight></codeline>
<codeline lineno="2580"><highlight class="comment">#endif</highlight></codeline>
<codeline lineno="2581"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>data-&gt;need_retape<sp/>)</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/>val;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" kindref="member">SCIPexprintEval</ref>(exprint,<sp/>tree,<sp/>varvals,<sp/>&amp;val)<sp/>);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>ForSparseJac\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/>vector&lt;bool&gt;<sp/>r(nn,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r[i*n+i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e647<sp/>!e1793*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/>(void)<sp/>data-&gt;f.ForSparseJac(n,<sp/>r);<sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>compute<sp/>sparsity<sp/>for<sp/>Jacobian<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><ref refid="pub__message_8h_1a827dc20f17fd394bf206451a2289292e" kindref="member">SCIPdebugMessage</ref>(</highlight><highlight class="stringliteral">&quot;calling<sp/>RevSparseHes\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/>vector&lt;bool&gt;<sp/>s(1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/>vector&lt;bool&gt;<sp/>sparsehes(data-&gt;f.RevSparseHes(n,<sp/>s));</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nn;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sparsity[i]<sp/>=<sp/>sparsehes[i];</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>disable<sp/>debug<sp/>output<sp/>since<sp/>we<sp/>have<sp/>no<sp/>message<sp/>handler<sp/>here</highlight></codeline>
<codeline lineno="2608"><highlight class="comment">#ifdef<sp/>SCIP_DEBUG</highlight></codeline>
<codeline lineno="2609"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;HessianSparsityDense<sp/>for<sp/>&quot;);<sp/>SCIPexprtreePrint(tree,<sp/>NULL,<sp/>NULL,<sp/>NULL);<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2610"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;sparsity<sp/>=&quot;);<sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>for<sp/>(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/>if<sp/>(sparsity[i*n+j])<sp/>printf(&quot;<sp/>(%d,%d)&quot;,<sp/>i,<sp/>j);<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2611"><highlight class="comment">#endif</highlight></codeline>
<codeline lineno="2612"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2617"><highlight class="comment">/**<sp/>computes<sp/>value<sp/>and<sp/>dense<sp/>hessian<sp/>of<sp/>an<sp/>expression<sp/>tree</highlight></codeline>
<codeline lineno="2618"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2619"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>full<sp/>hessian<sp/>is<sp/>computed<sp/>(lower<sp/>left<sp/>and<sp/>upper<sp/>right<sp/>triangle).</highlight></codeline>
<codeline lineno="2620"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2621" refid="exprinterpret__cppad_8cpp_1abd322fc0556700c1a41144bbbc0f9386" refkind="member"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="exprinterpret__cppad_8cpp_1abd322fc0556700c1a41144bbbc0f9386" kindref="member">SCIPexprintHessianDense</ref>(</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1ae536b751483a00eeb75a93d372073b43" kindref="member">SCIP_EXPRINT</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interpreter<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>variables,<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>new_varvals<sp/>is<sp/>FALSE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>have<sp/>variable<sp/>values<sp/>changed<sp/>since<sp/>last<sp/>call<sp/>to<sp/>an<sp/>evaluation<sp/>routine?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>function<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hessian<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>hessian<sp/>values,<sp/>need<sp/>to<sp/>have<sp/>size<sp/>at<sp/>least<sp/>n*n<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="2629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/>assert(exprint<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/>assert(tree<sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/>assert(varvals<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||<sp/>new_varvals<sp/>==<sp/><ref refid="def_8h_1aa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>);</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/>assert(val<sp/><sp/><sp/><sp/><sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/>assert(hessian<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/>data<sp/>=<sp/><ref refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" kindref="member">SCIPexprtreeGetInterpreterData</ref>(tree);</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/>assert(data<sp/>!=<sp/><ref refid="def_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>new_varvals<sp/>)</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="def_8h_1afbffafd5fc40cd928e2adcaa83f10bd7" kindref="member">SCIP_CALL</ref>(<sp/><ref refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" kindref="member">SCIPexprintEval</ref>(exprint,<sp/>tree,<sp/>varvals,<sp/>val)<sp/>);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*val<sp/>=<sp/>data-&gt;val;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" kindref="member">SCIPexprtreeGetNVars</ref>(tree);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>n<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>one<sp/>uses<sp/>reverse<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/>vector&lt;double&gt;<sp/>hess(data-&gt;f.Hessian(data-&gt;x,<sp/>0));</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nn<sp/>=<sp/>n*n;</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nn;<sp/>++i)</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hessian[i]<sp/>=<sp/>hess[i];</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>one<sp/>uses<sp/>forward<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>ii(1,i);</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;int&gt;<sp/>jj(1,j);</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hessian[i*n+j]<sp/>=<sp/>data-&gt;f.ForTwo(data-&gt;x,<sp/>ii,<sp/>jj)[0];</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>disable<sp/>debug<sp/>output<sp/>since<sp/>we<sp/>have<sp/>no<sp/>message<sp/>handler<sp/>here</highlight></codeline>
<codeline lineno="2671"><highlight class="comment">#ifdef<sp/>SCIP_DEBUG</highlight></codeline>
<codeline lineno="2672"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;HessianDense<sp/>for<sp/>&quot;);<sp/>SCIPexprtreePrint(tree,<sp/>NULL,<sp/>NULL,<sp/>NULL);<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2673"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;x<sp/><sp/><sp/><sp/>=&quot;);<sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>printf(&quot;\t<sp/>%g&quot;,<sp/>data-&gt;x[i]);<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2674"><highlight class="comment"><sp/><sp/><sp/>SCIPdebugMessage(&quot;hess<sp/>=&quot;);<sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n*n;<sp/>++i)<sp/>printf(&quot;\t<sp/>%g&quot;,<sp/>hessian[i]);<sp/>printf(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="2675"><highlight class="comment">#endif</highlight></codeline>
<codeline lineno="2676"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="type__retcode_8h_1a43415f0ed8d60fa1d0a4217226e37b5dab0a6b6b71b69bed810638b5e859e3b2b" kindref="member">SCIP_OKAY</ref>;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/nlpi/exprinterpret_cppad.cpp"/>
  </compounddef>
</doxygen>
