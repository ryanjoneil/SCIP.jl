<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="cons__linking_8h" kind="file" language="C++">
    <compoundname>cons_linking.h</compoundname>
    <includes refid="scip_8h" local="yes">scip/scip.h</includes>
    <includedby refid="scipdefplugins_8h" local="yes">scipdefplugins.h</includedby>
    <incdepgraph>
      <node id="2221">
        <label>scip/type_pricer.h</label>
        <link refid="type__pricer_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2195">
        <label>stdarg.h</label>
      </node>
      <node id="2263">
        <label>scip/intervalarith.h</label>
      </node>
      <node id="2205">
        <label>scip/type_lp.h</label>
        <link refid="type__lp_8h"/>
      </node>
      <node id="2252">
        <label>scip/pub_pricer.h</label>
        <link refid="pub__pricer_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2221" relation="include">
        </childnode>
      </node>
      <node id="2244">
        <label>scip/type_set.h</label>
        <link refid="type__set_8h"/>
      </node>
      <node id="2192">
        <label>assert.h</label>
      </node>
      <node id="2191">
        <label>float.h</label>
      </node>
      <node id="2206">
        <label>scip/type_nlp.h</label>
        <link refid="type__nlp_8h"/>
      </node>
      <node id="2212">
        <label>scip/type_cons.h</label>
        <link refid="type__cons_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
        <childnode refid="2201" relation="include">
        </childnode>
        <childnode refid="2214" relation="include">
        </childnode>
      </node>
      <node id="2242">
        <label>scip/type_implics.h</label>
        <link refid="type__implics_8h"/>
      </node>
      <node id="2258">
        <label>scip/pub_tree.h</label>
        <link refid="pub__tree_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2259" relation="include">
        </childnode>
      </node>
      <node id="2230">
        <label>scip/pub_cons.h</label>
        <link refid="pub__cons_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
      </node>
      <node id="2210">
        <label>scip/type_branch.h</label>
        <link refid="type__branch_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2188">
        <label>stdint.h</label>
      </node>
      <node id="2198">
        <label>scip/type_result.h</label>
        <link refid="type__result_8h"/>
      </node>
      <node id="2184">
        <label>cons_linking.h</label>
        <link refid="cons_linking.h"/>
        <childnode refid="2185" relation="include">
        </childnode>
      </node>
      <node id="2236">
        <label>scip/pub_fileio.h</label>
        <link refid="pub__fileio_8h"/>
        <childnode refid="2237" relation="include">
        </childnode>
        <childnode refid="2187" relation="include">
        </childnode>
      </node>
      <node id="2201">
        <label>scip/type_timing.h</label>
        <link refid="type__timing_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2249">
        <label>scip/pub_nodesel.h</label>
        <link refid="pub__nodesel_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
      </node>
      <node id="2235">
        <label>scip/pub_event.h</label>
        <link refid="pub__event_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2204" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2209" relation="include">
        </childnode>
      </node>
      <node id="2215">
        <label>scip/type_dialog.h</label>
        <link refid="type__dialog_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2202">
        <label>scip/type_scip.h</label>
        <link refid="type__scip_8h"/>
      </node>
      <node id="2187">
        <label>scip/def.h</label>
        <link refid="def_8h"/>
        <childnode refid="2186" relation="include">
        </childnode>
        <childnode refid="2188" relation="include">
        </childnode>
        <childnode refid="2189" relation="include">
        </childnode>
        <childnode refid="2190" relation="include">
        </childnode>
        <childnode refid="2191" relation="include">
        </childnode>
        <childnode refid="2192" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2194" relation="include">
        </childnode>
      </node>
      <node id="2253">
        <label>scip/pub_reader.h</label>
        <link refid="pub__reader_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2222" relation="include">
        </childnode>
      </node>
      <node id="2237">
        <label>stddef.h</label>
      </node>
      <node id="2225">
        <label>scip/type_prop.h</label>
        <link refid="type__prop_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
        <childnode refid="2201" relation="include">
        </childnode>
      </node>
      <node id="2251">
        <label>scip/pub_presol.h</label>
        <link refid="pub__presol_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2218">
        <label>scip/type_history.h</label>
        <link refid="type__history_8h"/>
      </node>
      <node id="2232">
        <label>scip/type_cutpool.h</label>
        <link refid="type__cutpool_8h"/>
      </node>
      <node id="2209">
        <label>scip/type_tree.h</label>
        <link refid="type__tree_8h"/>
      </node>
      <node id="2190">
        <label>limits.h</label>
      </node>
      <node id="2224">
        <label>scip/type_sepa.h</label>
        <link refid="type__sepa_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2214">
        <label>scip/type_heur.h</label>
        <link refid="type__heur_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2201" relation="include">
        </childnode>
      </node>
      <node id="2213">
        <label>scip/type_sol.h</label>
        <link refid="type__sol_8h"/>
      </node>
      <node id="2227">
        <label>nlpi/type_expr.h</label>
        <link refid="type__expr_8h"/>
      </node>
      <node id="2245">
        <label>scip/type_stat.h</label>
        <link refid="type__stat_8h"/>
      </node>
      <node id="2219">
        <label>scip/type_nodesel.h</label>
        <link refid="type__nodesel_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2265">
        <label>scip/presolve.h</label>
      </node>
      <node id="2199">
        <label>scip/type_clock.h</label>
        <link refid="type__clock_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
      </node>
      <node id="2200">
        <label>scip/type_misc.h</label>
        <link refid="type__misc_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
      </node>
      <node id="2238">
        <label>scip/pub_heur.h</label>
        <link refid="pub__heur_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2214" relation="include">
        </childnode>
      </node>
      <node id="2216">
        <label>scip/type_disp.h</label>
        <link refid="type__disp_8h"/>
        <childnode refid="2186" relation="include">
        </childnode>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2255">
        <label>scip/pub_sepa.h</label>
        <link refid="pub__sepa_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
      </node>
      <node id="2262">
        <label>nlpi/pub_expr.h</label>
        <link refid="pub__expr_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2194" relation="include">
        </childnode>
        <childnode refid="2263" relation="include">
        </childnode>
        <childnode refid="2197" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
        <childnode refid="2264" relation="include">
        </childnode>
      </node>
      <node id="2223">
        <label>scip/type_relax.h</label>
        <link refid="type__relax_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2185">
        <label>scip/scip.h</label>
        <link refid="scip_8h"/>
        <childnode refid="2186" relation="include">
        </childnode>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2197" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2199" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2201" relation="include">
        </childnode>
        <childnode refid="2203" relation="include">
        </childnode>
        <childnode refid="2204" relation="include">
        </childnode>
        <childnode refid="2205" relation="include">
        </childnode>
        <childnode refid="2206" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
        <childnode refid="2208" relation="include">
        </childnode>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2211" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2215" relation="include">
        </childnode>
        <childnode refid="2216" relation="include">
        </childnode>
        <childnode refid="2214" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
        <childnode refid="2221" relation="include">
        </childnode>
        <childnode refid="2222" relation="include">
        </childnode>
        <childnode refid="2223" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2225" relation="include">
        </childnode>
        <childnode refid="2226" relation="include">
        </childnode>
        <childnode refid="2228" relation="include">
        </childnode>
        <childnode refid="2229" relation="include">
        </childnode>
        <childnode refid="2230" relation="include">
        </childnode>
        <childnode refid="2231" relation="include">
        </childnode>
        <childnode refid="2233" relation="include">
        </childnode>
        <childnode refid="2234" relation="include">
        </childnode>
        <childnode refid="2235" relation="include">
        </childnode>
        <childnode refid="2236" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
        <childnode refid="2239" relation="include">
        </childnode>
        <childnode refid="2240" relation="include">
        </childnode>
        <childnode refid="2241" relation="include">
        </childnode>
        <childnode refid="2243" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
        <childnode refid="2194" relation="include">
        </childnode>
        <childnode refid="2248" relation="include">
        </childnode>
        <childnode refid="2249" relation="include">
        </childnode>
        <childnode refid="2250" relation="include">
        </childnode>
        <childnode refid="2251" relation="include">
        </childnode>
        <childnode refid="2252" relation="include">
        </childnode>
        <childnode refid="2253" relation="include">
        </childnode>
        <childnode refid="2254" relation="include">
        </childnode>
        <childnode refid="2255" relation="include">
        </childnode>
        <childnode refid="2256" relation="include">
        </childnode>
        <childnode refid="2257" relation="include">
        </childnode>
        <childnode refid="2258" relation="include">
        </childnode>
        <childnode refid="2260" relation="include">
        </childnode>
        <childnode refid="2261" relation="include">
        </childnode>
        <childnode refid="2262" relation="include">
        </childnode>
        <childnode refid="2265" relation="include">
        </childnode>
      </node>
      <node id="2229">
        <label>scip/pub_conflict.h</label>
        <link refid="pub__conflict_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2211" relation="include">
        </childnode>
      </node>
      <node id="2264">
        <label>nlpi/type_exprinterpret.h</label>
        <link refid="type__exprinterpret_8h"/>
      </node>
      <node id="2240">
        <label>scip/pub_history.h</label>
        <link refid="pub__history_8h"/>
      </node>
      <node id="2220">
        <label>scip/type_presol.h</label>
        <link refid="type__presol_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2226">
        <label>nlpi/type_nlpi.h</label>
        <link refid="type__nlpi_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2196" relation="include">
        </childnode>
        <childnode refid="2197" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
      </node>
      <node id="2234">
        <label>scip/pub_disp.h</label>
        <link refid="pub__disp_8h"/>
        <childnode refid="2186" relation="include">
        </childnode>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2216" relation="include">
        </childnode>
      </node>
      <node id="2228">
        <label>scip/pub_branch.h</label>
        <link refid="pub__branch_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2210" relation="include">
        </childnode>
      </node>
      <node id="2189">
        <label>math.h</label>
      </node>
      <node id="2197">
        <label>blockmemshell/memory.h</label>
      </node>
      <node id="2250">
        <label>scip/pub_paramset.h</label>
        <link refid="pub__paramset_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2203" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2256">
        <label>scip/pub_prop.h</label>
        <link refid="pub__prop_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2225" relation="include">
        </childnode>
      </node>
      <node id="2193">
        <label>scip/type_retcode.h</label>
        <link refid="type__retcode_8h"/>
      </node>
      <node id="2217">
        <label>scip/type_compr.h</label>
        <link refid="type__compr_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2201" relation="include">
        </childnode>
      </node>
      <node id="2222">
        <label>scip/type_reader.h</label>
        <link refid="type__reader_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2239">
        <label>scip/pub_compr.h</label>
        <link refid="pub__compr_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
      </node>
      <node id="2231">
        <label>scip/pub_cutpool.h</label>
        <link refid="pub__cutpool_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
      </node>
      <node id="2247">
        <label>scip/pub_nlp.h</label>
        <link refid="pub__nlp_8h"/>
        <childnode refid="2186" relation="include">
        </childnode>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2196" relation="include">
        </childnode>
        <childnode refid="2197" relation="include">
        </childnode>
        <childnode refid="2244" relation="include">
        </childnode>
        <childnode refid="2245" relation="include">
        </childnode>
        <childnode refid="2206" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
        <childnode refid="2226" relation="include">
        </childnode>
      </node>
      <node id="2204">
        <label>scip/type_event.h</label>
        <link refid="type__event_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2257">
        <label>scip/pub_sol.h</label>
        <link refid="pub__sol_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2214" relation="include">
        </childnode>
      </node>
      <node id="2211">
        <label>scip/type_conflict.h</label>
        <link refid="type__conflict_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
      </node>
      <node id="2254">
        <label>scip/pub_relax.h</label>
        <link refid="pub__relax_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2223" relation="include">
        </childnode>
      </node>
      <node id="2203">
        <label>scip/type_paramset.h</label>
        <link refid="type__paramset_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2246">
        <label>lpi/type_lpi.h</label>
        <link refid="type__lpi_8h"/>
      </node>
      <node id="2194">
        <label>scip/pub_message.h</label>
        <link refid="pub__message_8h"/>
        <childnode refid="2195" relation="include">
        </childnode>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2196" relation="include">
        </childnode>
      </node>
      <node id="2208">
        <label>scip/type_prob.h</label>
        <link refid="type__prob_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
      </node>
      <node id="2196">
        <label>scip/type_message.h</label>
        <link refid="type__message_8h"/>
        <childnode refid="2186" relation="include">
        </childnode>
      </node>
      <node id="2260">
        <label>scip/pub_var.h</label>
        <link refid="pub__var_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
        <childnode refid="2242" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
      </node>
      <node id="2186">
        <label>stdio.h</label>
      </node>
      <node id="2261">
        <label>lpi/lpi.h</label>
        <link refid="lpi_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2197" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2246" relation="include">
        </childnode>
      </node>
      <node id="2233">
        <label>scip/pub_dialog.h</label>
        <link refid="pub__dialog_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
        <childnode refid="2215" relation="include">
        </childnode>
      </node>
      <node id="2207">
        <label>scip/type_var.h</label>
        <link refid="type__var_8h"/>
      </node>
      <node id="2241">
        <label>scip/pub_implics.h</label>
        <link refid="pub__implics_8h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
        <childnode refid="2242" relation="include">
        </childnode>
      </node>
      <node id="2259">
        <label>scip/type_reopt.h</label>
        <link refid="type__reopt_8h"/>
      </node>
      <node id="2243">
        <label>scip/pub_lp.h</label>
        <link refid="pub__lp_8h"/>
        <childnode refid="2186" relation="include">
        </childnode>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2197" relation="include">
        </childnode>
        <childnode refid="2244" relation="include">
        </childnode>
        <childnode refid="2245" relation="include">
        </childnode>
        <childnode refid="2205" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2246" relation="include">
        </childnode>
      </node>
      <node id="2248">
        <label>scip/pub_misc.h</label>
        <link refid="pub__misc_8h"/>
        <childnode refid="2189" relation="include">
        </childnode>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2197" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2196" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2266">
        <label>cons_linking.h</label>
        <link refid="cons_linking.h"/>
        <childnode refid="2267" relation="include">
        </childnode>
      </node>
      <node id="2267">
        <label>scipdefplugins.h</label>
        <link refid="scipdefplugins_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="cons__linking_8h_1a79632aa2c9245e5f76b10dac24598fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPincludeConshdlrLinking</definition>
        <argsstring>(SCIP *scip)</argsstring>
        <name>SCIPincludeConshdlrLinking</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates the handler for linking constraints and includes it in SCIP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/cons_linking.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__linking_8h_1a36982d2d4d139d872d74d3054c71997e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPcreateConsLinking</definition>
        <argsstring>(SCIP *scip, SCIP_CONS **cons, const char *name, SCIP_VAR *intvar, SCIP_VAR **binvars, int *vals, int nbinvars, SCIP_Bool initial, SCIP_Bool separate, SCIP_Bool enforce, SCIP_Bool check, SCIP_Bool propagate, SCIP_Bool local, SCIP_Bool modifiable, SCIP_Bool dynamic, SCIP_Bool removable, SCIP_Bool stickingatnode)</argsstring>
        <name>SCIPcreateConsLinking</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> **</type>
          <declname>cons</declname>
          <briefdescription><para>pointer to hold the created constraint </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <briefdescription><para>name of constraint </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>intvar</declname>
          <briefdescription><para>integer variable which should be linked </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
          <declname>binvars</declname>
          <briefdescription><para>binary variables </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>vals</declname>
          <briefdescription><para>coefficients of the binary variables </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nbinvars</declname>
          <briefdescription><para>number of binary starting variables </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>initial</declname>
          <briefdescription><para>should the LP relaxation of constraint be in the initial LP? Usually set to TRUE. Set to FALSE for &apos;lazy constraints&apos;. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>separate</declname>
          <briefdescription><para>should the constraint be separated during LP processing? Usually set to TRUE. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>enforce</declname>
          <briefdescription><para>should the constraint be enforced during node processing? TRUE for model constraints, FALSE for additional, redundant constraints. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>check</declname>
          <briefdescription><para>should the constraint be checked for feasibility? TRUE for model constraints, FALSE for additional, redundant constraints. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>propagate</declname>
          <briefdescription><para>should the constraint be propagated during node processing? Usually set to TRUE. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>local</declname>
          <briefdescription><para>is constraint only valid locally? Usually set to FALSE. Has to be set to TRUE, e.g., for branching constraints. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>modifiable</declname>
          <briefdescription><para>is constraint modifiable (subject to column generation)? Usually set to FALSE. In column generation applications, set to TRUE if pricing adds coefficients to this constraint. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>dynamic</declname>
          <briefdescription><para>is constraint subject to aging? Usually set to FALSE. Set to TRUE for own cuts which are separated as constraints. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>removable</declname>
          <briefdescription><para>should the relaxation be removed from the LP due to aging or cleanup? Usually set to FALSE. Set to TRUE for &apos;lazy constraints&apos; and &apos;user cuts&apos;. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>stickingatnode</declname>
          <briefdescription><para>should the constraint always be kept at the node where it was added, even if it may be moved to a more global node? Usually set to FALSE. Set to TRUE to for constraints that represent node data. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates and captures a linking constraint</para><para><simplesect kind="note"><para>the constraint gets captured, hence at one point you have to release it using the method <ref refid="scip_8h_1ae7055a40bc1c895c4acb118bcb8de4de" kindref="member">SCIPreleaseCons()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/cons_linking.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__linking_8h_1ae86c68e03aa84c921743b1c0cdb7d54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPcreateConsBasicLinking</definition>
        <argsstring>(SCIP *scip, SCIP_CONS **cons, const char *name, SCIP_VAR *intvar, SCIP_VAR **binvars, int *vals, int nbinvars)</argsstring>
        <name>SCIPcreateConsBasicLinking</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> **</type>
          <declname>cons</declname>
          <briefdescription><para>pointer to hold the created constraint </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <briefdescription><para>name of constraint </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>intvar</declname>
          <briefdescription><para>integer variable which should be linked </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> **</type>
          <declname>binvars</declname>
          <briefdescription><para>binary variables, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>vals</declname>
          <briefdescription><para>coefficients of the binary variables </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nbinvars</declname>
          <briefdescription><para>number of binary variables </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates and captures a linking constraint in its most basic version, i. e., all constraint flags are set to their basic value as explained for the method <ref refid="cons__linking_8h_1a36982d2d4d139d872d74d3054c71997e" kindref="member">SCIPcreateConsLinking()</ref>; all flags can be set via SCIPsetConsFLAGNAME-methods in <ref refid="scip_8h" kindref="compound">scip.h</ref></para><para><simplesect kind="see"><para><ref refid="cons__linking_8h_1a36982d2d4d139d872d74d3054c71997e" kindref="member">SCIPcreateConsLinking()</ref> for information about the basic constraint flag configuration</para></simplesect>
<simplesect kind="note"><para>the constraint gets captured, hence at one point you have to release it using the method <ref refid="scip_8h_1ae7055a40bc1c895c4acb118bcb8de4de" kindref="member">SCIPreleaseCons()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/cons_linking.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__linking_8h_1a301fd9e1b9eeb47353c16da45ad09bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexistsConsLinking</definition>
        <argsstring>(SCIP *scip, SCIP_VAR *intvar)</argsstring>
        <name>SCIPexistsConsLinking</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>intvar</declname>
          <briefdescription><para>integer variable which should be linked </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks if for the given integer variable a linking constraint exists </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/cons_linking.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__linking_8h_1a45f913398b4be2d09fb1a4dd9ef85e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> *</type>
        <definition>SCIP_CONS* SCIPgetConsLinking</definition>
        <argsstring>(SCIP *scip, SCIP_VAR *intvar)</argsstring>
        <name>SCIPgetConsLinking</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
          <declname>intvar</declname>
          <briefdescription><para>integer variable which should be linked </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the linking constraint belonging the given integer variable or NULL if it does not exist yet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/cons_linking.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__linking_8h_1af1803bfe1c3f4504432b6d0dd39f84bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> *</type>
        <definition>SCIP_VAR* SCIPgetIntvarLinking</definition>
        <argsstring>(SCIP *scip, SCIP_CONS *cons)</argsstring>
        <name>SCIPgetIntvarLinking</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> *</type>
          <declname>cons</declname>
          <briefdescription><para>linking constraint </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the integer variable of the linking constraint </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/cons_linking.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__linking_8h_1a03251ced478368e3fbe59af1db88bdc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPgetBinvarsLinking</definition>
        <argsstring>(SCIP *scip, SCIP_CONS *cons, SCIP_VAR ***binvars, int *nbinvars)</argsstring>
        <name>SCIPgetBinvarsLinking</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> *</type>
          <declname>cons</declname>
          <briefdescription><para>linking constraint </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref> ***</type>
          <declname>binvars</declname>
          <briefdescription><para>pointer to store the binary variables array pointer </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nbinvars</declname>
          <briefdescription><para>pointer to store the number of returned binary variables </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the binary variables of the linking constraint </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/cons_linking.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__linking_8h_1a00164960251507b9d7f9aadf3620a174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPgetNBinvarsLinking</definition>
        <argsstring>(SCIP *scip, SCIP_CONS *cons)</argsstring>
        <name>SCIPgetNBinvarsLinking</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> *</type>
          <declname>cons</declname>
          <briefdescription><para>linking constraint </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the number of binary variables of the linking constraint </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/cons_linking.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cons__linking_8h_1acff0549ad69d9853adde7f1f5df5dd22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* SCIPgetValsLinking</definition>
        <argsstring>(SCIP *scip, SCIP_CONS *cons)</argsstring>
        <name>SCIPgetValsLinking</name>
        <param>
          <type><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref> *</type>
          <declname>scip</declname>
          <briefdescription><para>SCIP data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref> *</type>
          <declname>cons</declname>
          <briefdescription><para>linking constraint </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the coefficients of the binary variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/cons_linking.h" line="150" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>constraint handler for linking binary variables to an integer variable </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Stefan Heinz </para></simplesect>
<simplesect kind="author"><para>Jens Schulz</para></simplesect>
The constraints handler stores linking constraints between an integer variable and an array of binary variables. Such a linking constraint has the form: <formula id="65">\[ y = \sum_{i=1}^n {c_i * x_i} \]</formula> with integer variable <formula id="66">$ y $</formula>, binary variables <formula id="67">$ x_1, \dots, x_n $</formula> and offset <formula id="68">$b \in Q$</formula>, and with the additional side condition that exactly one binary variable has to be one (set partitioning condition).</para><para>This constraint can be created only with the integer variable. In this case the binary variables are only created on demand. That is, whenever someone asks for the binary variables. Therefore, such constraints can be used to get a &quot;binary representation&quot; of the domain of the integer variable which will be dynamically created. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>program<sp/>and<sp/>library<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIP<sp/>---<sp/>Solving<sp/>Constraint<sp/>Integer<sp/>Programs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2002-2015<sp/>Konrad-Zuse-Zentrum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fuer<sp/>Informationstechnik<sp/>Berlin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>SCIP<sp/>is<sp/>distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>along<sp/>with<sp/>SCIP;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/>If<sp/>not<sp/>email<sp/>to<sp/>scip@zib.de.<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">/**@file<sp/><sp/><sp/>cons_linking.h</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>CONSHDLRS</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/>constraint<sp/>handler<sp/>for<sp/>linking<sp/>binary<sp/>variables<sp/>to<sp/>an<sp/>integer<sp/>variable</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@author<sp/>Stefan<sp/>Heinz</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>@author<sp/>Jens<sp/>Schulz</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>The<sp/>constraints<sp/>handler<sp/>stores<sp/>linking<sp/>constraints<sp/>between<sp/>an<sp/>integer<sp/>variable<sp/>and<sp/>an<sp/>array<sp/>of<sp/>binary<sp/>variables.<sp/>Such</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>a<sp/>linking<sp/>constraint<sp/>has<sp/>the<sp/>form:</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>\f[</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>y<sp/>=<sp/>\sum_{i=1}^n<sp/>{c_i<sp/>*<sp/>x_i}</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>\f]</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>with<sp/>integer<sp/>variable<sp/>\f$<sp/>y<sp/>\f$,<sp/>binary<sp/>variables<sp/>\f$<sp/>x_1,<sp/>\dots,<sp/>x_n<sp/>\f$<sp/>and<sp/>offset<sp/>\f$b<sp/>\in<sp/>Q\f$,<sp/>and</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>with<sp/>the<sp/>additional<sp/>side<sp/>condition<sp/>that<sp/>exactly<sp/>one<sp/>binary<sp/>variable<sp/>has<sp/>to<sp/>be<sp/>one<sp/>(set<sp/>partitioning<sp/>condition).</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>This<sp/>constraint<sp/>can<sp/>be<sp/>created<sp/>only<sp/>with<sp/>the<sp/>integer<sp/>variable.<sp/>In<sp/>this<sp/>case<sp/>the<sp/>binary<sp/>variables<sp/>are<sp/>only<sp/>created<sp/>on</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>demand.<sp/>That<sp/>is,<sp/>whenever<sp/>someone<sp/>asks<sp/>for<sp/>the<sp/>binary<sp/>variables.<sp/>Therefore,<sp/>such<sp/>constraints<sp/>can<sp/>be<sp/>used<sp/>to<sp/>get<sp/>a</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>&quot;binary<sp/>representation&quot;<sp/>of<sp/>the<sp/>domain<sp/>of<sp/>the<sp/>integer<sp/>variable<sp/>which<sp/>will<sp/>be<sp/>dynamically<sp/>created.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SCIP_CONS_LINKING_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SCIP_CONS_LINKING_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scip_8h" kindref="compound">scip/scip.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">/**<sp/>creates<sp/>the<sp/>handler<sp/>for<sp/>linking<sp/>constraints<sp/>and<sp/>includes<sp/>it<sp/>in<sp/>SCIP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="cons__linking_8h_1a79632aa2c9245e5f76b10dac24598fd2" kindref="member">SCIPincludeConshdlrLinking</ref>(</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">/**<sp/>creates<sp/>and<sp/>captures<sp/>a<sp/>linking<sp/>constraint</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>the<sp/>constraint<sp/>gets<sp/>captured,<sp/>hence<sp/>at<sp/>one<sp/>point<sp/>you<sp/>have<sp/>to<sp/>release<sp/>it<sp/>using<sp/>the<sp/>method<sp/>SCIPreleaseCons()</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="cons__linking_8h_1a36982d2d4d139d872d74d3054c71997e" kindref="member">SCIPcreateConsLinking</ref>(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>hold<sp/>the<sp/>created<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>name<sp/>of<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intvar,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>integer<sp/>variable<sp/>which<sp/>should<sp/>be<sp/>linked<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>binary<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>coefficients<sp/>of<sp/>the<sp/>binary<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbinvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>binary<sp/>starting<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>LP<sp/>relaxation<sp/>of<sp/>constraint<sp/>be<sp/>in<sp/>the<sp/>initial<sp/>LP?</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>TRUE.<sp/>Set<sp/>to<sp/>FALSE<sp/>for<sp/>&apos;lazy<sp/>constraints&apos;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separate,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>separated<sp/>during<sp/>LP<sp/>processing?</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>TRUE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enforce,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>enforced<sp/>during<sp/>node<sp/>processing?</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>TRUE<sp/>for<sp/>model<sp/>constraints,<sp/>FALSE<sp/>for<sp/>additional,<sp/>redundant<sp/>constraints.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>checked<sp/>for<sp/>feasibility?</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>TRUE<sp/>for<sp/>model<sp/>constraints,<sp/>FALSE<sp/>for<sp/>additional,<sp/>redundant<sp/>constraints.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>propagate,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>constraint<sp/>be<sp/>propagated<sp/>during<sp/>node<sp/>processing?</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>TRUE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>local,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>is<sp/>constraint<sp/>only<sp/>valid<sp/>locally?</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>FALSE.<sp/>Has<sp/>to<sp/>be<sp/>set<sp/>to<sp/>TRUE,<sp/>e.g.,<sp/>for<sp/>branching<sp/>constraints.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modifiable,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>is<sp/>constraint<sp/>modifiable<sp/>(subject<sp/>to<sp/>column<sp/>generation)?</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>FALSE.<sp/>In<sp/>column<sp/>generation<sp/>applications,<sp/>set<sp/>to<sp/>TRUE<sp/>if<sp/>pricing</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>adds<sp/>coefficients<sp/>to<sp/>this<sp/>constraint.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>is<sp/>constraint<sp/>subject<sp/>to<sp/>aging?</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>FALSE.<sp/>Set<sp/>to<sp/>TRUE<sp/>for<sp/>own<sp/>cuts<sp/>which</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>are<sp/>separated<sp/>as<sp/>constraints.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removable,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>relaxation<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>LP<sp/>due<sp/>to<sp/>aging<sp/>or<sp/>cleanup?</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>FALSE.<sp/>Set<sp/>to<sp/>TRUE<sp/>for<sp/>&apos;lazy<sp/>constraints&apos;<sp/>and<sp/>&apos;user<sp/>cuts&apos;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stickingatnode<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>the<sp/>constraint<sp/>always<sp/>be<sp/>kept<sp/>at<sp/>the<sp/>node<sp/>where<sp/>it<sp/>was<sp/>added,<sp/>even</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>if<sp/>it<sp/>may<sp/>be<sp/>moved<sp/>to<sp/>a<sp/>more<sp/>global<sp/>node?</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Usually<sp/>set<sp/>to<sp/>FALSE.<sp/>Set<sp/>to<sp/>TRUE<sp/>to<sp/>for<sp/>constraints<sp/>that<sp/>represent<sp/>node<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**<sp/>creates<sp/>and<sp/>captures<sp/>a<sp/>linking<sp/>constraint</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>in<sp/>its<sp/>most<sp/>basic<sp/>version,<sp/>i.<sp/>e.,<sp/>all<sp/>constraint<sp/>flags<sp/>are<sp/>set<sp/>to<sp/>their<sp/>basic<sp/>value<sp/>as<sp/>explained<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>method<sp/>SCIPcreateConsLinking();<sp/>all<sp/>flags<sp/>can<sp/>be<sp/>set<sp/>via<sp/>SCIPsetConsFLAGNAME-methods<sp/>in<sp/>scip.h</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>@see<sp/>SCIPcreateConsLinking()<sp/>for<sp/>information<sp/>about<sp/>the<sp/>basic<sp/>constraint<sp/>flag<sp/>configuration</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>the<sp/>constraint<sp/>gets<sp/>captured,<sp/>hence<sp/>at<sp/>one<sp/>point<sp/>you<sp/>have<sp/>to<sp/>release<sp/>it<sp/>using<sp/>the<sp/>method<sp/>SCIPreleaseCons()</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="cons__linking_8h_1ae86c68e03aa84c921743b1c0cdb7d54e" kindref="member">SCIPcreateConsBasicLinking</ref>(</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>hold<sp/>the<sp/>created<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>name<sp/>of<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intvar,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>integer<sp/>variable<sp/>which<sp/>should<sp/>be<sp/>linked<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>binary<sp/>variables,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>coefficients<sp/>of<sp/>the<sp/>binary<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbinvars<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>binary<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment">/**<sp/>checks<sp/>if<sp/>for<sp/>the<sp/>given<sp/>integer<sp/>variable<sp/>a<sp/>linking<sp/>constraint<sp/>exists<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="cons__linking_8h_1a301fd9e1b9eeb47353c16da45ad09bc0" kindref="member">SCIPexistsConsLinking</ref>(</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intvar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>integer<sp/>variable<sp/>which<sp/>should<sp/>be<sp/>linked<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="118"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>linking<sp/>constraint<sp/>belonging<sp/>the<sp/>given<sp/>integer<sp/>variable<sp/>or<sp/>NULL<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist<sp/>yet<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>*<sp/><ref refid="cons__linking_8h_1a45f913398b4be2d09fb1a4dd9ef85e5f" kindref="member">SCIPgetConsLinking</ref>(</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intvar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>integer<sp/>variable<sp/>which<sp/>should<sp/>be<sp/>linked<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>integer<sp/>variable<sp/>of<sp/>the<sp/>linking<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>*<sp/><ref refid="cons__linking_8h_1af1803bfe1c3f4504432b6d0dd39f84bc" kindref="member">SCIPgetIntvarLinking</ref>(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>linking<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>binary<sp/>variables<sp/>of<sp/>the<sp/>linking<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="cons__linking_8h_1a03251ced478368e3fbe59af1db88bdc3" kindref="member">SCIPgetBinvarsLinking</ref>(</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>linking<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__var_8h_1a032edd1f5032513d49e397ebdcc8915b" kindref="member">SCIP_VAR</ref>***<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>binary<sp/>variables<sp/>array<sp/>pointer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbinvars<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>the<sp/>number<sp/>of<sp/>returned<sp/>binary<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>binary<sp/>variables<sp/>of<sp/>the<sp/>linking<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cons__linking_8h_1a00164960251507b9d7f9aadf3620a174" kindref="member">SCIPgetNBinvarsLinking</ref>(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>linking<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">/**<sp/>returns<sp/>the<sp/>coefficients<sp/>of<sp/>the<sp/>binary<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="cons__linking_8h_1acff0549ad69d9853adde7f1f5df5dd22" kindref="member">SCIPgetValsLinking</ref>(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__scip_8h_1a4792a242d315bf76f05b1f4e0712bc33" kindref="member">SCIP</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCIP<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__cons_8h_1a38a65729afa6b1cef58fcff906850886" kindref="member">SCIP_CONS</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cons<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>linking<sp/>constraint<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/mnt/hdd/mlubin/work/scipoptsuite-3.2.0/scip-3.2.0/src/scip/cons_linking.h"/>
  </compounddef>
</doxygen>
