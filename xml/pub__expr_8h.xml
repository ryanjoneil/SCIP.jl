<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="pub__expr_8h" kind="file">
    <compoundname>pub_expr.h</compoundname>
    <includes refid="def_8h" local="yes">scip/def.h</includes>
    <includes refid="pub__message_8h" local="yes">scip/pub_message.h</includes>
    <includes local="yes">scip/intervalarith.h</includes>
    <includes local="yes">blockmemshell/memory.h</includes>
    <includes refid="type__expr_8h" local="yes">nlpi/type_expr.h</includes>
    <includes refid="type__exprinterpret_8h" local="yes">nlpi/type_exprinterpret.h</includes>
    <includedby refid="scip_8h" local="yes">scip.h</includedby>
    <includedby refid="exprinterpret__cppad_8cpp" local="yes">exprinterpret_cppad.cpp</includedby>
    <incdepgraph>
      <node id="9244">
        <label>stdarg.h</label>
      </node>
      <node id="9246">
        <label>scip/intervalarith.h</label>
      </node>
      <node id="9241">
        <label>assert.h</label>
      </node>
      <node id="9249">
        <label>nlpi/type_exprinterpret.h</label>
        <link refid="type__exprinterpret_8h"/>
      </node>
      <node id="9240">
        <label>float.h</label>
      </node>
      <node id="9239">
        <label>limits.h</label>
      </node>
      <node id="9245">
        <label>scip/type_message.h</label>
        <link refid="type__message_8h"/>
        <childnode refid="9237" relation="include">
        </childnode>
      </node>
      <node id="9243">
        <label>scip/pub_message.h</label>
        <link refid="pub__message_8h"/>
        <childnode refid="9244" relation="include">
        </childnode>
        <childnode refid="9236" relation="include">
        </childnode>
        <childnode refid="9245" relation="include">
        </childnode>
      </node>
      <node id="9242">
        <label>scip/type_retcode.h</label>
        <link refid="type__retcode_8h"/>
      </node>
      <node id="9248">
        <label>nlpi/type_expr.h</label>
        <link refid="type__expr_8h"/>
      </node>
      <node id="9235">
        <label>pub_expr.h</label>
        <link refid="pub_expr.h"/>
        <childnode refid="9236" relation="include">
        </childnode>
        <childnode refid="9243" relation="include">
        </childnode>
        <childnode refid="9246" relation="include">
        </childnode>
        <childnode refid="9247" relation="include">
        </childnode>
        <childnode refid="9248" relation="include">
        </childnode>
        <childnode refid="9249" relation="include">
        </childnode>
      </node>
      <node id="9238">
        <label>math.h</label>
      </node>
      <node id="9247">
        <label>blockmemshell/memory.h</label>
      </node>
      <node id="9236">
        <label>scip/def.h</label>
        <link refid="def_8h"/>
        <childnode refid="9237" relation="include">
        </childnode>
        <childnode refid="9238" relation="include">
        </childnode>
        <childnode refid="9239" relation="include">
        </childnode>
        <childnode refid="9240" relation="include">
        </childnode>
        <childnode refid="9241" relation="include">
        </childnode>
        <childnode refid="9242" relation="include">
        </childnode>
        <childnode refid="9243" relation="include">
        </childnode>
      </node>
      <node id="9237">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="9291">
        <label>heur_clique.h</label>
        <link refid="heur__clique_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9287">
        <label>cons_xor.h</label>
        <link refid="cons__xor_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9363">
        <label>reader_pbm.h</label>
        <link refid="reader__pbm_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9292">
        <label>heur_coefdiving.h</label>
        <link refid="heur__coefdiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9337">
        <label>presol_convertinttobin.h</label>
        <link refid="presol__convertinttobin_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9382">
        <label>sepa_zerohalf.h</label>
        <link refid="sepa__zerohalf_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9323">
        <label>heur_undercover.h</label>
        <link refid="heur__undercover_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9318">
        <label>heur_simplerounding.h</label>
        <link refid="heur__simplerounding_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9303">
        <label>heur_localbranching.h</label>
        <link refid="heur__localbranching_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9365">
        <label>reader_ppm.h</label>
        <link refid="reader__ppm_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9251">
        <label>scip.h</label>
        <link refid="scip_8h"/>
        <childnode refid="9252" relation="include">
        </childnode>
        <childnode refid="9254" relation="include">
        </childnode>
        <childnode refid="9255" relation="include">
        </childnode>
        <childnode refid="9256" relation="include">
        </childnode>
        <childnode refid="9257" relation="include">
        </childnode>
        <childnode refid="9258" relation="include">
        </childnode>
        <childnode refid="9259" relation="include">
        </childnode>
        <childnode refid="9260" relation="include">
        </childnode>
        <childnode refid="9261" relation="include">
        </childnode>
        <childnode refid="9262" relation="include">
        </childnode>
        <childnode refid="9263" relation="include">
        </childnode>
        <childnode refid="9264" relation="include">
        </childnode>
        <childnode refid="9265" relation="include">
        </childnode>
        <childnode refid="9266" relation="include">
        </childnode>
        <childnode refid="9267" relation="include">
        </childnode>
        <childnode refid="9268" relation="include">
        </childnode>
        <childnode refid="9269" relation="include">
        </childnode>
        <childnode refid="9270" relation="include">
        </childnode>
        <childnode refid="9271" relation="include">
        </childnode>
        <childnode refid="9272" relation="include">
        </childnode>
        <childnode refid="9273" relation="include">
        </childnode>
        <childnode refid="9274" relation="include">
        </childnode>
        <childnode refid="9275" relation="include">
        </childnode>
        <childnode refid="9276" relation="include">
        </childnode>
        <childnode refid="9277" relation="include">
        </childnode>
        <childnode refid="9278" relation="include">
        </childnode>
        <childnode refid="9279" relation="include">
        </childnode>
        <childnode refid="9280" relation="include">
        </childnode>
        <childnode refid="9281" relation="include">
        </childnode>
        <childnode refid="9282" relation="include">
        </childnode>
        <childnode refid="9283" relation="include">
        </childnode>
        <childnode refid="9284" relation="include">
        </childnode>
        <childnode refid="9285" relation="include">
        </childnode>
        <childnode refid="9286" relation="include">
        </childnode>
        <childnode refid="9287" relation="include">
        </childnode>
        <childnode refid="9288" relation="include">
        </childnode>
        <childnode refid="9289" relation="include">
        </childnode>
        <childnode refid="9290" relation="include">
        </childnode>
        <childnode refid="9291" relation="include">
        </childnode>
        <childnode refid="9292" relation="include">
        </childnode>
        <childnode refid="9293" relation="include">
        </childnode>
        <childnode refid="9294" relation="include">
        </childnode>
        <childnode refid="9295" relation="include">
        </childnode>
        <childnode refid="9296" relation="include">
        </childnode>
        <childnode refid="9297" relation="include">
        </childnode>
        <childnode refid="9298" relation="include">
        </childnode>
        <childnode refid="9299" relation="include">
        </childnode>
        <childnode refid="9300" relation="include">
        </childnode>
        <childnode refid="9301" relation="include">
        </childnode>
        <childnode refid="9302" relation="include">
        </childnode>
        <childnode refid="9303" relation="include">
        </childnode>
        <childnode refid="9304" relation="include">
        </childnode>
        <childnode refid="9305" relation="include">
        </childnode>
        <childnode refid="9306" relation="include">
        </childnode>
        <childnode refid="9307" relation="include">
        </childnode>
        <childnode refid="9308" relation="include">
        </childnode>
        <childnode refid="9309" relation="include">
        </childnode>
        <childnode refid="9310" relation="include">
        </childnode>
        <childnode refid="9311" relation="include">
        </childnode>
        <childnode refid="9312" relation="include">
        </childnode>
        <childnode refid="9313" relation="include">
        </childnode>
        <childnode refid="9314" relation="include">
        </childnode>
        <childnode refid="9315" relation="include">
        </childnode>
        <childnode refid="9316" relation="include">
        </childnode>
        <childnode refid="9317" relation="include">
        </childnode>
        <childnode refid="9318" relation="include">
        </childnode>
        <childnode refid="9319" relation="include">
        </childnode>
        <childnode refid="9320" relation="include">
        </childnode>
        <childnode refid="9321" relation="include">
        </childnode>
        <childnode refid="9322" relation="include">
        </childnode>
        <childnode refid="9323" relation="include">
        </childnode>
        <childnode refid="9324" relation="include">
        </childnode>
        <childnode refid="9325" relation="include">
        </childnode>
        <childnode refid="9326" relation="include">
        </childnode>
        <childnode refid="9327" relation="include">
        </childnode>
        <childnode refid="9328" relation="include">
        </childnode>
        <childnode refid="9329" relation="include">
        </childnode>
        <childnode refid="9330" relation="include">
        </childnode>
        <childnode refid="9331" relation="include">
        </childnode>
        <childnode refid="9332" relation="include">
        </childnode>
        <childnode refid="9333" relation="include">
        </childnode>
        <childnode refid="9334" relation="include">
        </childnode>
        <childnode refid="9335" relation="include">
        </childnode>
        <childnode refid="9336" relation="include">
        </childnode>
        <childnode refid="9337" relation="include">
        </childnode>
        <childnode refid="9338" relation="include">
        </childnode>
        <childnode refid="9339" relation="include">
        </childnode>
        <childnode refid="9340" relation="include">
        </childnode>
        <childnode refid="9341" relation="include">
        </childnode>
        <childnode refid="9342" relation="include">
        </childnode>
        <childnode refid="9343" relation="include">
        </childnode>
        <childnode refid="9344" relation="include">
        </childnode>
        <childnode refid="9345" relation="include">
        </childnode>
        <childnode refid="9346" relation="include">
        </childnode>
        <childnode refid="9347" relation="include">
        </childnode>
        <childnode refid="9348" relation="include">
        </childnode>
        <childnode refid="9349" relation="include">
        </childnode>
        <childnode refid="9350" relation="include">
        </childnode>
        <childnode refid="9351" relation="include">
        </childnode>
        <childnode refid="9352" relation="include">
        </childnode>
        <childnode refid="9353" relation="include">
        </childnode>
        <childnode refid="9354" relation="include">
        </childnode>
        <childnode refid="9355" relation="include">
        </childnode>
        <childnode refid="9356" relation="include">
        </childnode>
        <childnode refid="9357" relation="include">
        </childnode>
        <childnode refid="9358" relation="include">
        </childnode>
        <childnode refid="9359" relation="include">
        </childnode>
        <childnode refid="9360" relation="include">
        </childnode>
        <childnode refid="9361" relation="include">
        </childnode>
        <childnode refid="9362" relation="include">
        </childnode>
        <childnode refid="9363" relation="include">
        </childnode>
        <childnode refid="9364" relation="include">
        </childnode>
        <childnode refid="9365" relation="include">
        </childnode>
        <childnode refid="9366" relation="include">
        </childnode>
        <childnode refid="9367" relation="include">
        </childnode>
        <childnode refid="9368" relation="include">
        </childnode>
        <childnode refid="9369" relation="include">
        </childnode>
        <childnode refid="9253" relation="include">
        </childnode>
        <childnode refid="9370" relation="include">
        </childnode>
        <childnode refid="9371" relation="include">
        </childnode>
        <childnode refid="9372" relation="include">
        </childnode>
        <childnode refid="9373" relation="include">
        </childnode>
        <childnode refid="9374" relation="include">
        </childnode>
        <childnode refid="9375" relation="include">
        </childnode>
        <childnode refid="9376" relation="include">
        </childnode>
        <childnode refid="9377" relation="include">
        </childnode>
        <childnode refid="9378" relation="include">
        </childnode>
        <childnode refid="9379" relation="include">
        </childnode>
        <childnode refid="9380" relation="include">
        </childnode>
        <childnode refid="9381" relation="include">
        </childnode>
        <childnode refid="9382" relation="include">
        </childnode>
      </node>
      <node id="9256">
        <label>branch_inference.h</label>
        <link refid="branch__inference_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9279">
        <label>cons_pseudoboolean.h</label>
        <link refid="cons__pseudoboolean_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9317">
        <label>heur_shifting.h</label>
        <link refid="heur__shifting_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9308">
        <label>heur_oneopt.h</label>
        <link refid="heur__oneopt_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9283">
        <label>cons_sos1.h</label>
        <link refid="cons__sos1_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9333">
        <label>nodesel_restartdfs.h</label>
        <link refid="nodesel__restartdfs_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9372">
        <label>sepa_closecuts.h</label>
        <link refid="sepa__closecuts_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9263">
        <label>cons_and.h</label>
        <link refid="cons__and_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9364">
        <label>reader_pip.h</label>
        <link refid="reader__pip_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9315">
        <label>heur_rounding.h</label>
        <link refid="heur__rounding_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9313">
        <label>heur_rins.h</label>
        <link refid="heur__rins_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9253">
        <label>scipdefplugins.h</label>
        <link refid="scipdefplugins_8h"/>
      </node>
      <node id="9289">
        <label>disp_default.h</label>
        <link refid="disp__default_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9294">
        <label>heur_dins.h</label>
        <link refid="heur__dins_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9326">
        <label>heur_zeroobj.h</label>
        <link refid="heur__zeroobj_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9288">
        <label>dialog_default.h</label>
        <link refid="dialog__default_8h"/>
      </node>
      <node id="9255">
        <label>branch_fullstrong.h</label>
        <link refid="branch__fullstrong_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9299">
        <label>heur_guideddiving.h</label>
        <link refid="heur__guideddiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9361">
        <label>reader_opb.h</label>
        <link refid="reader__opb_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9277">
        <label>cons_or.h</label>
        <link refid="cons__or_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9340">
        <label>presol_gateextraction.h</label>
        <link refid="presol__gateextraction_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9260">
        <label>branch_random.h</label>
        <link refid="branch__random_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9298">
        <label>heur_fracdiving.h</label>
        <link refid="heur__fracdiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9269">
        <label>cons_disjunction.h</label>
        <link refid="cons__disjunction_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9352">
        <label>reader_bnd.h</label>
        <link refid="reader__bnd_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9261">
        <label>branch_relpscost.h</label>
        <link refid="branch__relpscost_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9301">
        <label>heur_intshifting.h</label>
        <link refid="heur__intshifting_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9286">
        <label>cons_varbound.h</label>
        <link refid="cons__varbound_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9334">
        <label>nodesel_uct.h</label>
        <link refid="nodesel__uct_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9268">
        <label>cons_cumulative.h</label>
        <link refid="cons__cumulative_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9270">
        <label>cons_indicator.h</label>
        <link refid="cons__indicator_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9349">
        <label>prop_redcost.h</label>
        <link refid="prop__redcost_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9296">
        <label>heur_feaspump.h</label>
        <link refid="heur__feaspump_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9369">
        <label>reader_zpl.h</label>
        <link refid="reader__zpl_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9370">
        <label>sepa_cgmip.h</label>
        <link refid="sepa__cgmip_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9310">
        <label>heur_pscostdiving.h</label>
        <link refid="heur__pscostdiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9356">
        <label>reader_fix.h</label>
        <link refid="reader__fix_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9284">
        <label>cons_sos2.h</label>
        <link refid="cons__sos2_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9320">
        <label>heur_trivial.h</label>
        <link refid="heur__trivial_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9273">
        <label>cons_linear.h</label>
        <link refid="cons__linear_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9305">
        <label>heur_nlpdiving.h</label>
        <link refid="heur__nlpdiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9271">
        <label>cons_integral.h</label>
        <link refid="cons__integral_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9373">
        <label>sepa_cmir.h</label>
        <link refid="sepa__cmir_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9312">
        <label>heur_rens.h</label>
        <link refid="heur__rens_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9295">
        <label>heur_dualval.h</label>
        <link refid="heur__dualval_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9314">
        <label>heur_rootsoldiving.h</label>
        <link refid="heur__rootsoldiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9347">
        <label>prop_probing.h</label>
        <link refid="prop__probing_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9278">
        <label>cons_orbitope.h</label>
        <link refid="cons__orbitope_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9267">
        <label>cons_countsols.h</label>
        <link refid="cons__countsols_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9380">
        <label>sepa_rapidlearning.h</label>
        <link refid="sepa__rapidlearning_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9311">
        <label>heur_randrounding.h</label>
        <link refid="heur__randrounding_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9329">
        <label>nodesel_breadthfirst.h</label>
        <link refid="nodesel__breadthfirst_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9319">
        <label>heur_subnlp.h</label>
        <link refid="heur__subnlp_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9354">
        <label>reader_cip.h</label>
        <link refid="reader__cip_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9331">
        <label>nodesel_estimate.h</label>
        <link refid="nodesel__estimate_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9344">
        <label>prop_dualfix.h</label>
        <link refid="prop__dualfix_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9300">
        <label>heur_intdiving.h</label>
        <link refid="heur__intdiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9346">
        <label>prop_obbt.h</label>
        <link refid="prop__obbt_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9348">
        <label>prop_pseudoobj.h</label>
        <link refid="prop__pseudoobj_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9341">
        <label>presol_implics.h</label>
        <link refid="presol__implics_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9304">
        <label>heur_mutation.h</label>
        <link refid="heur__mutation_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9371">
        <label>sepa_clique.h</label>
        <link refid="sepa__clique_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9321">
        <label>heur_trysol.h</label>
        <link refid="heur__trysol_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9359">
        <label>reader_lp.h</label>
        <link refid="reader__lp_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9377">
        <label>sepa_intobj.h</label>
        <link refid="sepa__intobj_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9322">
        <label>heur_twoopt.h</label>
        <link refid="heur__twoopt_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9325">
        <label>heur_veclendiving.h</label>
        <link refid="heur__veclendiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9262">
        <label>cons_abspower.h</label>
        <link refid="cons__abspower_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9281">
        <label>cons_setppc.h</label>
        <link refid="cons__setppc_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9309">
        <label>heur_proximity.h</label>
        <link refid="heur__proximity_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9375">
        <label>sepa_gomory.h</label>
        <link refid="sepa__gomory_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9272">
        <label>cons_knapsack.h</label>
        <link refid="cons__knapsack_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9350">
        <label>prop_rootredcost.h</label>
        <link refid="prop__rootredcost_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9332">
        <label>nodesel_hybridestim.h</label>
        <link refid="nodesel__hybridestim_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9274">
        <label>cons_linking.h</label>
        <link refid="cons__linking_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9252">
        <label>branch_allfullstrong.h</label>
        <link refid="branch__allfullstrong_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9367">
        <label>reader_sol.h</label>
        <link refid="reader__sol_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9336">
        <label>presol_components.h</label>
        <link refid="presol__components_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9360">
        <label>reader_mps.h</label>
        <link refid="reader__mps_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9306">
        <label>heur_objpscostdiving.h</label>
        <link refid="heur__objpscostdiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9290">
        <label>heur_actconsdiving.h</label>
        <link refid="heur__actconsdiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9342">
        <label>presol_inttobinary.h</label>
        <link refid="presol__inttobinary_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9250">
        <label>pub_expr.h</label>
        <link refid="pub_expr.h"/>
        <childnode refid="9251" relation="include">
        </childnode>
        <childnode refid="9383" relation="include">
        </childnode>
      </node>
      <node id="9351">
        <label>prop_vbounds.h</label>
        <link refid="prop__vbounds_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9378">
        <label>sepa_mcf.h</label>
        <link refid="sepa__mcf_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9374">
        <label>sepa_flowcover.h</label>
        <link refid="sepa__flowcover_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9345">
        <label>prop_genvbounds.h</label>
        <link refid="prop__genvbounds_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9339">
        <label>presol_dualinfer.h</label>
        <link refid="presol__dualinfer_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9282">
        <label>cons_soc.h</label>
        <link refid="cons__soc_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9328">
        <label>nodesel_bfs.h</label>
        <link refid="nodesel__bfs_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9259">
        <label>branch_pscost.h</label>
        <link refid="branch__pscost_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9376">
        <label>sepa_impliedbounds.h</label>
        <link refid="sepa__impliedbounds_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9276">
        <label>cons_nonlinear.h</label>
        <link refid="cons__nonlinear_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9355">
        <label>reader_cnf.h</label>
        <link refid="reader__cnf_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9324">
        <label>heur_vbounds.h</label>
        <link refid="heur__vbounds_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9338">
        <label>presol_domcol.h</label>
        <link refid="presol__domcol_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9302">
        <label>heur_linesearchdiving.h</label>
        <link refid="heur__linesearchdiving_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9358">
        <label>reader_gms.h</label>
        <link refid="reader__gms_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9366">
        <label>reader_rlp.h</label>
        <link refid="reader__rlp_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9285">
        <label>cons_superindicator.h</label>
        <link refid="cons__superindicator_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9257">
        <label>branch_leastinf.h</label>
        <link refid="branch__leastinf_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9316">
        <label>heur_shiftandpropagate.h</label>
        <link refid="heur__shiftandpropagate_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9335">
        <label>presol_boundshift.h</label>
        <link refid="presol__boundshift_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9275">
        <label>cons_logicor.h</label>
        <link refid="cons__logicor_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9362">
        <label>reader_osil.h</label>
        <link refid="reader__osil_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9357">
        <label>reader_fzn.h</label>
        <link refid="reader__fzn_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9330">
        <label>nodesel_dfs.h</label>
        <link refid="nodesel__dfs_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9266">
        <label>cons_conjunction.h</label>
        <link refid="cons__conjunction_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9381">
        <label>sepa_strongcg.h</label>
        <link refid="sepa__strongcg_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9353">
        <label>reader_ccg.h</label>
        <link refid="reader__ccg_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9343">
        <label>presol_trivial.h</label>
        <link refid="presol__trivial_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9297">
        <label>heur_fixandinfer.h</label>
        <link refid="heur__fixandinfer_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9280">
        <label>cons_quadratic.h</label>
        <link refid="cons__quadratic_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9254">
        <label>branch_cloud.h</label>
        <link refid="branch__cloud_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9379">
        <label>sepa_oddcycle.h</label>
        <link refid="sepa__oddcycle_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9383">
        <label>exprinterpret_cppad.cpp</label>
        <link refid="exprinterpret__cppad_8cpp"/>
      </node>
      <node id="9293">
        <label>heur_crossover.h</label>
        <link refid="heur__crossover_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9265">
        <label>cons_bounddisjunction.h</label>
        <link refid="cons__bounddisjunction_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9264">
        <label>cons_bivariate.h</label>
        <link refid="cons__bivariate_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9368">
        <label>reader_wbo.h</label>
        <link refid="reader__wbo_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9327">
        <label>heur_zirounding.h</label>
        <link refid="heur__zirounding_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9307">
        <label>heur_octane.h</label>
        <link refid="heur__octane_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
      <node id="9258">
        <label>branch_mostinf.h</label>
        <link refid="branch__mostinf_8h"/>
        <childnode refid="9253" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <header>Expression curvature methods</header>
      <memberdef kind="function" id="pub__expr_8h_1acca570d8c11e908969e55f3e8094b9c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
        <definition>SCIP_EXPRCURV SCIPexprcurvAdd</definition>
        <argsstring>(SCIP_EXPRCURV curv1, SCIP_EXPRCURV curv2)</argsstring>
        <name>SCIPexprcurvAdd</name>
        <param>
          <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
          <declname>curv1</declname>
          <briefdescription><para>curvature of first summand </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
          <declname>curv2</declname>
          <briefdescription><para>curvature of second summand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives curvature for a sum of two functions with given curvature </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1af0932366868367ad4429f0e9109e5321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
        <definition>SCIP_EXPRCURV SCIPexprcurvNegate</definition>
        <argsstring>(SCIP_EXPRCURV curvature)</argsstring>
        <name>SCIPexprcurvNegate</name>
        <param>
          <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
          <declname>curvature</declname>
          <briefdescription><para>curvature of function </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the curvature for the negation of a function with given curvature </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a953f8b1e40e329d96187a160a3e6df8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
        <definition>SCIP_EXPRCURV SCIPexprcurvMultiply</definition>
        <argsstring>(SCIP_Real factor, SCIP_EXPRCURV curvature)</argsstring>
        <name>SCIPexprcurvMultiply</name>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>factor</declname>
          <briefdescription><para>constant factor </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
          <declname>curvature</declname>
          <briefdescription><para>curvature of other factor </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives curvature for a functions with given curvature multiplied by a constant factor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a287ddd135e76773568642d4c0fea37f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
        <definition>SCIP_EXPRCURV SCIPexprcurvPower</definition>
        <argsstring>(SCIP_INTERVAL basebounds, SCIP_EXPRCURV basecurv, SCIP_Real exponent)</argsstring>
        <name>SCIPexprcurvPower</name>
        <param>
          <type>SCIP_INTERVAL</type>
          <declname>basebounds</declname>
          <briefdescription><para>bounds on base function </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
          <declname>basecurv</declname>
          <briefdescription><para>curvature of base function </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>exponent</declname>
          <briefdescription><para>exponent </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives curvature for base^exponent for given bounds and curvature of base-function and constant exponent </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a0ef9cb8f62cdfbbf2ac60c0bae412d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
        <definition>SCIP_EXPRCURV SCIPexprcurvMonomial</definition>
        <argsstring>(int nfactors, SCIP_Real *exponents, int *factoridxs, SCIP_EXPRCURV *factorcurv, SCIP_INTERVAL *factorbounds)</argsstring>
        <name>SCIPexprcurvMonomial</name>
        <param>
          <type>int</type>
          <declname>nfactors</declname>
          <briefdescription><para>number of factors in monomial </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>exponents</declname>
          <briefdescription><para>exponents in monomial, or NULL if all 1.0 </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>factoridxs</declname>
          <briefdescription><para>indices of factors, or NULL if identity mapping </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref> *</type>
          <declname>factorcurv</declname>
          <briefdescription><para>curvature of each factor </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>factorbounds</declname>
          <briefdescription><para>bounds of each factor </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives curvature for a monomial with given curvatures and bounds for each factor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a4e44f88bd58e37d665e58b2d3a37efb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SCIPexprcurvGetName</definition>
        <argsstring>(SCIP_EXPRCURV curv)</argsstring>
        <name>SCIPexprcurvGetName</name>
        <param>
          <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
          <declname>curv</declname>
          <briefdescription><para>curvature </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives name as string for a curvature </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="89" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Expression operand methods</header>
      <memberdef kind="function" id="pub__expr_8h_1af1a80dd43d279ebabeb99a717a61efc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* SCIPexpropGetName</definition>
        <argsstring>(SCIP_EXPROP op)</argsstring>
        <name>SCIPexpropGetName</name>
        <param>
          <type><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref></type>
          <declname>op</declname>
          <briefdescription><para>expression operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the name of an operand </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a7e5dbcdd03aeed7eee8bd07fc2d44eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexpropGetNChildren</definition>
        <argsstring>(SCIP_EXPROP op)</argsstring>
        <name>SCIPexpropGetNChildren</name>
        <param>
          <type><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref></type>
          <declname>op</declname>
          <briefdescription><para>expression operand </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the number of children of a simple operand <simplesect kind="return"><para>-1 for invalid operands and -2 for complex operands (those where the number of children depends on the expression) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="108" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Expression methods</header>
      <memberdef kind="function" id="pub__expr_8h_1a0fc57c277df5a8999f286180f7d23552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref></type>
        <definition>SCIP_EXPROP SCIPexprGetOperator</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetOperator</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives operator of expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprGetNChildren</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetNChildren</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives number of children of an expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a5bf46444b29de80b56547c3ea29c2b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
        <definition>SCIP_EXPR** SCIPexprGetChildren</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetChildren</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives pointer to array with children of an expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1af09996e9175416dae554e76427d3bb93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprGetOpIndex</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetOpIndex</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives index belonging to a SCIP_EXPR_VARIDX or SCIP_EXPR_PARAM operand </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a30db4adf5a04ae548b55c27490a1a4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprGetOpReal</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetOpReal</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives real belonging to a SCIP_EXPR_CONST operand </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a7d777c7ac53d49fe631f86f1039d1d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* SCIPexprGetOpData</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetOpData</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives void* belonging to a complex operand </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ab654b47eb34b1109ba455c0196bf10e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprGetRealPowerExponent</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetRealPowerExponent</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives exponent belonging to a SCIP_EXPR_REALPOWER expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a4f54dbfc15691b82db07f76b33cd078f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprGetIntPowerExponent</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetIntPowerExponent</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives exponent belonging to a SCIP_EXPR_INTPOWER expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ad445226afacd0925a35a786d6c8280d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprGetSignPowerExponent</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetSignPowerExponent</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives exponent belonging to a SCIP_EXPR_SIGNPOWER expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a3622b0e8b3f42225474447d2a5d52452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPexprGetLinearCoefs</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetLinearCoefs</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives linear coefficients belonging to a SCIP_EXPR_LINEAR expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a6d5b654b0f5d330ea5d95c308f545d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprGetLinearConstant</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetLinearConstant</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives constant belonging to a SCIP_EXPR_LINEAR expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a086c11beaf74e9b931286930ccc45d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref> *</type>
        <definition>SCIP_QUADELEM* SCIPexprGetQuadElements</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetQuadElements</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>quadratic expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives quadratic elements belonging to a SCIP_EXPR_QUADRATIC expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1abe9b1d1a3184ebd6de047b3a7d76ac01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprGetQuadConstant</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetQuadConstant</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>quadratic expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives constant belonging to a SCIP_EXPR_QUADRATIC expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a7196ac7fec3f5c38531e73faab66138c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPexprGetQuadLinearCoefs</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetQuadLinearCoefs</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>quadratic expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives linear coefficients belonging to a SCIP_EXPR_QUADRATIC expression can be NULL if all coefficients are 0.0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a95b96513dec722d7084d81b800511006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprGetNQuadElements</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetNQuadElements</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>quadratic expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives number of quadratic elements belonging to a SCIP_EXPR_QUADRATIC expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ae330fef00b656b46a3a82c05e4bbd405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> **</type>
        <definition>SCIP_EXPRDATA_MONOMIAL** SCIPexprGetMonomials</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetMonomials</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the monomials belonging to a SCIP_EXPR_POLYNOMIAL expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a41df92174e44481bb10b60474388cbec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprGetNMonomials</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetNMonomials</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the number of monomials belonging to a SCIP_EXPR_POLYNOMIAL expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a282b396d13f3f93d16e31f022f3f552f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprGetPolynomialConstant</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprGetPolynomialConstant</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the constant belonging to a SCIP_EXPR_POLYNOMIAL expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ac4f7893af3baf86dc0445c842947821a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprGetMonomialCoef</definition>
        <argsstring>(SCIP_EXPRDATA_MONOMIAL *monomial)</argsstring>
        <name>SCIPexprGetMonomialCoef</name>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets coefficient of a monomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a8a71af77c61048760e0fe7001aa668dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprGetMonomialNFactors</definition>
        <argsstring>(SCIP_EXPRDATA_MONOMIAL *monomial)</argsstring>
        <name>SCIPexprGetMonomialNFactors</name>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of factors of a monomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a9fd82050183d79a9749bfed43dbb48a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* SCIPexprGetMonomialChildIndices</definition>
        <argsstring>(SCIP_EXPRDATA_MONOMIAL *monomial)</argsstring>
        <name>SCIPexprGetMonomialChildIndices</name>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets indices of children corresponding to factors of a monomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1af62d25255b598db8d4a41193659c9d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPexprGetMonomialExponents</definition>
        <argsstring>(SCIP_EXPRDATA_MONOMIAL *monomial)</argsstring>
        <name>SCIPexprGetMonomialExponents</name>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets exponents in factors of a monomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ab182312443de687163956ea5e879791b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprCreate</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR **expr, SCIP_EXPROP op,...)</argsstring>
        <name>SCIPexprCreate</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>expr</declname>
          <briefdescription><para>pointer to buffer for expression address </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref></type>
          <declname>op</declname>
          <briefdescription><para>operand of expression </para></briefdescription>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates a simple expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a354f2c4744f18c6c621192558b434106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprCopyDeep</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR **targetexpr, SCIP_EXPR *sourceexpr)</argsstring>
        <name>SCIPexprCopyDeep</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>targetexpr</declname>
          <briefdescription><para>buffer to store pointer to copied expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>sourceexpr</declname>
          <briefdescription><para>expression to copy </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copies an expression including its children </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="292" column="1"/>
        <referencedby refid="exprinterpret__cppad_8cpp_1ad4142b870bae28b64791d55da3ff4706" compoundref="exprinterpret__cppad_8cpp" startline="1784" endline="1829">SCIPexprintCompile</referencedby>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a8a03414e3d699a303f5481810d115de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprFreeDeep</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR **expr)</argsstring>
        <name>SCIPexprFreeDeep</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>expr</declname>
          <briefdescription><para>pointer to expression to free </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees an expression including its children </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="300" column="1"/>
        <referencedby refid="exprinterpret__cppad_8cpp_1ad4142b870bae28b64791d55da3ff4706" compoundref="exprinterpret__cppad_8cpp" startline="1784" endline="1829">SCIPexprintCompile</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1af754d568d223fea54f16d89cedec0071" compoundref="exprinterpret__cppad_8cpp" startline="1832" endline="1846">SCIPexprintFreeData</referencedby>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a286aaee5d12b2b3eb4b84ac3900db7f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprFreeShallow</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR **expr)</argsstring>
        <name>SCIPexprFreeShallow</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>expr</declname>
          <briefdescription><para>pointer to expression to free </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees an expression but not its children </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aef781cb9ce6d6784c08f2ab61d10c87c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprAdd</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR **expr, SCIP_Real coef1, SCIP_EXPR *term1, SCIP_Real coef2, SCIP_EXPR *term2, SCIP_Real constant)</argsstring>
        <name>SCIPexprAdd</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>expr</declname>
          <briefdescription><para>pointer to store pointer to created expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>coef1</declname>
          <briefdescription><para>coefficient of first term </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>term1</declname>
          <briefdescription><para>expression of first term, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>coef2</declname>
          <briefdescription><para>coefficient of second term </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>term2</declname>
          <briefdescription><para>expression of second term, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant term to add </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an expression from the addition of two given expression, with coefficients, and a constant</para><para>the given expressions may be modified or freed, otherwise it will be used a child expression favors creation and maintaining of SCIP_EXPR_LINEAR over SCIP_EXPR_PLUS or SCIP_EXPR_SUM </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aa455972ac36fd9c0923fbec4793c52f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprMulConstant</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR **expr, SCIP_EXPR *term, SCIP_Real factor)</argsstring>
        <name>SCIPexprMulConstant</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>expr</declname>
          <briefdescription><para>buffer to store pointer to created expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>term</declname>
          <briefdescription><para>term to multiply by factor </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>factor</declname>
          <briefdescription><para>factor </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an expression from the multiplication of an expression with a constant</para><para>the given expressions may be modified or freed, otherwise it will be used a child expression favors creation of SCIP_EXPR_LINEAR over SCIP_EXPR_MUP or SCIP_EXPR_PROD </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a53ace65b92ef84094762513c03ac80fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprCreateLinear</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR **expr, int nchildren, SCIP_EXPR **children, SCIP_Real *coefs, SCIP_Real constant)</argsstring>
        <name>SCIPexprCreateLinear</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>expr</declname>
          <briefdescription><para>pointer to buffer for expression address </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nchildren</declname>
          <briefdescription><para>number of children </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>children</declname>
          <briefdescription><para>children of expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coefs</declname>
          <briefdescription><para>coefficients of children </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant part </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates a SCIP_EXPR_LINEAR expression that is (affine) linear in its children: constant + sum_i coef_i child_i </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a23067c5003bd8be0a40e223291c4782b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprAddToLinear</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR *expr, int nchildren, SCIP_Real *coefs, SCIP_EXPR **children, SCIP_Real constant)</argsstring>
        <name>SCIPexprAddToLinear</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>linear expression </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nchildren</declname>
          <briefdescription><para>number of children to add </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coefs</declname>
          <briefdescription><para>coefficients of additional children </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>children</declname>
          <briefdescription><para>additional children expressions </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant to add </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds new terms to a linear expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a58602a2de3a7f8453d553ca0aed46eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprCreateQuadratic</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR **expr, int nchildren, SCIP_EXPR **children, SCIP_Real constant, SCIP_Real *lincoefs, int nquadelems, SCIP_QUADELEM *quadelems)</argsstring>
        <name>SCIPexprCreateQuadratic</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>expr</declname>
          <briefdescription><para>pointer to buffer for expression address </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nchildren</declname>
          <briefdescription><para>number of children </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>children</declname>
          <briefdescription><para>children of expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lincoefs</declname>
          <briefdescription><para>linear coefficients of children, or NULL if all 0.0 </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nquadelems</declname>
          <briefdescription><para>number of quadratic elements </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref> *</type>
          <declname>quadelems</declname>
          <briefdescription><para>quadratic elements specifying coefficients and child indices </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates a SCIP_EXPR_QUADRATIC expression: constant + sum_i coef_i child_i + sum_i coef_i child1_i child2_i </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a7448839a1f4d853210f0aec3c3965fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprSortQuadElems</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprSortQuadElems</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>quadratic expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ensures that quadratic elements of a quadratic expression are sorted </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a9b19abb7ea396cf9c9f4076364acfe95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprCreatePolynomial</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR **expr, int nchildren, SCIP_EXPR **children, int nmonomials, SCIP_EXPRDATA_MONOMIAL **monomials, SCIP_Real constant, SCIP_Bool copymonomials)</argsstring>
        <name>SCIPexprCreatePolynomial</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>expr</declname>
          <briefdescription><para>pointer to buffer for expression address </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nchildren</declname>
          <briefdescription><para>number of children </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>children</declname>
          <briefdescription><para>children of expression </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nmonomials</declname>
          <briefdescription><para>number of monomials </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> **</type>
          <declname>monomials</declname>
          <briefdescription><para>monomials </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant part </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>copymonomials</declname>
          <briefdescription><para>should monomials by copied or ownership be assumed? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates a SCIP_EXPR_POLYNOMIAL expression from an array of monomials: constant + sum_i monomial_i </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a0cca53108f6eaed80ebbf20afcca895a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprAddMonomials</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR *expr, int nmonomials, SCIP_EXPRDATA_MONOMIAL **monomials, SCIP_Bool copymonomials)</argsstring>
        <name>SCIPexprAddMonomials</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory of expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nmonomials</declname>
          <briefdescription><para>number of monomials to add </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> **</type>
          <declname>monomials</declname>
          <briefdescription><para>the monomials to add </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>copymonomials</declname>
          <briefdescription><para>should monomials by copied or ownership be assumed? </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds an array of monomials to a SCIP_EXPR_POLYNOMIAL expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1abfc72d5c30a5adcc32de6dad9f03eda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprChgPolynomialConstant</definition>
        <argsstring>(SCIP_EXPR *expr, SCIP_Real constant)</argsstring>
        <name>SCIPexprChgPolynomialConstant</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>new value for constant </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes the constant in a SCIP_EXPR_POLYNOMIAL expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a6a6c74b423eacf85ea3b8569adb65090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprMultiplyPolynomialByConstant</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR *expr, SCIP_Real factor)</argsstring>
        <name>SCIPexprMultiplyPolynomialByConstant</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>polynomial expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>factor</declname>
          <briefdescription><para>constant factor </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>multiplies each summand of a polynomial by a given constant </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a32d3cfb18322d4868e72f03dba73788a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprMultiplyPolynomialByMonomial</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR *expr, SCIP_EXPRDATA_MONOMIAL *factor, int *childmap)</argsstring>
        <name>SCIPexprMultiplyPolynomialByMonomial</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>polynomial expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>factor</declname>
          <briefdescription><para>monomial factor </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>childmap</declname>
          <briefdescription><para>map children in factor to children in expr, or NULL for 1:1 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>multiplies each summand of a polynomial by a given monomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a941c5251cc15a1479808eecb27260f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprMultiplyPolynomialByPolynomial</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR *expr, SCIP_EXPR *factor, int *childmap)</argsstring>
        <name>SCIPexprMultiplyPolynomialByPolynomial</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>polynomial expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>factor</declname>
          <briefdescription><para>polynomial factor </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>childmap</declname>
          <briefdescription><para>map children in factor to children in expr, or NULL for 1:1 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>multiplies this polynomial by a polynomial factor needs to be different from expr </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a55a7d5645bf08926b05064d2398f61f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprPolynomialPower</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR *expr, int exponent)</argsstring>
        <name>SCIPexprPolynomialPower</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>polynomial expression </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>exponent</declname>
          <briefdescription><para>exponent of power operation </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>takes a power of the polynomial exponent need to be an integer polynomial need to be a monomial, if exponent is negative </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a97eb8c0850c519415f39e9293a709ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprMergeMonomials</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR *expr, SCIP_Real eps, SCIP_Bool mergefactors)</argsstring>
        <name>SCIPexprMergeMonomials</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>polynomial expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>eps</declname>
          <briefdescription><para>threshold under which numbers are treat as zero </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>mergefactors</declname>
          <briefdescription><para>whether to merge factors in monomials too </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>merges monomials in a polynomial expression that differ only in coefficient into a single monomial eliminates monomials with coefficient between -eps and eps </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1af358ba7ad9cac7fc59bb73941e4b88e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprCreateMonomial</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRDATA_MONOMIAL **monomial, SCIP_Real coef, int nfactors, int *childidxs, SCIP_Real *exponents)</argsstring>
        <name>SCIPexprCreateMonomial</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> **</type>
          <declname>monomial</declname>
          <briefdescription><para>buffer where to store pointer to new monomial </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>coef</declname>
          <briefdescription><para>coefficient of monomial </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nfactors</declname>
          <briefdescription><para>number of factors in monomial </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>childidxs</declname>
          <briefdescription><para>indices of children corresponding to factors, or NULL if identity </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>exponents</declname>
          <briefdescription><para>exponent in each factor, or NULL if all 1.0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates a monomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="462" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1af8db8348d0d58f0cd349ccfad7c9f390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprFreeMonomial</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRDATA_MONOMIAL **monomial)</argsstring>
        <name>SCIPexprFreeMonomial</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> **</type>
          <declname>monomial</declname>
          <briefdescription><para>pointer to monomial that should be freed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees a monomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ac1c75529a06aa946b8636655155f53ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprSortMonomialFactors</definition>
        <argsstring>(SCIP_EXPRDATA_MONOMIAL *monomial)</argsstring>
        <name>SCIPexprSortMonomialFactors</name>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ensures that factors in a monomial are sorted </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ae0ae5371ba754fcbff4ce5de33928e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprFindMonomialFactor</definition>
        <argsstring>(SCIP_EXPRDATA_MONOMIAL *monomial, int childidx, int *pos)</argsstring>
        <name>SCIPexprFindMonomialFactor</name>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>childidx</declname>
          <briefdescription><para>index of the child which factor to search for </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>pos</declname>
          <briefdescription><para>buffer to store position of factor </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds a factor corresponding to a given child index in a monomial note that if the factors have not been merged, the position of some factor corresponding to a given child is given returns TRUE if a factor is found, FALSE if not </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aae30dc0d141f3e5849a8c104b7db970b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprAreMonomialsEqual</definition>
        <argsstring>(SCIP_EXPRDATA_MONOMIAL *monomial1, SCIP_EXPRDATA_MONOMIAL *monomial2, SCIP_Real eps)</argsstring>
        <name>SCIPexprAreMonomialsEqual</name>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial1</declname>
          <briefdescription><para>first monomial </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial2</declname>
          <briefdescription><para>second monomial </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>eps</declname>
          <briefdescription><para>threshold under which numbers are treated as 0.0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks if two monomials are equal </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a9a8c5fbb8ec588dafdd7755d6c34698a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprAddMonomialFactors</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRDATA_MONOMIAL *monomial, int nfactors, int *childidxs, SCIP_Real *exponents)</argsstring>
        <name>SCIPexprAddMonomialFactors</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nfactors</declname>
          <briefdescription><para>number of factors to add </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>childidxs</declname>
          <briefdescription><para>indices of children corresponding to factors </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>exponents</declname>
          <briefdescription><para>exponent in each factor </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds factors to a monomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ab4d93cad3bf663e5e53f483556f96bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprChgMonomialCoef</definition>
        <argsstring>(SCIP_EXPRDATA_MONOMIAL *monomial, SCIP_Real newcoef)</argsstring>
        <name>SCIPexprChgMonomialCoef</name>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>newcoef</declname>
          <briefdescription><para>new coefficient </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>changes coefficient of monomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aa150275250cd34521458e83e37335cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprMultiplyMonomialByMonomial</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRDATA_MONOMIAL *monomial, SCIP_EXPRDATA_MONOMIAL *factor, int *childmap)</argsstring>
        <name>SCIPexprMultiplyMonomialByMonomial</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>factor</declname>
          <briefdescription><para>factor monomial </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>childmap</declname>
          <briefdescription><para>map to apply to children in factor, or NULL for 1:1 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>multiplies a monomial with a monomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1abe8b84e8d6309295163b99bdb5463d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprMonomialPower</definition>
        <argsstring>(SCIP_EXPRDATA_MONOMIAL *monomial, int exponent)</argsstring>
        <name>SCIPexprMonomialPower</name>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>exponent</declname>
          <briefdescription><para>integer exponent of power operation </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>replaces the monomial by a power of the monomial allows only integers as exponent </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a5ef8fa99b134c30bfe0e9be2a0dd869e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprMergeMonomialFactors</definition>
        <argsstring>(SCIP_EXPRDATA_MONOMIAL *monomial, SCIP_Real eps)</argsstring>
        <name>SCIPexprMergeMonomialFactors</name>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> *</type>
          <declname>monomial</declname>
          <briefdescription><para>monomial </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>eps</declname>
          <briefdescription><para>threshold under which numbers are treated as 0.0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>merges factors that correspond to the same child by adding exponents eliminates factors with exponent between -eps and eps </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ab131324dd52a62bf7a5d3b92f1375b73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprSortMonomials</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprSortMonomials</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>polynomial expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ensures that monomials of a polynomial are sorted </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a78cd27ed57cd9c239e1bbc5d304bf7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprHasParam</definition>
        <argsstring>(SCIP_EXPR *expr)</argsstring>
        <name>SCIPexprHasParam</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>indicates whether the expression contains a SCIP_EXPR_PARAM </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a433024bed75a9372ce8b30d82ec97dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprGetMaxDegree</definition>
        <argsstring>(SCIP_EXPR *expr, int *maxdegree)</argsstring>
        <name>SCIPexprGetMaxDegree</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>maxdegree</declname>
          <briefdescription><para>buffer to store maximal degree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets maximal degree of expression, or SCIP_EXPR_DEGREEINFINITY if not a polynomial </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="561" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a0ddd65b428bdd2d3a29f8e0b411e5c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprGetVarsUsage</definition>
        <argsstring>(SCIP_EXPR *expr, int *varsusage)</argsstring>
        <name>SCIPexprGetVarsUsage</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression to update </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>varsusage</declname>
          <briefdescription><para>array with counters of variable usage </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>counts usage of variables in expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="568" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a483972cc3ab4f2a25497caf7dbd0a403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprAreEqual</definition>
        <argsstring>(SCIP_EXPR *expr1, SCIP_EXPR *expr2, SCIP_Real eps)</argsstring>
        <name>SCIPexprAreEqual</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr1</declname>
          <briefdescription><para>first expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr2</declname>
          <briefdescription><para>second expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>eps</declname>
          <briefdescription><para>threshold under which numbers are assumed to be zero </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compares whether two expressions are the same inconclusive, i.e., may give FALSE even if expressions are equivalent (x*y != y*x) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a45e3fc1dd9d836c99515c21b8dc49e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprSimplify</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_MESSAGEHDLR *messagehdlr, SCIP_EXPR *expr, SCIP_Real eps, int maxexpansionexponent, int nvars, int *nlinvars, int *linidxs, SCIP_Real *lincoefs)</argsstring>
        <name>SCIPexprSimplify</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref> *</type>
          <declname>messagehdlr</declname>
          <briefdescription><para>message handler </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>eps</declname>
          <briefdescription><para>threshold, under which positive values are treat as 0 </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>maxexpansionexponent</declname>
          <briefdescription><para>maximal exponent for which we still expand non-monomial polynomials </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nvars</declname>
          <briefdescription><para>number of variables in expression </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nlinvars</declname>
          <briefdescription><para>buffer to store number of linear variables in linear part, or NULL if linear part should not be separated </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>linidxs</declname>
          <briefdescription><para>array to store indices of variables in expression tree which belong to linear part, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lincoefs</declname>
          <briefdescription><para>array to store coefficients of linear part, or NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>aims at simplifying an expression and splitting of a linear expression if linear variables are split off, expression interpreter data, if stored in the tree, is freed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ae99abdd201bbeec826ad42e4627e64f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprEval</definition>
        <argsstring>(SCIP_EXPR *expr, SCIP_Real *varvals, SCIP_Real *param, SCIP_Real *val)</argsstring>
        <name>SCIPexprEval</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>varvals</declname>
          <briefdescription><para>values for variables, can be NULL if the expression is constant </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>param</declname>
          <briefdescription><para>values for parameters, can be NULL if the expression is not parameterized </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>evaluates an expression w.r.t. a point </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1abbbedd9621e4e33d41f1af820d46fea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprEvalInt</definition>
        <argsstring>(SCIP_EXPR *expr, SCIP_Real infinity, SCIP_INTERVAL *varvals, SCIP_Real *param, SCIP_INTERVAL *val)</argsstring>
        <name>SCIPexprEvalInt</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>infinity</declname>
          <briefdescription><para>value to use for infinity </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>varvals</declname>
          <briefdescription><para>interval values for variables, can be NULL if the expression is constant </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>param</declname>
          <briefdescription><para>values for parameters, can be NULL if the expression is not parameterized </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>evaluates an expression w.r.t. an interval </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aceba302565dcdf432869378c61784868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprCheckCurvature</definition>
        <argsstring>(SCIP_EXPR *expr, SCIP_Real infinity, SCIP_INTERVAL *varbounds, SCIP_Real *param, SCIP_EXPRCURV *curv, SCIP_INTERVAL *bounds)</argsstring>
        <name>SCIPexprCheckCurvature</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression to check </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>infinity</declname>
          <briefdescription><para>value to use for infinity </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>varbounds</declname>
          <briefdescription><para>domains of variables </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>param</declname>
          <briefdescription><para>values for parameters, can be NULL if the expression is not parameterized </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref> *</type>
          <declname>curv</declname>
          <briefdescription><para>buffer to store curvature of expression </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>bounds</declname>
          <briefdescription><para>buffer to store bounds on expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tries to determine the curvature type of an expression w.r.t. given variable domains </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="620" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a58b1843bd0262ed5b6c92fc23156cf75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprSubstituteVars</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPR *expr, SCIP_EXPR **substexprs)</argsstring>
        <name>SCIPexprSubstituteVars</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression, which of the children may be replaced </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>substexprs</declname>
          <briefdescription><para>array of substitute expressions; single entries can be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>substitutes variables (SCIP_EXPR_VARIDX) by expressions Note that only the children of the given expr are checked! A variable with index i is replaced by a copy of substexprs[i], if that latter is not NULL if substexprs[i] == NULL, then the variable expression i is not touched </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a4278cafac2823cd273a81007f7a209d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprReindexVars</definition>
        <argsstring>(SCIP_EXPR *expr, int *newindices)</argsstring>
        <name>SCIPexprReindexVars</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression to update </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>newindices</declname>
          <briefdescription><para>new indices of variables </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>updates variable indices in expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a70f5bd66a56b47faaaf4fc45987ed4f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprReindexParams</definition>
        <argsstring>(SCIP_EXPR *expr, int *newindices)</argsstring>
        <name>SCIPexprReindexParams</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression to update </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>newindices</declname>
          <briefdescription><para>new indices of variables </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>updates parameter indices in expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a5ad1a5816511ec3c103680f8beab96b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprPrint</definition>
        <argsstring>(SCIP_EXPR *expr, SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char **varnames, const char **paramnames, SCIP_Real *paramvals)</argsstring>
        <name>SCIPexprPrint</name>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref> *</type>
          <declname>messagehdlr</declname>
          <briefdescription><para>message handler </para></briefdescription>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
          <briefdescription><para>file for printing, or NULL for stdout </para></briefdescription>
        </param>
        <param>
          <type>const char **</type>
          <declname>varnames</declname>
          <briefdescription><para>names of variables, or NULL for default names </para></briefdescription>
        </param>
        <param>
          <type>const char **</type>
          <declname>paramnames</declname>
          <briefdescription><para>names of parameters, or NULL for default names </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>paramvals</declname>
          <briefdescription><para>values of parameters, or NULL for not printing </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>prints an expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="657" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1adda08b7e08556b696218d0c6833e58d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprParse</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_MESSAGEHDLR *messagehdlr, SCIP_EXPR **expr, const char *str, const char *lastchar, int *nvars, int *varnames)</argsstring>
        <name>SCIPexprParse</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref> *</type>
          <declname>messagehdlr</declname>
          <briefdescription><para>message handler </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>expr</declname>
          <briefdescription><para>buffer to store pointer to created expression </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
          <briefdescription><para>pointer to the string to be parsed </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <declname>lastchar</declname>
          <briefdescription><para>pointer to the last char of str that should be parsed </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nvars</declname>
          <briefdescription><para>buffer to store number of variables </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>varnames</declname>
          <briefdescription><para>buffer to store variable names, prefixed by index (as int) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>parses an expression from a string </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="668" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Expression tree methods</header>
      <memberdef kind="function" id="pub__expr_8h_1a00b319aec4404887ce8a1cc860a83442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
        <definition>SCIP_EXPR* SCIPexprtreeGetRoot</definition>
        <argsstring>(SCIP_EXPRTREE *tree)</argsstring>
        <name>SCIPexprtreeGetRoot</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns root expression of an expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="685" column="1"/>
        <referencedby refid="exprinterpret__cppad_8cpp_1ad4142b870bae28b64791d55da3ff4706" compoundref="exprinterpret__cppad_8cpp" startline="1784" endline="1829">SCIPexprintCompile</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" compoundref="exprinterpret__cppad_8cpp" startline="1871" endline="1930">SCIPexprintEval</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a7dc4aaad187f200f28e8c9345f83007b" compoundref="exprinterpret__cppad_8cpp" startline="1933" endline="1990">SCIPexprintEvalInt</referencedby>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprtreeGetNVars</definition>
        <argsstring>(SCIP_EXPRTREE *tree)</argsstring>
        <name>SCIPexprtreeGetNVars</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns number of variables in expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="691" column="1"/>
        <referencedby refid="exprinterpret__cppad_8cpp_1ad4142b870bae28b64791d55da3ff4706" compoundref="exprinterpret__cppad_8cpp" startline="1784" endline="1829">SCIPexprintCompile</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" compoundref="exprinterpret__cppad_8cpp" startline="1871" endline="1930">SCIPexprintEval</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a7dc4aaad187f200f28e8c9345f83007b" compoundref="exprinterpret__cppad_8cpp" startline="1933" endline="1990">SCIPexprintEvalInt</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a951003903b4819772f2643d0efc5b10a" compoundref="exprinterpret__cppad_8cpp" startline="1993" endline="2034">SCIPexprintGrad</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1adf40904b5c1ad96ac217d40a9ddd2aa9" compoundref="exprinterpret__cppad_8cpp" startline="2037" endline="2077">SCIPexprintGradInt</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1abd322fc0556700c1a41144bbbc0f9386" compoundref="exprinterpret__cppad_8cpp" startline="2154" endline="2208">SCIPexprintHessianDense</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a4e3afb5fe90e10cb9e116b66a6a6bede" compoundref="exprinterpret__cppad_8cpp" startline="2084" endline="2148">SCIPexprintHessianSparsityDense</referencedby>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a1a64d598f310ea0d33330aa96ed6181d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprtreeGetNParams</definition>
        <argsstring>(SCIP_EXPRTREE *tree)</argsstring>
        <name>SCIPexprtreeGetNParams</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns number of parameters in expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a0299ad304998c7041fb4f246844ed119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPexprtreeGetParamVals</definition>
        <argsstring>(SCIP_EXPRTREE *tree)</argsstring>
        <name>SCIPexprtreeGetParamVals</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns values of parameters or NULL if none </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="703" column="1"/>
        <referencedby refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" compoundref="exprinterpret__cppad_8cpp" startline="1871" endline="1930">SCIPexprintEval</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a7dc4aaad187f200f28e8c9345f83007b" compoundref="exprinterpret__cppad_8cpp" startline="1933" endline="1990">SCIPexprintEvalInt</referencedby>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a02aadd64240b0aea7ba835880e8de80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprtreeSetParamVal</definition>
        <argsstring>(SCIP_EXPRTREE *tree, int paramidx, SCIP_Real paramval)</argsstring>
        <name>SCIPexprtreeSetParamVal</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>paramidx</declname>
          <briefdescription><para>index of parameter </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>paramval</declname>
          <briefdescription><para>new value of parameter </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets value of a single parameter in expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref> *</type>
        <definition>SCIP_EXPRINTDATA* SCIPexprtreeGetInterpreterData</definition>
        <argsstring>(SCIP_EXPRTREE *tree)</argsstring>
        <name>SCIPexprtreeGetInterpreterData</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets data of expression tree interpreter, or NULL if not set </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="717" column="1"/>
        <referencedby refid="exprinterpret__cppad_8cpp_1ad4142b870bae28b64791d55da3ff4706" compoundref="exprinterpret__cppad_8cpp" startline="1784" endline="1829">SCIPexprintCompile</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a5e8e6006a0fa17a353c06ab530ebcae2" compoundref="exprinterpret__cppad_8cpp" startline="1871" endline="1930">SCIPexprintEval</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a7dc4aaad187f200f28e8c9345f83007b" compoundref="exprinterpret__cppad_8cpp" startline="1933" endline="1990">SCIPexprintEvalInt</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a951003903b4819772f2643d0efc5b10a" compoundref="exprinterpret__cppad_8cpp" startline="1993" endline="2034">SCIPexprintGrad</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1adf40904b5c1ad96ac217d40a9ddd2aa9" compoundref="exprinterpret__cppad_8cpp" startline="2037" endline="2077">SCIPexprintGradInt</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1abd322fc0556700c1a41144bbbc0f9386" compoundref="exprinterpret__cppad_8cpp" startline="2154" endline="2208">SCIPexprintHessianDense</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a4e3afb5fe90e10cb9e116b66a6a6bede" compoundref="exprinterpret__cppad_8cpp" startline="2084" endline="2148">SCIPexprintHessianSparsityDense</referencedby>
        <referencedby refid="exprinterpret__cppad_8cpp_1a3d4949b971ff0ba837e39c4dc140e6d5" compoundref="exprinterpret__cppad_8cpp" startline="1852" endline="1868">SCIPexprintNewParametrization</referencedby>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ad174e4bfd56c2532e0c037f9f8443aef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprtreeSetInterpreterData</definition>
        <argsstring>(SCIP_EXPRTREE *tree, SCIP_EXPRINTDATA *interpreterdata)</argsstring>
        <name>SCIPexprtreeSetInterpreterData</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref> *</type>
          <declname>interpreterdata</declname>
          <briefdescription><para>expression interpreter data </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets data of expression tree interpreter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="723" column="1"/>
        <referencedby refid="exprinterpret__cppad_8cpp_1ad4142b870bae28b64791d55da3ff4706" compoundref="exprinterpret__cppad_8cpp" startline="1784" endline="1829">SCIPexprintCompile</referencedby>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1afabc4cf888ccb3d7bd2302d2198b0393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeFreeInterpreterData</definition>
        <argsstring>(SCIP_EXPRTREE *tree)</argsstring>
        <name>SCIPexprtreeFreeInterpreterData</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees data of expression tree interpreter, if any </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ab180ce02b20b12f02906dcdbcf30c861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprtreeHasParam</definition>
        <argsstring>(SCIP_EXPRTREE *tree)</argsstring>
        <name>SCIPexprtreeHasParam</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>indicates whether there are parameterized constants (SCIP_EXPR_PARAM) in expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="736" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a3fd7870d751277732ff2bb76b0fcb230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeGetMaxDegree</definition>
        <argsstring>(SCIP_EXPRTREE *tree, int *maxdegree)</argsstring>
        <name>SCIPexprtreeGetMaxDegree</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>maxdegree</declname>
          <briefdescription><para>buffer to store maximal degree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gives maximal degree of expression in expression tree. If constant expression, gives 0, if linear expression, gives 1, if polynomial expression, gives its maximal degree, otherwise (nonpolynomial nonconstant expressions) gives at least SCIP_EXPR_DEGREEINFINITY. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="747" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a0c4ad161b828120f5c16d3df89bfc574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeEval</definition>
        <argsstring>(SCIP_EXPRTREE *tree, SCIP_Real *varvals, SCIP_Real *val)</argsstring>
        <name>SCIPexprtreeEval</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>varvals</declname>
          <briefdescription><para>values for variables </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store expression tree value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>evaluates an expression tree w.r.t. a point </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="754" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a6651f0a87111d63aff16d7d5a3388920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeEvalInt</definition>
        <argsstring>(SCIP_EXPRTREE *tree, SCIP_Real infinity, SCIP_INTERVAL *varvals, SCIP_INTERVAL *val)</argsstring>
        <name>SCIPexprtreeEvalInt</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>infinity</declname>
          <briefdescription><para>value for infinity </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>varvals</declname>
          <briefdescription><para>intervals for variables </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>val</declname>
          <briefdescription><para>buffer to store expression tree value </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>evaluates an expression tree w.r.t. an interval </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="762" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a1f9a6e483468024261dd52c61244747e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprtreePrint</definition>
        <argsstring>(SCIP_EXPRTREE *tree, SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char **varnames, const char **paramnames)</argsstring>
        <name>SCIPexprtreePrint</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref> *</type>
          <declname>messagehdlr</declname>
          <briefdescription><para>message handler </para></briefdescription>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
          <briefdescription><para>file for printing, or NULL for stdout </para></briefdescription>
        </param>
        <param>
          <type>const char **</type>
          <declname>varnames</declname>
          <briefdescription><para>names of variables, or NULL for default names </para></briefdescription>
        </param>
        <param>
          <type>const char **</type>
          <declname>paramnames</declname>
          <briefdescription><para>names of parameters, or NULL for default names </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>prints an expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="771" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a91157b91fbe21ecb2ba61442ec33d648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeCreate</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRTREE **tree, SCIP_EXPR *root, int nvars, int nparams, SCIP_Real *params)</argsstring>
        <name>SCIPexprtreeCreate</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory data structure </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> **</type>
          <declname>tree</declname>
          <briefdescription><para>buffer to store address of created expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>root</declname>
          <briefdescription><para>pointer to root expression, not copied deep !, can be NULL </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nvars</declname>
          <briefdescription><para>number of variables in variable mapping </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nparams</declname>
          <briefdescription><para>number of parameters in expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>params</declname>
          <briefdescription><para>values for parameters, or NULL (if NULL but nparams &gt; 0, then params is initialized with zeros) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="803" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a8f39cbb2c6678b8a466ed16a904b53d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeCopy</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRTREE **targettree, SCIP_EXPRTREE *sourcetree)</argsstring>
        <name>SCIPexprtreeCopy</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory that should be used in new expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> **</type>
          <declname>targettree</declname>
          <briefdescription><para>buffer to store address of copied expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>sourcetree</declname>
          <briefdescription><para>expression tree to copy </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copies an expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="814" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ae32ebbf22e95f5c28c9baaa7a67bc2e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeFree</definition>
        <argsstring>(SCIP_EXPRTREE **tree)</argsstring>
        <name>SCIPexprtreeFree</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> **</type>
          <declname>tree</declname>
          <briefdescription><para>pointer to expression tree that is freed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees an expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="822" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a0313476b7ecbe0d9ed6ab25e7915a06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeSetParams</definition>
        <argsstring>(SCIP_EXPRTREE *tree, int nparams, SCIP_Real *paramvals)</argsstring>
        <name>SCIPexprtreeSetParams</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nparams</declname>
          <briefdescription><para>number of parameters </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>paramvals</declname>
          <briefdescription><para>values of parameters, can be NULL if nparams == 0 </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets number and values of all parameters in expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a54d4f74d39ed15cd3b9b65cc9bf7b6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprtreeGetVarsUsage</definition>
        <argsstring>(SCIP_EXPRTREE *tree, int *varsusage)</argsstring>
        <name>SCIPexprtreeGetVarsUsage</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>varsusage</declname>
          <briefdescription><para>array where to store for each variable how often it is used in the tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the number of usages for each variable in the expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="836" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aa867f046df03c4400daa1afd2f3c53d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeSimplify</definition>
        <argsstring>(SCIP_EXPRTREE *tree, SCIP_MESSAGEHDLR *messagehdlr, SCIP_Real eps, int maxexpansionexponent, int *nlinvars, int *linidxs, SCIP_Real *lincoefs)</argsstring>
        <name>SCIPexprtreeSimplify</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref> *</type>
          <declname>messagehdlr</declname>
          <briefdescription><para>message handler </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>eps</declname>
          <briefdescription><para>threshold, under which positive values are treat as 0 </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>maxexpansionexponent</declname>
          <briefdescription><para>maximal exponent for which we still expand non-monomial polynomials </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nlinvars</declname>
          <briefdescription><para>buffer to store number of linear variables in linear part, or NULL if linear part should not be separated </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>linidxs</declname>
          <briefdescription><para>array to store indices of variables in expression tree which belong to linear part, or NULL </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lincoefs</declname>
          <briefdescription><para>array to store coefficients of linear part, or NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>aims at simplifying an expression and splitting of a linear expression if linear variables are split off, expression interpreter data, if stored in the tree, is freed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="845" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a4eb976ecc14a170deb778ace16b197c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeAddExpr</definition>
        <argsstring>(SCIP_EXPRTREE *tree, SCIP_EXPR *expr, SCIP_Bool copyexpr)</argsstring>
        <name>SCIPexprtreeAddExpr</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> *</type>
          <declname>expr</declname>
          <briefdescription><para>expression to add to tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>copyexpr</declname>
          <briefdescription><para>whether expression should be copied </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds an expression to the root expression of the tree the root is replaced with an SCIP_EXPR_PLUS expression which has the previous root and the given expression as children </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="859" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a5bd33601fab96478623a16e6bee0075f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeCheckCurvature</definition>
        <argsstring>(SCIP_EXPRTREE *tree, SCIP_Real infinity, SCIP_INTERVAL *varbounds, SCIP_EXPRCURV *curv, SCIP_INTERVAL *bounds)</argsstring>
        <name>SCIPexprtreeCheckCurvature</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>infinity</declname>
          <briefdescription><para>value for infinity </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>varbounds</declname>
          <briefdescription><para>domains of variables </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref> *</type>
          <declname>curv</declname>
          <briefdescription><para>buffer to store curvature of expression </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>bounds</declname>
          <briefdescription><para>buffer to store bounds on expression, or NULL if not needed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tries to determine the curvature type of an expression tree w.r.t. given variable domains </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="867" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a709213a9aa36499fd93e8468affb7ea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprtreeSubstituteVars</definition>
        <argsstring>(SCIP_EXPRTREE *tree, SCIP_EXPR **substexprs)</argsstring>
        <name>SCIPexprtreeSubstituteVars</name>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> *</type>
          <declname>tree</declname>
          <briefdescription><para>expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref> **</type>
          <declname>substexprs</declname>
          <briefdescription><para>array of substitute expressions; single entries can be NULL </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>substitutes variables (SCIP_EXPR_VARIDX) in an expression tree by expressions A variable with index i is replaced by a copy of substexprs[i], if that latter is not NULL if substexprs[i] == NULL, then the variable expression i is not touched </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="880" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Quadratic element methods</header>
      <memberdef kind="function" id="pub__expr_8h_1ad040344df322da549bb1083629632a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPquadelemSort</definition>
        <argsstring>(SCIP_QUADELEM *quadelems, int nquadelems)</argsstring>
        <name>SCIPquadelemSort</name>
        <param>
          <type><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref> *</type>
          <declname>quadelems</declname>
          <briefdescription><para>array of quadratic elements </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nquadelems</declname>
          <briefdescription><para>number of quadratic elements </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sorts an array of quadratic elements The elements are sorted such that the first index is increasing and such that among elements with the same first index, the second index is increasing. For elements with same first and second index, the order is not defined. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="896" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a3fdd0ef020607681df3407d9514b8ec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPquadelemSortedFind</definition>
        <argsstring>(SCIP_QUADELEM *quadelems, int idx1, int idx2, int nquadelems, int *pos)</argsstring>
        <name>SCIPquadelemSortedFind</name>
        <param>
          <type><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref> *</type>
          <declname>quadelems</declname>
          <briefdescription><para>array of quadratic elements </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>idx1</declname>
          <briefdescription><para>index of first variable in element to search for </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>idx2</declname>
          <briefdescription><para>index of second variable in element to search for </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nquadelems</declname>
          <briefdescription><para>number of quadratic elements in array </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>pos</declname>
          <briefdescription><para>buffer to store position of found quadratic element, or position where it would be inserted </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds an index pair in a sorted array of quadratic elements. If (idx1,idx2) is found in quadelems, then returns TRUE and stores position of quadratic element in *pos. If (idx1,idx2) is not found in quadelems, then returns FALSE and stores position where a quadratic element with these indices would be inserted in *pos. Assumes that idx1 &lt;= idx2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="907" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aacce929a223789177fbbe238b57dbcb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPquadelemSqueeze</definition>
        <argsstring>(SCIP_QUADELEM *quadelems, int nquadelems, int *nquadelemsnew)</argsstring>
        <name>SCIPquadelemSqueeze</name>
        <param>
          <type><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref> *</type>
          <declname>quadelems</declname>
          <briefdescription><para>array of quadratic elements </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nquadelems</declname>
          <briefdescription><para>number of quadratic elements </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nquadelemsnew</declname>
          <briefdescription><para>pointer to store new (reduced) number of quadratic elements </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds quadratic elements with same index and removes elements with coefficient 0.0. Assumes that elements have been sorted before. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="919" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Expression graph node methods</header>
      <memberdef kind="function" id="pub__expr_8h_1ac87cfef981129331e2bb14afdb739c96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphCaptureNode</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphCaptureNode</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node to capture </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>captures node, i.e., increases number of uses </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a0aec74fa4923365c8bb0256a98239e0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprgraphIsNodeEnabled</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphIsNodeEnabled</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node to enable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether a node is currently enabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="938" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a7ce12d49650b234f1b7bf66490e35453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetNodeNChildren</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeNChildren</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of children of a node in an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="944" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1af9ef014d339c72a7a4f083b6cffec6ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
        <definition>SCIP_EXPRGRAPHNODE** SCIPexprgraphGetNodeChildren</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeChildren</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets children of a node in an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="950" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a0837e0e43329327e2450a2ea8c2088f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetNodeNParents</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeNParents</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of parents of a node in an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="956" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aea8473f9c67234799cedae4e4d552698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
        <definition>SCIP_EXPRGRAPHNODE** SCIPexprgraphGetNodeParents</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeParents</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets parents of a node in an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="962" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1acedb3fac53f97e40512e9140ad15f50d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetNodeDepth</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeDepth</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets depth of node in expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="968" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aaac68443f4a6c0ede44f9f0bbb30312e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetNodePosition</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodePosition</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets position of node in expression graph at its depth level </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="974" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aa69421fb15af9b77768aac718cff45a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref></type>
        <definition>SCIP_EXPROP SCIPexprgraphGetNodeOperator</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeOperator</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets operator of a node in an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="980" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a5d0b4757a0e17e8d9b61e2df63cfce08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetNodeOperatorIndex</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeOperatorIndex</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives index belonging to a SCIP_EXPR_VARIDX or SCIP_EXPR_PARAM operand </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="986" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a5d899dbc59ab9851be937f89b860832b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprgraphGetNodeOperatorReal</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeOperatorReal</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives real belonging to a SCIP_EXPR_CONST operand </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="992" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aaefc8948770ccadbba6bf9f96eee2bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* SCIPexprgraphGetNodeVar</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeVar</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives variable belonging to a SCIP_EXPR_VARIDX expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="998" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1abc5a50c992cb3516aa63081b3c5a8244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprgraphGetNodeRealPowerExponent</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeRealPowerExponent</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives exponent belonging to a SCIP_EXPR_REALPOWER expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1005" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aa1b5fdcdfd5450eb3411f11e76369cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetNodeIntPowerExponent</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeIntPowerExponent</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives exponent belonging to a SCIP_EXPR_INTPOWER expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1011" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a760f19a1d43beb0346df994ba6ee1ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprgraphGetNodeSignPowerExponent</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeSignPowerExponent</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives exponent belonging to a SCIP_EXPR_SIGNPOWER expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1017" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a64b75f9934bb52010ff6a665a7610c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPexprgraphGetNodeLinearCoefs</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeLinearCoefs</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives linear coefficients belonging to a SCIP_EXPR_LINEAR expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1023" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a840e3f415de1932e816db6aaad85b231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprgraphGetNodeLinearConstant</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeLinearConstant</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives constant belonging to a SCIP_EXPR_LINEAR expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1029" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a694d59f907b41de180ff7b11ea9fbf1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprgraphGetNodeQuadraticConstant</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeQuadraticConstant</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives constant belonging to a SCIP_EXPR_QUADRATIC expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1035" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a96ddbb42d1679d0bb432a0d4a8e172b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
        <definition>SCIP_Real* SCIPexprgraphGetNodeQuadraticLinearCoefs</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeQuadraticLinearCoefs</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives linear coefficients belonging to a SCIP_EXPR_QUADRATIC expression, or NULL if all coefficients are 0.0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1041" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a85efccb1034902d4870c0643d29d356e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref> *</type>
        <definition>SCIP_QUADELEM* SCIPexprgraphGetNodeQuadraticQuadElements</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeQuadraticQuadElements</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives quadratic elements belonging to a SCIP_EXPR_QUADRATIC expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1047" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ad3425f53a6bbe4f889530d7947a847a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetNodeQuadraticNQuadElements</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeQuadraticNQuadElements</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives number of quadratic elements belonging to a SCIP_EXPR_QUADRATIC expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1053" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1af9fdafb12044ffa7c46880eac21c123e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> **</type>
        <definition>SCIP_EXPRDATA_MONOMIAL** SCIPexprgraphGetNodePolynomialMonomials</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodePolynomialMonomials</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the monomials belonging to a SCIP_EXPR_POLYNOMIAL expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1059" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a8f0ba323284583ce43d351db9947b704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetNodePolynomialNMonomials</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodePolynomialNMonomials</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the number of monomials belonging to a SCIP_EXPR_POLYNOMIAL expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1065" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a43963a016d72a1f73ba6e0fa3d0df9d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprgraphGetNodePolynomialConstant</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodePolynomialConstant</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the constant belonging to a SCIP_EXPR_POLYNOMIAL expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1071" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aa371a0b19c1fe6c8a0378f33a835916b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphGetNodePolynomialMonomialCurvature</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node, int monomialidx, SCIP_EXPRCURV *curv)</argsstring>
        <name>SCIPexprgraphGetNodePolynomialMonomialCurvature</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>monomialidx</declname>
          <briefdescription><para>index of monomial </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref> *</type>
          <declname>curv</declname>
          <briefdescription><para>buffer to store monomial curvature </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the curvature of a single monomial belonging to a SCIP_EXPR_POLYNOMIAL expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1077" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ac5f6b7877a4f5db287979e4d56d68168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SCIP_INTERVAL</type>
        <definition>SCIP_INTERVAL SCIPexprgraphGetNodeBounds</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeBounds</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets bounds of a node in an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1085" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1af47ccccd8d046cc2bba9d89a5f871dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
        <definition>SCIP_Real SCIPexprgraphGetNodeVal</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeVal</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets value of expression associated to node from last evaluation call </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1091" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1af9358bf03749cc7939a9d2dff16cdf74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref></type>
        <definition>SCIP_EXPRCURV SCIPexprgraphGetNodeCurvature</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetNodeCurvature</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets curvature of expression associated to node from last curvature check call </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1097" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aec3e3104b8cfa7e99101db6efee24d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphCreateNode</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRGRAPHNODE **node, SCIP_EXPROP op,...)</argsstring>
        <name>SCIPexprgraphCreateNode</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>node</declname>
          <briefdescription><para>buffer to store expression graph node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref></type>
          <declname>op</declname>
          <briefdescription><para>operator type of expression </para></briefdescription>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an expression graph node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a96c704943a2731d4a8fc86d9fbaffc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphCreateNodeLinear</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRGRAPHNODE **node, int ncoefs, SCIP_Real *coefs, SCIP_Real constant)</argsstring>
        <name>SCIPexprgraphCreateNodeLinear</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>node</declname>
          <briefdescription><para>buffer to store expression graph node </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncoefs</declname>
          <briefdescription><para>number of coefficients </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coefs</declname>
          <briefdescription><para>coefficients of linear expression </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant of linear expression </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an expression graph node for a linear expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a6d4669683634966c8f6f5c8a05a480ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphCreateNodeQuadratic</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRGRAPHNODE **node, int nchildren, SCIP_Real *lincoefs, int nquadelems, SCIP_QUADELEM *quadelems, SCIP_Real constant)</argsstring>
        <name>SCIPexprgraphCreateNodeQuadratic</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>node</declname>
          <briefdescription><para>buffer to store expression graph node </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nchildren</declname>
          <briefdescription><para>number of children </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lincoefs</declname>
          <briefdescription><para>linear coefficients for children, or NULL </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nquadelems</declname>
          <briefdescription><para>number of quadratic elements </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref> *</type>
          <declname>quadelems</declname>
          <briefdescription><para>quadratic elements, or NULL if nquadelems == 0 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an expression graph node for a quadratic expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a3551e6692be946aaa8c0f3d672b549df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphCreateNodePolynomial</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRGRAPHNODE **node, int nmonomials, SCIP_EXPRDATA_MONOMIAL **monomials, SCIP_Real constant, SCIP_Bool copymonomials)</argsstring>
        <name>SCIPexprgraphCreateNodePolynomial</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>node</declname>
          <briefdescription><para>buffer to store expression graph node </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nmonomials</declname>
          <briefdescription><para>number of monomials </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> **</type>
          <declname>monomials</declname>
          <briefdescription><para>monomials </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant of polynomial </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>copymonomials</declname>
          <briefdescription><para>whether to copy monomials or to assume ownership </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an expression graph node for a polynomial expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a58a89fda9a30be8590364b2a2ce3e468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphNodePolynomialAddMonomials</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRGRAPHNODE *node, int nmonomials, SCIP_EXPRDATA_MONOMIAL **monomials, SCIP_Bool copymonomials)</argsstring>
        <name>SCIPexprgraphNodePolynomialAddMonomials</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>store expression graph node with polynomial operator </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nmonomials</declname>
          <briefdescription><para>number of monomials </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref> **</type>
          <declname>monomials</declname>
          <briefdescription><para>monomials </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>copymonomials</declname>
          <briefdescription><para>whether to copy monomials or to assume ownership </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds monomials to an expression graph node that is a polynomial expression </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a09b4ddffcced854c5850ea0d4c7f169c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphNodeSplitOffLinear</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE **node, int linvarssize, int *nlinvars, void **linvars, SCIP_Real *lincoefs, SCIP_Real *constant)</argsstring>
        <name>SCIPexprgraphNodeSplitOffLinear</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node where to splitup linear part </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>linvarssize</declname>
          <briefdescription><para>length of linvars and lincoefs arrays </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nlinvars</declname>
          <briefdescription><para>buffer to store length of linear term that have been splitup </para></briefdescription>
        </param>
        <param>
          <type>void **</type>
          <declname>linvars</declname>
          <briefdescription><para>buffer to store variables of linear part </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>lincoefs</declname>
          <briefdescription><para>buffer to store coefficients of linear part </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>constant</declname>
          <briefdescription><para>buffer to store constant part </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>given a node of an expression graph, splitup a linear part which variables are not used somewhere else in the same expression E.g., if the expression is 1 + x + y + y^2, one gets 1 + x and the node remains at y + y^2. If the node is a linear expression, it may be freed. If it is not linear, the node may change, i.e., the remaining nonlinear part may be stored in a new node. It is assumed that the user had captured the node. It is assumed that the expression graph has been simplified before. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ac9405a5738aa2aac865d9f5d1cf1b086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphMoveNodeParents</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE **srcnode, SCIP_EXPRGRAPHNODE *targetnode)</argsstring>
        <name>SCIPexprgraphMoveNodeParents</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>srcnode</declname>
          <briefdescription><para>node which parents to move </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>targetnode</declname>
          <briefdescription><para>node where to move parents to </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>moves parents from a one node to another node in other words, replaces the child srcnode by targetnode in all parents of srcnode srcnode may be freed, if not captured it is assumes that targetnode represents the same expression as srcnode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a38e812142283f7c3a7a1ec8451e93294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphReleaseNode</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE **node)</argsstring>
        <name>SCIPexprgraphReleaseNode</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node to release </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>releases node, i.e., decreases number of uses node is freed if no parents and no other uses children are recursively released if they have no other parents nodes that are removed are also freed if node correspond to a variable, then the variable is removed from the expression graph similar for constants </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a2ca63239945baa4d12b1169c8a625bf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphFreeNode</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRGRAPHNODE **node)</argsstring>
        <name>SCIPexprgraphFreeNode</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>node</declname>
          <briefdescription><para>pointer to expression graph node that should be freed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees a node of an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ad05f56d4b31a46822eab3bd719af9e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphEnableNode</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphEnableNode</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node to enable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enables a node and recursively all its children in an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a55af479acc2f1a620a54525d2e89515d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphDisableNode</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphDisableNode</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node to enable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>disables a node and recursively all children which have no enabled parents in an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a2d7ac99b3a017df85f92981a86d16992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprgraphHasNodeSibling</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphHasNodeSibling</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the node has siblings in the expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a28fd34182398d95f5219895658f0e104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprgraphAreAllNodeChildrenVars</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphAreAllNodeChildrenVars</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether all children of an expression graph node are variable nodes gives TRUE for nodes without children </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a41f447cb01948a3ac4fa1376004581f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprgraphHasNodeNonlinearAncestor</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphHasNodeNonlinearAncestor</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether the node has an ancestor which has a nonlinear expression operand </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ac03c833b0bfbe504e29459da57413939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphPrintNode</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)</argsstring>
        <name>SCIPexprgraphPrintNode</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref> *</type>
          <declname>messagehdlr</declname>
          <briefdescription><para>message handler </para></briefdescription>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
          <briefdescription><para>file to print to, or NULL for stdout </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>prints an expression graph node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ab81fa92d1a34e645b5358564abbdc8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphTightenNodeBounds</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *node, SCIP_INTERVAL nodebounds, SCIP_Real minstrength, SCIP_Bool *cutoff)</argsstring>
        <name>SCIPexprgraphTightenNodeBounds</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>node in expression graph with no parents </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL</type>
          <declname>nodebounds</declname>
          <briefdescription><para>new bounds for node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>minstrength</declname>
          <briefdescription><para>minimal required relative bound strengthening in a node to trigger a propagation into children nodes (set to negative value if propagation should always be triggered) </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>cutoff</declname>
          <briefdescription><para>buffer to store whether a node&apos;s bounds were propagated to an empty interval </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tightens the bounds in a node of the graph preparation for reverse propagation sets bound status to SCIP_EXPRBOUNDSTATUS_TIGHTENEDBYPARENTRECENT if tightening is strong enough and not cutoff </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aacdcb8a59457b8239aef2b0e6cf6ccf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphUpdateNodeBoundsCurvature</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node, SCIP_Real infinity, SCIP_Real minstrength, SCIP_Bool clearreverseprop)</argsstring>
        <name>SCIPexprgraphUpdateNodeBoundsCurvature</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>infinity</declname>
          <briefdescription><para>value for infinity in interval arithmetics </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>minstrength</declname>
          <briefdescription><para>minimal required relative bound strengthening to trigger a bound recalculation in parent nodes </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>clearreverseprop</declname>
          <briefdescription><para>whether to reset bound tightenings from reverse propagation </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ensures that bounds and curvature information in a node is uptodate assumes that bounds and curvature in children are uptodate </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1298" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Expression graph methods</header>
      <memberdef kind="function" id="pub__expr_8h_1a1dee03ef0432664090ce3f1c69864df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetDepth</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph)</argsstring>
        <name>SCIPexprgraphGetDepth</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get current maximal depth of expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ae4780d9983b7d1fa172df57dba395620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* SCIPexprgraphGetNNodes</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph)</argsstring>
        <name>SCIPexprgraphGetNNodes</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array with number of nodes at each depth of expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a0faf25f3df4b9dccce03a1c9d1795783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> ***</type>
        <definition>SCIP_EXPRGRAPHNODE*** SCIPexprgraphGetNodes</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph)</argsstring>
        <name>SCIPexprgraphGetNodes</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets nodes of expression graph, one array per depth </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a88c08e204d38ecc02b9f2e3050429923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetNVars</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph)</argsstring>
        <name>SCIPexprgraphGetNVars</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>pointer to expression graph that should be freed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets number of variables in expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ab0d076ee78d94e1f72b5c77acf3feb44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void** SCIPexprgraphGetVars</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph)</argsstring>
        <name>SCIPexprgraphGetVars</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>pointer to expression graph that should be freed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array of variables in expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1af9d779dda95fa37c5c4fd1d500b59ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
        <definition>SCIP_EXPRGRAPHNODE** SCIPexprgraphGetVarNodes</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph)</argsstring>
        <name>SCIPexprgraphGetVarNodes</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>pointer to expression graph that should be freed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets array of expression graph nodes corresponding to variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ac5b19677243ca926599d8dc6f78ec55a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphSetVarNodeValue</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *varnode, SCIP_Real value)</argsstring>
        <name>SCIPexprgraphSetVarNodeValue</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>varnode</declname>
          <briefdescription><para>expression graph node corresponding to variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>value</declname>
          <briefdescription><para>new value for variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets value for a single variable given as expression graph node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a4e8997475323bd4315c2b76d23daf116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphSetVarsBounds</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_INTERVAL *varbounds)</argsstring>
        <name>SCIPexprgraphSetVarsBounds</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL *</type>
          <declname>varbounds</declname>
          <briefdescription><para>new bounds for variables </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets bounds for variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a2d283c501de935356b3976b6f93361ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphSetVarBounds</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, void *var, SCIP_INTERVAL varbounds)</argsstring>
        <name>SCIPexprgraphSetVarBounds</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>var</declname>
          <briefdescription><para>variable </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL</type>
          <declname>varbounds</declname>
          <briefdescription><para>new bounds of variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets bounds for a single variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a539e43cd657a0d1d0a4c70af43677bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphSetVarNodeBounds</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *varnode, SCIP_INTERVAL varbounds)</argsstring>
        <name>SCIPexprgraphSetVarNodeBounds</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>varnode</declname>
          <briefdescription><para>expression graph node corresponding to variable </para></briefdescription>
        </param>
        <param>
          <type>SCIP_INTERVAL</type>
          <declname>varbounds</declname>
          <briefdescription><para>new bounds of variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets bounds for a single variable given as expression graph node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a19add920fb534a281398c0bcfb8ea668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphSetVarNodeLb</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *varnode, SCIP_Real lb)</argsstring>
        <name>SCIPexprgraphSetVarNodeLb</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>varnode</declname>
          <briefdescription><para>expression graph node corresponding to variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>lb</declname>
          <briefdescription><para>new lower bound for variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets lower bound for a single variable given as expression graph node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a966ad7d37dc8fb19c912441a0e1a0ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphSetVarNodeUb</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *varnode, SCIP_Real ub)</argsstring>
        <name>SCIPexprgraphSetVarNodeUb</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>varnode</declname>
          <briefdescription><para>expression graph node corresponding to variable </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>ub</declname>
          <briefdescription><para>new upper bound for variable </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets upper bound for a single variable given as expression graph node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a81c8a32b9d3369d13b9691a34a4c6cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SCIP_INTERVAL *</type>
        <definition>SCIP_INTERVAL* SCIPexprgraphGetVarsBounds</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph)</argsstring>
        <name>SCIPexprgraphGetVarsBounds</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gets bounds that are stored for all variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ab19d4e70244671d663708cdd93edf6b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphCreate</definition>
        <argsstring>(BMS_BLKMEM *blkmem, SCIP_EXPRGRAPH **exprgraph, int varssizeinit, int depthinit, SCIP_DECL_EXPRGRAPHVARADDED((*exprgraphvaradded)), SCIP_DECL_EXPRGRAPHVARREMOVE((*exprgraphvarremove)), SCIP_DECL_EXPRGRAPHVARCHGIDX((*exprgraphvarchgidx)), void *userdata)</argsstring>
        <name>SCIPexprgraphCreate</name>
        <param>
          <type>BMS_BLKMEM *</type>
          <declname>blkmem</declname>
          <briefdescription><para>block memory </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> **</type>
          <declname>exprgraph</declname>
          <briefdescription><para>buffer to store pointer to expression graph </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>varssizeinit</declname>
          <briefdescription><para>minimal initial size for variables array, or -1 to choose automatically </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>depthinit</declname>
          <briefdescription><para>minimal initial depth of expression graph, or -1 to choose automatically </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aea91b21a170e9a98455730394224141f" kindref="member">SCIP_DECL_EXPRGRAPHVARADDED</ref>((*exprgraphvaradded))</type>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a3c698d26fa6116677701e6e8d1ef5c44" kindref="member">SCIP_DECL_EXPRGRAPHVARREMOVE</ref>((*exprgraphvarremove))</type>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aca8f77ed737c251478213db3dfcc8f98" kindref="member">SCIP_DECL_EXPRGRAPHVARCHGIDX</ref>((*exprgraphvarchgidx))</type>
        </param>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
          <briefdescription><para>callback method to invoke when a variable changes its index in the expression graph, or NULL if not needed user data to pass to callback functions </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an empty expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ad1b14bc2d7a2d7220c9d49685c341210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphFree</definition>
        <argsstring>(SCIP_EXPRGRAPH **exprgraph)</argsstring>
        <name>SCIPexprgraphFree</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> **</type>
          <declname>exprgraph</declname>
          <briefdescription><para>pointer to expression graph that should be freed </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frees an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a0439768d98f1858c395c920e507fa4cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphAddNode</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *node, int mindepth, int nchildren, SCIP_EXPRGRAPHNODE **children)</argsstring>
        <name>SCIPexprgraphAddNode</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node to add </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>mindepth</declname>
          <briefdescription><para>minimal depth in expression graph where to add node, e.g., 0 or smaller to choose automatically </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nchildren</declname>
          <briefdescription><para>number of children </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>children</declname>
          <briefdescription><para>children nodes, or NULL if no children </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds an expression graph node to an expression graph expression graph assumes ownership of node children are notified about new parent depth will be chosen to be the maximum of mindepth and the depth of all children plus one </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ad2704955b653f90780634347bea9b853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphAddVars</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, int nvars, void **vars, SCIP_EXPRGRAPHNODE **varnodes)</argsstring>
        <name>SCIPexprgraphAddVars</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nvars</declname>
          <briefdescription><para>number of variables to add </para></briefdescription>
        </param>
        <param>
          <type>void **</type>
          <declname>vars</declname>
          <briefdescription><para>variables to add </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>varnodes</declname>
          <briefdescription><para>array to store nodes corresponding to variables, or NULL if not of interest </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds variables to an expression graph, if not existing yet also already existing nodes are enabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a854a50b3f1cb037323fd43ee2b7edbeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphAddConst</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_Real constant, SCIP_EXPRGRAPHNODE **constnode)</argsstring>
        <name>SCIPexprgraphAddConst</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant to add </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>constnode</declname>
          <briefdescription><para>buffer to store pointer to expression graph node corresponding to constant </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds a constant to an expression graph, if not existing yet also already existing nodes are enabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a71be9f67fcd92197a2fe55ae1c6b2812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphAddExprtreeSum</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, int nexprtrees, SCIP_EXPRTREE **exprtrees, SCIP_Real *coefs, SCIP_EXPRGRAPHNODE **rootnode, SCIP_Bool *rootnodeisnew)</argsstring>
        <name>SCIPexprgraphAddExprtreeSum</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>nexprtrees</declname>
          <briefdescription><para>number of expression trees to add </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> **</type>
          <declname>exprtrees</declname>
          <briefdescription><para>expression trees that should be added </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coefs</declname>
          <briefdescription><para>coefficients of expression trees, or NULL if all 1.0 </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>rootnode</declname>
          <briefdescription><para>buffer to store expression graph node corresponding to root of expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>rootnodeisnew</declname>
          <briefdescription><para>buffer to indicate whether the node in *rootnode has been newly created for this expression tree (otherwise, expression tree was already in graph) </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>adds sum of expression trees into expression graph node will also be captured </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a8f7084f4ba8d3204fa4cec04859e473d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphReplaceVarByLinearSum</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, void *var, int ncoefs, SCIP_Real *coefs, void **vars, SCIP_Real constant)</argsstring>
        <name>SCIPexprgraphReplaceVarByLinearSum</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>var</declname>
          <briefdescription><para>variable to replace </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>ncoefs</declname>
          <briefdescription><para>number of coefficients in linear term </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>coefs</declname>
          <briefdescription><para>coefficients in linear term, or NULL if ncoefs == 0 </para></briefdescription>
        </param>
        <param>
          <type>void **</type>
          <declname>vars</declname>
          <briefdescription><para>variables in linear term </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant offset </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>replaces variable in expression graph by a linear sum of variables variables will be added if not in the graph yet </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a2f8b0129f4cd294e42b7baac3f169fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprgraphFindVarNode</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, void *var, SCIP_EXPRGRAPHNODE **varnode)</argsstring>
        <name>SCIPexprgraphFindVarNode</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <declname>var</declname>
          <briefdescription><para>variable to search for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>varnode</declname>
          <briefdescription><para>buffer to store node corresponding to variable, if found, or NULL if not found </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds expression graph node corresponding to a variable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1afd009700af7a8ec40e64b44ce4dd1857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
        <definition>SCIP_Bool SCIPexprgraphFindConstNode</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_Real constant, SCIP_EXPRGRAPHNODE **constnode)</argsstring>
        <name>SCIPexprgraphFindConstNode</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>constant</declname>
          <briefdescription><para>constant to search for </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> **</type>
          <declname>constnode</declname>
          <briefdescription><para>buffer to store node corresponding to constant, if found, or NULL if not found </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>finds expression graph node corresponding to a constant </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a112d01041d9eb5dac684efb44faa5cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphPrintDot</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char **varnames)</argsstring>
        <name>SCIPexprgraphPrintDot</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref> *</type>
          <declname>messagehdlr</declname>
          <briefdescription><para>message handler </para></briefdescription>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
          <briefdescription><para>file to print to, or NULL for stdout </para></briefdescription>
        </param>
        <param>
          <type>const char **</type>
          <declname>varnames</declname>
          <briefdescription><para>variable names, or NULL for generic names </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>prints an expression graph in dot format </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a123f2f743e37aa2ad23c33e1375cb8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphEval</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_Real *varvals)</argsstring>
        <name>SCIPexprgraphEval</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>varvals</declname>
          <briefdescription><para>values for variables </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>evaluates nodes of expression graph for given values of variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a37b9c31ee18c9e082049a775c278b800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphPropagateVarBounds</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_Real infinity, SCIP_Bool clearreverseprop, SCIP_Bool *domainerror)</argsstring>
        <name>SCIPexprgraphPropagateVarBounds</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>infinity</declname>
          <briefdescription><para>value for infinity in interval arithmetics </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>clearreverseprop</declname>
          <briefdescription><para>whether to reset bound tightenings from reverse propagation </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>domainerror</declname>
          <briefdescription><para>buffer to store whether a node with empty bounds has been found, propagation is interrupted in this case </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>propagates bound changes in variables forward through the expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a8ced65311a8205c402aa3b1826f7cccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphPropagateNodeBounds</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_Real infinity, SCIP_Real minstrength, SCIP_Bool *cutoff)</argsstring>
        <name>SCIPexprgraphPropagateNodeBounds</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>infinity</declname>
          <briefdescription><para>value for infinity in interval arithmetics </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>minstrength</declname>
          <briefdescription><para>minimal required relative bound strengthening in a node to trigger a propagation into children nodes </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>cutoff</declname>
          <briefdescription><para>buffer to store whether a node&apos;s bounds were propagated to an empty interval </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>propagates bound changes in nodes backward through the graph new bounds are not stored in varbounds, but only in nodes corresponding to variables NOTE: it is assumed that SCIPexprgraphPropagateVarBounds was called before if variable bounds were relaxed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1aed8a77735bf278ca521a6dc06f8817c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphCheckCurvature</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_Real infinity, SCIP_Bool clearreverseprop)</argsstring>
        <name>SCIPexprgraphCheckCurvature</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>infinity</declname>
          <briefdescription><para>value for infinity in interval arithmetics </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref></type>
          <declname>clearreverseprop</declname>
          <briefdescription><para>whether to reset bound tightenings from reverse propagation </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>updates curvature information in expression graph nodes w.r.t. currently stored variable bounds implies update of bounds in expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a072f60c7c43b5babed543d37dbda6146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphSimplify</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_MESSAGEHDLR *messagehdlr, SCIP_Real eps, int maxexpansionexponent, SCIP_Bool *havechange, SCIP_Bool *domainerror)</argsstring>
        <name>SCIPexprgraphSimplify</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref> *</type>
          <declname>messagehdlr</declname>
          <briefdescription><para>message handler </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref></type>
          <declname>eps</declname>
          <briefdescription><para>threshold, under which positive values are treat as 0 </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>maxexpansionexponent</declname>
          <briefdescription><para>maximal exponent for which we still expand non-monomial polynomials </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>havechange</declname>
          <briefdescription><para>buffer to indicate whether the graph has been modified </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref> *</type>
          <declname>domainerror</declname>
          <briefdescription><para>buffer to indicate whether a domain error has been encountered, i.e., some expressions turned into NaN </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>aims at simplifying an expression graph a domain error can occur when variables were fixed to values for which a parent expression is not defined (e.g., 0^(-1) or log(-1)) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a2651a336ebb60975fd8d371375c6821e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphGetTree</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *rootnode, SCIP_EXPRTREE **exprtree)</argsstring>
        <name>SCIPexprgraphGetTree</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>rootnode</declname>
          <briefdescription><para>expression graph node that should represent root of expression tree </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> **</type>
          <declname>exprtree</declname>
          <briefdescription><para>buffer to store pointer to created expression tree </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates an expression tree from a given node in an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a6a06beb937c56606eb05a1422e9712f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphGetSeparableTrees</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *node, int exprtreessize, int *nexprtrees, SCIP_EXPRTREE **exprtrees, SCIP_Real *exprtreecoefs)</argsstring>
        <name>SCIPexprgraphGetSeparableTrees</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node which represents expression to get </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>exprtreessize</declname>
          <briefdescription><para>length of exprtrees and exprtreecoefs arrays, need to be at least one </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nexprtrees</declname>
          <briefdescription><para>buffer to store number of expression trees </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> **</type>
          <declname>exprtrees</declname>
          <briefdescription><para>array where to store expression trees </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>exprtreecoefs</declname>
          <briefdescription><para>array where to store coefficients of expression trees </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates a sum of expression trees with pairwise disjoint variables from a given node in an expression graph Giving <ref refid="pub__expr_8h_1a7ce12d49650b234f1b7bf66490e35453" kindref="member">SCIPexprgraphGetNodeNChildren()</ref> for exprtreesize is always sufficient. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a8ea0a44be20eb75bad3e74afe347618e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SCIPexprgraphGetSubtreeVarsUsage</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *node, int *varsusage)</argsstring>
        <name>SCIPexprgraphGetSubtreeVarsUsage</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>root node of expression graph subtree </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>varsusage</declname>
          <briefdescription><para>array where to count usage of variables, length must be at least the number of variables in the graph </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns how often expression graph variables are used in a subtree of the expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1a00beb1b6abc8844383699fa33b66fdc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SCIPexprgraphGetSumTreesNSummands</definition>
        <argsstring>(SCIP_EXPRGRAPHNODE *node)</argsstring>
        <name>SCIPexprgraphGetSumTreesNSummands</name>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gives the number of summands which the expression of an expression graph node consists of </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1606" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pub__expr_8h_1ad3a9c27f25617ecab1db627e687a68b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref></type>
        <definition>SCIP_RETCODE SCIPexprgraphGetSumTrees</definition>
        <argsstring>(SCIP_EXPRGRAPH *exprgraph, SCIP_EXPRGRAPHNODE *node, int exprtreessize, int *nexprtrees, SCIP_EXPRTREE **exprtrees, SCIP_Real *exprtreecoefs)</argsstring>
        <name>SCIPexprgraphGetSumTrees</name>
        <param>
          <type><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref> *</type>
          <declname>exprgraph</declname>
          <briefdescription><para>expression graph </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref> *</type>
          <declname>node</declname>
          <briefdescription><para>expression graph node which represents expression to get </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <declname>exprtreessize</declname>
          <briefdescription><para>length of exprtrees and exptreecoefs arrays, should be at least <ref refid="pub__expr_8h_1a00beb1b6abc8844383699fa33b66fdc6" kindref="member">SCIPexprgraphGetSumTreesNSummands()</ref> </para></briefdescription>
        </param>
        <param>
          <type>int *</type>
          <declname>nexprtrees</declname>
          <briefdescription><para>buffer to store number of expression trees </para></briefdescription>
        </param>
        <param>
          <type><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref> **</type>
          <declname>exprtrees</declname>
          <briefdescription><para>array where to store expression trees </para></briefdescription>
        </param>
        <param>
          <type><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref> *</type>
          <declname>exprtreecoefs</declname>
          <briefdescription><para>array where to store coefficients of expression trees </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>creates a sum of expression trees, possibly sharing variables, from a given node in an expression graph </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h" line="1612" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>public methods for expressions, expression trees, expression graphs, and related stuff </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Stefan Vigerske </para></simplesect>
<simplesect kind="author"><para>Thorsten Gellermann </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>program<sp/>and<sp/>library<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIP<sp/>---<sp/>Solving<sp/>Constraint<sp/>Integer<sp/>Programs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2002-2014<sp/>Konrad-Zuse-Zentrum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fuer<sp/>Informationstechnik<sp/>Berlin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>SCIP<sp/>is<sp/>distributed<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>ZIB<sp/>Academic<sp/>License<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>along<sp/>with<sp/>SCIP;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/>If<sp/>not<sp/>email<sp/>to<sp/>scip@zib.de.<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">/**@file<sp/><sp/><sp/>nlpi/pub_expr.h</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/>public<sp/>methods<sp/>for<sp/>expressions,<sp/>expression<sp/>trees,<sp/>expression<sp/>graphs,<sp/>and<sp/>related<sp/>stuff</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@author<sp/>Stefan<sp/>Vigerske</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>@author<sp/>Thorsten<sp/>Gellermann</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NLPI_PUB_EXPR_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__NLPI_PUB_EXPR_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="def_8h" kindref="compound">scip/def.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pub__message_8h" kindref="compound">scip/pub_message.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;scip/intervalarith.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blockmemshell/memory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__expr_8h" kindref="compound">nlpi/type_expr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__exprinterpret_8h" kindref="compound">nlpi/type_exprinterpret.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nlpi/struct_expr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">/**@name<sp/>Expression<sp/>curvature<sp/>methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment">/**<sp/>gives<sp/>curvature<sp/>for<sp/>a<sp/>sum<sp/>of<sp/>two<sp/>functions<sp/>with<sp/>given<sp/>curvature<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><ref refid="pub__expr_8h_1acca570d8c11e908969e55f3e8094b9c5" kindref="member">SCIPexprcurvAdd</ref>(</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curv1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>curvature<sp/>of<sp/>first<sp/>summand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curv2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>curvature<sp/>of<sp/>second<sp/>summand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprcurvAdd(curv1,<sp/>curv2)<sp/><sp/>((SCIP_EXPRCURV)<sp/>((curv1)<sp/>&amp;<sp/>(curv2)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>curvature<sp/>for<sp/>the<sp/>negation<sp/>of<sp/>a<sp/>function<sp/>with<sp/>given<sp/>curvature<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><ref refid="pub__expr_8h_1af0932366868367ad4429f0e9109e5321" kindref="member">SCIPexprcurvNegate</ref>(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curvature<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>curvature<sp/>of<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">/**<sp/>gives<sp/>curvature<sp/>for<sp/>a<sp/>functions<sp/>with<sp/>given<sp/>curvature<sp/>multiplied<sp/>by<sp/>a<sp/>constant<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><ref refid="pub__expr_8h_1a953f8b1e40e329d96187a160a3e6df8c" kindref="member">SCIPexprcurvMultiply</ref>(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curvature<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>curvature<sp/>of<sp/>other<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">/**<sp/>gives<sp/>curvature<sp/>for<sp/>base^exponent<sp/>for<sp/>given<sp/>bounds<sp/>and<sp/>curvature<sp/>of<sp/>base-function<sp/>and<sp/>constant<sp/>exponent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><ref refid="pub__expr_8h_1a287ddd135e76773568642d4c0fea37f0" kindref="member">SCIPexprcurvPower</ref>(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basebounds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bounds<sp/>on<sp/>base<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basecurv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>curvature<sp/>of<sp/>base<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>exponent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">/**<sp/>gives<sp/>curvature<sp/>for<sp/>a<sp/>monomial<sp/>with<sp/>given<sp/>curvatures<sp/>and<sp/>bounds<sp/>for<sp/>each<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><ref refid="pub__expr_8h_1a0ef9cb8f62cdfbbf2ac60c0bae412d03" kindref="member">SCIPexprcurvMonomial</ref>(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfactors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>factors<sp/>in<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponents,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>exponents<sp/>in<sp/>monomial,<sp/>or<sp/>NULL<sp/>if<sp/>all<sp/>1.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factoridxs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indices<sp/>of<sp/>factors,<sp/>or<sp/>NULL<sp/>if<sp/>identity<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factorcurv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>curvature<sp/>of<sp/>each<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factorbounds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>bounds<sp/>of<sp/>each<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">/**<sp/>gives<sp/>name<sp/>as<sp/>string<sp/>for<sp/>a<sp/>curvature<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="pub__expr_8h_1a4e44f88bd58e37d665e58b2d3a37efb7" kindref="member">SCIPexprcurvGetName</ref>(</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>curvature<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">/**@name<sp/>Expression<sp/>operand<sp/>methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>name<sp/>of<sp/>an<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="pub__expr_8h_1af1a80dd43d279ebabeb99a717a61efc7" kindref="member">SCIPexpropGetName</ref>(</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>number<sp/>of<sp/>children<sp/>of<sp/>a<sp/>simple<sp/>operand</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>@return<sp/>-1<sp/>for<sp/>invalid<sp/>operands<sp/>and<sp/>-2<sp/>for<sp/>complex<sp/>operands<sp/>(those<sp/>where<sp/>the<sp/>number<sp/>of<sp/>children<sp/>depends<sp/>on<sp/>the<sp/>expression)</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a7e5dbcdd03aeed7eee8bd07fc2d44eb2" kindref="member">SCIPexpropGetNChildren</ref>(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**@name<sp/>Expression<sp/>methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="117"><highlight class="comment">/**<sp/>gives<sp/>operator<sp/>of<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref><sp/><ref refid="pub__expr_8h_1a0fc57c277df5a8999f286180f7d23552" kindref="member">SCIPexprGetOperator</ref>(</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment">/**<sp/>gives<sp/>number<sp/>of<sp/>children<sp/>of<sp/>an<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a241d9fbdf133cf93d35215eb185ef7c8" kindref="member">SCIPexprGetNChildren</ref>(</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**<sp/>gives<sp/>pointer<sp/>to<sp/>array<sp/>with<sp/>children<sp/>of<sp/>an<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><ref refid="pub__expr_8h_1a5bf46444b29de80b56547c3ea29c2b32" kindref="member">SCIPexprGetChildren</ref>(</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment">/**<sp/>gives<sp/>index<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_VARIDX<sp/>or<sp/>SCIP_EXPR_PARAM<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1af09996e9175416dae554e76427d3bb93" kindref="member">SCIPexprGetOpIndex</ref>(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment">/**<sp/>gives<sp/>real<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_CONST<sp/>operand<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1a30db4adf5a04ae548b55c27490a1a4b5" kindref="member">SCIPexprGetOpReal</ref>(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/**<sp/>gives<sp/>void*<sp/>belonging<sp/>to<sp/>a<sp/>complex<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="pub__expr_8h_1a7d777c7ac53d49fe631f86f1039d1d7a" kindref="member">SCIPexprGetOpData</ref>(</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">/**<sp/>gives<sp/>exponent<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_REALPOWER<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1ab654b47eb34b1109ba455c0196bf10e8" kindref="member">SCIPexprGetRealPowerExponent</ref>(</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment">/**<sp/>gives<sp/>exponent<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_INTPOWER<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a4f54dbfc15691b82db07f76b33cd078f" kindref="member">SCIPexprGetIntPowerExponent</ref>(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment">/**<sp/>gives<sp/>exponent<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_SIGNPOWER<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1ad445226afacd0925a35a786d6c8280d6" kindref="member">SCIPexprGetSignPowerExponent</ref>(</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="171"><highlight class="comment">/**<sp/>gives<sp/>linear<sp/>coefficients<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_LINEAR<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__expr_8h_1a3622b0e8b3f42225474447d2a5d52452" kindref="member">SCIPexprGetLinearCoefs</ref>(</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">/**<sp/>gives<sp/>constant<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_LINEAR<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1a6d5b654b0f5d330ea5d95c308f545d19" kindref="member">SCIPexprGetLinearConstant</ref>(</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment">/**<sp/>gives<sp/>quadratic<sp/>elements<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_QUADRATIC<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref>*<sp/><ref refid="pub__expr_8h_1a086c11beaf74e9b931286930ccc45d25" kindref="member">SCIPexprGetQuadElements</ref>(</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>quadratic<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">/**<sp/>gives<sp/>constant<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_QUADRATIC<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1abe9b1d1a3184ebd6de047b3a7d76ac01" kindref="member">SCIPexprGetQuadConstant</ref>(</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>quadratic<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">/**<sp/>gives<sp/>linear<sp/>coefficients<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_QUADRATIC<sp/>expression</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>all<sp/>coefficients<sp/>are<sp/>0.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__expr_8h_1a7196ac7fec3f5c38531e73faab66138c" kindref="member">SCIPexprGetQuadLinearCoefs</ref>(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>quadratic<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="202"><highlight class="comment">/**<sp/>gives<sp/>number<sp/>of<sp/>quadratic<sp/>elements<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_QUADRATIC<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a95b96513dec722d7084d81b800511006" kindref="member">SCIPexprGetNQuadElements</ref>(</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>quadratic<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>monomials<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_POLYNOMIAL<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>**<sp/><ref refid="pub__expr_8h_1ae330fef00b656b46a3a82c05e4bbd405" kindref="member">SCIPexprGetMonomials</ref>(</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>number<sp/>of<sp/>monomials<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_POLYNOMIAL<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a41df92174e44481bb10b60474388cbec" kindref="member">SCIPexprGetNMonomials</ref>(</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="220"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>constant<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_POLYNOMIAL<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1a282b396d13f3f93d16e31f022f3f552f" kindref="member">SCIPexprGetPolynomialConstant</ref>(</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment">/**<sp/>gets<sp/>coefficient<sp/>of<sp/>a<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1ac4f7893af3baf86dc0445c842947821a" kindref="member">SCIPexprGetMonomialCoef</ref>(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="232"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>factors<sp/>of<sp/>a<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a8a71af77c61048760e0fe7001aa668dd" kindref="member">SCIPexprGetMonomialNFactors</ref>(</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment">/**<sp/>gets<sp/>indices<sp/>of<sp/>children<sp/>corresponding<sp/>to<sp/>factors<sp/>of<sp/>a<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="pub__expr_8h_1a9fd82050183d79a9749bfed43dbb48a9" kindref="member">SCIPexprGetMonomialChildIndices</ref>(</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment">/**<sp/>gets<sp/>exponents<sp/>in<sp/>factors<sp/>of<sp/>a<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__expr_8h_1af62d25255b598db8d4a41193659c9d24" kindref="member">SCIPexprGetMonomialExponents</ref>(</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>optimized<sp/>mode,<sp/>the<sp/>function<sp/>calls<sp/>are<sp/>overwritten<sp/>by<sp/>defines<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>function<sp/>calls<sp/>and</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>speed<sp/>up<sp/>the<sp/>algorithms.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetOperator(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(expr)-&gt;op</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetNChildren(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(expr)-&gt;nchildren</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetChildren(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(expr)-&gt;children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetOpIndex(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(expr)-&gt;data.intval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetOpReal(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(expr)-&gt;data.dbl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetOpData(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(expr)-&gt;data.data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetRealPowerExponent(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(expr)-&gt;data.dbl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetIntPowerExponent(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(expr)-&gt;data.intval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetSignPowerExponent(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(expr)-&gt;data.dbl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetLinearCoefs(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_Real*)(expr)-&gt;data.data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetLinearConstant(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((SCIP_Real*)(expr)-&gt;data.data)[(expr)-&gt;nchildren])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetQuadElements(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_EXPRDATA_QUADRATIC*)(expr)-&gt;data.data)-&gt;quadelems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetQuadConstant(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_EXPRDATA_QUADRATIC*)(expr)-&gt;data.data)-&gt;constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetQuadLinearCoefs(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_EXPRDATA_QUADRATIC*)(expr)-&gt;data.data)-&gt;lincoefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetNQuadElements(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_EXPRDATA_QUADRATIC*)(expr)-&gt;data.data)-&gt;nquadelems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetMonomials(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_EXPRDATA_POLYNOMIAL*)(expr)-&gt;data.data)-&gt;monomials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetNMonomials(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_EXPRDATA_POLYNOMIAL*)(expr)-&gt;data.data)-&gt;nmonomials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetPolynomialConstant(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_EXPRDATA_POLYNOMIAL*)(expr)-&gt;data.data)-&gt;constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetMonomialCoef(monomial)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(monomial)-&gt;coef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetMonomialNFactors(monomial)<sp/><sp/><sp/><sp/><sp/>(monomial)-&gt;nfactors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetMonomialChildIndices(monomial)<sp/>(monomial)-&gt;childidxs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprGetMonomialExponents(monomial)<sp/><sp/><sp/><sp/>(monomial)-&gt;exponents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment">/**<sp/>creates<sp/>a<sp/>simple<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1ab182312443de687163956ea5e879791b" kindref="member">SCIPexprCreate</ref>(</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>buffer<sp/>for<sp/>expression<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operand<sp/>of<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>arguments<sp/>of<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment">/**<sp/>copies<sp/>an<sp/>expression<sp/>including<sp/>its<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a354f2c4744f18c6c621192558b434106" kindref="member">SCIPexprCopyDeep</ref>(</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targetexpr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>pointer<sp/>to<sp/>copied<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourceexpr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>to<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment">/**<sp/>frees<sp/>an<sp/>expression<sp/>including<sp/>its<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a8a03414e3d699a303f5481810d115de4" kindref="member">SCIPexprFreeDeep</ref>(</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>expression<sp/>to<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment">/**<sp/>frees<sp/>an<sp/>expression<sp/>but<sp/>not<sp/>its<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a286aaee5d12b2b3eb4b84ac3900db7f6" kindref="member">SCIPexprFreeShallow</ref>(</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>expression<sp/>to<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="312"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>expression<sp/>from<sp/>the<sp/>addition<sp/>of<sp/>two<sp/>given<sp/>expression,<sp/>with<sp/>coefficients,<sp/>and<sp/>a<sp/>constant</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>the<sp/>given<sp/>expressions<sp/>may<sp/>be<sp/>modified<sp/>or<sp/>freed,<sp/>otherwise<sp/>it<sp/>will<sp/>be<sp/>used<sp/>a<sp/>child<sp/>expression</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>favors<sp/>creation<sp/>and<sp/>maintaining<sp/>of<sp/>SCIP_EXPR_LINEAR<sp/>over<sp/>SCIP_EXPR_PLUS<sp/>or<sp/>SCIP_EXPR_SUM</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1aef781cb9ce6d6784c08f2ab61d10c87c" kindref="member">SCIPexprAdd</ref>(</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>pointer<sp/>to<sp/>created<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>coefficient<sp/>of<sp/>first<sp/>term<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>of<sp/>first<sp/>term,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>coefficient<sp/>of<sp/>second<sp/>term<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>of<sp/>second<sp/>term,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>term<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="328"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>expression<sp/>from<sp/>the<sp/>multiplication<sp/>of<sp/>an<sp/>expression<sp/>with<sp/>a<sp/>constant</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>the<sp/>given<sp/>expressions<sp/>may<sp/>be<sp/>modified<sp/>or<sp/>freed,<sp/>otherwise<sp/>it<sp/>will<sp/>be<sp/>used<sp/>a<sp/>child<sp/>expression</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>favors<sp/>creation<sp/>of<sp/>SCIP_EXPR_LINEAR<sp/>over<sp/>SCIP_EXPR_MUP<sp/>or<sp/>SCIP_EXPR_PROD</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1aa455972ac36fd9c0923fbec4793c52f9" kindref="member">SCIPexprMulConstant</ref>(</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>pointer<sp/>to<sp/>created<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>term,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>term<sp/>to<sp/>multiply<sp/>by<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment">/**<sp/>creates<sp/>a<sp/>SCIP_EXPR_LINEAR<sp/>expression<sp/>that<sp/>is<sp/>(affine)<sp/>linear<sp/>in<sp/>its<sp/>children:<sp/>constant<sp/>+<sp/>sum_i<sp/>coef_i<sp/>child_i<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a53ace65b92ef84094762513c03ac80fc" kindref="member">SCIPexprCreateLinear</ref>(</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>buffer<sp/>for<sp/>expression<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nchildren,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>children<sp/>of<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>coefficients<sp/>of<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="352"><highlight class="comment">/**<sp/>adds<sp/>new<sp/>terms<sp/>to<sp/>a<sp/>linear<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a23067c5003bd8be0a40e223291c4782b" kindref="member">SCIPexprAddToLinear</ref>(</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>linear<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nchildren,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>children<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>coefficients<sp/>of<sp/>additional<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>additional<sp/>children<sp/>expressions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="363"><highlight class="comment">/**<sp/>creates<sp/>a<sp/>SCIP_EXPR_QUADRATIC<sp/>expression:<sp/>constant<sp/>+<sp/>sum_i<sp/>coef_i<sp/>child_i<sp/>+<sp/>sum_i<sp/>coef_i<sp/>child1_i<sp/>child2_i<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a58602a2de3a7f8453d553ca0aed46eaa" kindref="member">SCIPexprCreateQuadratic</ref>(</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>buffer<sp/>for<sp/>expression<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nchildren,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>children<sp/>of<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lincoefs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>linear<sp/>coefficients<sp/>of<sp/>children,<sp/>or<sp/>NULL<sp/>if<sp/>all<sp/>0.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nquadelems,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>quadratic<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quadelems<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>quadratic<sp/>elements<sp/>specifying<sp/>coefficients<sp/>and<sp/>child<sp/>indices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment">/**<sp/>ensures<sp/>that<sp/>quadratic<sp/>elements<sp/>of<sp/>a<sp/>quadratic<sp/>expression<sp/>are<sp/>sorted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a7448839a1f4d853210f0aec3c3965fd1" kindref="member">SCIPexprSortQuadElems</ref>(</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>quadratic<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="381"><highlight class="comment">/**<sp/>creates<sp/>a<sp/>SCIP_EXPR_POLYNOMIAL<sp/>expression<sp/>from<sp/>an<sp/>array<sp/>of<sp/>monomials:<sp/>constant<sp/>+<sp/>sum_i<sp/>monomial_i<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a9b19abb7ea396cf9c9f4076364acfe95" kindref="member">SCIPexprCreatePolynomial</ref>(</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>buffer<sp/>for<sp/>expression<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nchildren,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>children<sp/>of<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmonomials,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>monomials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>**<sp/>monomials,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copymonomials<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>monomials<sp/>by<sp/>copied<sp/>or<sp/>ownership<sp/>be<sp/>assumed?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="394"><highlight class="comment">/**<sp/>adds<sp/>an<sp/>array<sp/>of<sp/>monomials<sp/>to<sp/>a<sp/>SCIP_EXPR_POLYNOMIAL<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a0cca53108f6eaed80ebbf20afcca895a" kindref="member">SCIPexprAddMonomials</ref>(</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>of<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmonomials,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>monomials<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>**<sp/>monomials,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>the<sp/>monomials<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copymonomials<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>should<sp/>monomials<sp/>by<sp/>copied<sp/>or<sp/>ownership<sp/>be<sp/>assumed?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="404"><highlight class="comment">/**<sp/>changes<sp/>the<sp/>constant<sp/>in<sp/>a<sp/>SCIP_EXPR_POLYNOMIAL<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1abfc72d5c30a5adcc32de6dad9f03eda3" kindref="member">SCIPexprChgPolynomialConstant</ref>(</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>value<sp/>for<sp/>constant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment">/**<sp/>multiplies<sp/>each<sp/>summand<sp/>of<sp/>a<sp/>polynomial<sp/>by<sp/>a<sp/>given<sp/>constant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a6a6c74b423eacf85ea3b8569adb65090" kindref="member">SCIPexprMultiplyPolynomialByConstant</ref>(</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>polynomial<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="419"><highlight class="comment">/**<sp/>multiplies<sp/>each<sp/>summand<sp/>of<sp/>a<sp/>polynomial<sp/>by<sp/>a<sp/>given<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a32d3cfb18322d4868e72f03dba73788a" kindref="member">SCIPexprMultiplyPolynomialByMonomial</ref>(</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>polynomial<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>factor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childmap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>map<sp/>children<sp/>in<sp/>factor<sp/>to<sp/>children<sp/>in<sp/>expr,<sp/>or<sp/>NULL<sp/>for<sp/>1:1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment">/**<sp/>multiplies<sp/>this<sp/>polynomial<sp/>by<sp/>a<sp/>polynomial</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>factor<sp/>needs<sp/>to<sp/>be<sp/>different<sp/>from<sp/>expr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a941c5251cc15a1479808eecb27260f73" kindref="member">SCIPexprMultiplyPolynomialByPolynomial</ref>(</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>polynomial<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>polynomial<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childmap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>map<sp/>children<sp/>in<sp/>factor<sp/>to<sp/>children<sp/>in<sp/>expr,<sp/>or<sp/>NULL<sp/>for<sp/>1:1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="438"><highlight class="comment">/**<sp/>takes<sp/>a<sp/>power<sp/>of<sp/>the<sp/>polynomial</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>exponent<sp/>need<sp/>to<sp/>be<sp/>an<sp/>integer</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>polynomial<sp/>need<sp/>to<sp/>be<sp/>a<sp/>monomial,<sp/>if<sp/>exponent<sp/>is<sp/>negative</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a55a7d5645bf08926b05064d2398f61f6" kindref="member">SCIPexprPolynomialPower</ref>(</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>polynomial<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>exponent<sp/>of<sp/>power<sp/>operation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="449"><highlight class="comment">/**<sp/>merges<sp/>monomials<sp/>in<sp/>a<sp/>polynomial<sp/>expression<sp/>that<sp/>differ<sp/>only<sp/>in<sp/>coefficient<sp/>into<sp/>a<sp/>single<sp/>monomial</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>eliminates<sp/>monomials<sp/>with<sp/>coefficient<sp/>between<sp/>-eps<sp/>and<sp/>eps</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a97eb8c0850c519415f39e9293a709ccc" kindref="member">SCIPexprMergeMonomials</ref>(</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>polynomial<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>threshold<sp/>under<sp/>which<sp/>numbers<sp/>are<sp/>treat<sp/>as<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mergefactors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>whether<sp/>to<sp/>merge<sp/>factors<sp/>in<sp/>monomials<sp/>too<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="460"><highlight class="comment">/**<sp/>creates<sp/>a<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1af358ba7ad9cac7fc59bb73941e4b88e5" kindref="member">SCIPexprCreateMonomial</ref>(</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>**<sp/>monomial,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>where<sp/>to<sp/>store<sp/>pointer<sp/>to<sp/>new<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coef,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>coefficient<sp/>of<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfactors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>factors<sp/>in<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childidxs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indices<sp/>of<sp/>children<sp/>corresponding<sp/>to<sp/>factors,<sp/>or<sp/>NULL<sp/>if<sp/>identity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponents<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>exponent<sp/>in<sp/>each<sp/>factor,<sp/>or<sp/>NULL<sp/>if<sp/>all<sp/>1.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="471"><highlight class="comment">/**<sp/>frees<sp/>a<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1af8db8348d0d58f0cd349ccfad7c9f390" kindref="member">SCIPexprFreeMonomial</ref>(</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>**<sp/>monomial<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>monomial<sp/>that<sp/>should<sp/>be<sp/>freed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="478"><highlight class="comment">/**<sp/>ensures<sp/>that<sp/>factors<sp/>in<sp/>a<sp/>monomial<sp/>are<sp/>sorted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ac1c75529a06aa946b8636655155f53ad" kindref="member">SCIPexprSortMonomialFactors</ref>(</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="484"><highlight class="comment">/**<sp/>finds<sp/>a<sp/>factor<sp/>corresponding<sp/>to<sp/>a<sp/>given<sp/>child<sp/>index<sp/>in<sp/>a<sp/>monomial</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>note<sp/>that<sp/>if<sp/>the<sp/>factors<sp/>have<sp/>not<sp/>been<sp/>merged,<sp/>the<sp/>position<sp/>of<sp/>some<sp/>factor<sp/>corresponding<sp/>to<sp/>a<sp/>given<sp/>child<sp/>is<sp/>given</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>returns<sp/>TRUE<sp/>if<sp/>a<sp/>factor<sp/>is<sp/>found,<sp/>FALSE<sp/>if<sp/>not</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1ae0ae5371ba754fcbff4ce5de33928e3e" kindref="member">SCIPexprFindMonomialFactor</ref>(</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childidx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>index<sp/>of<sp/>the<sp/>child<sp/>which<sp/>factor<sp/>to<sp/>search<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>position<sp/>of<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="495"><highlight class="comment">/**<sp/>checks<sp/>if<sp/>two<sp/>monomials<sp/>are<sp/>equal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1aae30dc0d141f3e5849a8c104b7db970b" kindref="member">SCIPexprAreMonomialsEqual</ref>(</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/><sp/>monomial1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/><sp/>monomial2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eps<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>threshold<sp/>under<sp/>which<sp/>numbers<sp/>are<sp/>treated<sp/>as<sp/>0.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="503"><highlight class="comment">/**<sp/>adds<sp/>factors<sp/>to<sp/>a<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a9a8c5fbb8ec588dafdd7755d6c34698a" kindref="member">SCIPexprAddMonomialFactors</ref>(</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfactors,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>factors<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childidxs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>indices<sp/>of<sp/>children<sp/>corresponding<sp/>to<sp/>factors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponents<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>exponent<sp/>in<sp/>each<sp/>factor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="513"><highlight class="comment">/**<sp/>changes<sp/>coefficient<sp/>of<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ab4d93cad3bf663e5e53f483556f96bce" kindref="member">SCIPexprChgMonomialCoef</ref>(</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newcoef<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="520"><highlight class="comment">/**<sp/>multiplies<sp/>a<sp/>monomial<sp/>with<sp/>a<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1aa150275250cd34521458e83e37335cb4" kindref="member">SCIPexprMultiplyMonomialByMonomial</ref>(</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>factor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>factor<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childmap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>map<sp/>to<sp/>apply<sp/>to<sp/>children<sp/>in<sp/>factor,<sp/>or<sp/>NULL<sp/>for<sp/>1:1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="529"><highlight class="comment">/**<sp/>replaces<sp/>the<sp/>monomial<sp/>by<sp/>a<sp/>power<sp/>of<sp/>the<sp/>monomial</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>allows<sp/>only<sp/>integers<sp/>as<sp/>exponent</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1abe8b84e8d6309295163b99bdb5463d2c" kindref="member">SCIPexprMonomialPower</ref>(</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>integer<sp/>exponent<sp/>of<sp/>power<sp/>operation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="538"><highlight class="comment">/**<sp/>merges<sp/>factors<sp/>that<sp/>correspond<sp/>to<sp/>the<sp/>same<sp/>child<sp/>by<sp/>adding<sp/>exponents</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>eliminates<sp/>factors<sp/>with<sp/>exponent<sp/>between<sp/>-eps<sp/>and<sp/>eps</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a5ef8fa99b134c30bfe0e9be2a0dd869e" kindref="member">SCIPexprMergeMonomialFactors</ref>(</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>*<sp/>monomial,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eps<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>threshold<sp/>under<sp/>which<sp/>numbers<sp/>are<sp/>treated<sp/>as<sp/>0.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="547"><highlight class="comment">/**<sp/>ensures<sp/>that<sp/>monomials<sp/>of<sp/>a<sp/>polynomial<sp/>are<sp/>sorted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ab131324dd52a62bf7a5d3b92f1375b73" kindref="member">SCIPexprSortMonomials</ref>(</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>polynomial<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="553"><highlight class="comment">/**<sp/>indicates<sp/>whether<sp/>the<sp/>expression<sp/>contains<sp/>a<sp/>SCIP_EXPR_PARAM<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1a78cd27ed57cd9c239e1bbc5d304bf7e1" kindref="member">SCIPexprHasParam</ref>(</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment">/**<sp/>gets<sp/>maximal<sp/>degree<sp/>of<sp/>expression,<sp/>or<sp/>SCIP_EXPR_DEGREEINFINITY<sp/>if<sp/>not<sp/>a<sp/>polynomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a433024bed75a9372ce8b30d82ec97dc3" kindref="member">SCIPexprGetMaxDegree</ref>(</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdegree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>maximal<sp/>degree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="566"><highlight class="comment">/**<sp/>counts<sp/>usage<sp/>of<sp/>variables<sp/>in<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a0ddd65b428bdd2d3a29f8e0b411e5c16" kindref="member">SCIPexprGetVarsUsage</ref>(</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>to<sp/>update<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varsusage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>with<sp/>counters<sp/>of<sp/>variable<sp/>usage<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="573"><highlight class="comment">/**<sp/>compares<sp/>whether<sp/>two<sp/>expressions<sp/>are<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/>inconclusive,<sp/>i.e.,<sp/>may<sp/>give<sp/>FALSE<sp/>even<sp/>if<sp/>expressions<sp/>are<sp/>equivalent<sp/>(x*y<sp/>!=<sp/>y*x)</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1a483972cc3ab4f2a25497caf7dbd0a403" kindref="member">SCIPexprAreEqual</ref>(</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>first<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>second<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eps<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>threshold<sp/>under<sp/>which<sp/>numbers<sp/>are<sp/>assumed<sp/>to<sp/>be<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="583"><highlight class="comment">/**<sp/>aims<sp/>at<sp/>simplifying<sp/>an<sp/>expression<sp/>and<sp/>splitting<sp/>of<sp/>a<sp/>linear<sp/>expression</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>if<sp/>linear<sp/>variables<sp/>are<sp/>split<sp/>off,<sp/>expression<sp/>interpreter<sp/>data,<sp/>if<sp/>stored<sp/>in<sp/>the<sp/>tree,<sp/>is<sp/>freed</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a45e3fc1dd9d836c99515c21b8dc49e5a" kindref="member">SCIPexprSimplify</ref>(</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref>*<sp/><sp/><sp/><sp/><sp/>messagehdlr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>message<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>threshold,<sp/>under<sp/>which<sp/>positive<sp/>values<sp/>are<sp/>treat<sp/>as<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxexpansionexponent,</highlight><highlight class="comment">/**&lt;<sp/>maximal<sp/>exponent<sp/>for<sp/>which<sp/>we<sp/>still<sp/>expand<sp/>non-monomial<sp/>polynomials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>variables<sp/>in<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nlinvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>number<sp/>of<sp/>linear<sp/>variables<sp/>in<sp/>linear<sp/>part,<sp/>or<sp/>NULL<sp/>if<sp/>linear<sp/>part<sp/>should<sp/>not<sp/>be<sp/>separated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linidxs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>indices<sp/>of<sp/>variables<sp/>in<sp/>expression<sp/>tree<sp/>which<sp/>belong<sp/>to<sp/>linear<sp/>part,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lincoefs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>coefficients<sp/>of<sp/>linear<sp/>part,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="599"><highlight class="comment">/**<sp/>evaluates<sp/>an<sp/>expression<sp/>w.r.t.<sp/>a<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1ae99abdd201bbeec826ad42e4627e64f6" kindref="member">SCIPexprEval</ref>(</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>variables,<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>the<sp/>expression<sp/>is<sp/>constant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>parameters,<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>the<sp/>expression<sp/>is<sp/>not<sp/>parameterized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="608"><highlight class="comment">/**<sp/>evaluates<sp/>an<sp/>expression<sp/>w.r.t.<sp/>an<sp/>interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1abbbedd9621e4e33d41f1af820d46fea3" kindref="member">SCIPexprEvalInt</ref>(</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>to<sp/>use<sp/>for<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>interval<sp/>values<sp/>for<sp/>variables,<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>the<sp/>expression<sp/>is<sp/>constant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>parameters,<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>the<sp/>expression<sp/>is<sp/>not<sp/>parameterized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="618"><highlight class="comment">/**<sp/>tries<sp/>to<sp/>determine<sp/>the<sp/>curvature<sp/>type<sp/>of<sp/>an<sp/>expression<sp/>w.r.t.<sp/>given<sp/>variable<sp/>domains<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1aceba302565dcdf432869378c61784868" kindref="member">SCIPexprCheckCurvature</ref>(</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>to<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>to<sp/>use<sp/>for<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varbounds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>domains<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>parameters,<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>the<sp/>expression<sp/>is<sp/>not<sp/>parameterized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>curvature<sp/>of<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>bounds<sp/>on<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="629"><highlight class="comment">/**<sp/>substitutes<sp/>variables<sp/>(SCIP_EXPR_VARIDX)<sp/>by<sp/>expressions</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>only<sp/>the<sp/>children<sp/>of<sp/>the<sp/>given<sp/>expr<sp/>are<sp/>checked!</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*<sp/>A<sp/>variable<sp/>with<sp/>index<sp/>i<sp/>is<sp/>replaced<sp/>by<sp/>a<sp/>copy<sp/>of<sp/>substexprs[i],<sp/>if<sp/>that<sp/>latter<sp/>is<sp/>not<sp/>NULL</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/>if<sp/>substexprs[i]<sp/>==<sp/>NULL,<sp/>then<sp/>the<sp/>variable<sp/>expression<sp/>i<sp/>is<sp/>not<sp/>touched</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a58b1843bd0262ed5b6c92fc23156cf75" kindref="member">SCIPexprSubstituteVars</ref>(</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression,<sp/>which<sp/>of<sp/>the<sp/>children<sp/>may<sp/>be<sp/>replaced<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substexprs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>of<sp/>substitute<sp/>expressions;<sp/>single<sp/>entries<sp/>can<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="641"><highlight class="comment">/**<sp/>updates<sp/>variable<sp/>indices<sp/>in<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a4278cafac2823cd273a81007f7a209d3" kindref="member">SCIPexprReindexVars</ref>(</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>to<sp/>update<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newindices<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>indices<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="648"><highlight class="comment">/**<sp/>updates<sp/>parameter<sp/>indices<sp/>in<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a70f5bd66a56b47faaaf4fc45987ed4f3" kindref="member">SCIPexprReindexParams</ref>(</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>to<sp/>update<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newindices<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>indices<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="655"><highlight class="comment">/**<sp/>prints<sp/>an<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a5ad1a5816511ec3c103680f8beab96b1" kindref="member">SCIPexprPrint</ref>(</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref>*<sp/><sp/><sp/><sp/><sp/>messagehdlr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>message<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/>FILE*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>for<sp/>printing,<sp/>or<sp/>NULL<sp/>for<sp/>stdout<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varnames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>names<sp/>of<sp/>variables,<sp/>or<sp/>NULL<sp/>for<sp/>default<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramnames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>names<sp/>of<sp/>parameters,<sp/>or<sp/>NULL<sp/>for<sp/>default<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramvals<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>parameters,<sp/>or<sp/>NULL<sp/>for<sp/>not<sp/>printing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="666"><highlight class="comment">/**<sp/>parses<sp/>an<sp/>expression<sp/>from<sp/>a<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1adda08b7e08556b696218d0c6833e58d7" kindref="member">SCIPexprParse</ref>(</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref>*<sp/><sp/><sp/><sp/><sp/>messagehdlr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>message<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>pointer<sp/>to<sp/>created<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>the<sp/>string<sp/>to<sp/>be<sp/>parsed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastchar,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>the<sp/>last<sp/>char<sp/>of<sp/>str<sp/>that<sp/>should<sp/>be<sp/>parsed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>number<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varnames<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>variable<sp/>names,<sp/>prefixed<sp/>by<sp/>index<sp/>(as<sp/>int)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="678"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="680"><highlight class="comment">/**@name<sp/>Expression<sp/>tree<sp/>methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="681"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="683"><highlight class="comment">/**<sp/>returns<sp/>root<sp/>expression<sp/>of<sp/>an<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><ref refid="pub__expr_8h_1a00b319aec4404887ce8a1cc860a83442" kindref="member">SCIPexprtreeGetRoot</ref>(</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="689"><highlight class="comment">/**<sp/>returns<sp/>number<sp/>of<sp/>variables<sp/>in<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a87f1b85b75cd0b5bd9107d5bc410d8f4" kindref="member">SCIPexprtreeGetNVars</ref>(</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="695"><highlight class="comment">/**<sp/>returns<sp/>number<sp/>of<sp/>parameters<sp/>in<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a1a64d598f310ea0d33330aa96ed6181d" kindref="member">SCIPexprtreeGetNParams</ref>(</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="701"><highlight class="comment">/**<sp/>returns<sp/>values<sp/>of<sp/>parameters<sp/>or<sp/>NULL<sp/>if<sp/>none<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__expr_8h_1a0299ad304998c7041fb4f246844ed119" kindref="member">SCIPexprtreeGetParamVals</ref>(</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="707"><highlight class="comment">/**<sp/>sets<sp/>value<sp/>of<sp/>a<sp/>single<sp/>parameter<sp/>in<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a02aadd64240b0aea7ba835880e8de80e" kindref="member">SCIPexprtreeSetParamVal</ref>(</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramidx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>index<sp/>of<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramval<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>value<sp/>of<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="715"><highlight class="comment">/**<sp/>gets<sp/>data<sp/>of<sp/>expression<sp/>tree<sp/>interpreter,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/><ref refid="pub__expr_8h_1a7831d239faec0b27883ae026e85d7331" kindref="member">SCIPexprtreeGetInterpreterData</ref>(</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="721"><highlight class="comment">/**<sp/>sets<sp/>data<sp/>of<sp/>expression<sp/>tree<sp/>interpreter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ad174e4bfd56c2532e0c037f9f8443aef" kindref="member">SCIPexprtreeSetInterpreterData</ref>(</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__exprinterpret_8h_1a1cdd1eca7c5f8e8ac40e0c95e6f61346" kindref="member">SCIP_EXPRINTDATA</ref>*<sp/><sp/><sp/><sp/><sp/>interpreterdata<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>interpreter<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="728"><highlight class="comment">/**<sp/>frees<sp/>data<sp/>of<sp/>expression<sp/>tree<sp/>interpreter,<sp/>if<sp/>any<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1afabc4cf888ccb3d7bd2302d2198b0393" kindref="member">SCIPexprtreeFreeInterpreterData</ref>(</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="734"><highlight class="comment">/**<sp/>indicates<sp/>whether<sp/>there<sp/>are<sp/>parameterized<sp/>constants<sp/>(SCIP_EXPR_PARAM)<sp/>in<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1ab180ce02b20b12f02906dcdbcf30c861" kindref="member">SCIPexprtreeHasParam</ref>(</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="740"><highlight class="comment">/**<sp/>Gives<sp/>maximal<sp/>degree<sp/>of<sp/>expression<sp/>in<sp/>expression<sp/>tree.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*<sp/>If<sp/>constant<sp/>expression,<sp/>gives<sp/>0,</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/>if<sp/>linear<sp/>expression,<sp/>gives<sp/>1,</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>if<sp/>polynomial<sp/>expression,<sp/>gives<sp/>its<sp/>maximal<sp/>degree,</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*<sp/>otherwise<sp/>(nonpolynomial<sp/>nonconstant<sp/>expressions)<sp/>gives<sp/>at<sp/>least<sp/>SCIP_EXPR_DEGREEINFINITY.</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a3fd7870d751277732ff2bb76b0fcb230" kindref="member">SCIPexprtreeGetMaxDegree</ref>(</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdegree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>maximal<sp/>degree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="752"><highlight class="comment">/**<sp/>evaluates<sp/>an<sp/>expression<sp/>tree<sp/>w.r.t.<sp/>a<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a0c4ad161b828120f5c16d3df89bfc574" kindref="member">SCIPexprtreeEval</ref>(</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>tree<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="760"><highlight class="comment">/**<sp/>evaluates<sp/>an<sp/>expression<sp/>tree<sp/>w.r.t.<sp/>an<sp/>interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a6651f0a87111d63aff16d7d5a3388920" kindref="member">SCIPexprtreeEvalInt</ref>(</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>for<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>intervals<sp/>for<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>tree<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="769"><highlight class="comment">/**<sp/>prints<sp/>an<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a1f9a6e483468024261dd52c61244747e" kindref="member">SCIPexprtreePrint</ref>(</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref>*<sp/><sp/><sp/><sp/><sp/>messagehdlr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>message<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/>FILE*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>for<sp/>printing,<sp/>or<sp/>NULL<sp/>for<sp/>stdout<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varnames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>names<sp/>of<sp/>variables,<sp/>or<sp/>NULL<sp/>for<sp/>default<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramnames<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>names<sp/>of<sp/>parameters,<sp/>or<sp/>NULL<sp/>for<sp/>default<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>optimized<sp/>mode,<sp/>the<sp/>function<sp/>calls<sp/>are<sp/>overwritten<sp/>by<sp/>defines<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>function<sp/>calls<sp/>and</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/>speed<sp/>up<sp/>the<sp/>algorithms.</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeGetRoot(tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tree)-&gt;root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeGetNVars(tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tree)-&gt;nvars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeGetNParams(tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tree)-&gt;nparams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeGetParamVals(tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tree)-&gt;params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeSetParamVal(tree,<sp/>paramidx,<sp/>paramval)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>(tree)-&gt;params[(paramidx)]<sp/>=<sp/>paramval;<sp/>}<sp/>while<sp/>(FALSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeGetInterpreterData(tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tree)-&gt;interpreterdata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeSetInterpreterData(tree,<sp/>newinterpreterdata)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>(tree)-&gt;interpreterdata<sp/>=<sp/>newinterpreterdata;<sp/>}<sp/>while<sp/>(FALSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeFreeInterpreterData(tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((tree)-&gt;interpreterdata<sp/>!=<sp/>NULL<sp/>?<sp/>SCIPexprintFreeData(&amp;(tree)-&gt;interpreterdata)<sp/>:<sp/>SCIP_OKAY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeHasParam(tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIPexprHasParam((tree)-&gt;root)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeGetMaxDegree(tree,<sp/>maxdegree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIPexprGetMaxDegree((tree)-&gt;root,<sp/>maxdegree)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeEval(tree,<sp/>varvals,<sp/>val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIPexprEval((tree)-&gt;root,<sp/>varvals,<sp/>(tree)-&gt;params,<sp/>val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreeEvalInt(tree,<sp/>infinity,<sp/>varvals,<sp/>val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SCIPexprEvalInt((tree)-&gt;root,<sp/>infinity,<sp/>varvals,<sp/>(tree)-&gt;params,<sp/>val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprtreePrint(tree,<sp/>messagehdlr,<sp/>file,<sp/>varnames,<sp/>paramnames)<sp/>SCIPexprPrint((tree)-&gt;root,<sp/>messagehdlr,<sp/>file,<sp/>varnames,<sp/>paramnames,<sp/>(tree)-&gt;params)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="801"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a91157b91fbe21ecb2ba61442ec33d648" kindref="member">SCIPexprtreeCreate</ref>(</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>data<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>address<sp/>of<sp/>created<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>root<sp/>expression,<sp/>not<sp/>copied<sp/>deep<sp/>!,<sp/>can<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>variables<sp/>in<sp/>variable<sp/>mapping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nparams,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>parameters<sp/>in<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>parameters,<sp/>or<sp/>NULL<sp/>(if<sp/>NULL<sp/>but<sp/>nparams<sp/>&gt;<sp/>0,<sp/>then<sp/>params<sp/>is<sp/>initialized<sp/>with<sp/>zeros)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="812"><highlight class="comment">/**<sp/>copies<sp/>an<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a8f39cbb2c6678b8a466ed16a904b53d5" kindref="member">SCIPexprtreeCopy</ref>(</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>that<sp/>should<sp/>be<sp/>used<sp/>in<sp/>new<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>targettree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>address<sp/>of<sp/>copied<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourcetree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>to<sp/>copy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="820"><highlight class="comment">/**<sp/>frees<sp/>an<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1ae32ebbf22e95f5c28c9baaa7a67bc2e0" kindref="member">SCIPexprtreeFree</ref>(</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>expression<sp/>tree<sp/>that<sp/>is<sp/>freed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="826"><highlight class="comment">/**<sp/>sets<sp/>number<sp/>and<sp/>values<sp/>of<sp/>all<sp/>parameters<sp/>in<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a0313476b7ecbe0d9ed6ab25e7915a06f" kindref="member">SCIPexprtreeSetParams</ref>(</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nparams,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paramvals<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>of<sp/>parameters,<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>nparams<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="834"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>number<sp/>of<sp/>usages<sp/>for<sp/>each<sp/>variable<sp/>in<sp/>the<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a54d4f74d39ed15cd3b9b65cc9bf7b6a2" kindref="member">SCIPexprtreeGetVarsUsage</ref>(</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varsusage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>where<sp/>to<sp/>store<sp/>for<sp/>each<sp/>variable<sp/>how<sp/>often<sp/>it<sp/>is<sp/>used<sp/>in<sp/>the<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="841"><highlight class="comment">/**<sp/>aims<sp/>at<sp/>simplifying<sp/>an<sp/>expression<sp/>and<sp/>splitting<sp/>of<sp/>a<sp/>linear<sp/>expression</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*<sp/>if<sp/>linear<sp/>variables<sp/>are<sp/>split<sp/>off,<sp/>expression<sp/>interpreter<sp/>data,<sp/>if<sp/>stored<sp/>in<sp/>the<sp/>tree,<sp/>is<sp/>freed</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1aa867f046df03c4400daa1afd2f3c53d2" kindref="member">SCIPexprtreeSimplify</ref>(</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref>*<sp/><sp/><sp/><sp/><sp/>messagehdlr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>message<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>threshold,<sp/>under<sp/>which<sp/>positive<sp/>values<sp/>are<sp/>treat<sp/>as<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxexpansionexponent,</highlight><highlight class="comment">/**&lt;<sp/>maximal<sp/>exponent<sp/>for<sp/>which<sp/>we<sp/>still<sp/>expand<sp/>non-monomial<sp/>polynomials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nlinvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>number<sp/>of<sp/>linear<sp/>variables<sp/>in<sp/>linear<sp/>part,<sp/>or<sp/>NULL<sp/>if<sp/>linear<sp/>part<sp/>should<sp/>not<sp/>be<sp/>separated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linidxs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>indices<sp/>of<sp/>variables<sp/>in<sp/>expression<sp/>tree<sp/>which<sp/>belong<sp/>to<sp/>linear<sp/>part,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lincoefs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>coefficients<sp/>of<sp/>linear<sp/>part,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="855"><highlight class="comment">/**<sp/>adds<sp/>an<sp/>expression<sp/>to<sp/>the<sp/>root<sp/>expression<sp/>of<sp/>the<sp/>tree</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>*<sp/>the<sp/>root<sp/>is<sp/>replaced<sp/>with<sp/>an<sp/>SCIP_EXPR_PLUS<sp/>expression<sp/>which<sp/>has<sp/>the<sp/>previous<sp/>root<sp/>and<sp/>the<sp/>given<sp/>expression<sp/>as<sp/>children</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a4eb976ecc14a170deb778ace16b197c5" kindref="member">SCIPexprtreeAddExpr</ref>(</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>to<sp/>add<sp/>to<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyexpr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>whether<sp/>expression<sp/>should<sp/>be<sp/>copied<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="865"><highlight class="comment">/**<sp/>tries<sp/>to<sp/>determine<sp/>the<sp/>curvature<sp/>type<sp/>of<sp/>an<sp/>expression<sp/>tree<sp/>w.r.t.<sp/>given<sp/>variable<sp/>domains<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a5bd33601fab96478623a16e6bee0075f" kindref="member">SCIPexprtreeCheckCurvature</ref>(</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>for<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varbounds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>domains<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>curvature<sp/>of<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bounds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>bounds<sp/>on<sp/>expression,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="875"><highlight class="comment">/**<sp/>substitutes<sp/>variables<sp/>(SCIP_EXPR_VARIDX)<sp/>in<sp/>an<sp/>expression<sp/>tree<sp/>by<sp/>expressions</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/>*<sp/>A<sp/>variable<sp/>with<sp/>index<sp/>i<sp/>is<sp/>replaced<sp/>by<sp/>a<sp/>copy<sp/>of<sp/>substexprs[i],<sp/>if<sp/>that<sp/>latter<sp/>is<sp/>not<sp/>NULL</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/>*<sp/>if<sp/>substexprs[i]<sp/>==<sp/>NULL,<sp/>then<sp/>the<sp/>variable<sp/>expression<sp/>i<sp/>is<sp/>not<sp/>touched</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a709213a9aa36499fd93e8468affb7ea7" kindref="member">SCIPexprtreeSubstituteVars</ref>(</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a03f8f1fae1c932ff918396171929c352" kindref="member">SCIP_EXPR</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>substexprs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>of<sp/>substitute<sp/>expressions;<sp/>single<sp/>entries<sp/>can<sp/>be<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="885"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="887"><highlight class="comment">/**@name<sp/>Quadratic<sp/>element<sp/>methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="888"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="890"><highlight class="comment">/**<sp/>sorts<sp/>an<sp/>array<sp/>of<sp/>quadratic<sp/>elements</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/>*<sp/>The<sp/>elements<sp/>are<sp/>sorted<sp/>such<sp/>that<sp/>the<sp/>first<sp/>index<sp/>is<sp/>increasing<sp/>and</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/>*<sp/>such<sp/>that<sp/>among<sp/>elements<sp/>with<sp/>the<sp/>same<sp/>first<sp/>index,<sp/>the<sp/>second<sp/>index<sp/>is<sp/>increasing.</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/>*<sp/>For<sp/>elements<sp/>with<sp/>same<sp/>first<sp/>and<sp/>second<sp/>index,<sp/>the<sp/>order<sp/>is<sp/>not<sp/>defined.</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ad040344df322da549bb1083629632a44" kindref="member">SCIPquadelemSort</ref>(</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quadelems,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>of<sp/>quadratic<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nquadelems<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>quadratic<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="901"><highlight class="comment">/**<sp/>Finds<sp/>an<sp/>index<sp/>pair<sp/>in<sp/>a<sp/>sorted<sp/>array<sp/>of<sp/>quadratic<sp/>elements.</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/>*<sp/>If<sp/>(idx1,idx2)<sp/>is<sp/>found<sp/>in<sp/>quadelems,<sp/>then<sp/>returns<sp/>TRUE<sp/>and<sp/>stores<sp/>position<sp/>of<sp/>quadratic<sp/>element<sp/>in<sp/>*pos.</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/>*<sp/>If<sp/>(idx1,idx2)<sp/>is<sp/>not<sp/>found<sp/>in<sp/>quadelems,<sp/>then<sp/>returns<sp/>FALSE<sp/>and<sp/>stores<sp/>position<sp/>where<sp/>a<sp/>quadratic<sp/>element<sp/>with<sp/>these<sp/>indices<sp/>would<sp/>be<sp/>inserted<sp/>in<sp/>*pos.</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/>*<sp/>Assumes<sp/>that<sp/>idx1<sp/>&lt;=<sp/>idx2.</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1a3fdd0ef020607681df3407d9514b8ec7" kindref="member">SCIPquadelemSortedFind</ref>(</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quadelems,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>of<sp/>quadratic<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>index<sp/>of<sp/>first<sp/><sp/>variable<sp/>in<sp/>element<sp/>to<sp/>search<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>index<sp/>of<sp/>second<sp/>variable<sp/>in<sp/>element<sp/>to<sp/>search<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nquadelems,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>quadratic<sp/>elements<sp/>in<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>position<sp/>of<sp/>found<sp/>quadratic<sp/>element,<sp/>or<sp/>position<sp/>where<sp/>it<sp/>would<sp/>be<sp/>inserted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="915"><highlight class="comment">/**<sp/>Adds<sp/>quadratic<sp/>elements<sp/>with<sp/>same<sp/>index<sp/>and<sp/>removes<sp/>elements<sp/>with<sp/>coefficient<sp/>0.0.</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/>*<sp/>Assumes<sp/>that<sp/>elements<sp/>have<sp/>been<sp/>sorted<sp/>before.</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1aacce929a223789177fbbe238b57dbcb0" kindref="member">SCIPquadelemSqueeze</ref>(</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quadelems,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>of<sp/>quadratic<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nquadelems,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>quadratic<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nquadelemsnew<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>store<sp/>new<sp/>(reduced)<sp/>number<sp/>of<sp/>quadratic<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="925"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="927"><highlight class="comment">/**@name<sp/>Expression<sp/>graph<sp/>node<sp/>methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="928"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="930"><highlight class="comment">/**<sp/>captures<sp/>node,<sp/>i.e.,<sp/>increases<sp/>number<sp/>of<sp/>uses<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ac87cfef981129331e2bb14afdb739c96" kindref="member">SCIPexprgraphCaptureNode</ref>(</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>to<sp/>capture<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="936"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>a<sp/>node<sp/>is<sp/>currently<sp/>enabled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1a0aec74fa4923365c8bb0256a98239e0a" kindref="member">SCIPexprgraphIsNodeEnabled</ref>(</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>to<sp/>enable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="942"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>children<sp/>of<sp/>a<sp/>node<sp/>in<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a7ce12d49650b234f1b7bf66490e35453" kindref="member">SCIPexprgraphGetNodeNChildren</ref>(</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="948"><highlight class="comment">/**<sp/>gets<sp/>children<sp/>of<sp/>a<sp/>node<sp/>in<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><ref refid="pub__expr_8h_1af9ef014d339c72a7a4f083b6cffec6ae" kindref="member">SCIPexprgraphGetNodeChildren</ref>(</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="954"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>parents<sp/>of<sp/>a<sp/>node<sp/>in<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a0837e0e43329327e2450a2ea8c2088f7" kindref="member">SCIPexprgraphGetNodeNParents</ref>(</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="960"><highlight class="comment">/**<sp/>gets<sp/>parents<sp/>of<sp/>a<sp/>node<sp/>in<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><ref refid="pub__expr_8h_1aea8473f9c67234799cedae4e4d552698" kindref="member">SCIPexprgraphGetNodeParents</ref>(</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="966"><highlight class="comment">/**<sp/>gets<sp/>depth<sp/>of<sp/>node<sp/>in<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1acedb3fac53f97e40512e9140ad15f50d" kindref="member">SCIPexprgraphGetNodeDepth</ref>(</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="972"><highlight class="comment">/**<sp/>gets<sp/>position<sp/>of<sp/>node<sp/>in<sp/>expression<sp/>graph<sp/>at<sp/>its<sp/>depth<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1aaac68443f4a6c0ede44f9f0bbb30312e" kindref="member">SCIPexprgraphGetNodePosition</ref>(</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="978"><highlight class="comment">/**<sp/>gets<sp/>operator<sp/>of<sp/>a<sp/>node<sp/>in<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref><sp/><ref refid="pub__expr_8h_1aa69421fb15af9b77768aac718cff45a1" kindref="member">SCIPexprgraphGetNodeOperator</ref>(</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="984"><highlight class="comment">/**<sp/>gives<sp/>index<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_VARIDX<sp/>or<sp/>SCIP_EXPR_PARAM<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a5d0b4757a0e17e8d9b61e2df63cfce08" kindref="member">SCIPexprgraphGetNodeOperatorIndex</ref>(</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="990"><highlight class="comment">/**<sp/>gives<sp/>real<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_CONST<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1a5d899dbc59ab9851be937f89b860832b" kindref="member">SCIPexprgraphGetNodeOperatorReal</ref>(</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="996"><highlight class="comment">/**<sp/>gives<sp/>variable<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_VARIDX<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="pub__expr_8h_1aaefc8948770ccadbba6bf9f96eee2bb2" kindref="member">SCIPexprgraphGetNodeVar</ref>(</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1003"><highlight class="comment">/**<sp/>gives<sp/>exponent<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_REALPOWER<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1abc5a50c992cb3516aa63081b3c5a8244" kindref="member">SCIPexprgraphGetNodeRealPowerExponent</ref>(</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1009"><highlight class="comment">/**<sp/>gives<sp/>exponent<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_INTPOWER<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1aa1b5fdcdfd5450eb3411f11e76369cd4" kindref="member">SCIPexprgraphGetNodeIntPowerExponent</ref>(</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1015"><highlight class="comment">/**<sp/>gives<sp/>exponent<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_SIGNPOWER<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1a760f19a1d43beb0346df994ba6ee1ad4" kindref="member">SCIPexprgraphGetNodeSignPowerExponent</ref>(</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1021"><highlight class="comment">/**<sp/>gives<sp/>linear<sp/>coefficients<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_LINEAR<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__expr_8h_1a64b75f9934bb52010ff6a665a7610c7e" kindref="member">SCIPexprgraphGetNodeLinearCoefs</ref>(</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1027"><highlight class="comment">/**<sp/>gives<sp/>constant<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_LINEAR<sp/>expression<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1a840e3f415de1932e816db6aaad85b231" kindref="member">SCIPexprgraphGetNodeLinearConstant</ref>(</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1033"><highlight class="comment">/**<sp/>gives<sp/>constant<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_QUADRATIC<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1a694d59f907b41de180ff7b11ea9fbf1b" kindref="member">SCIPexprgraphGetNodeQuadraticConstant</ref>(</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1039"><highlight class="comment">/**<sp/>gives<sp/>linear<sp/>coefficients<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_QUADRATIC<sp/>expression,<sp/>or<sp/>NULL<sp/>if<sp/>all<sp/>coefficients<sp/>are<sp/>0.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><ref refid="pub__expr_8h_1a96ddbb42d1679d0bb432a0d4a8e172b9" kindref="member">SCIPexprgraphGetNodeQuadraticLinearCoefs</ref>(</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1045"><highlight class="comment">/**<sp/>gives<sp/>quadratic<sp/>elements<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_QUADRATIC<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref>*<sp/><ref refid="pub__expr_8h_1a85efccb1034902d4870c0643d29d356e" kindref="member">SCIPexprgraphGetNodeQuadraticQuadElements</ref>(</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1051"><highlight class="comment">/**<sp/>gives<sp/>number<sp/>of<sp/>quadratic<sp/>elements<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_QUADRATIC<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ad3425f53a6bbe4f889530d7947a847a2" kindref="member">SCIPexprgraphGetNodeQuadraticNQuadElements</ref>(</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1057"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>monomials<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_POLYNOMIAL<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>**<sp/><ref refid="pub__expr_8h_1af9fdafb12044ffa7c46880eac21c123e" kindref="member">SCIPexprgraphGetNodePolynomialMonomials</ref>(</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1063"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>number<sp/>of<sp/>monomials<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_POLYNOMIAL<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a8f0ba323284583ce43d351db9947b704" kindref="member">SCIPexprgraphGetNodePolynomialNMonomials</ref>(</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1069"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>constant<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_POLYNOMIAL<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1a43963a016d72a1f73ba6e0fa3d0df9d8" kindref="member">SCIPexprgraphGetNodePolynomialConstant</ref>(</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1075"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>curvature<sp/>of<sp/>a<sp/>single<sp/>monomial<sp/>belonging<sp/>to<sp/>a<sp/>SCIP_EXPR_POLYNOMIAL<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1aa371a0b19c1fe6c8a0378f33a835916b" kindref="member">SCIPexprgraphGetNodePolynomialMonomialCurvature</ref>(</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>monomialidx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>index<sp/>of<sp/>monomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>monomial<sp/>curvature<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1083"><highlight class="comment">/**<sp/>gets<sp/>bounds<sp/>of<sp/>a<sp/>node<sp/>in<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal">SCIP_INTERVAL<sp/><ref refid="pub__expr_8h_1ac5f6b7877a4f5db287979e4d56d68168" kindref="member">SCIPexprgraphGetNodeBounds</ref>(</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1089"><highlight class="comment">/**<sp/>gets<sp/>value<sp/>of<sp/>expression<sp/>associated<sp/>to<sp/>node<sp/>from<sp/>last<sp/>evaluation<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><ref refid="pub__expr_8h_1af47ccccd8d046cc2bba9d89a5f871dba" kindref="member">SCIPexprgraphGetNodeVal</ref>(</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1095"><highlight class="comment">/**<sp/>gets<sp/>curvature<sp/>of<sp/>expression<sp/>associated<sp/>to<sp/>node<sp/>from<sp/>last<sp/>curvature<sp/>check<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><ref refid="type__expr_8h_1a8b75f2d81278489853cf94478dedbd44" kindref="member">SCIP_EXPRCURV</ref><sp/><ref refid="pub__expr_8h_1af9358bf03749cc7939a9d2dff16cdf74" kindref="member">SCIPexprgraphGetNodeCurvature</ref>(</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>optimized<sp/>mode,<sp/>the<sp/>function<sp/>calls<sp/>are<sp/>overwritten<sp/>by<sp/>defines<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>function<sp/>calls<sp/>and</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"><sp/>*<sp/>speed<sp/>up<sp/>the<sp/>algorithms.</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphCaptureNode(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>++(node)-&gt;nuses;<sp/>}<sp/>while(<sp/>FALSE<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphIsNodeEnabled(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeNChildren(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;nchildren</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeChildren(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeNParents(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;nparents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeParents(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;parents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeDepth(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodePosition(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeOperator(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;op</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeOperatorIndex(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;data.intval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeOperatorReal(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;data.dbl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeVar(exprgraph,<sp/>node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(exprgraph)-&gt;vars[(node)-&gt;data.intval]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeRealPowerExponent(node)<sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;data.dbl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeIntPowerExponent(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;data.intval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeSignPowerExponent(node)<sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;data.dbl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeLinearCoefs(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_Real*)(node)-&gt;data.data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeLinearConstant(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((SCIP_Real*)(node)-&gt;data.data)[(node)-&gt;nchildren])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeQuadraticConstant(node)<sp/><sp/><sp/><sp/><sp/><sp/>((SCIP_EXPRDATA_QUADRATIC*)(node)-&gt;data.data)-&gt;constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeQuadraticLinearCoefs(node)<sp/><sp/><sp/>((SCIP_EXPRDATA_QUADRATIC*)(node)-&gt;data.data)-&gt;lincoefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeQuadraticQuadElements(node)<sp/><sp/>((SCIP_EXPRDATA_QUADRATIC*)(node)-&gt;data.data)-&gt;quadelems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeQuadraticNQuadElements(node)<sp/>((SCIP_EXPRDATA_QUADRATIC*)(node)-&gt;data.data)-&gt;nquadelems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodePolynomialMonomials(node)<sp/><sp/><sp/><sp/>((SCIP_EXPRDATA_POLYNOMIAL*)(node)-&gt;data.data)-&gt;monomials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodePolynomialNMonomials(node)<sp/><sp/><sp/>((SCIP_EXPRDATA_POLYNOMIAL*)(node)-&gt;data.data)-&gt;nmonomials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodePolynomialConstant(node)<sp/><sp/><sp/><sp/><sp/>((SCIP_EXPRDATA_POLYNOMIAL*)(node)-&gt;data.data)-&gt;constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeBounds(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeVal(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodeCurvature(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node)-&gt;curv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1137"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1aec3e3104b8cfa7e99101db6efee24d0f" kindref="member">SCIPexprgraphCreateNode</ref>(</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a30d37294b55f3180495c3a5efdce32c1" kindref="member">SCIP_EXPROP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>operator<sp/>type<sp/>of<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1146"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>expression<sp/>graph<sp/>node<sp/>for<sp/>a<sp/>linear<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a96c704943a2731d4a8fc86d9fbaffc2e" kindref="member">SCIPexprgraphCreateNodeLinear</ref>(</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncoefs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>coefficients<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>coefficients<sp/>of<sp/>linear<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>of<sp/>linear<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1156"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>expression<sp/>graph<sp/>node<sp/>for<sp/>a<sp/>quadratic<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a6d4669683634966c8f6f5c8a05a480ab" kindref="member">SCIPexprgraphCreateNodeQuadratic</ref>(</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nchildren,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lincoefs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>linear<sp/>coefficients<sp/>for<sp/>children,<sp/>or<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nquadelems,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>quadratic<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1abaf258f420336359952d83563ed641f8" kindref="member">SCIP_QUADELEM</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quadelems,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>quadratic<sp/>elements,<sp/>or<sp/>NULL<sp/>if<sp/>nquadelems<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1168"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>expression<sp/>graph<sp/>node<sp/>for<sp/>a<sp/>polynomial<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a3551e6692be946aaa8c0f3d672b549df" kindref="member">SCIPexprgraphCreateNodePolynomial</ref>(</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmonomials,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>monomials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>**<sp/>monomials,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>of<sp/>polynomial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copymonomials<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>whether<sp/>to<sp/>copy<sp/>monomials<sp/>or<sp/>to<sp/>assume<sp/>ownership<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1179"><highlight class="comment">/**<sp/>adds<sp/>monomials<sp/>to<sp/>an<sp/>expression<sp/>graph<sp/>node<sp/>that<sp/>is<sp/>a<sp/>polynomial<sp/>expression<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a58a89fda9a30be8590364b2a2ce3e468" kindref="member">SCIPexprgraphNodePolynomialAddMonomials</ref>(</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>store<sp/>expression<sp/>graph<sp/>node<sp/>with<sp/>polynomial<sp/>operator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nmonomials,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>monomials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a83c46530b886f67d22c6f991f07b3aaa" kindref="member">SCIP_EXPRDATA_MONOMIAL</ref>**<sp/>monomials,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>monomials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copymonomials<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>whether<sp/>to<sp/>copy<sp/>monomials<sp/>or<sp/>to<sp/>assume<sp/>ownership<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1189"><highlight class="comment">/**<sp/>given<sp/>a<sp/>node<sp/>of<sp/>an<sp/>expression<sp/>graph,<sp/>splitup<sp/>a<sp/>linear<sp/>part<sp/>which<sp/>variables<sp/>are<sp/>not<sp/>used<sp/>somewhere<sp/>else<sp/>in<sp/>the<sp/>same<sp/>expression</highlight></codeline>
<codeline lineno="1190"><highlight class="comment"><sp/>*<sp/>E.g.,<sp/>if<sp/>the<sp/>expression<sp/>is<sp/>1<sp/>+<sp/>x<sp/>+<sp/>y<sp/>+<sp/>y^2,<sp/>one<sp/>gets<sp/>1<sp/>+<sp/>x<sp/>and<sp/>the<sp/>node<sp/>remains<sp/>at<sp/>y<sp/>+<sp/>y^2.</highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>node<sp/>is<sp/>a<sp/>linear<sp/>expression,<sp/>it<sp/>may<sp/>be<sp/>freed.</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/>*<sp/>If<sp/>it<sp/>is<sp/>not<sp/>linear,<sp/>the<sp/>node<sp/>may<sp/>change,<sp/>i.e.,<sp/>the<sp/>remaining<sp/>nonlinear<sp/>part<sp/>may<sp/>be<sp/>stored<sp/>in<sp/>a<sp/>new<sp/>node.</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>assumed<sp/>that<sp/>the<sp/>user<sp/>had<sp/>captured<sp/>the<sp/>node.</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>assumed<sp/>that<sp/>the<sp/>expression<sp/>graph<sp/>has<sp/>been<sp/>simplified<sp/>before.</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a09b4ddffcced854c5850ea0d4c7f169c" kindref="member">SCIPexprgraphNodeSplitOffLinear</ref>(</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>where<sp/>to<sp/>splitup<sp/>linear<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linvarssize,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>length<sp/>of<sp/>linvars<sp/>and<sp/>lincoefs<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nlinvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>length<sp/>of<sp/>linear<sp/>term<sp/>that<sp/>have<sp/>been<sp/>splitup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>variables<sp/>of<sp/>linear<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lincoefs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>coefficients<sp/>of<sp/>linear<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>constant<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1207"><highlight class="comment">/**<sp/>moves<sp/>parents<sp/>from<sp/>a<sp/>one<sp/>node<sp/>to<sp/>another<sp/>node</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/>*<sp/>in<sp/>other<sp/>words,<sp/>replaces<sp/>the<sp/>child<sp/>srcnode<sp/>by<sp/>targetnode<sp/>in<sp/>all<sp/>parents<sp/>of<sp/>srcnode</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/>*<sp/>srcnode<sp/>may<sp/>be<sp/>freed,<sp/>if<sp/>not<sp/>captured</highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/>*<sp/>it<sp/>is<sp/>assumes<sp/>that<sp/>targetnode<sp/>represents<sp/>the<sp/>same<sp/>expression<sp/>as<sp/>srcnode</highlight></codeline>
<codeline lineno="1211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1ac9405a5738aa2aac865d9f5d1cf1b086" kindref="member">SCIPexprgraphMoveNodeParents</ref>(</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>srcnode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>node<sp/>which<sp/>parents<sp/>to<sp/>move<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>targetnode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>node<sp/>where<sp/>to<sp/>move<sp/>parents<sp/>to<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1219"><highlight class="comment">/**<sp/>releases<sp/>node,<sp/>i.e.,<sp/>decreases<sp/>number<sp/>of<sp/>uses</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/>*<sp/>node<sp/>is<sp/>freed<sp/>if<sp/>no<sp/>parents<sp/>and<sp/>no<sp/>other<sp/>uses</highlight></codeline>
<codeline lineno="1221"><highlight class="comment"><sp/>*<sp/>children<sp/>are<sp/>recursively<sp/>released<sp/>if<sp/>they<sp/>have<sp/>no<sp/>other<sp/>parents</highlight></codeline>
<codeline lineno="1222"><highlight class="comment"><sp/>*<sp/>nodes<sp/>that<sp/>are<sp/>removed<sp/>are<sp/>also<sp/>freed</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"><sp/>*<sp/>if<sp/>node<sp/>correspond<sp/>to<sp/>a<sp/>variable,<sp/>then<sp/>the<sp/>variable<sp/>is<sp/>removed<sp/>from<sp/>the<sp/>expression<sp/>graph</highlight></codeline>
<codeline lineno="1224"><highlight class="comment"><sp/>*<sp/>similar<sp/>for<sp/>constants</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a38e812142283f7c3a7a1ec8451e93294" kindref="member">SCIPexprgraphReleaseNode</ref>(</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>to<sp/>release<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1232"><highlight class="comment">/**<sp/>frees<sp/>a<sp/>node<sp/>of<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a2ca63239945baa4d12b1169c8a625bf1" kindref="member">SCIPexprgraphFreeNode</ref>(</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>expression<sp/>graph<sp/>node<sp/>that<sp/>should<sp/>be<sp/>freed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1239"><highlight class="comment">/**<sp/>enables<sp/>a<sp/>node<sp/>and<sp/>recursively<sp/>all<sp/>its<sp/>children<sp/>in<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ad05f56d4b31a46822eab3bd719af9e42" kindref="member">SCIPexprgraphEnableNode</ref>(</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>to<sp/>enable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1246"><highlight class="comment">/**<sp/>disables<sp/>a<sp/>node<sp/>and<sp/>recursively<sp/>all<sp/>children<sp/>which<sp/>have<sp/>no<sp/>enabled<sp/>parents<sp/>in<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a55af479acc2f1a620a54525d2e89515d" kindref="member">SCIPexprgraphDisableNode</ref>(</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>to<sp/>enable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1253"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>node<sp/>has<sp/>siblings<sp/>in<sp/>the<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1a2d7ac99b3a017df85f92981a86d16992" kindref="member">SCIPexprgraphHasNodeSibling</ref>(</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1259"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>all<sp/>children<sp/>of<sp/>an<sp/>expression<sp/>graph<sp/>node<sp/>are<sp/>variable<sp/>nodes</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/>*<sp/>gives<sp/>TRUE<sp/>for<sp/>nodes<sp/>without<sp/>children</highlight></codeline>
<codeline lineno="1261"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1a28fd34182398d95f5219895658f0e104" kindref="member">SCIPexprgraphAreAllNodeChildrenVars</ref>(</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1267"><highlight class="comment">/**<sp/>returns<sp/>whether<sp/>the<sp/>node<sp/>has<sp/>an<sp/>ancestor<sp/>which<sp/>has<sp/>a<sp/>nonlinear<sp/>expression<sp/>operand<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1a41f447cb01948a3ac4fa1376004581f6" kindref="member">SCIPexprgraphHasNodeNonlinearAncestor</ref>(</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1273"><highlight class="comment">/**<sp/>prints<sp/>an<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ac03c833b0bfbe504e29459da57413939" kindref="member">SCIPexprgraphPrintNode</ref>(</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref>*<sp/><sp/><sp/><sp/><sp/>messagehdlr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>message<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/>FILE*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>to<sp/>print<sp/>to,<sp/>or<sp/>NULL<sp/>for<sp/>stdout<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1281"><highlight class="comment">/**<sp/>tightens<sp/>the<sp/>bounds<sp/>in<sp/>a<sp/>node<sp/>of<sp/>the<sp/>graph</highlight></codeline>
<codeline lineno="1282"><highlight class="comment"><sp/>*<sp/>preparation<sp/>for<sp/>reverse<sp/>propagation</highlight></codeline>
<codeline lineno="1283"><highlight class="comment"><sp/>*<sp/>sets<sp/>bound<sp/>status<sp/>to<sp/>SCIP_EXPRBOUNDSTATUS_TIGHTENEDBYPARENTRECENT<sp/>if<sp/>tightening<sp/>is<sp/>strong<sp/>enough<sp/>and<sp/>not<sp/>cutoff</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ab81fa92d1a34e645b5358564abbdc8b8" kindref="member">SCIPexprgraphTightenNodeBounds</ref>(</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>node<sp/>in<sp/>expression<sp/>graph<sp/>with<sp/>no<sp/>parents<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodebounds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>bounds<sp/>for<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minstrength,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>minimal<sp/>required<sp/>relative<sp/>bound<sp/>strengthening<sp/>in<sp/>a<sp/>node<sp/>to<sp/>trigger<sp/>a<sp/>propagation<sp/>into<sp/>children<sp/>nodes<sp/>(set<sp/>to<sp/>negative<sp/>value<sp/>if<sp/>propagation<sp/>should<sp/>always<sp/>be<sp/>triggered)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cutoff<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>whether<sp/>a<sp/>node&apos;s<sp/>bounds<sp/>were<sp/>propagated<sp/>to<sp/>an<sp/>empty<sp/>interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1294"><highlight class="comment">/**<sp/>ensures<sp/>that<sp/>bounds<sp/>and<sp/>curvature<sp/>information<sp/>in<sp/>a<sp/>node<sp/>is<sp/>uptodate</highlight></codeline>
<codeline lineno="1295"><highlight class="comment"><sp/>*<sp/>assumes<sp/>that<sp/>bounds<sp/>and<sp/>curvature<sp/>in<sp/>children<sp/>are<sp/>uptodate</highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1aacdcb8a59457b8239aef2b0e6cf6ccf8" kindref="member">SCIPexprgraphUpdateNodeBoundsCurvature</ref>(</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>for<sp/>infinity<sp/>in<sp/>interval<sp/>arithmetics<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minstrength,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>minimal<sp/>required<sp/>relative<sp/>bound<sp/>strengthening<sp/>to<sp/>trigger<sp/>a<sp/>bound<sp/>recalculation<sp/>in<sp/>parent<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clearreverseprop<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>whether<sp/>to<sp/>reset<sp/>bound<sp/>tightenings<sp/>from<sp/>reverse<sp/>propagation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1305"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1307"><highlight class="comment">/**@name<sp/>Expression<sp/>graph<sp/>methods<sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1308"><highlight class="comment">/**@{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1310"><highlight class="comment">/**<sp/>get<sp/>current<sp/>maximal<sp/>depth<sp/>of<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a1dee03ef0432664090ce3f1c69864df5" kindref="member">SCIPexprgraphGetDepth</ref>(</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1316"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>with<sp/>number<sp/>of<sp/>nodes<sp/>at<sp/>each<sp/>depth<sp/>of<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="pub__expr_8h_1ae4780d9983b7d1fa172df57dba395620" kindref="member">SCIPexprgraphGetNNodes</ref>(</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1322"><highlight class="comment">/**<sp/>gets<sp/>nodes<sp/>of<sp/>expression<sp/>graph,<sp/>one<sp/>array<sp/>per<sp/>depth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>***<sp/><ref refid="pub__expr_8h_1a0faf25f3df4b9dccce03a1c9d1795783" kindref="member">SCIPexprgraphGetNodes</ref>(</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1328"><highlight class="comment">/**<sp/>gets<sp/>number<sp/>of<sp/>variables<sp/>in<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a88c08e204d38ecc02b9f2e3050429923" kindref="member">SCIPexprgraphGetNVars</ref>(</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>expression<sp/>graph<sp/>that<sp/>should<sp/>be<sp/>freed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1334"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>of<sp/>variables<sp/>in<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="pub__expr_8h_1ab0d076ee78d94e1f72b5c77acf3feb44" kindref="member">SCIPexprgraphGetVars</ref>(</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>expression<sp/>graph<sp/>that<sp/>should<sp/>be<sp/>freed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1340"><highlight class="comment">/**<sp/>gets<sp/>array<sp/>of<sp/>expression<sp/>graph<sp/>nodes<sp/>corresponding<sp/>to<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><ref refid="pub__expr_8h_1af9d779dda95fa37c5c4fd1d500b59ab4" kindref="member">SCIPexprgraphGetVarNodes</ref>(</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>expression<sp/>graph<sp/>that<sp/>should<sp/>be<sp/>freed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1346"><highlight class="comment">/**<sp/>sets<sp/>value<sp/>for<sp/>a<sp/>single<sp/>variable<sp/>given<sp/>as<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1ac5b19677243ca926599d8dc6f78ec55a" kindref="member">SCIPexprgraphSetVarNodeValue</ref>(</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>varnode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>corresponding<sp/>to<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>value<sp/>for<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1353"><highlight class="comment">/**<sp/>sets<sp/>bounds<sp/>for<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a4e8997475323bd4315c2b76d23daf116" kindref="member">SCIPexprgraphSetVarsBounds</ref>(</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varbounds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>bounds<sp/>for<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1360"><highlight class="comment">/**<sp/>sets<sp/>bounds<sp/>for<sp/>a<sp/>single<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a2d283c501de935356b3976b6f93361ef" kindref="member">SCIPexprgraphSetVarBounds</ref>(</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varbounds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>bounds<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1368"><highlight class="comment">/**<sp/>sets<sp/>bounds<sp/>for<sp/>a<sp/>single<sp/>variable<sp/>given<sp/>as<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a539e43cd657a0d1d0a4c70af43677bdd" kindref="member">SCIPexprgraphSetVarNodeBounds</ref>(</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>varnode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>corresponding<sp/>to<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/>SCIP_INTERVAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varbounds<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>bounds<sp/>of<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1376"><highlight class="comment">/**<sp/>sets<sp/>lower<sp/>bound<sp/>for<sp/>a<sp/>single<sp/>variable<sp/>given<sp/>as<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a19add920fb534a281398c0bcfb8ea668" kindref="member">SCIPexprgraphSetVarNodeLb</ref>(</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>varnode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>corresponding<sp/>to<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>lower<sp/>bound<sp/>for<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1384"><highlight class="comment">/**<sp/>sets<sp/>upper<sp/>bound<sp/>for<sp/>a<sp/>single<sp/>variable<sp/>given<sp/>as<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a966ad7d37dc8fb19c912441a0e1a0ac8" kindref="member">SCIPexprgraphSetVarNodeUb</ref>(</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>varnode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>corresponding<sp/>to<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ub<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>new<sp/>upper<sp/>bound<sp/>for<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1392"><highlight class="comment">/**<sp/>gets<sp/>bounds<sp/>that<sp/>are<sp/>stored<sp/>for<sp/>all<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal">SCIP_INTERVAL*<sp/><ref refid="pub__expr_8h_1a81c8a32b9d3369d13b9691a34a4c6cb7" kindref="member">SCIPexprgraphGetVarsBounds</ref>(</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>optimized<sp/>mode,<sp/>the<sp/>function<sp/>calls<sp/>are<sp/>overwritten<sp/>by<sp/>defines<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>function<sp/>calls<sp/>and</highlight></codeline>
<codeline lineno="1401"><highlight class="comment"><sp/>*<sp/>speed<sp/>up<sp/>the<sp/>algorithms.</highlight></codeline>
<codeline lineno="1402"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetDepth(exprgraph)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(exprgraph)-&gt;depth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNNodes(exprgraph)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(exprgraph)-&gt;nnodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNodes(exprgraph)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(exprgraph)-&gt;nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetNVars(exprgraph)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(exprgraph)-&gt;nvars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetVars(exprgraph)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(exprgraph)-&gt;vars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetVarNodes(exprgraph)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(exprgraph)-&gt;varnodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphSetVarNodeValue(varnode,<sp/>newvalue)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>(varnode)-&gt;value<sp/>=<sp/>newvalue;<sp/>}<sp/>while<sp/>(FALSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphSetVarsBounds(exprgraph,<sp/>newvarbounds)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BMScopyMemoryArray((exprgraph)-&gt;varbounds,<sp/>newvarbounds,<sp/>(exprgraph)-&gt;nvars)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphSetVarBounds(exprgraph,<sp/>var,<sp/>newvarbounds)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>(exprgraph)-&gt;varbounds[(int)(size_t)SCIPhashmapGetImage((exprgraph)-&gt;varidxs,<sp/>var)]<sp/>=<sp/>newvarbounds;<sp/>}<sp/>while<sp/>(FALSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphSetVarNodeBounds(exprgraph,<sp/>varnode,<sp/>newvarbounds)<sp/>do<sp/>{<sp/>(exprgraph)-&gt;varbounds[(varnode)-&gt;data.intval]<sp/>=<sp/>newvarbounds;<sp/>}<sp/>while<sp/>(FALSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphSetVarNodeLb(exprgraph,<sp/>varnode,<sp/>lb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>(exprgraph)-&gt;varbounds[(varnode)-&gt;data.intval].inf<sp/>=<sp/>lb;<sp/>}<sp/>while<sp/>(FALSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphSetVarNodeUb(exprgraph,<sp/>varnode,<sp/>ub)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>(exprgraph)-&gt;varbounds[(varnode)-&gt;data.intval].sup<sp/>=<sp/>ub;<sp/>}<sp/>while<sp/>(FALSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCIPexprgraphGetVarsBounds(exprgraph)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(exprgraph)-&gt;varbounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1420"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>empty<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1ab19d4e70244671d663708cdd93edf6b2" kindref="member">SCIPexprgraphCreate</ref>(</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/>BMS_BLKMEM*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkmem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>block<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>**<sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>pointer<sp/>to<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varssizeinit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>minimal<sp/>initial<sp/>size<sp/>for<sp/>variables<sp/>array,<sp/>or<sp/>-1<sp/>to<sp/>choose<sp/>automatically<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depthinit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>minimal<sp/>initial<sp/>depth<sp/>of<sp/>expression<sp/>graph,<sp/>or<sp/>-1<sp/>to<sp/>choose<sp/>automatically<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aea91b21a170e9a98455730394224141f" kindref="member">SCIP_DECL_EXPRGRAPHVARADDED</ref>((*exprgraphvaradded)),<sp/></highlight><highlight class="comment">/**<sp/>callback<sp/>method<sp/>to<sp/>invoke<sp/>when<sp/>a<sp/>variable<sp/>has<sp/>been<sp/>added<sp/>to<sp/>the<sp/>expression<sp/>graph,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a3c698d26fa6116677701e6e8d1ef5c44" kindref="member">SCIP_DECL_EXPRGRAPHVARREMOVE</ref>((*exprgraphvarremove)),<sp/></highlight><highlight class="comment">/**<sp/>callback<sp/>method<sp/>to<sp/>invoke<sp/>when<sp/>a<sp/>variable<sp/>will<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>expression<sp/>graph,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aca8f77ed737c251478213db3dfcc8f98" kindref="member">SCIP_DECL_EXPRGRAPHVARCHGIDX</ref>((*exprgraphvarchgidx)),<sp/></highlight><highlight class="comment">/**<sp/>callback<sp/>method<sp/>to<sp/>invoke<sp/>when<sp/>a<sp/>variable<sp/>changes<sp/>its<sp/>index<sp/>in<sp/>the<sp/>expression<sp/>graph,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>userdata<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>user<sp/>data<sp/>to<sp/>pass<sp/>to<sp/>callback<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1433"><highlight class="comment">/**<sp/>frees<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1ad1b14bc2d7a2d7220c9d49685c341210" kindref="member">SCIPexprgraphFree</ref>(</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>**<sp/><sp/><sp/><sp/><sp/><sp/>exprgraph<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>pointer<sp/>to<sp/>expression<sp/>graph<sp/>that<sp/>should<sp/>be<sp/>freed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1439"><highlight class="comment">/**<sp/>adds<sp/>an<sp/>expression<sp/>graph<sp/>node<sp/>to<sp/>an<sp/>expression<sp/>graph</highlight></codeline>
<codeline lineno="1440"><highlight class="comment"><sp/>*<sp/>expression<sp/>graph<sp/>assumes<sp/>ownership<sp/>of<sp/>node</highlight></codeline>
<codeline lineno="1441"><highlight class="comment"><sp/>*<sp/>children<sp/>are<sp/>notified<sp/>about<sp/>new<sp/>parent</highlight></codeline>
<codeline lineno="1442"><highlight class="comment"><sp/>*<sp/>depth<sp/>will<sp/>be<sp/>chosen<sp/>to<sp/>be<sp/>the<sp/>maximum<sp/>of<sp/>mindepth<sp/>and<sp/>the<sp/>depth<sp/>of<sp/>all<sp/>children<sp/>plus<sp/>one</highlight></codeline>
<codeline lineno="1443"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a0439768d98f1858c395c920e507fa4cc" kindref="member">SCIPexprgraphAddNode</ref>(</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mindepth,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>minimal<sp/>depth<sp/>in<sp/>expression<sp/>graph<sp/>where<sp/>to<sp/>add<sp/>node,<sp/>e.g.,<sp/>0<sp/>or<sp/>smaller<sp/>to<sp/>choose<sp/>automatically<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nchildren,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>children<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>children<sp/>nodes,<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>children<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1453"><highlight class="comment">/**<sp/>adds<sp/>variables<sp/>to<sp/>an<sp/>expression<sp/>graph,<sp/>if<sp/>not<sp/>existing<sp/>yet</highlight></codeline>
<codeline lineno="1454"><highlight class="comment"><sp/>*<sp/>also<sp/>already<sp/>existing<sp/>nodes<sp/>are<sp/>enabled</highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1ad2704955b653f90780634347bea9b853" kindref="member">SCIPexprgraphAddVars</ref>(</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nvars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>variables<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>variables<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>varnodes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>to<sp/>store<sp/>nodes<sp/>corresponding<sp/>to<sp/>variables,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>of<sp/>interest<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1464"><highlight class="comment">/**<sp/>adds<sp/>a<sp/>constant<sp/>to<sp/>an<sp/>expression<sp/>graph,<sp/>if<sp/>not<sp/>existing<sp/>yet</highlight></codeline>
<codeline lineno="1465"><highlight class="comment"><sp/>*<sp/>also<sp/>already<sp/>existing<sp/>nodes<sp/>are<sp/>enabled</highlight></codeline>
<codeline lineno="1466"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a854a50b3f1cb037323fd43ee2b7edbeb" kindref="member">SCIPexprgraphAddConst</ref>(</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>constnode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>pointer<sp/>to<sp/>expression<sp/>graph<sp/>node<sp/>corresponding<sp/>to<sp/>constant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1473"><highlight class="comment">/**<sp/>adds<sp/>sum<sp/>of<sp/>expression<sp/>trees<sp/>into<sp/>expression<sp/>graph</highlight></codeline>
<codeline lineno="1474"><highlight class="comment"><sp/>*<sp/>node<sp/>will<sp/>also<sp/>be<sp/>captured</highlight></codeline>
<codeline lineno="1475"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a71be9f67fcd92197a2fe55ae1c6b2812" kindref="member">SCIPexprgraphAddExprtreeSum</ref>(</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nexprtrees,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>expression<sp/>trees<sp/>to<sp/>add<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprtrees,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>trees<sp/>that<sp/>should<sp/>be<sp/>added<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>coefficients<sp/>of<sp/>expression<sp/>trees,<sp/>or<sp/>NULL<sp/>if<sp/>all<sp/>1.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>rootnode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>expression<sp/>graph<sp/>node<sp/>corresponding<sp/>to<sp/>root<sp/>of<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rootnodeisnew<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>node<sp/>in<sp/>*rootnode<sp/>has<sp/>been<sp/>newly<sp/>created<sp/>for<sp/>this<sp/>expression<sp/>tree<sp/>(otherwise,<sp/>expression<sp/>tree<sp/>was<sp/>already<sp/>in<sp/>graph)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1486"><highlight class="comment">/**<sp/>replaces<sp/>variable<sp/>in<sp/>expression<sp/>graph<sp/>by<sp/>a<sp/>linear<sp/>sum<sp/>of<sp/>variables</highlight></codeline>
<codeline lineno="1487"><highlight class="comment"><sp/>*<sp/>variables<sp/>will<sp/>be<sp/>added<sp/>if<sp/>not<sp/>in<sp/>the<sp/>graph<sp/>yet</highlight></codeline>
<codeline lineno="1488"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a8f7084f4ba8d3204fa4cec04859e473d" kindref="member">SCIPexprgraphReplaceVarByLinearSum</ref>(</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>variable<sp/>to<sp/>replace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncoefs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>number<sp/>of<sp/>coefficients<sp/>in<sp/>linear<sp/>term<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>coefficients<sp/>in<sp/>linear<sp/>term,<sp/>or<sp/>NULL<sp/>if<sp/>ncoefs<sp/>==<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vars,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>variables<sp/>in<sp/>linear<sp/>term<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1499"><highlight class="comment">/**<sp/>finds<sp/>expression<sp/>graph<sp/>node<sp/>corresponding<sp/>to<sp/>a<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1a2f8b0129f4cd294e42b7baac3f169fe8" kindref="member">SCIPexprgraphFindVarNode</ref>(</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>variable<sp/>to<sp/>search<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>varnode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>node<sp/>corresponding<sp/>to<sp/>variable,<sp/>if<sp/>found,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1507"><highlight class="comment">/**<sp/>finds<sp/>expression<sp/>graph<sp/>node<sp/>corresponding<sp/>to<sp/>a<sp/>constant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><ref refid="pub__expr_8h_1afd009700af7a8ec40e64b44ce4dd1857" kindref="member">SCIPexprgraphFindConstNode</ref>(</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>constant<sp/>to<sp/>search<sp/>for<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>**<sp/><sp/>constnode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>node<sp/>corresponding<sp/>to<sp/>constant,<sp/>if<sp/>found,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1515"><highlight class="comment">/**<sp/>prints<sp/>an<sp/>expression<sp/>graph<sp/>in<sp/>dot<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a112d01041d9eb5dac684efb44faa5cf2" kindref="member">SCIPexprgraphPrintDot</ref>(</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref>*<sp/><sp/><sp/><sp/><sp/>messagehdlr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>message<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/>FILE*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>file<sp/>to<sp/>print<sp/>to,<sp/>or<sp/>NULL<sp/>for<sp/>stdout<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varnames<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>variable<sp/>names,<sp/>or<sp/>NULL<sp/>for<sp/>generic<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1524"><highlight class="comment">/**<sp/>evaluates<sp/>nodes<sp/>of<sp/>expression<sp/>graph<sp/>for<sp/>given<sp/>values<sp/>of<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a123f2f743e37aa2ad23c33e1375cb8b9" kindref="member">SCIPexprgraphEval</ref>(</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varvals<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>values<sp/>for<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1531"><highlight class="comment">/**<sp/>propagates<sp/>bound<sp/>changes<sp/>in<sp/>variables<sp/>forward<sp/>through<sp/>the<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a37b9c31ee18c9e082049a775c278b800" kindref="member">SCIPexprgraphPropagateVarBounds</ref>(</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>for<sp/>infinity<sp/>in<sp/>interval<sp/>arithmetics<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clearreverseprop,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>whether<sp/>to<sp/>reset<sp/>bound<sp/>tightenings<sp/>from<sp/>reverse<sp/>propagation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domainerror<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>whether<sp/>a<sp/>node<sp/>with<sp/>empty<sp/>bounds<sp/>has<sp/>been<sp/>found,<sp/>propagation<sp/>is<sp/>interrupted<sp/>in<sp/>this<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1540"><highlight class="comment">/**<sp/>propagates<sp/>bound<sp/>changes<sp/>in<sp/>nodes<sp/>backward<sp/>through<sp/>the<sp/>graph</highlight></codeline>
<codeline lineno="1541"><highlight class="comment"><sp/>*<sp/>new<sp/>bounds<sp/>are<sp/>not<sp/>stored<sp/>in<sp/>varbounds,<sp/>but<sp/>only<sp/>in<sp/>nodes<sp/>corresponding<sp/>to<sp/>variables</highlight></codeline>
<codeline lineno="1542"><highlight class="comment"><sp/>*<sp/>NOTE:<sp/>it<sp/>is<sp/>assumed<sp/>that<sp/>SCIPexprgraphPropagateVarBounds<sp/>was<sp/>called<sp/>before<sp/>if<sp/>variable<sp/>bounds<sp/>were<sp/>relaxed</highlight></codeline>
<codeline lineno="1543"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a8ced65311a8205c402aa3b1826f7cccc" kindref="member">SCIPexprgraphPropagateNodeBounds</ref>(</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>for<sp/>infinity<sp/>in<sp/>interval<sp/>arithmetics<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minstrength,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>minimal<sp/>required<sp/>relative<sp/>bound<sp/>strengthening<sp/>in<sp/>a<sp/>node<sp/>to<sp/>trigger<sp/>a<sp/>propagation<sp/>into<sp/>children<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cutoff<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>whether<sp/>a<sp/>node&apos;s<sp/>bounds<sp/>were<sp/>propagated<sp/>to<sp/>an<sp/>empty<sp/>interval<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1552"><highlight class="comment">/**<sp/>updates<sp/>curvature<sp/>information<sp/>in<sp/>expression<sp/>graph<sp/>nodes<sp/>w.r.t.<sp/>currently<sp/>stored<sp/>variable<sp/>bounds</highlight></codeline>
<codeline lineno="1553"><highlight class="comment"><sp/>*<sp/>implies<sp/>update<sp/>of<sp/>bounds<sp/>in<sp/>expression<sp/>graph</highlight></codeline>
<codeline lineno="1554"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1aed8a77735bf278ca521a6dc06f8817c3" kindref="member">SCIPexprgraphCheckCurvature</ref>(</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>value<sp/>for<sp/>infinity<sp/>in<sp/>interval<sp/>arithmetics<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clearreverseprop<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>whether<sp/>to<sp/>reset<sp/>bound<sp/>tightenings<sp/>from<sp/>reverse<sp/>propagation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1562"><highlight class="comment">/**<sp/>aims<sp/>at<sp/>simplifying<sp/>an<sp/>expression<sp/>graph</highlight></codeline>
<codeline lineno="1563"><highlight class="comment"><sp/>*<sp/>a<sp/>domain<sp/>error<sp/>can<sp/>occur<sp/>when<sp/>variables<sp/>were<sp/>fixed<sp/>to<sp/>values<sp/>for<sp/>which<sp/>a<sp/>parent<sp/>expression<sp/>is<sp/>not<sp/>defined<sp/>(e.g.,<sp/>0^(-1)<sp/>or<sp/>log(-1))</highlight></codeline>
<codeline lineno="1564"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a072f60c7c43b5babed543d37dbda6146" kindref="member">SCIPexprgraphSimplify</ref>(</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__message_8h_1a7d71113339d14873806c1399442fae8d" kindref="member">SCIP_MESSAGEHDLR</ref>*<sp/><sp/><sp/><sp/><sp/>messagehdlr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>message<sp/>handler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>threshold,<sp/>under<sp/>which<sp/>positive<sp/>values<sp/>are<sp/>treat<sp/>as<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxexpansionexponent,</highlight><highlight class="comment">/**&lt;<sp/>maximal<sp/>exponent<sp/>for<sp/>which<sp/>we<sp/>still<sp/>expand<sp/>non-monomial<sp/>polynomials<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>havechange,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>graph<sp/>has<sp/>been<sp/>modified<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a5f45b90d62d88b23ba4cf7c08d3bf358" kindref="member">SCIP_Bool</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domainerror<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>indicate<sp/>whether<sp/>a<sp/>domain<sp/>error<sp/>has<sp/>been<sp/>encountered,<sp/>i.e.,<sp/>some<sp/>expressions<sp/>turned<sp/>into<sp/>NaN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1575"><highlight class="comment">/**<sp/>creates<sp/>an<sp/>expression<sp/>tree<sp/>from<sp/>a<sp/>given<sp/>node<sp/>in<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a2651a336ebb60975fd8d371375c6821e" kindref="member">SCIPexprgraphGetTree</ref>(</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>rootnode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>that<sp/>should<sp/>represent<sp/>root<sp/>of<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprtree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>pointer<sp/>to<sp/>created<sp/>expression<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1583"><highlight class="comment">/**<sp/>creates<sp/>a<sp/>sum<sp/>of<sp/>expression<sp/>trees<sp/>with<sp/>pairwise<sp/>disjoint<sp/>variables<sp/>from<sp/>a<sp/>given<sp/>node<sp/>in<sp/>an<sp/>expression<sp/>graph</highlight></codeline>
<codeline lineno="1584"><highlight class="comment"><sp/>*<sp/>Giving<sp/>SCIPexprgraphGetNodeNChildren()<sp/>for<sp/>exprtreesize<sp/>is<sp/>always<sp/>sufficient.</highlight></codeline>
<codeline lineno="1585"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1a6a06beb937c56606eb05a1422e9712f3" kindref="member">SCIPexprgraphGetSeparableTrees</ref>(</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>which<sp/>represents<sp/>expression<sp/>to<sp/>get<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprtreessize,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>length<sp/>of<sp/>exprtrees<sp/>and<sp/>exprtreecoefs<sp/>arrays,<sp/>need<sp/>to<sp/>be<sp/>at<sp/>least<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nexprtrees,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>number<sp/>of<sp/>expression<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprtrees,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>where<sp/>to<sp/>store<sp/>expression<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprtreecoefs<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>where<sp/>to<sp/>store<sp/>coefficients<sp/>of<sp/>expression<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1596"><highlight class="comment">/**<sp/>returns<sp/>how<sp/>often<sp/>expression<sp/>graph<sp/>variables<sp/>are<sp/>used<sp/>in<sp/>a<sp/>subtree<sp/>of<sp/>the<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a8ea0a44be20eb75bad3e74afe347618e" kindref="member">SCIPexprgraphGetSubtreeVarsUsage</ref>(</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>root<sp/>node<sp/>of<sp/>expression<sp/>graph<sp/>subtree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varsusage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>where<sp/>to<sp/>count<sp/>usage<sp/>of<sp/>variables,<sp/>length<sp/>must<sp/>be<sp/>at<sp/>least<sp/>the<sp/>number<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1604"><highlight class="comment">/**<sp/>gives<sp/>the<sp/>number<sp/>of<sp/>summands<sp/>which<sp/>the<sp/>expression<sp/>of<sp/>an<sp/>expression<sp/>graph<sp/>node<sp/>consists<sp/>of<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pub__expr_8h_1a00beb1b6abc8844383699fa33b66fdc6" kindref="member">SCIPexprgraphGetSumTreesNSummands</ref>(</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1610"><highlight class="comment">/**<sp/>creates<sp/>a<sp/>sum<sp/>of<sp/>expression<sp/>trees,<sp/>possibly<sp/>sharing<sp/>variables,<sp/>from<sp/>a<sp/>given<sp/>node<sp/>in<sp/>an<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><ref refid="type__retcode_8h_1ac847f5a370187651fbc1b82d0170b480" kindref="member">SCIP_RETCODE</ref><sp/><ref refid="pub__expr_8h_1ad3a9c27f25617ecab1db627e687a68b8" kindref="member">SCIPexprgraphGetSumTrees</ref>(</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a8481fdd0b99c28964cf0d180e8109b24" kindref="member">SCIP_EXPRGRAPH</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprgraph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1aaa741e59aa855d6864a43b651ce35ad9" kindref="member">SCIP_EXPRGRAPHNODE</ref>*<sp/><sp/><sp/>node,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>expression<sp/>graph<sp/>node<sp/>which<sp/>represents<sp/>expression<sp/>to<sp/>get<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprtreessize,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>length<sp/>of<sp/>exprtrees<sp/>and<sp/>exptreecoefs<sp/>arrays,<sp/>should<sp/>be<sp/>at<sp/>least<sp/>SCIPexprgraphGetSumTreesNSummands()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nexprtrees,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>buffer<sp/>to<sp/>store<sp/>number<sp/>of<sp/>expression<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><ref refid="type__expr_8h_1a4ae8525548d76cb766394131bb405cf2" kindref="member">SCIP_EXPRTREE</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprtrees,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>where<sp/>to<sp/>store<sp/>expression<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><ref refid="def_8h_1a7f0ca7bf9e709814432691d8173a21fa" kindref="member">SCIP_Real</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exprtreecoefs<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>array<sp/>where<sp/>to<sp/>store<sp/>coefficients<sp/>of<sp/>expression<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1621"><highlight class="comment">/**@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__NLPI_PUB_EXPR_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/ryan/src/scipoptsuite-3.1.1/scip-3.1.1/src/nlpi/pub_expr.h"/>
  </compounddef>
</doxygen>
